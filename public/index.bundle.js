!function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=44)}([function(t,e,n){"use strict";const r=n(8),o={number:n(17),string:n(18),object:n(19)},i=({validators:t=[],predicates:e=o,type:n=null}={})=>{const s=new Proxy((function(){}),{get:(o,a)=>{if(a===r.validate)return(e,r="argument")=>{if(!n)return new Error("missing required type specifier");for(let o=0;o<t.length;++o){const i=t[o];if(!i.fn(e))throw 0===o?new Error(`Expected ${r} \`${e}\` to be of type \`${n}\`, but received type \`${typeof e}\``):new Error(`Expected ${n} \`${r}\` \`${e}\` failed predicate \`${i.key}\``)}};const u=e[a];if(u)return"function"==typeof u?(t.push({key:a,fn:u}),s):i({type:a,validators:[{key:a,fn:u.validator}],predicates:u.predicates});{const n=e[r.func]&&e[r.func][a];return n?new Proxy((function(){}),{get:()=>{throw new Error(`invalid use of functional predicate "${a}"`)},apply:(e,r,o)=>(t.push({key:a,fn:n(...o)}),s)}):s}},apply:(t,e,n)=>{if(2!==n.length&&3!==n.length)throw new Error('invalid number of arguments to "ow"');n[1][r.validate](n[0],n[2])}});return s};t.exports=i()},function(t,e){t.exports=function(){throw new Error("define cannot be used indirect")}},function(t,e,n){"use strict";t.exports=n(16).default},,function(t,e,n){"use strict";const r=Object.prototype.toString;t.exports=function(t){return r.call(t).endsWith("Array]")}},function(t,e){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),t.webpackPolyfill=1),t}},function(t,e){(function(e){t.exports=e}).call(this,{})},,function(t,e,n){"use strict";e.func=Symbol("func"),e.validate=Symbol("validate")},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}();var o=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}return r(t,[{key:"next",value:function(){throw new Error("RNG.next must be overridden")}},{key:"seed",value:function(t,e){throw new Error("RNG.seed must be overridden")}},{key:"clone",value:function(t,e){throw new Error("RNG.clone must be overridden")}},{key:"_seed",value:function(t,e){if(t===(0|t))return t;for(var n=""+t,r=0,o=0;o<n.length;++o)r^=0|n.charCodeAt(o);return r}},{key:"name",get:function(){throw new Error("RNG.name must be overridden")}}]),t}();e.default=o},,,,,,,function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.RNGFactory=e.RNG=void 0;var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),o=b(n(0)),i=b(n(9)),s=b(n(20)),a=b(n(31)),u=b(n(32)),l=b(n(33)),c=b(n(34)),f=b(n(35)),h=b(n(36)),g=b(n(37)),d=b(n(38)),p=b(n(39)),m=b(n(40)),w=b(n(41)),v=b(n(42)),y=b(n(43));function b(t){return t&&t.__esModule?t:{default:t}}e.RNG=i.default,e.RNGFactory=s.default;var M=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),e&&(0,o.default)(e,o.default.object.instanceOf(i.default)),this._cache={},this.use(e)}return r(t,[{key:"clone",value:function(){return arguments.length?new t(s.default.apply(void 0,arguments)):new t(this.rng.clone())}},{key:"use",value:function(){this._rng=s.default.apply(void 0,arguments)}},{key:"patch",value:function(){if(this._patch)throw new Error("Math.random already patched");this._patch=Math.random,Math.random=this.uniform()}},{key:"unpatch",value:function(){this._patch&&(Math.random=this._patch,delete this._patch)}},{key:"next",value:function(){return this._rng.next()}},{key:"float",value:function(t,e){return this.uniform(t,e)()}},{key:"int",value:function(t,e){return this.uniformInt(t,e)()}},{key:"integer",value:function(t,e){return this.uniformInt(t,e)()}},{key:"bool",value:function(){return this.uniformBoolean()()}},{key:"boolean",value:function(){return this.uniformBoolean()()}},{key:"uniform",value:function(t,e){return this._memoize("uniform",a.default,t,e)}},{key:"uniformInt",value:function(t,e){return this._memoize("uniformInt",u.default,t,e)}},{key:"uniformBoolean",value:function(){return this._memoize("uniformBoolean",l.default)}},{key:"normal",value:function(t,e){return(0,c.default)(this,t,e)}},{key:"logNormal",value:function(t,e){return(0,f.default)(this,t,e)}},{key:"bernoulli",value:function(t){return(0,h.default)(this,t)}},{key:"binomial",value:function(t,e){return(0,g.default)(this,t,e)}},{key:"geometric",value:function(t){return(0,d.default)(this,t)}},{key:"poisson",value:function(t){return(0,p.default)(this,t)}},{key:"exponential",value:function(t){return(0,m.default)(this,t)}},{key:"irwinHall",value:function(t){return(0,w.default)(this,t)}},{key:"bates",value:function(t){return(0,v.default)(this,t)}},{key:"pareto",value:function(t){return(0,y.default)(this,t)}},{key:"_memoize",value:function(t,e){for(var n=arguments.length,r=Array(n>2?n-2:0),o=2;o<n;o++)r[o-2]=arguments[o];var i=""+r.join(";"),s=this._cache[t];return void 0!==s&&s.key===i||(s={key:i,distribution:e.apply(void 0,[this].concat(r))},this._cache[t]=s),s.distribution}},{key:"rng",get:function(){return this._rng}}]),t}();e.default=new M},function(t,e,n){"use strict";const{func:r}=n(8),o={positive:t=>t>0,negative:t=>t<0,nonNegative:t=>t>=0,integer:t=>t===(0|t),[r]:{is:t=>t,eq:t=>e=>e===t,gt:t=>e=>e>t,gte:t=>e=>e>=t,lt:t=>e=>e<t,lte:t=>e=>e<=t}};t.exports={predicates:o,validator:t=>"number"==typeof t}},function(t,e,n){"use strict";const{func:r}=n(8),o={empty:t=>""===t,nonEmpty:t=>""!==t,[r]:{is:t=>t,eq:t=>e=>e===t,length:t=>e=>e.length===t,minLength:t=>e=>e.length>=t,maxLength:t=>e=>e.length<=t,matches:t=>e=>t.test(e),startsWith:t=>e=>e.startsWith(t),endsWith:t=>e=>e.endsWith(t)}};t.exports={predicates:o,validator:t=>"string"==typeof t}},function(t,e,n){"use strict";const{func:r}=n(8),o={plain:t=>{if("object"!=typeof t)return!1;const e=Object.getPrototypeOf(t);return null===e||e===Object.getPrototypeOf({})},empty:t=>0===Object.keys(t).length,nonEmpty:t=>Object.keys(t).length>0,[r]:{is:t=>t,instanceOf:t=>e=>e instanceof t}};t.exports={predicates:o,validator:t=>"object"==typeof t}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},o=a(n(21)),i=a(n(9)),s=a(n(30));function a(t){return t&&t.__esModule?t:{default:t}}function u(t){if(Array.isArray(t)){for(var e=0,n=Array(t.length);e<t.length;e++)n[e]=t[e];return n}return Array.from(t)}e.default=function(){for(var t=arguments.length,e=Array(t),n=0;n<t;n++)e[n]=arguments[n];var a=e[0],l=void 0===a?"default":a,c=e.slice(1);switch(void 0===l?"undefined":r(l)){case"object":if(l instanceof i.default)return l;break;case"function":return new s.default(l);case"string":case"number":return new s.default(o.default.apply(void 0,u(c)))}throw new Error('invalid RNG "'+l+'"')}},function(t,e,n){var r=n(22),o=n(23),i=n(24),s=n(25),a=n(26),u=n(27),l=n(28);l.alea=r,l.xor128=o,l.xorwow=i,l.xorshift7=s,l.xor4096=a,l.tychei=u,t.exports=l},function(t,e,n){(function(t){var r;!function(t,o,i){function s(t){var e,n=this,r=(e=4022871197,function(t){t=String(t);for(var n=0;n<t.length;n++){var r=.02519603282416938*(e+=t.charCodeAt(n));r-=e=r>>>0,e=(r*=e)>>>0,e+=4294967296*(r-=e)}return 2.3283064365386963e-10*(e>>>0)});n.next=function(){var t=2091639*n.s0+2.3283064365386963e-10*n.c;return n.s0=n.s1,n.s1=n.s2,n.s2=t-(n.c=0|t)},n.c=1,n.s0=r(" "),n.s1=r(" "),n.s2=r(" "),n.s0-=r(t),n.s0<0&&(n.s0+=1),n.s1-=r(t),n.s1<0&&(n.s1+=1),n.s2-=r(t),n.s2<0&&(n.s2+=1),r=null}function a(t,e){return e.c=t.c,e.s0=t.s0,e.s1=t.s1,e.s2=t.s2,e}function u(t,e){var n=new s(t),r=e&&e.state,o=n.next;return o.int32=function(){return 4294967296*n.next()|0},o.double=function(){return o()+11102230246251565e-32*(2097152*o()|0)},o.quick=o,r&&("object"==typeof r&&a(r,n),o.state=function(){return a(n,{})}),o}o&&o.exports?o.exports=u:n(1)&&n(6)?void 0===(r=function(){return u}.call(e,n,e,o))||(o.exports=r):this.alea=u}(0,t,n(1))}).call(this,n(5)(t))},function(t,e,n){(function(t){var r;!function(t,o,i){function s(t){var e=this,n="";e.x=0,e.y=0,e.z=0,e.w=0,e.next=function(){var t=e.x^e.x<<11;return e.x=e.y,e.y=e.z,e.z=e.w,e.w^=e.w>>>19^t^t>>>8},t===(0|t)?e.x=t:n+=t;for(var r=0;r<n.length+64;r++)e.x^=0|n.charCodeAt(r),e.next()}function a(t,e){return e.x=t.x,e.y=t.y,e.z=t.z,e.w=t.w,e}function u(t,e){var n=new s(t),r=e&&e.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},o.int32=n.next,o.quick=o,r&&("object"==typeof r&&a(r,n),o.state=function(){return a(n,{})}),o}o&&o.exports?o.exports=u:n(1)&&n(6)?void 0===(r=function(){return u}.call(e,n,e,o))||(o.exports=r):this.xor128=u}(0,t,n(1))}).call(this,n(5)(t))},function(t,e,n){(function(t){var r;!function(t,o,i){function s(t){var e=this,n="";e.next=function(){var t=e.x^e.x>>>2;return e.x=e.y,e.y=e.z,e.z=e.w,e.w=e.v,(e.d=e.d+362437|0)+(e.v=e.v^e.v<<4^t^t<<1)|0},e.x=0,e.y=0,e.z=0,e.w=0,e.v=0,t===(0|t)?e.x=t:n+=t;for(var r=0;r<n.length+64;r++)e.x^=0|n.charCodeAt(r),r==n.length&&(e.d=e.x<<10^e.x>>>4),e.next()}function a(t,e){return e.x=t.x,e.y=t.y,e.z=t.z,e.w=t.w,e.v=t.v,e.d=t.d,e}function u(t,e){var n=new s(t),r=e&&e.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},o.int32=n.next,o.quick=o,r&&("object"==typeof r&&a(r,n),o.state=function(){return a(n,{})}),o}o&&o.exports?o.exports=u:n(1)&&n(6)?void 0===(r=function(){return u}.call(e,n,e,o))||(o.exports=r):this.xorwow=u}(0,t,n(1))}).call(this,n(5)(t))},function(t,e,n){(function(t){var r;!function(t,o,i){function s(t){var e=this;e.next=function(){var t,n,r=e.x,o=e.i;return t=r[o],n=(t^=t>>>7)^t<<24,n^=(t=r[o+1&7])^t>>>10,n^=(t=r[o+3&7])^t>>>3,n^=(t=r[o+4&7])^t<<7,t=r[o+7&7],n^=(t^=t<<13)^t<<9,r[o]=n,e.i=o+1&7,n},function(t,e){var n,r=[];if(e===(0|e))r[0]=e;else for(e=""+e,n=0;n<e.length;++n)r[7&n]=r[7&n]<<15^e.charCodeAt(n)+r[n+1&7]<<13;for(;r.length<8;)r.push(0);for(n=0;n<8&&0===r[n];++n);for(8==n?r[7]=-1:r[n],t.x=r,t.i=0,n=256;n>0;--n)t.next()}(e,t)}function a(t,e){return e.x=t.x.slice(),e.i=t.i,e}function u(t,e){null==t&&(t=+new Date);var n=new s(t),r=e&&e.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},o.int32=n.next,o.quick=o,r&&(r.x&&a(r,n),o.state=function(){return a(n,{})}),o}o&&o.exports?o.exports=u:n(1)&&n(6)?void 0===(r=function(){return u}.call(e,n,e,o))||(o.exports=r):this.xorshift7=u}(0,t,n(1))}).call(this,n(5)(t))},function(t,e,n){(function(t){var r;!function(t,o,i){function s(t){var e=this;e.next=function(){var t,n,r=e.w,o=e.X,i=e.i;return e.w=r=r+1640531527|0,n=o[i+34&127],t=o[i=i+1&127],n^=n<<13,t^=t<<17,n^=n>>>15,t^=t>>>12,n=o[i]=n^t,e.i=i,n+(r^r>>>16)|0},function(t,e){var n,r,o,i,s,a=[],u=128;for(e===(0|e)?(r=e,e=null):(e+="\0",r=0,u=Math.max(u,e.length)),o=0,i=-32;i<u;++i)e&&(r^=e.charCodeAt((i+32)%e.length)),0===i&&(s=r),r^=r<<10,r^=r>>>15,r^=r<<4,r^=r>>>13,i>=0&&(s=s+1640531527|0,o=0==(n=a[127&i]^=r+s)?o+1:0);for(o>=128&&(a[127&(e&&e.length||0)]=-1),o=127,i=512;i>0;--i)r=a[o+34&127],n=a[o=o+1&127],r^=r<<13,n^=n<<17,r^=r>>>15,n^=n>>>12,a[o]=r^n;t.w=s,t.X=a,t.i=o}(e,t)}function a(t,e){return e.i=t.i,e.w=t.w,e.X=t.X.slice(),e}function u(t,e){null==t&&(t=+new Date);var n=new s(t),r=e&&e.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},o.int32=n.next,o.quick=o,r&&(r.X&&a(r,n),o.state=function(){return a(n,{})}),o}o&&o.exports?o.exports=u:n(1)&&n(6)?void 0===(r=function(){return u}.call(e,n,e,o))||(o.exports=r):this.xor4096=u}(0,t,n(1))}).call(this,n(5)(t))},function(t,e,n){(function(t){var r;!function(t,o,i){function s(t){var e=this,n="";e.next=function(){var t=e.b,n=e.c,r=e.d,o=e.a;return t=t<<25^t>>>7^n,n=n-r|0,r=r<<24^r>>>8^o,o=o-t|0,e.b=t=t<<20^t>>>12^n,e.c=n=n-r|0,e.d=r<<16^n>>>16^o,e.a=o-t|0},e.a=0,e.b=0,e.c=-1640531527,e.d=1367130551,t===Math.floor(t)?(e.a=t/4294967296|0,e.b=0|t):n+=t;for(var r=0;r<n.length+20;r++)e.b^=0|n.charCodeAt(r),e.next()}function a(t,e){return e.a=t.a,e.b=t.b,e.c=t.c,e.d=t.d,e}function u(t,e){var n=new s(t),r=e&&e.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},o.int32=n.next,o.quick=o,r&&("object"==typeof r&&a(r,n),o.state=function(){return a(n,{})}),o}o&&o.exports?o.exports=u:n(1)&&n(6)?void 0===(r=function(){return u}.call(e,n,e,o))||(o.exports=r):this.tychei=u}(0,t,n(1))}).call(this,n(5)(t))},function(t,e,n){var r;!function(o,i,s){var a,u=s.pow(256,6),l=s.pow(2,52),c=2*l;function f(t,e,n){var r=[],f=d(function t(e,n){var r,o=[],i=typeof e;if(n&&"object"==i)for(r in e)try{o.push(t(e[r],n-1))}catch(t){}return o.length?o:"string"==i?e:e+"\0"}((e=1==e?{entropy:!0}:e||{}).entropy?[t,p(i)]:null==t?function(){try{var t;return a&&(t=a.randomBytes)?t=t(256):(t=new Uint8Array(256),(o.crypto||o.msCrypto).getRandomValues(t)),p(t)}catch(t){var e=o.navigator,n=e&&e.plugins;return[+new Date,o,n,o.screen,p(i)]}}():t,3),r),m=new h(r),w=function(){for(var t=m.g(6),e=u,n=0;t<l;)t=256*(t+n),e*=256,n=m.g(1);for(;t>=c;)t/=2,e/=2,n>>>=1;return(t+n)/e};return w.int32=function(){return 0|m.g(4)},w.quick=function(){return m.g(4)/4294967296},w.double=w,d(p(m.S),i),(e.pass||n||function(t,e,n,r){return r&&(r.S&&g(r,m),t.state=function(){return g(m,{})}),n?(s.random=t,e):t})(w,f,"global"in e?e.global:this==s,e.state)}function h(t){var e,n=t.length,r=this,o=0,i=r.i=r.j=0,s=r.S=[];for(n||(t=[n++]);o<256;)s[o]=o++;for(o=0;o<256;o++)s[o]=s[i=255&i+t[o%n]+(e=s[o])],s[i]=e;(r.g=function(t){for(var e,n=0,o=r.i,i=r.j,s=r.S;t--;)e=s[o=255&o+1],n=256*n+s[255&(s[o]=s[i=255&i+e])+(s[i]=e)];return r.i=o,r.j=i,n})(256)}function g(t,e){return e.i=t.i,e.j=t.j,e.S=t.S.slice(),e}function d(t,e){for(var n,r=t+"",o=0;o<r.length;)e[255&o]=255&(n^=19*e[255&o])+r.charCodeAt(o++);return p(e)}function p(t){return String.fromCharCode.apply(0,t)}if(d(s.random(),i),t.exports){t.exports=f;try{a=n(29)}catch(t){}}else void 0===(r=function(){return f}.call(e,n,e,t))||(t.exports=r)}("undefined"!=typeof self?self:this,[],Math)},function(t,e){},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),o=i(n(0));function i(t){return t&&t.__esModule?t:{default:t}}var s=function(t){function e(t,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);var r=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).call(this));return r.seed(t,n),r}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),r(e,[{key:"next",value:function(){return this._rng()}},{key:"seed",value:function(t){(0,o.default)(t,o.default.function),this._rng=t}},{key:"clone",value:function(){for(var t=arguments.length,n=Array(t),r=0;r<t;r++)n[r]=arguments[r];return new(Function.prototype.bind.apply(e,[null].concat([this._rng],n)))}},{key:"name",get:function(){return"function"}}]),e}(i(n(9)).default);e.default=s},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r,o=n(0),i=(r=o)&&r.__esModule?r:{default:r};e.default=function(t,e,n){return void 0===n&&(n=void 0===e?1:e,e=0),(0,i.default)(e,i.default.number),(0,i.default)(n,i.default.number),function(){return t.next()*(n-e)+e}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r,o=n(0),i=(r=o)&&r.__esModule?r:{default:r};e.default=function(t,e,n){return void 0===n&&(n=void 0===e?1:e,e=0),(0,i.default)(e,i.default.number.integer),(0,i.default)(n,i.default.number.integer),function(){return t.next()*(n-e+1)+e|0}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){return function(){return t.next()>=.5}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r,o=n(0),i=(r=o)&&r.__esModule?r:{default:r};e.default=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1;return(0,i.default)(e,i.default.number),(0,i.default)(n,i.default.number),function(){var r=void 0,o=void 0,i=void 0;do{i=(r=2*t.next()-1)*r+(o=2*t.next()-1)*o}while(!i||i>1);return e+n*o*Math.sqrt(-2*Math.log(i)/i)}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){for(var e=arguments.length,n=Array(e>1?e-1:0),r=1;r<e;r++)n[r-1]=arguments[r];var o=t.normal.apply(t,n);return function(){return Math.exp(o())}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r,o=n(0),i=(r=o)&&r.__esModule?r:{default:r};e.default=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:.5;return(0,i.default)(e,i.default.number.gte(0).lt(1)),function(){return t.next()+e|0}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r,o=n(0),i=(r=o)&&r.__esModule?r:{default:r};e.default=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:.5;return(0,i.default)(e,i.default.number.positive.integer),(0,i.default)(n,i.default.number.gte(0).lte(1)),function(){for(var r=0,o=0;r++<e;)o+=t.next()<n;return o}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r,o=n(0),i=(r=o)&&r.__esModule?r:{default:r};e.default=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:.5;(0,i.default)(e,i.default.number.gt(0).lte(1));var n=1/Math.log(1-e);return function(){return 1+Math.log(t.next())*n|0}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r,o=n(0),i=(r=o)&&r.__esModule?r:{default:r};var s=[0,0,.6931471805599453,1.791759469228055,3.1780538303479458,4.787491742782046,6.579251212010101,8.525161361065415,10.60460290274525,12.801827480081469],a=function(t){return s[t]};e.default=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1;if((0,i.default)(e,i.default.number.positive),e<10){var n=Math.exp(-e);return function(){for(var r=n,o=0,i=t.next();i>r;)i-=r,r=e*r/++o;return o}}var r=Math.sqrt(e),o=.931+2.53*r,s=.02483*o-.059,u=1.1239+1.1328/(o-3.4),l=.9277-3.6224/(o-2);return function(){for(;;){var n=void 0,i=t.next();if(i<=.86*l)return n=i/l-.43,Math.floor((2*s/(.5-Math.abs(n))+o)*n+e+.445);i>=l?n=t.next()-.5:(n=((n=i/l-.93)<0?-.5:.5)-n,i=t.next()*l);var c=.5-Math.abs(n);if(!(c<.013&&i>c)){var f=0|Math.floor((2*s/c+o)*n+e+.445);if(i=i*u/(s/(c*c)+o),f>=10){var h=(f+.5)*Math.log(e/f)-e-.9189385332046727+f-(1/12-(1/360-1/(1260*f*f))/(f*f))/f;if(Math.log(i*r)<=h)return f}else if(f>=0&&Math.log(i)<=f*Math.log(e)-e-a(f))return f}}}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r,o=n(0),i=(r=o)&&r.__esModule?r:{default:r};e.default=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1;return(0,i.default)(e,i.default.number.positive),function(){return-Math.log(1-t.next())/e}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r,o=n(0),i=(r=o)&&r.__esModule?r:{default:r};e.default=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1;return(0,i.default)(e,i.default.number.integer.gte(0)),function(){for(var n=0,r=0;r<e;++r)n+=t.next();return n}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r,o=n(0),i=(r=o)&&r.__esModule?r:{default:r};e.default=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1;(0,i.default)(e,i.default.number.integer.positive);var n=t.irwinHall(e);return function(){return n()/e}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r,o=n(0),i=(r=o)&&r.__esModule?r:{default:r};e.default=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1;(0,i.default)(e,i.default.number.gte(0));var n=1/e;return function(){return 1/Math.pow(1-t.next(),n)}}},function(t,e,n){"use strict";n.r(e);function r(){}const o=t=>t;function i(t){return t()}function s(){return Object.create(null)}function a(t){t.forEach(i)}function u(t){return"function"==typeof t}function l(t,e){return t!=t?e==e:t!==e||t&&"object"==typeof t||"function"==typeof t}const c="undefined"!=typeof window;let f=c?()=>window.performance.now():()=>Date.now(),h=c?t=>requestAnimationFrame(t):r;const g=new Set;function d(t){g.forEach(e=>{e.c(t)||(g.delete(e),e.f())}),0!==g.size&&h(d)}function p(t){let e;return 0===g.size&&h(d),{promise:new Promise(n=>{g.add(e={c:t,f:n})}),abort(){g.delete(e)}}}function m(t,e){t.appendChild(e)}function w(t,e,n){t.insertBefore(e,n||null)}function v(t){t.parentNode.removeChild(t)}function y(t,e){for(let n=0;n<t.length;n+=1)t[n]&&t[n].d(e)}function b(t){return document.createElement(t)}function M(t){return document.createElementNS("http://www.w3.org/2000/svg",t)}function _(t){return document.createTextNode(t)}function x(){return _(" ")}function k(){return _("")}function j(t,e,n,r){return t.addEventListener(e,n,r),()=>t.removeEventListener(e,n,r)}function S(t,e,n){null==n?t.removeAttribute(e):t.getAttribute(e)!==n&&t.setAttribute(e,n)}function T(t){return""===t?void 0:+t}function C(t,e){e=""+e,t.data!==e&&(t.data=e)}function P(t,e){(null!=e||t.value)&&(t.value=e)}function E(t,e,n,r){t.style.setProperty(e,n,r?"important":"")}function A(t,e){const n=document.createEvent("CustomEvent");return n.initCustomEvent(t,!1,!1,e),n}let N,q,R=0,$={};function D(t,e,n,r,o,i,s,a=0){const u=16.666/r;let l="{\n";for(let t=0;t<=1;t+=u){const r=e+(n-e)*i(t);l+=100*t+`%{${s(r,1-r)}}\n`}const c=l+`100% {${s(n,1-n)}}\n}`,f=`__svelte_${function(t){let e=5381,n=t.length;for(;n--;)e=(e<<5)-e^t.charCodeAt(n);return e>>>0}(c)}_${a}`;if(!$[f]){if(!N){const t=b("style");document.head.appendChild(t),N=t.sheet}$[f]=!0,N.insertRule(`@keyframes ${f} ${c}`,N.cssRules.length)}const h=t.style.animation||"";return t.style.animation=`${h?`${h}, `:""}${f} ${r}ms linear ${o}ms 1 both`,R+=1,f}function I(t,e){t.style.animation=(t.style.animation||"").split(", ").filter(e?t=>t.indexOf(e)<0:t=>-1===t.indexOf("__svelte")).join(", "),e&&!--R&&h(()=>{if(R)return;let t=N.cssRules.length;for(;t--;)N.deleteRule(t);$={}})}function L(t){q=t}function F(){if(!q)throw new Error("Function called outside component initialization");return q}function O(t){F().$$.on_mount.push(t)}const U=[],z=[],H=[],V=[],B=Promise.resolve();let Y,G=!1;function X(){G||(G=!0,B.then(Z))}function W(t){H.push(t)}function Z(){const t=new Set;do{for(;U.length;){const t=U.shift();L(t),Q(t.$$)}for(;z.length;)z.pop()();for(let e=0;e<H.length;e+=1){const n=H[e];t.has(n)||(n(),t.add(n))}H.length=0}while(U.length);for(;V.length;)V.pop()();G=!1}function Q(t){if(null!==t.fragment){t.update(),a(t.before_update);const e=t.dirty;t.dirty=[-1],t.fragment&&t.fragment.p(t.ctx,e),t.after_update.forEach(W)}}function J(){return Y||(Y=Promise.resolve(),Y.then(()=>{Y=null})),Y}function K(t,e,n){t.dispatchEvent(A(`${e?"intro":"outro"}${n}`))}const tt=new Set;let et;function nt(){et={r:0,c:[],p:et}}function rt(){et.r||a(et.c),et=et.p}function ot(t,e){t&&t.i&&(tt.delete(t),t.i(e))}function it(t,e,n,r){if(t&&t.o){if(tt.has(t))return;tt.add(t),et.c.push(()=>{tt.delete(t),r&&(n&&t.d(1),r())}),t.o(e)}}const st={duration:0};function at(t,e,n,i){let s=e(t,n),l=i?0:1,c=null,h=null,g=null;function d(){g&&I(t,g)}function m(t,e){const n=t.b-l;return e*=Math.abs(n),{a:l,b:t.b,d:n,duration:e,start:t.start,end:t.start+e,group:t.group}}function w(e){const{delay:n=0,duration:i=300,easing:u=o,tick:w=r,css:v}=s||st,y={start:f()+n,b:e};e||(y.group=et,et.r+=1),c?h=y:(v&&(d(),g=D(t,l,e,i,n,u,v)),e&&w(0,1),c=m(y,i),W(()=>K(t,e,"start")),p(e=>{if(h&&e>h.start&&(c=m(h,i),h=null,K(t,c.b,"start"),v&&(d(),g=D(t,l,c.b,c.duration,0,u,s.css))),c)if(e>=c.end)w(l=c.b,1-l),K(t,c.b,"end"),h||(c.b?d():--c.group.r||a(c.group.c)),c=null;else if(e>=c.start){const t=e-c.start;l=c.a+c.d*u(t/c.duration),w(l,1-l)}return!(!c&&!h)}))}return{run(t){u(s)?J().then(()=>{s=s(),w(t)}):w(t)},end(){d(),c=h=null}}}"undefined"!=typeof window?window:global;new Set(["allowfullscreen","allowpaymentrequest","async","autofocus","autoplay","checked","controls","default","defer","disabled","formnovalidate","hidden","ismap","loop","multiple","muted","nomodule","novalidate","open","playsinline","readonly","required","reversed","selected"]);let ut;function lt(t,e,n){const{fragment:r,on_mount:o,on_destroy:s,after_update:l}=t.$$;r&&r.m(e,n),W(()=>{const e=o.map(i).filter(u);s?s.push(...e):a(e),t.$$.on_mount=[]}),l.forEach(W)}function ct(t,e){const n=t.$$;null!==n.fragment&&(a(n.on_destroy),n.fragment&&n.fragment.d(e),n.on_destroy=n.fragment=null,n.ctx=[])}function ft(t,e,n,o,i,u,l=[-1]){const c=q;L(t);const f=e.props||{},h=t.$$={fragment:null,ctx:null,props:u,update:r,not_equal:i,bound:s(),on_mount:[],on_destroy:[],before_update:[],after_update:[],context:new Map(c?c.$$.context:[]),callbacks:s(),dirty:l};let g=!1;var d;h.ctx=n?n(t,f,(e,n,...r)=>{const o=r.length?r[0]:n;return h.ctx&&i(h.ctx[e],h.ctx[e]=o)&&(h.bound[e]&&h.bound[e](o),g&&function(t,e){-1===t.$$.dirty[0]&&(U.push(t),X(),t.$$.dirty.fill(0)),t.$$.dirty[e/31|0]|=1<<e%31}(t,e)),n}):[],h.update(),g=!0,a(h.before_update),h.fragment=!!o&&o(h.ctx),e.target&&(e.hydrate?h.fragment&&h.fragment.l((d=e.target,Array.from(d.childNodes))):h.fragment&&h.fragment.c(),e.intro&&ot(t.$$.fragment),lt(t,e.target,e.anchor),Z()),L(c)}"function"==typeof HTMLElement&&(ut=class extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"})}connectedCallback(){for(const t in this.$$.slotted)this.appendChild(this.$$.slotted[t])}attributeChangedCallback(t,e,n){this[t]=n}$destroy(){ct(this,1),this.$destroy=r}$on(t,e){const n=this.$$.callbacks[t]||(this.$$.callbacks[t]=[]);return n.push(e),()=>{const t=n.indexOf(e);-1!==t&&n.splice(t,1)}}$set(){}});class ht{$destroy(){ct(this,1),this.$destroy=r}$on(t,e){const n=this.$$.callbacks[t]||(this.$$.callbacks[t]=[]);return n.push(e),()=>{const t=n.indexOf(e);-1!==t&&n.splice(t,1)}}$set(){}}var gt=n(4),dt=n.n(gt);var pt=function(t){if(!dt()(t))throw new TypeError("input must be an array");if(0===t.length)throw new TypeError("input must not be empty");for(var e=t[0],n=1;n<t.length;n++)t[n]>e&&(e=t[n]);return e};var mt=function(t){if(!dt()(t))throw new TypeError("input must be an array");if(0===t.length)throw new TypeError("input must not be empty");for(var e=t[0],n=1;n<t.length;n++)t[n]<e&&(e=t[n]);return e};var wt=function(t){var e,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(!dt()(t))throw new TypeError("input must be an array");if(0===t.length)throw new TypeError("input must not be empty");if(void 0!==n.output){if(!dt()(n.output))throw new TypeError("output option must be an array if specified");e=n.output}else e=new Array(t.length);var r=mt(t),o=pt(t);if(r===o)throw new RangeError("minimum and maximum input values are equal. Cannot rescale a constant array");var i=n.min,s=void 0===i?n.autoMinMax?r:0:i,a=n.max,u=void 0===a?n.autoMinMax?o:1:a;if(s>=u)throw new RangeError("min option must be smaller than max option");for(var l=(u-s)/(o-r),c=0;c<t.length;c++)e[c]=(t[c]-r)*l+s;return e};function vt(t,e,n){let r=n?t.rows:t.rows-1;if(e<0||e>r)throw new RangeError("Row index out of range")}function yt(t,e,n){let r=n?t.columns:t.columns-1;if(e<0||e>r)throw new RangeError("Column index out of range")}function bt(t,e){if(e.to1DArray&&(e=e.to1DArray()),e.length!==t.columns)throw new RangeError("vector size must be the same as the number of columns");return e}function Mt(t,e){if(e.to1DArray&&(e=e.to1DArray()),e.length!==t.rows)throw new RangeError("vector size must be the same as the number of rows");return e}function _t(t,e){if("object"!=typeof e)throw new TypeError("unexpected type for row indices");if(e.some(e=>e<0||e>=t.rows))throw new RangeError("row indices are out of range");return Array.isArray(e)||(e=Array.from(e)),e}function xt(t,e){if("object"!=typeof e)throw new TypeError("unexpected type for column indices");if(e.some(e=>e<0||e>=t.columns))throw new RangeError("column indices are out of range");return Array.isArray(e)||(e=Array.from(e)),e}function kt(t,e,n,r,o){if(5!==arguments.length)throw new RangeError("expected 4 arguments");if(St("startRow",e),St("endRow",n),St("startColumn",r),St("endColumn",o),e>n||r>o||e<0||e>=t.rows||n<0||n>=t.rows||r<0||r>=t.columns||o<0||o>=t.columns)throw new RangeError("Submatrix indices are out of range")}function jt(t,e=0){let n=[];for(let r=0;r<t;r++)n.push(e);return n}function St(t,e){if("number"!=typeof e)throw new TypeError(`${t} must be a number`)}function Tt(t){const e=String(t);if(e.length<=8)return e.padEnd(8," ");const n=t.toPrecision(6);if(n.length<=8)return n;const r=t.toExponential(6),o=r.indexOf("e"),i=r.substring(o);return r.substring(0,8-i.length)+i}class Ct{static from1DArray(t,e,n){if(t*e!==n.length)throw new RangeError("data length does not match given dimensions");let r=new Et(t,e);for(let o=0;o<t;o++)for(let t=0;t<e;t++)r.set(o,t,n[o*e+t]);return r}static rowVector(t){let e=new Et(1,t.length);for(let n=0;n<t.length;n++)e.set(0,n,t[n]);return e}static columnVector(t){let e=new Et(t.length,1);for(let n=0;n<t.length;n++)e.set(n,0,t[n]);return e}static zeros(t,e){return new Et(t,e)}static ones(t,e){return new Et(t,e).fill(1)}static rand(t,e,n={}){if("object"!=typeof n)throw new TypeError("options must be an object");const{random:r=Math.random}=n;let o=new Et(t,e);for(let n=0;n<t;n++)for(let t=0;t<e;t++)o.set(n,t,r());return o}static randInt(t,e,n={}){if("object"!=typeof n)throw new TypeError("options must be an object");const{min:r=0,max:o=1e3,random:i=Math.random}=n;if(!Number.isInteger(r))throw new TypeError("min must be an integer");if(!Number.isInteger(o))throw new TypeError("max must be an integer");if(r>=o)throw new RangeError("min must be smaller than max");let s=o-r,a=new Et(t,e);for(let n=0;n<t;n++)for(let t=0;t<e;t++){let e=r+Math.round(i()*s);a.set(n,t,e)}return a}static eye(t,e,n){void 0===e&&(e=t),void 0===n&&(n=1);let r=Math.min(t,e),o=this.zeros(t,e);for(let t=0;t<r;t++)o.set(t,t,n);return o}static diag(t,e,n){let r=t.length;void 0===e&&(e=r),void 0===n&&(n=e);let o=Math.min(r,e,n),i=this.zeros(e,n);for(let e=0;e<o;e++)i.set(e,e,t[e]);return i}static min(t,e){t=this.checkMatrix(t),e=this.checkMatrix(e);let n=t.rows,r=t.columns,o=new Et(n,r);for(let i=0;i<n;i++)for(let n=0;n<r;n++)o.set(i,n,Math.min(t.get(i,n),e.get(i,n)));return o}static max(t,e){t=this.checkMatrix(t),e=this.checkMatrix(e);let n=t.rows,r=t.columns,o=new this(n,r);for(let i=0;i<n;i++)for(let n=0;n<r;n++)o.set(i,n,Math.max(t.get(i,n),e.get(i,n)));return o}static checkMatrix(t){return Ct.isMatrix(t)?t:new Et(t)}static isMatrix(t){return null!=t&&"Matrix"===t.klass}get size(){return this.rows*this.columns}apply(t){if("function"!=typeof t)throw new TypeError("callback must be a function");for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)t.call(this,e,n);return this}to1DArray(){let t=[];for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)t.push(this.get(e,n));return t}to2DArray(){let t=[];for(let e=0;e<this.rows;e++){t.push([]);for(let n=0;n<this.columns;n++)t[e].push(this.get(e,n))}return t}toJSON(){return this.to2DArray()}isRowVector(){return 1===this.rows}isColumnVector(){return 1===this.columns}isVector(){return 1===this.rows||1===this.columns}isSquare(){return this.rows===this.columns}isSymmetric(){if(this.isSquare()){for(let t=0;t<this.rows;t++)for(let e=0;e<=t;e++)if(this.get(t,e)!==this.get(e,t))return!1;return!0}return!1}isEchelonForm(){let t=0,e=0,n=-1,r=!0,o=!1;for(;t<this.rows&&r;){for(e=0,o=!1;e<this.columns&&!1===o;)0===this.get(t,e)?e++:1===this.get(t,e)&&e>n?(o=!0,n=e):(r=!1,o=!0);t++}return r}isReducedEchelonForm(){let t=0,e=0,n=-1,r=!0,o=!1;for(;t<this.rows&&r;){for(e=0,o=!1;e<this.columns&&!1===o;)0===this.get(t,e)?e++:1===this.get(t,e)&&e>n?(o=!0,n=e):(r=!1,o=!0);for(let n=e+1;n<this.rows;n++)0!==this.get(t,n)&&(r=!1);t++}return r}echelonForm(){let t=this.clone(),e=0,n=0;for(;e<t.rows&&n<t.columns;){let r=e;for(let o=e;o<t.rows;o++)t.get(o,n)>t.get(r,n)&&(r=o);if(0===t.get(r,n))n++;else{t.swapRows(e,r);let o=t.get(e,n);for(let r=n;r<t.columns;r++)t.set(e,r,t.get(e,r)/o);for(let r=e+1;r<t.rows;r++){let o=t.get(r,n)/t.get(e,n);t.set(r,n,0);for(let i=n+1;i<t.columns;i++)t.set(r,i,t.get(r,i)-t.get(e,i)*o)}e++,n++}}return t}reducedEchelonForm(){let t=this.echelonForm(),e=t.columns,n=t.rows,r=n-1;for(;r>=0;)if(0===t.maxRow(r))r--;else{let o=0,i=!1;for(;o<n&&!1===i;)1===t.get(r,o)?i=!0:o++;for(let n=0;n<r;n++){let i=t.get(n,o);for(let s=o;s<e;s++){let e=t.get(n,s)-i*t.get(r,s);t.set(n,s,e)}}r--}return t}set(){throw new Error("set method is unimplemented")}get(){throw new Error("get method is unimplemented")}repeat(t={}){if("object"!=typeof t)throw new TypeError("options must be an object");const{rows:e=1,columns:n=1}=t;if(!Number.isInteger(e)||e<=0)throw new TypeError("rows must be a positive integer");if(!Number.isInteger(n)||n<=0)throw new TypeError("columns must be a positive integer");let r=new Et(this.rows*e,this.columns*n);for(let t=0;t<e;t++)for(let e=0;e<n;e++)r.setSubMatrix(this,this.rows*t,this.columns*e);return r}fill(t){for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,t);return this}neg(){return this.mulS(-1)}getRow(t){vt(this,t);let e=[];for(let n=0;n<this.columns;n++)e.push(this.get(t,n));return e}getRowVector(t){return Et.rowVector(this.getRow(t))}setRow(t,e){vt(this,t),e=bt(this,e);for(let n=0;n<this.columns;n++)this.set(t,n,e[n]);return this}swapRows(t,e){vt(this,t),vt(this,e);for(let n=0;n<this.columns;n++){let r=this.get(t,n);this.set(t,n,this.get(e,n)),this.set(e,n,r)}return this}getColumn(t){yt(this,t);let e=[];for(let n=0;n<this.rows;n++)e.push(this.get(n,t));return e}getColumnVector(t){return Et.columnVector(this.getColumn(t))}setColumn(t,e){yt(this,t),e=Mt(this,e);for(let n=0;n<this.rows;n++)this.set(n,t,e[n]);return this}swapColumns(t,e){yt(this,t),yt(this,e);for(let n=0;n<this.rows;n++){let r=this.get(n,t);this.set(n,t,this.get(n,e)),this.set(n,e,r)}return this}addRowVector(t){t=bt(this,t);for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)+t[n]);return this}subRowVector(t){t=bt(this,t);for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)-t[n]);return this}mulRowVector(t){t=bt(this,t);for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)*t[n]);return this}divRowVector(t){t=bt(this,t);for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)/t[n]);return this}addColumnVector(t){t=Mt(this,t);for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)+t[e]);return this}subColumnVector(t){t=Mt(this,t);for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)-t[e]);return this}mulColumnVector(t){t=Mt(this,t);for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)*t[e]);return this}divColumnVector(t){t=Mt(this,t);for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)/t[e]);return this}mulRow(t,e){vt(this,t);for(let n=0;n<this.columns;n++)this.set(t,n,this.get(t,n)*e);return this}mulColumn(t,e){yt(this,t);for(let n=0;n<this.rows;n++)this.set(n,t,this.get(n,t)*e);return this}max(){let t=this.get(0,0);for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.get(e,n)>t&&(t=this.get(e,n));return t}maxIndex(){let t=this.get(0,0),e=[0,0];for(let n=0;n<this.rows;n++)for(let r=0;r<this.columns;r++)this.get(n,r)>t&&(t=this.get(n,r),e[0]=n,e[1]=r);return e}min(){let t=this.get(0,0);for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.get(e,n)<t&&(t=this.get(e,n));return t}minIndex(){let t=this.get(0,0),e=[0,0];for(let n=0;n<this.rows;n++)for(let r=0;r<this.columns;r++)this.get(n,r)<t&&(t=this.get(n,r),e[0]=n,e[1]=r);return e}maxRow(t){vt(this,t);let e=this.get(t,0);for(let n=1;n<this.columns;n++)this.get(t,n)>e&&(e=this.get(t,n));return e}maxRowIndex(t){vt(this,t);let e=this.get(t,0),n=[t,0];for(let r=1;r<this.columns;r++)this.get(t,r)>e&&(e=this.get(t,r),n[1]=r);return n}minRow(t){vt(this,t);let e=this.get(t,0);for(let n=1;n<this.columns;n++)this.get(t,n)<e&&(e=this.get(t,n));return e}minRowIndex(t){vt(this,t);let e=this.get(t,0),n=[t,0];for(let r=1;r<this.columns;r++)this.get(t,r)<e&&(e=this.get(t,r),n[1]=r);return n}maxColumn(t){yt(this,t);let e=this.get(0,t);for(let n=1;n<this.rows;n++)this.get(n,t)>e&&(e=this.get(n,t));return e}maxColumnIndex(t){yt(this,t);let e=this.get(0,t),n=[0,t];for(let r=1;r<this.rows;r++)this.get(r,t)>e&&(e=this.get(r,t),n[0]=r);return n}minColumn(t){yt(this,t);let e=this.get(0,t);for(let n=1;n<this.rows;n++)this.get(n,t)<e&&(e=this.get(n,t));return e}minColumnIndex(t){yt(this,t);let e=this.get(0,t),n=[0,t];for(let r=1;r<this.rows;r++)this.get(r,t)<e&&(e=this.get(r,t),n[0]=r);return n}diag(){let t=Math.min(this.rows,this.columns),e=[];for(let n=0;n<t;n++)e.push(this.get(n,n));return e}norm(t="frobenius"){let e=0;if("max"===t)return this.max();if("frobenius"===t){for(let t=0;t<this.rows;t++)for(let n=0;n<this.columns;n++)e+=this.get(t,n)*this.get(t,n);return Math.sqrt(e)}throw new RangeError(`unknown norm type: ${t}`)}cumulativeSum(){let t=0;for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)t+=this.get(e,n),this.set(e,n,t);return this}dot(t){Ct.isMatrix(t)&&(t=t.to1DArray());let e=this.to1DArray();if(e.length!==t.length)throw new RangeError("vectors do not have the same size");let n=0;for(let r=0;r<e.length;r++)n+=e[r]*t[r];return n}mmul(t){t=Et.checkMatrix(t);let e=this.rows,n=this.columns,r=t.columns,o=new Et(e,r),i=new Float64Array(n);for(let s=0;s<r;s++){for(let e=0;e<n;e++)i[e]=t.get(e,s);for(let t=0;t<e;t++){let e=0;for(let r=0;r<n;r++)e+=this.get(t,r)*i[r];o.set(t,s,e)}}return o}strassen2x2(t){t=Et.checkMatrix(t);let e=new Et(2,2);const n=this.get(0,0),r=t.get(0,0),o=this.get(0,1),i=t.get(0,1),s=this.get(1,0),a=t.get(1,0),u=this.get(1,1),l=t.get(1,1),c=(n+u)*(r+l),f=(s+u)*r,h=n*(i-l),g=u*(a-r),d=(n+o)*l,p=c+g-d+(o-u)*(a+l),m=h+d,w=f+g,v=c-f+h+(s-n)*(r+i);return e.set(0,0,p),e.set(0,1,m),e.set(1,0,w),e.set(1,1,v),e}strassen3x3(t){t=Et.checkMatrix(t);let e=new Et(3,3);const n=this.get(0,0),r=this.get(0,1),o=this.get(0,2),i=this.get(1,0),s=this.get(1,1),a=this.get(1,2),u=this.get(2,0),l=this.get(2,1),c=this.get(2,2),f=t.get(0,0),h=t.get(0,1),g=t.get(0,2),d=t.get(1,0),p=t.get(1,1),m=t.get(1,2),w=t.get(2,0),v=t.get(2,1),y=t.get(2,2),b=(n-i)*(-h+p),M=(-n+i+s)*(f-h+p),_=(i+s)*(-f+h),x=n*f,k=(-n+u+l)*(f-g+m),j=(-n+u)*(g-m),S=(u+l)*(-f+g),T=(-o+l+c)*(p+w-v),C=(o-c)*(p-v),P=o*w,E=(l+c)*(-w+v),A=(-o+s+a)*(m+w-y),N=(o-a)*(m-y),q=(s+a)*(-w+y),R=x+P+r*d,$=(n+r+o-i-s-l-c)*p+M+_+x+T+P+E,D=x+k+S+(n+r+o-s-a-u-l)*m+P+A+q,I=b+s*(-f+h+d-p-m-w+y)+M+x+P+A+N,L=b+M+_+x+a*v,F=P+A+N+q+i*g,O=x+k+j+l*(-f+g+d-p-m-w+v)+T+C+P,U=T+C+P+E+u*h,z=x+k+j+S+c*y;return e.set(0,0,R),e.set(0,1,$),e.set(0,2,D),e.set(1,0,I),e.set(1,1,L),e.set(1,2,F),e.set(2,0,O),e.set(2,1,U),e.set(2,2,z),e}mmulStrassen(t){t=Et.checkMatrix(t);let e=this.clone(),n=e.rows,r=e.columns,o=t.rows,i=t.columns;function s(t,e,n){let r=t.rows,o=t.columns;if(r===e&&o===n)return t;{let r=Ct.zeros(e,n);return r=r.setSubMatrix(t,0,0),r}}r!==o&&console.warn(`Multiplying ${n} x ${r} and ${o} x ${i} matrix: dimensions do not match.`);let a=Math.max(n,o),u=Math.max(r,i);return e=s(e,a,u),function t(e,n,r,o){if(r<=512||o<=512)return e.mmul(n);r%2==1&&o%2==1?(e=s(e,r+1,o+1),n=s(n,r+1,o+1)):r%2==1?(e=s(e,r+1,o),n=s(n,r+1,o)):o%2==1&&(e=s(e,r,o+1),n=s(n,r,o+1));let i=parseInt(e.rows/2,10),a=parseInt(e.columns/2,10),u=e.subMatrix(0,i-1,0,a-1),l=n.subMatrix(0,i-1,0,a-1),c=e.subMatrix(0,i-1,a,e.columns-1),f=n.subMatrix(0,i-1,a,n.columns-1),h=e.subMatrix(i,e.rows-1,0,a-1),g=n.subMatrix(i,n.rows-1,0,a-1),d=e.subMatrix(i,e.rows-1,a,e.columns-1),p=n.subMatrix(i,n.rows-1,a,n.columns-1),m=t(Ct.add(u,d),Ct.add(l,p),i,a),w=t(Ct.add(h,d),l,i,a),v=t(u,Ct.sub(f,p),i,a),y=t(d,Ct.sub(g,l),i,a),b=t(Ct.add(u,c),p,i,a),M=t(Ct.sub(h,u),Ct.add(l,f),i,a),_=t(Ct.sub(c,d),Ct.add(g,p),i,a),x=Ct.add(m,y);x.sub(b),x.add(_);let k=Ct.add(v,b),j=Ct.add(w,y),S=Ct.sub(m,w);S.add(v),S.add(M);let T=Ct.zeros(2*x.rows,2*x.columns);return T=T.setSubMatrix(x,0,0),T=T.setSubMatrix(k,x.rows,0),T=T.setSubMatrix(j,0,x.columns),T=T.setSubMatrix(S,x.rows,x.columns),T.subMatrix(0,r-1,0,o-1)}(e,t=s(t,a,u),a,u)}scaleRows(t={}){if("object"!=typeof t)throw new TypeError("options must be an object");const{min:e=0,max:n=1}=t;if(!Number.isFinite(e))throw new TypeError("min must be a number");if(!Number.isFinite(n))throw new TypeError("max must be a number");if(e>=n)throw new RangeError("min must be smaller than max");let r=new Et(this.rows,this.columns);for(let t=0;t<this.rows;t++){const o=this.getRow(t);wt(o,{min:e,max:n,output:o}),r.setRow(t,o)}return r}scaleColumns(t={}){if("object"!=typeof t)throw new TypeError("options must be an object");const{min:e=0,max:n=1}=t;if(!Number.isFinite(e))throw new TypeError("min must be a number");if(!Number.isFinite(n))throw new TypeError("max must be a number");if(e>=n)throw new RangeError("min must be smaller than max");let r=new Et(this.rows,this.columns);for(let t=0;t<this.columns;t++){const o=this.getColumn(t);wt(o,{min:e,max:n,output:o}),r.setColumn(t,o)}return r}flipRows(){const t=Math.ceil(this.columns/2);for(let e=0;e<this.rows;e++)for(let n=0;n<t;n++){let t=this.get(e,n),r=this.get(e,this.columns-1-n);this.set(e,n,r),this.set(e,this.columns-1-n,t)}return this}flipColumns(){const t=Math.ceil(this.rows/2);for(let e=0;e<this.columns;e++)for(let n=0;n<t;n++){let t=this.get(n,e),r=this.get(this.rows-1-n,e);this.set(n,e,r),this.set(this.rows-1-n,e,t)}return this}kroneckerProduct(t){t=Et.checkMatrix(t);let e=this.rows,n=this.columns,r=t.rows,o=t.columns,i=new Et(e*r,n*o);for(let s=0;s<e;s++)for(let e=0;e<n;e++)for(let n=0;n<r;n++)for(let a=0;a<o;a++)i.set(r*s+n,o*e+a,this.get(s,e)*t.get(n,a));return i}transpose(){let t=new Et(this.columns,this.rows);for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)t.set(n,e,this.get(e,n));return t}sortRows(t=Pt){for(let e=0;e<this.rows;e++)this.setRow(e,this.getRow(e).sort(t));return this}sortColumns(t=Pt){for(let e=0;e<this.columns;e++)this.setColumn(e,this.getColumn(e).sort(t));return this}subMatrix(t,e,n,r){kt(this,t,e,n,r);let o=new Et(e-t+1,r-n+1);for(let i=t;i<=e;i++)for(let e=n;e<=r;e++)o.set(i-t,e-n,this.get(i,e));return o}subMatrixRow(t,e,n){if(void 0===e&&(e=0),void 0===n&&(n=this.columns-1),e>n||e<0||e>=this.columns||n<0||n>=this.columns)throw new RangeError("Argument out of range");let r=new Et(t.length,n-e+1);for(let o=0;o<t.length;o++)for(let i=e;i<=n;i++){if(t[o]<0||t[o]>=this.rows)throw new RangeError(`Row index out of range: ${t[o]}`);r.set(o,i-e,this.get(t[o],i))}return r}subMatrixColumn(t,e,n){if(void 0===e&&(e=0),void 0===n&&(n=this.rows-1),e>n||e<0||e>=this.rows||n<0||n>=this.rows)throw new RangeError("Argument out of range");let r=new Et(n-e+1,t.length);for(let o=0;o<t.length;o++)for(let i=e;i<=n;i++){if(t[o]<0||t[o]>=this.columns)throw new RangeError(`Column index out of range: ${t[o]}`);r.set(i-e,o,this.get(i,t[o]))}return r}setSubMatrix(t,e,n){kt(this,e,e+(t=Et.checkMatrix(t)).rows-1,n,n+t.columns-1);for(let r=0;r<t.rows;r++)for(let o=0;o<t.columns;o++)this.set(e+r,n+o,t.get(r,o));return this}selection(t,e){let n=function(t,e,n){return{row:_t(t,e),column:xt(t,n)}}(this,t,e),r=new Et(t.length,e.length);for(let t=0;t<n.row.length;t++){let e=n.row[t];for(let o=0;o<n.column.length;o++){let i=n.column[o];r.set(t,o,this.get(e,i))}}return r}trace(){let t=Math.min(this.rows,this.columns),e=0;for(let n=0;n<t;n++)e+=this.get(n,n);return e}clone(){let t=new Et(this.rows,this.columns);for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)t.set(e,n,this.get(e,n));return t}sum(t){switch(t){case"row":return function(t){let e=jt(t.rows);for(let n=0;n<t.rows;++n)for(let r=0;r<t.columns;++r)e[n]+=t.get(n,r);return e}(this);case"column":return function(t){let e=jt(t.columns);for(let n=0;n<t.rows;++n)for(let r=0;r<t.columns;++r)e[r]+=t.get(n,r);return e}(this);case void 0:return function(t){let e=0;for(let n=0;n<t.rows;n++)for(let r=0;r<t.columns;r++)e+=t.get(n,r);return e}(this);default:throw new Error(`invalid option: ${t}`)}}product(t){switch(t){case"row":return function(t){let e=jt(t.rows,1);for(let n=0;n<t.rows;++n)for(let r=0;r<t.columns;++r)e[n]*=t.get(n,r);return e}(this);case"column":return function(t){let e=jt(t.columns,1);for(let n=0;n<t.rows;++n)for(let r=0;r<t.columns;++r)e[r]*=t.get(n,r);return e}(this);case void 0:return function(t){let e=1;for(let n=0;n<t.rows;n++)for(let r=0;r<t.columns;r++)e*=t.get(n,r);return e}(this);default:throw new Error(`invalid option: ${t}`)}}mean(t){const e=this.sum(t);switch(t){case"row":for(let t=0;t<this.rows;t++)e[t]/=this.columns;return e;case"column":for(let t=0;t<this.columns;t++)e[t]/=this.rows;return e;case void 0:return e/this.size;default:throw new Error(`invalid option: ${t}`)}}variance(t,e={}){if("object"==typeof t&&(e=t,t=void 0),"object"!=typeof e)throw new TypeError("options must be an object");const{unbiased:n=!0,mean:r=this.mean(t)}=e;if("boolean"!=typeof n)throw new TypeError("unbiased must be a boolean");switch(t){case"row":if(!Array.isArray(r))throw new TypeError("mean must be an array");return function(t,e,n){const r=t.rows,o=t.columns,i=[];for(let s=0;s<r;s++){let r=0,a=0,u=0;for(let e=0;e<o;e++)u=t.get(s,e)-n[s],r+=u,a+=u*u;e?i.push((a-r*r/o)/(o-1)):i.push((a-r*r/o)/o)}return i}(this,n,r);case"column":if(!Array.isArray(r))throw new TypeError("mean must be an array");return function(t,e,n){const r=t.rows,o=t.columns,i=[];for(let s=0;s<o;s++){let o=0,a=0,u=0;for(let e=0;e<r;e++)u=t.get(e,s)-n[s],o+=u,a+=u*u;e?i.push((a-o*o/r)/(r-1)):i.push((a-o*o/r)/r)}return i}(this,n,r);case void 0:if("number"!=typeof r)throw new TypeError("mean must be a number");return function(t,e,n){const r=t.rows,o=t.columns,i=r*o;let s=0,a=0,u=0;for(let e=0;e<r;e++)for(let r=0;r<o;r++)u=t.get(e,r)-n,s+=u,a+=u*u;return e?(a-s*s/i)/(i-1):(a-s*s/i)/i}(this,n,r);default:throw new Error(`invalid option: ${t}`)}}standardDeviation(t,e){"object"==typeof t&&(e=t,t=void 0);const n=this.variance(t,e);if(void 0===t)return Math.sqrt(n);for(let t=0;t<n.length;t++)n[t]=Math.sqrt(n[t]);return n}center(t,e={}){if("object"==typeof t&&(e=t,t=void 0),"object"!=typeof e)throw new TypeError("options must be an object");const{center:n=this.mean(t)}=e;switch(t){case"row":if(!Array.isArray(n))throw new TypeError("center must be an array");return function(t,e){for(let n=0;n<t.rows;n++)for(let r=0;r<t.columns;r++)t.set(n,r,t.get(n,r)-e[n])}(this,n),this;case"column":if(!Array.isArray(n))throw new TypeError("center must be an array");return function(t,e){for(let n=0;n<t.rows;n++)for(let r=0;r<t.columns;r++)t.set(n,r,t.get(n,r)-e[r])}(this,n),this;case void 0:if("number"!=typeof n)throw new TypeError("center must be a number");return function(t,e){for(let n=0;n<t.rows;n++)for(let r=0;r<t.columns;r++)t.set(n,r,t.get(n,r)-e)}(this,n),this;default:throw new Error(`invalid option: ${t}`)}}scale(t,e={}){if("object"==typeof t&&(e=t,t=void 0),"object"!=typeof e)throw new TypeError("options must be an object");let n=e.scale;switch(t){case"row":if(void 0===n)n=function(t){const e=[];for(let n=0;n<t.rows;n++){let r=0;for(let e=0;e<t.columns;e++)r+=Math.pow(t.get(n,e),2)/(t.columns-1);e.push(Math.sqrt(r))}return e}(this);else if(!Array.isArray(n))throw new TypeError("scale must be an array");return function(t,e){for(let n=0;n<t.rows;n++)for(let r=0;r<t.columns;r++)t.set(n,r,t.get(n,r)/e[n])}(this,n),this;case"column":if(void 0===n)n=function(t){const e=[];for(let n=0;n<t.columns;n++){let r=0;for(let e=0;e<t.rows;e++)r+=Math.pow(t.get(e,n),2)/(t.rows-1);e.push(Math.sqrt(r))}return e}(this);else if(!Array.isArray(n))throw new TypeError("scale must be an array");return function(t,e){for(let n=0;n<t.rows;n++)for(let r=0;r<t.columns;r++)t.set(n,r,t.get(n,r)/e[r])}(this,n),this;case void 0:if(void 0===n)n=function(t){const e=t.size-1;let n=0;for(let r=0;r<t.columns;r++)for(let o=0;o<t.rows;o++)n+=Math.pow(t.get(o,r),2)/e;return Math.sqrt(n)}(this);else if("number"!=typeof n)throw new TypeError("scale must be a number");return function(t,e){for(let n=0;n<t.rows;n++)for(let r=0;r<t.columns;r++)t.set(n,r,t.get(n,r)/e)}(this,n),this;default:throw new Error(`invalid option: ${t}`)}}}function Pt(t,e){return t-e}Ct.prototype.klass="Matrix","undefined"!=typeof Symbol&&(Ct.prototype[Symbol.for("nodejs.util.inspect.custom")]=function(){const t=" ".repeat(2),e=" ".repeat(4);return`${this.constructor.name} {\n${t}[\n${e}${function(t,e){const{rows:n,columns:r}=t,o=Math.min(n,15),i=Math.min(r,10),s=[];for(let e=0;e<o;e++){let n=[];for(let r=0;r<i;r++)n.push(Tt(t.get(e,r)));s.push(`${n.join(" ")}`)}i!==r&&(s[s.length-1]+=` ... ${r-10} more columns`);o!==n&&s.push(`... ${n-15} more rows`);return s.join(`\n${e}`)}(this,e)}\n${t}]\n${t}rows: ${this.rows}\n${t}columns: ${this.columns}\n}`}),Ct.random=Ct.rand,Ct.randomInt=Ct.randInt,Ct.diagonal=Ct.diag,Ct.prototype.diagonal=Ct.prototype.diag,Ct.identity=Ct.eye,Ct.prototype.negate=Ct.prototype.neg,Ct.prototype.tensorProduct=Ct.prototype.kroneckerProduct;class Et extends Ct{constructor(t,e){if(super(),Et.isMatrix(t))return t.clone();if(Number.isInteger(t)&&t>0){if(this.data=[],!(Number.isInteger(e)&&e>0))throw new TypeError("nColumns must be a positive integer");for(let n=0;n<t;n++)this.data.push(new Float64Array(e))}else{if(!Array.isArray(t))throw new TypeError("First argument must be a positive number or an array");{const n=t;if(t=n.length,"number"!=typeof(e=n[0].length)||0===e)throw new TypeError("Data must be a 2D array with at least one element");this.data=[];for(let r=0;r<t;r++){if(n[r].length!==e)throw new RangeError("Inconsistent array dimensions");this.data.push(Float64Array.from(n[r]))}}}return this.rows=t,this.columns=e,this}set(t,e,n){return this.data[t][e]=n,this}get(t,e){return this.data[t][e]}removeRow(t){if(vt(this,t),1===this.rows)throw new RangeError("A matrix cannot have less than one row");return this.data.splice(t,1),this.rows-=1,this}addRow(t,e){return void 0===e&&(e=t,t=this.rows),vt(this,t,!0),e=Float64Array.from(bt(this,e)),this.data.splice(t,0,e),this.rows+=1,this}removeColumn(t){if(yt(this,t),1===this.columns)throw new RangeError("A matrix cannot have less than one column");for(let e=0;e<this.rows;e++){const n=new Float64Array(this.columns-1);for(let r=0;r<t;r++)n[r]=this.data[e][r];for(let r=t+1;r<this.columns;r++)n[r-1]=this.data[e][r];this.data[e]=n}return this.columns-=1,this}addColumn(t,e){void 0===e&&(e=t,t=this.columns),yt(this,t,!0),e=Mt(this,e);for(let n=0;n<this.rows;n++){const r=new Float64Array(this.columns+1);let o=0;for(;o<t;o++)r[o]=this.data[n][o];for(r[o++]=e[n];o<this.columns+1;o++)r[o]=this.data[n][o-1];this.data[n]=r}return this.columns+=1,this}}var At,Nt;Nt=Et,(At=Ct).prototype.add=function(t){return"number"==typeof t?this.addS(t):this.addM(t)},At.prototype.addS=function(t){for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)+t);return this},At.prototype.addM=function(t){if(t=Nt.checkMatrix(t),this.rows!==t.rows||this.columns!==t.columns)throw new RangeError("Matrices dimensions must be equal");for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)+t.get(e,n));return this},At.add=function(t,e){return new Nt(t).add(e)},At.prototype.sub=function(t){return"number"==typeof t?this.subS(t):this.subM(t)},At.prototype.subS=function(t){for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)-t);return this},At.prototype.subM=function(t){if(t=Nt.checkMatrix(t),this.rows!==t.rows||this.columns!==t.columns)throw new RangeError("Matrices dimensions must be equal");for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)-t.get(e,n));return this},At.sub=function(t,e){return new Nt(t).sub(e)},At.prototype.subtract=At.prototype.sub,At.prototype.subtractS=At.prototype.subS,At.prototype.subtractM=At.prototype.subM,At.subtract=At.sub,At.prototype.mul=function(t){return"number"==typeof t?this.mulS(t):this.mulM(t)},At.prototype.mulS=function(t){for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)*t);return this},At.prototype.mulM=function(t){if(t=Nt.checkMatrix(t),this.rows!==t.rows||this.columns!==t.columns)throw new RangeError("Matrices dimensions must be equal");for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)*t.get(e,n));return this},At.mul=function(t,e){return new Nt(t).mul(e)},At.prototype.multiply=At.prototype.mul,At.prototype.multiplyS=At.prototype.mulS,At.prototype.multiplyM=At.prototype.mulM,At.multiply=At.mul,At.prototype.div=function(t){return"number"==typeof t?this.divS(t):this.divM(t)},At.prototype.divS=function(t){for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)/t);return this},At.prototype.divM=function(t){if(t=Nt.checkMatrix(t),this.rows!==t.rows||this.columns!==t.columns)throw new RangeError("Matrices dimensions must be equal");for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)/t.get(e,n));return this},At.div=function(t,e){return new Nt(t).div(e)},At.prototype.divide=At.prototype.div,At.prototype.divideS=At.prototype.divS,At.prototype.divideM=At.prototype.divM,At.divide=At.div,At.prototype.mod=function(t){return"number"==typeof t?this.modS(t):this.modM(t)},At.prototype.modS=function(t){for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)%t);return this},At.prototype.modM=function(t){if(t=Nt.checkMatrix(t),this.rows!==t.rows||this.columns!==t.columns)throw new RangeError("Matrices dimensions must be equal");for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)%t.get(e,n));return this},At.mod=function(t,e){return new Nt(t).mod(e)},At.prototype.modulus=At.prototype.mod,At.prototype.modulusS=At.prototype.modS,At.prototype.modulusM=At.prototype.modM,At.modulus=At.mod,At.prototype.and=function(t){return"number"==typeof t?this.andS(t):this.andM(t)},At.prototype.andS=function(t){for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)&t);return this},At.prototype.andM=function(t){if(t=Nt.checkMatrix(t),this.rows!==t.rows||this.columns!==t.columns)throw new RangeError("Matrices dimensions must be equal");for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)&t.get(e,n));return this},At.and=function(t,e){return new Nt(t).and(e)},At.prototype.or=function(t){return"number"==typeof t?this.orS(t):this.orM(t)},At.prototype.orS=function(t){for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)|t);return this},At.prototype.orM=function(t){if(t=Nt.checkMatrix(t),this.rows!==t.rows||this.columns!==t.columns)throw new RangeError("Matrices dimensions must be equal");for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)|t.get(e,n));return this},At.or=function(t,e){return new Nt(t).or(e)},At.prototype.xor=function(t){return"number"==typeof t?this.xorS(t):this.xorM(t)},At.prototype.xorS=function(t){for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)^t);return this},At.prototype.xorM=function(t){if(t=Nt.checkMatrix(t),this.rows!==t.rows||this.columns!==t.columns)throw new RangeError("Matrices dimensions must be equal");for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)^t.get(e,n));return this},At.xor=function(t,e){return new Nt(t).xor(e)},At.prototype.leftShift=function(t){return"number"==typeof t?this.leftShiftS(t):this.leftShiftM(t)},At.prototype.leftShiftS=function(t){for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)<<t);return this},At.prototype.leftShiftM=function(t){if(t=Nt.checkMatrix(t),this.rows!==t.rows||this.columns!==t.columns)throw new RangeError("Matrices dimensions must be equal");for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)<<t.get(e,n));return this},At.leftShift=function(t,e){return new Nt(t).leftShift(e)},At.prototype.signPropagatingRightShift=function(t){return"number"==typeof t?this.signPropagatingRightShiftS(t):this.signPropagatingRightShiftM(t)},At.prototype.signPropagatingRightShiftS=function(t){for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)>>t);return this},At.prototype.signPropagatingRightShiftM=function(t){if(t=Nt.checkMatrix(t),this.rows!==t.rows||this.columns!==t.columns)throw new RangeError("Matrices dimensions must be equal");for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)>>t.get(e,n));return this},At.signPropagatingRightShift=function(t,e){return new Nt(t).signPropagatingRightShift(e)},At.prototype.rightShift=function(t){return"number"==typeof t?this.rightShiftS(t):this.rightShiftM(t)},At.prototype.rightShiftS=function(t){for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)>>>t);return this},At.prototype.rightShiftM=function(t){if(t=Nt.checkMatrix(t),this.rows!==t.rows||this.columns!==t.columns)throw new RangeError("Matrices dimensions must be equal");for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)>>>t.get(e,n));return this},At.rightShift=function(t,e){return new Nt(t).rightShift(e)},At.prototype.zeroFillRightShift=At.prototype.rightShift,At.prototype.zeroFillRightShiftS=At.prototype.rightShiftS,At.prototype.zeroFillRightShiftM=At.prototype.rightShiftM,At.zeroFillRightShift=At.rightShift,At.prototype.not=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,~this.get(t,e));return this},At.not=function(t){return new Nt(t).not()},At.prototype.abs=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.abs(this.get(t,e)));return this},At.abs=function(t){return new Nt(t).abs()},At.prototype.acos=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.acos(this.get(t,e)));return this},At.acos=function(t){return new Nt(t).acos()},At.prototype.acosh=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.acosh(this.get(t,e)));return this},At.acosh=function(t){return new Nt(t).acosh()},At.prototype.asin=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.asin(this.get(t,e)));return this},At.asin=function(t){return new Nt(t).asin()},At.prototype.asinh=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.asinh(this.get(t,e)));return this},At.asinh=function(t){return new Nt(t).asinh()},At.prototype.atan=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.atan(this.get(t,e)));return this},At.atan=function(t){return new Nt(t).atan()},At.prototype.atanh=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.atanh(this.get(t,e)));return this},At.atanh=function(t){return new Nt(t).atanh()},At.prototype.cbrt=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.cbrt(this.get(t,e)));return this},At.cbrt=function(t){return new Nt(t).cbrt()},At.prototype.ceil=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.ceil(this.get(t,e)));return this},At.ceil=function(t){return new Nt(t).ceil()},At.prototype.clz32=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.clz32(this.get(t,e)));return this},At.clz32=function(t){return new Nt(t).clz32()},At.prototype.cos=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.cos(this.get(t,e)));return this},At.cos=function(t){return new Nt(t).cos()},At.prototype.cosh=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.cosh(this.get(t,e)));return this},At.cosh=function(t){return new Nt(t).cosh()},At.prototype.exp=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.exp(this.get(t,e)));return this},At.exp=function(t){return new Nt(t).exp()},At.prototype.expm1=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.expm1(this.get(t,e)));return this},At.expm1=function(t){return new Nt(t).expm1()},At.prototype.floor=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.floor(this.get(t,e)));return this},At.floor=function(t){return new Nt(t).floor()},At.prototype.fround=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.fround(this.get(t,e)));return this},At.fround=function(t){return new Nt(t).fround()},At.prototype.log=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.log(this.get(t,e)));return this},At.log=function(t){return new Nt(t).log()},At.prototype.log1p=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.log1p(this.get(t,e)));return this},At.log1p=function(t){return new Nt(t).log1p()},At.prototype.log10=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.log10(this.get(t,e)));return this},At.log10=function(t){return new Nt(t).log10()},At.prototype.log2=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.log2(this.get(t,e)));return this},At.log2=function(t){return new Nt(t).log2()},At.prototype.round=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.round(this.get(t,e)));return this},At.round=function(t){return new Nt(t).round()},At.prototype.sign=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.sign(this.get(t,e)));return this},At.sign=function(t){return new Nt(t).sign()},At.prototype.sin=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.sin(this.get(t,e)));return this},At.sin=function(t){return new Nt(t).sin()},At.prototype.sinh=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.sinh(this.get(t,e)));return this},At.sinh=function(t){return new Nt(t).sinh()},At.prototype.sqrt=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.sqrt(this.get(t,e)));return this},At.sqrt=function(t){return new Nt(t).sqrt()},At.prototype.tan=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.tan(this.get(t,e)));return this},At.tan=function(t){return new Nt(t).tan()},At.prototype.tanh=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.tanh(this.get(t,e)));return this},At.tanh=function(t){return new Nt(t).tanh()},At.prototype.trunc=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.trunc(this.get(t,e)));return this},At.trunc=function(t){return new Nt(t).trunc()},At.pow=function(t,e){return new Nt(t).pow(e)},At.prototype.pow=function(t){return"number"==typeof t?this.powS(t):this.powM(t)},At.prototype.powS=function(t){for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,Math.pow(this.get(e,n),t));return this},At.prototype.powM=function(t){if(t=Nt.checkMatrix(t),this.rows!==t.rows||this.columns!==t.columns)throw new RangeError("Matrices dimensions must be equal");for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,Math.pow(this.get(e,n),t.get(e,n)));return this};class qt extends Ct{constructor(t){super(),this.data=t,this.rows=t.length,this.columns=t[0].length}set(t,e,n){return this.data[t][e]=n,this}get(t,e){return this.data[t][e]}}class Rt{constructor(t){let e,n,r,o,i,s,a,u,l,c=(t=qt.checkMatrix(t)).clone(),f=c.rows,h=c.columns,g=new Float64Array(f),d=1;for(e=0;e<f;e++)g[e]=e;for(u=new Float64Array(f),n=0;n<h;n++){for(e=0;e<f;e++)u[e]=c.get(e,n);for(e=0;e<f;e++){for(l=Math.min(e,n),i=0,r=0;r<l;r++)i+=c.get(e,r)*u[r];u[e]-=i,c.set(e,n,u[e])}for(o=n,e=n+1;e<f;e++)Math.abs(u[e])>Math.abs(u[o])&&(o=e);if(o!==n){for(r=0;r<h;r++)s=c.get(o,r),c.set(o,r,c.get(n,r)),c.set(n,r,s);a=g[o],g[o]=g[n],g[n]=a,d=-d}if(n<f&&0!==c.get(n,n))for(e=n+1;e<f;e++)c.set(e,n,c.get(e,n)/c.get(n,n))}this.LU=c,this.pivotVector=g,this.pivotSign=d}isSingular(){let t=this.LU,e=t.columns;for(let n=0;n<e;n++)if(0===t.get(n,n))return!0;return!1}solve(t){t=Et.checkMatrix(t);let e=this.LU;if(e.rows!==t.rows)throw new Error("Invalid matrix dimensions");if(this.isSingular())throw new Error("LU matrix is singular");let n,r,o,i=t.columns,s=t.subMatrixRow(this.pivotVector,0,i-1),a=e.columns;for(o=0;o<a;o++)for(n=o+1;n<a;n++)for(r=0;r<i;r++)s.set(n,r,s.get(n,r)-s.get(o,r)*e.get(n,o));for(o=a-1;o>=0;o--){for(r=0;r<i;r++)s.set(o,r,s.get(o,r)/e.get(o,o));for(n=0;n<o;n++)for(r=0;r<i;r++)s.set(n,r,s.get(n,r)-s.get(o,r)*e.get(n,o))}return s}get determinant(){let t=this.LU;if(!t.isSquare())throw new Error("Matrix must be square");let e=this.pivotSign,n=t.columns;for(let r=0;r<n;r++)e*=t.get(r,r);return e}get lowerTriangularMatrix(){let t=this.LU,e=t.rows,n=t.columns,r=new Et(e,n);for(let o=0;o<e;o++)for(let e=0;e<n;e++)o>e?r.set(o,e,t.get(o,e)):o===e?r.set(o,e,1):r.set(o,e,0);return r}get upperTriangularMatrix(){let t=this.LU,e=t.rows,n=t.columns,r=new Et(e,n);for(let o=0;o<e;o++)for(let e=0;e<n;e++)o<=e?r.set(o,e,t.get(o,e)):r.set(o,e,0);return r}get pivotPermutationVector(){return Array.from(this.pivotVector)}}function $t(t,e){let n=0;return Math.abs(t)>Math.abs(e)?(n=e/t,Math.abs(t)*Math.sqrt(1+n*n)):0!==e?(n=t/e,Math.abs(e)*Math.sqrt(1+n*n)):0}class Dt{constructor(t){let e,n,r,o,i=(t=qt.checkMatrix(t)).clone(),s=t.rows,a=t.columns,u=new Float64Array(a);for(r=0;r<a;r++){let t=0;for(e=r;e<s;e++)t=$t(t,i.get(e,r));if(0!==t){for(i.get(r,r)<0&&(t=-t),e=r;e<s;e++)i.set(e,r,i.get(e,r)/t);for(i.set(r,r,i.get(r,r)+1),n=r+1;n<a;n++){for(o=0,e=r;e<s;e++)o+=i.get(e,r)*i.get(e,n);for(o=-o/i.get(r,r),e=r;e<s;e++)i.set(e,n,i.get(e,n)+o*i.get(e,r))}}u[r]=-t}this.QR=i,this.Rdiag=u}solve(t){t=Et.checkMatrix(t);let e=this.QR,n=e.rows;if(t.rows!==n)throw new Error("Matrix row dimensions must agree");if(!this.isFullRank())throw new Error("Matrix is rank deficient");let r,o,i,s,a=t.columns,u=t.clone(),l=e.columns;for(i=0;i<l;i++)for(o=0;o<a;o++){for(s=0,r=i;r<n;r++)s+=e.get(r,i)*u.get(r,o);for(s=-s/e.get(i,i),r=i;r<n;r++)u.set(r,o,u.get(r,o)+s*e.get(r,i))}for(i=l-1;i>=0;i--){for(o=0;o<a;o++)u.set(i,o,u.get(i,o)/this.Rdiag[i]);for(r=0;r<i;r++)for(o=0;o<a;o++)u.set(r,o,u.get(r,o)-u.get(i,o)*e.get(r,i))}return u.subMatrix(0,l-1,0,a-1)}isFullRank(){let t=this.QR.columns;for(let e=0;e<t;e++)if(0===this.Rdiag[e])return!1;return!0}get upperTriangularMatrix(){let t,e,n=this.QR,r=n.columns,o=new Et(r,r);for(t=0;t<r;t++)for(e=0;e<r;e++)t<e?o.set(t,e,n.get(t,e)):t===e?o.set(t,e,this.Rdiag[t]):o.set(t,e,0);return o}get orthogonalMatrix(){let t,e,n,r,o=this.QR,i=o.rows,s=o.columns,a=new Et(i,s);for(n=s-1;n>=0;n--){for(t=0;t<i;t++)a.set(t,n,0);for(a.set(n,n,1),e=n;e<s;e++)if(0!==o.get(n,n)){for(r=0,t=n;t<i;t++)r+=o.get(t,n)*a.get(t,e);for(r=-r/o.get(n,n),t=n;t<i;t++)a.set(t,e,a.get(t,e)+r*o.get(t,n))}}return a}}class It{constructor(t,e={}){let n=(t=qt.checkMatrix(t)).rows,r=t.columns;const{computeLeftSingularVectors:o=!0,computeRightSingularVectors:i=!0,autoTranspose:s=!1}=e;let a,u=Boolean(o),l=Boolean(i),c=!1;if(n<r)if(s){a=t.transpose(),n=a.rows,r=a.columns,c=!0;let e=u;u=l,l=e}else a=t.clone(),console.warn("Computing SVD on a matrix with more columns than rows. Consider enabling autoTranspose");else a=t.clone();let f=Math.min(n,r),h=Math.min(n+1,r),g=new Float64Array(h),d=new Et(n,f),p=new Et(r,r),m=new Float64Array(r),w=new Float64Array(n),v=new Float64Array(h);for(let t=0;t<h;t++)v[t]=t;let y=Math.min(n-1,r),b=Math.max(0,Math.min(r-2,n)),M=Math.max(y,b);for(let t=0;t<M;t++){if(t<y){g[t]=0;for(let e=t;e<n;e++)g[t]=$t(g[t],a.get(e,t));if(0!==g[t]){a.get(t,t)<0&&(g[t]=-g[t]);for(let e=t;e<n;e++)a.set(e,t,a.get(e,t)/g[t]);a.set(t,t,a.get(t,t)+1)}g[t]=-g[t]}for(let e=t+1;e<r;e++){if(t<y&&0!==g[t]){let r=0;for(let o=t;o<n;o++)r+=a.get(o,t)*a.get(o,e);r=-r/a.get(t,t);for(let o=t;o<n;o++)a.set(o,e,a.get(o,e)+r*a.get(o,t))}m[e]=a.get(t,e)}if(u&&t<y)for(let e=t;e<n;e++)d.set(e,t,a.get(e,t));if(t<b){m[t]=0;for(let e=t+1;e<r;e++)m[t]=$t(m[t],m[e]);if(0!==m[t]){m[t+1]<0&&(m[t]=0-m[t]);for(let e=t+1;e<r;e++)m[e]/=m[t];m[t+1]+=1}if(m[t]=-m[t],t+1<n&&0!==m[t]){for(let e=t+1;e<n;e++)w[e]=0;for(let e=t+1;e<n;e++)for(let n=t+1;n<r;n++)w[e]+=m[n]*a.get(e,n);for(let e=t+1;e<r;e++){let r=-m[e]/m[t+1];for(let o=t+1;o<n;o++)a.set(o,e,a.get(o,e)+r*w[o])}}if(l)for(let e=t+1;e<r;e++)p.set(e,t,m[e])}}let _=Math.min(r,n+1);if(y<r&&(g[y]=a.get(y,y)),n<_&&(g[_-1]=0),b+1<_&&(m[b]=a.get(b,_-1)),m[_-1]=0,u){for(let t=y;t<f;t++){for(let e=0;e<n;e++)d.set(e,t,0);d.set(t,t,1)}for(let t=y-1;t>=0;t--)if(0!==g[t]){for(let e=t+1;e<f;e++){let r=0;for(let o=t;o<n;o++)r+=d.get(o,t)*d.get(o,e);r=-r/d.get(t,t);for(let o=t;o<n;o++)d.set(o,e,d.get(o,e)+r*d.get(o,t))}for(let e=t;e<n;e++)d.set(e,t,-d.get(e,t));d.set(t,t,1+d.get(t,t));for(let e=0;e<t-1;e++)d.set(e,t,0)}else{for(let e=0;e<n;e++)d.set(e,t,0);d.set(t,t,1)}}if(l)for(let t=r-1;t>=0;t--){if(t<b&&0!==m[t])for(let e=t+1;e<r;e++){let n=0;for(let o=t+1;o<r;o++)n+=p.get(o,t)*p.get(o,e);n=-n/p.get(t+1,t);for(let o=t+1;o<r;o++)p.set(o,e,p.get(o,e)+n*p.get(o,t))}for(let e=0;e<r;e++)p.set(e,t,0);p.set(t,t,1)}let x=_-1,k=0,j=Number.EPSILON;for(;_>0;){let t,e;for(t=_-2;t>=-1&&-1!==t;t--){const e=Number.MIN_VALUE+j*Math.abs(g[t]+Math.abs(g[t+1]));if(Math.abs(m[t])<=e||Number.isNaN(m[t])){m[t]=0;break}}if(t===_-2)e=4;else{let n;for(n=_-1;n>=t&&n!==t;n--){let e=(n!==_?Math.abs(m[n]):0)+(n!==t+1?Math.abs(m[n-1]):0);if(Math.abs(g[n])<=j*e){g[n]=0;break}}n===t?e=3:n===_-1?e=1:(e=2,t=n)}switch(t++,e){case 1:{let e=m[_-2];m[_-2]=0;for(let n=_-2;n>=t;n--){let o=$t(g[n],e),i=g[n]/o,s=e/o;if(g[n]=o,n!==t&&(e=-s*m[n-1],m[n-1]=i*m[n-1]),l)for(let t=0;t<r;t++)o=i*p.get(t,n)+s*p.get(t,_-1),p.set(t,_-1,-s*p.get(t,n)+i*p.get(t,_-1)),p.set(t,n,o)}break}case 2:{let e=m[t-1];m[t-1]=0;for(let r=t;r<_;r++){let o=$t(g[r],e),i=g[r]/o,s=e/o;if(g[r]=o,e=-s*m[r],m[r]=i*m[r],u)for(let e=0;e<n;e++)o=i*d.get(e,r)+s*d.get(e,t-1),d.set(e,t-1,-s*d.get(e,r)+i*d.get(e,t-1)),d.set(e,r,o)}break}case 3:{const e=Math.max(Math.abs(g[_-1]),Math.abs(g[_-2]),Math.abs(m[_-2]),Math.abs(g[t]),Math.abs(m[t])),o=g[_-1]/e,i=g[_-2]/e,s=m[_-2]/e,a=g[t]/e,c=m[t]/e,f=((i+o)*(i-o)+s*s)/2,h=o*s*(o*s);let w=0;0===f&&0===h||(w=f<0?0-Math.sqrt(f*f+h):Math.sqrt(f*f+h),w=h/(f+w));let v=(a+o)*(a-o)+w,y=a*c;for(let e=t;e<_-1;e++){let o=$t(v,y);0===o&&(o=Number.MIN_VALUE);let i=v/o,s=y/o;if(e!==t&&(m[e-1]=o),v=i*g[e]+s*m[e],m[e]=i*m[e]-s*g[e],y=s*g[e+1],g[e+1]=i*g[e+1],l)for(let t=0;t<r;t++)o=i*p.get(t,e)+s*p.get(t,e+1),p.set(t,e+1,-s*p.get(t,e)+i*p.get(t,e+1)),p.set(t,e,o);if(o=$t(v,y),0===o&&(o=Number.MIN_VALUE),i=v/o,s=y/o,g[e]=o,v=i*m[e]+s*g[e+1],g[e+1]=-s*m[e]+i*g[e+1],y=s*m[e+1],m[e+1]=i*m[e+1],u&&e<n-1)for(let t=0;t<n;t++)o=i*d.get(t,e)+s*d.get(t,e+1),d.set(t,e+1,-s*d.get(t,e)+i*d.get(t,e+1)),d.set(t,e,o)}m[_-2]=v,k+=1;break}case 4:if(g[t]<=0&&(g[t]=g[t]<0?-g[t]:0,l))for(let e=0;e<=x;e++)p.set(e,t,-p.get(e,t));for(;t<x&&!(g[t]>=g[t+1]);){let e=g[t];if(g[t]=g[t+1],g[t+1]=e,l&&t<r-1)for(let n=0;n<r;n++)e=p.get(n,t+1),p.set(n,t+1,p.get(n,t)),p.set(n,t,e);if(u&&t<n-1)for(let r=0;r<n;r++)e=d.get(r,t+1),d.set(r,t+1,d.get(r,t)),d.set(r,t,e);t++}k=0,_--}}if(c){let t=p;p=d,d=t}this.m=n,this.n=r,this.s=g,this.U=d,this.V=p}solve(t){let e=t,n=this.threshold,r=this.s.length,o=Et.zeros(r,r);for(let t=0;t<r;t++)Math.abs(this.s[t])<=n?o.set(t,t,0):o.set(t,t,1/this.s[t]);let i=this.U,s=this.rightSingularVectors,a=s.mmul(o),u=s.rows,l=i.rows,c=Et.zeros(u,l);for(let t=0;t<u;t++)for(let e=0;e<l;e++){let n=0;for(let o=0;o<r;o++)n+=a.get(t,o)*i.get(e,o);c.set(t,e,n)}return c.mmul(e)}solveForDiagonal(t){return this.solve(Et.diag(t))}inverse(){let t=this.V,e=this.threshold,n=t.rows,r=t.columns,o=new Et(n,this.s.length);for(let i=0;i<n;i++)for(let n=0;n<r;n++)Math.abs(this.s[n])>e&&o.set(i,n,t.get(i,n)/this.s[n]);let i=this.U,s=i.rows,a=i.columns,u=new Et(n,s);for(let t=0;t<n;t++)for(let e=0;e<s;e++){let n=0;for(let r=0;r<a;r++)n+=o.get(t,r)*i.get(e,r);u.set(t,e,n)}return u}get condition(){return this.s[0]/this.s[Math.min(this.m,this.n)-1]}get norm2(){return this.s[0]}get rank(){let t=Math.max(this.m,this.n)*this.s[0]*Number.EPSILON,e=0,n=this.s;for(let r=0,o=n.length;r<o;r++)n[r]>t&&e++;return e}get diagonal(){return Array.from(this.s)}get threshold(){return Number.EPSILON/2*Math.max(this.m,this.n)*this.s[0]}get leftSingularVectors(){return this.U}get rightSingularVectors(){return this.V}get diagonalMatrix(){return Et.diag(this.s)}}function Lt(t,e=!1){return t=qt.checkMatrix(t),e?new It(t).inverse():function(t,e,n=!1){return t=qt.checkMatrix(t),e=qt.checkMatrix(e),n?new It(t).solve(e):t.isSquare()?new Rt(t).solve(e):new Dt(t).solve(e)}(t,Et.eye(t.rows))}class Ft{constructor(t,e={}){const{assumeSymmetric:n=!1}=e;if(!(t=qt.checkMatrix(t)).isSquare())throw new Error("Matrix is not a square matrix");let r,o,i=t.columns,s=new Et(i,i),a=new Float64Array(i),u=new Float64Array(i),l=t,c=!1;if(c=!!n||t.isSymmetric(),c){for(r=0;r<i;r++)for(o=0;o<i;o++)s.set(r,o,l.get(r,o));!function(t,e,n,r){let o,i,s,a,u,l,c,f;for(u=0;u<t;u++)n[u]=r.get(t-1,u);for(a=t-1;a>0;a--){for(f=0,s=0,l=0;l<a;l++)f+=Math.abs(n[l]);if(0===f)for(e[a]=n[a-1],u=0;u<a;u++)n[u]=r.get(a-1,u),r.set(a,u,0),r.set(u,a,0);else{for(l=0;l<a;l++)n[l]/=f,s+=n[l]*n[l];for(o=n[a-1],i=Math.sqrt(s),o>0&&(i=-i),e[a]=f*i,s-=o*i,n[a-1]=o-i,u=0;u<a;u++)e[u]=0;for(u=0;u<a;u++){for(o=n[u],r.set(u,a,o),i=e[u]+r.get(u,u)*o,l=u+1;l<=a-1;l++)i+=r.get(l,u)*n[l],e[l]+=r.get(l,u)*o;e[u]=i}for(o=0,u=0;u<a;u++)e[u]/=s,o+=e[u]*n[u];for(c=o/(s+s),u=0;u<a;u++)e[u]-=c*n[u];for(u=0;u<a;u++){for(o=n[u],i=e[u],l=u;l<=a-1;l++)r.set(l,u,r.get(l,u)-(o*e[l]+i*n[l]));n[u]=r.get(a-1,u),r.set(a,u,0)}}n[a]=s}for(a=0;a<t-1;a++){if(r.set(t-1,a,r.get(a,a)),r.set(a,a,1),s=n[a+1],0!==s){for(l=0;l<=a;l++)n[l]=r.get(l,a+1)/s;for(u=0;u<=a;u++){for(i=0,l=0;l<=a;l++)i+=r.get(l,a+1)*r.get(l,u);for(l=0;l<=a;l++)r.set(l,u,r.get(l,u)-i*n[l])}}for(l=0;l<=a;l++)r.set(l,a+1,0)}for(u=0;u<t;u++)n[u]=r.get(t-1,u),r.set(t-1,u,0);r.set(t-1,t-1,1),e[0]=0}(i,u,a,s),function(t,e,n,r){let o,i,s,a,u,l,c,f,h,g,d,p,m,w,v,y,b;for(s=1;s<t;s++)e[s-1]=e[s];e[t-1]=0;let M=0,_=0,x=Number.EPSILON;for(l=0;l<t;l++){for(_=Math.max(_,Math.abs(n[l])+Math.abs(e[l])),c=l;c<t&&!(Math.abs(e[c])<=x*_);)c++;if(c>l){b=0;do{for(b+=1,o=n[l],f=(n[l+1]-o)/(2*e[l]),h=$t(f,1),f<0&&(h=-h),n[l]=e[l]/(f+h),n[l+1]=e[l]*(f+h),g=n[l+1],i=o-n[l],s=l+2;s<t;s++)n[s]-=i;for(M+=i,f=n[c],d=1,p=d,m=d,w=e[l+1],v=0,y=0,s=c-1;s>=l;s--)for(m=p,p=d,y=v,o=d*e[s],i=d*f,h=$t(f,e[s]),e[s+1]=v*h,v=e[s]/h,d=f/h,f=d*n[s]-v*o,n[s+1]=i+v*(d*o+v*n[s]),u=0;u<t;u++)i=r.get(u,s+1),r.set(u,s+1,v*r.get(u,s)+d*i),r.set(u,s,d*r.get(u,s)-v*i);f=-v*y*m*w*e[l]/g,e[l]=v*f,n[l]=d*f}while(Math.abs(e[l])>x*_)}n[l]=n[l]+M,e[l]=0}for(s=0;s<t-1;s++){for(u=s,f=n[s],a=s+1;a<t;a++)n[a]<f&&(u=a,f=n[a]);if(u!==s)for(n[u]=n[s],n[s]=f,a=0;a<t;a++)f=r.get(a,s),r.set(a,s,r.get(a,u)),r.set(a,u,f)}}(i,u,a,s)}else{let t=new Et(i,i),e=new Float64Array(i);for(o=0;o<i;o++)for(r=0;r<i;r++)t.set(r,o,l.get(r,o));!function(t,e,n,r){let o,i,s,a,u,l,c,f=t-1;for(l=1;l<=f-1;l++){for(c=0,a=l;a<=f;a++)c+=Math.abs(e.get(a,l-1));if(0!==c){for(s=0,a=f;a>=l;a--)n[a]=e.get(a,l-1)/c,s+=n[a]*n[a];for(i=Math.sqrt(s),n[l]>0&&(i=-i),s-=n[l]*i,n[l]=n[l]-i,u=l;u<t;u++){for(o=0,a=f;a>=l;a--)o+=n[a]*e.get(a,u);for(o/=s,a=l;a<=f;a++)e.set(a,u,e.get(a,u)-o*n[a])}for(a=0;a<=f;a++){for(o=0,u=f;u>=l;u--)o+=n[u]*e.get(a,u);for(o/=s,u=l;u<=f;u++)e.set(a,u,e.get(a,u)-o*n[u])}n[l]=c*n[l],e.set(l,l-1,c*i)}}for(a=0;a<t;a++)for(u=0;u<t;u++)r.set(a,u,a===u?1:0);for(l=f-1;l>=1;l--)if(0!==e.get(l,l-1)){for(a=l+1;a<=f;a++)n[a]=e.get(a,l-1);for(u=l;u<=f;u++){for(i=0,a=l;a<=f;a++)i+=n[a]*r.get(a,u);for(i=i/n[l]/e.get(l,l-1),a=l;a<=f;a++)r.set(a,u,r.get(a,u)+i*n[a])}}}(i,t,e,s),function(t,e,n,r,o){let i,s,a,u,l,c,f,h,g,d,p,m,w,v,y,b=t-1,M=t-1,_=Number.EPSILON,x=0,k=0,j=0,S=0,T=0,C=0,P=0,E=0;for(i=0;i<t;i++)for((i<0||i>M)&&(n[i]=o.get(i,i),e[i]=0),s=Math.max(i-1,0);s<t;s++)k+=Math.abs(o.get(i,s));for(;b>=0;){for(u=b;u>0&&(C=Math.abs(o.get(u-1,u-1))+Math.abs(o.get(u,u)),0===C&&(C=k),!(Math.abs(o.get(u,u-1))<_*C));)u--;if(u===b)o.set(b,b,o.get(b,b)+x),n[b]=o.get(b,b),e[b]=0,b--,E=0;else if(u===b-1){if(f=o.get(b,b-1)*o.get(b-1,b),j=(o.get(b-1,b-1)-o.get(b,b))/2,S=j*j+f,P=Math.sqrt(Math.abs(S)),o.set(b,b,o.get(b,b)+x),o.set(b-1,b-1,o.get(b-1,b-1)+x),h=o.get(b,b),S>=0){for(P=j>=0?j+P:j-P,n[b-1]=h+P,n[b]=n[b-1],0!==P&&(n[b]=h-f/P),e[b-1]=0,e[b]=0,h=o.get(b,b-1),C=Math.abs(h)+Math.abs(P),j=h/C,S=P/C,T=Math.sqrt(j*j+S*S),j/=T,S/=T,s=b-1;s<t;s++)P=o.get(b-1,s),o.set(b-1,s,S*P+j*o.get(b,s)),o.set(b,s,S*o.get(b,s)-j*P);for(i=0;i<=b;i++)P=o.get(i,b-1),o.set(i,b-1,S*P+j*o.get(i,b)),o.set(i,b,S*o.get(i,b)-j*P);for(i=0;i<=M;i++)P=r.get(i,b-1),r.set(i,b-1,S*P+j*r.get(i,b)),r.set(i,b,S*r.get(i,b)-j*P)}else n[b-1]=h+j,n[b]=h+j,e[b-1]=P,e[b]=-P;b-=2,E=0}else{if(h=o.get(b,b),g=0,f=0,u<b&&(g=o.get(b-1,b-1),f=o.get(b,b-1)*o.get(b-1,b)),10===E){for(x+=h,i=0;i<=b;i++)o.set(i,i,o.get(i,i)-h);C=Math.abs(o.get(b,b-1))+Math.abs(o.get(b-1,b-2)),h=g=.75*C,f=-.4375*C*C}if(30===E&&(C=(g-h)/2,C=C*C+f,C>0)){for(C=Math.sqrt(C),g<h&&(C=-C),C=h-f/((g-h)/2+C),i=0;i<=b;i++)o.set(i,i,o.get(i,i)-C);x+=C,h=g=f=.964}for(E+=1,l=b-2;l>=u&&(P=o.get(l,l),T=h-P,C=g-P,j=(T*C-f)/o.get(l+1,l)+o.get(l,l+1),S=o.get(l+1,l+1)-P-T-C,T=o.get(l+2,l+1),C=Math.abs(j)+Math.abs(S)+Math.abs(T),j/=C,S/=C,T/=C,l!==u)&&!(Math.abs(o.get(l,l-1))*(Math.abs(S)+Math.abs(T))<_*(Math.abs(j)*(Math.abs(o.get(l-1,l-1))+Math.abs(P)+Math.abs(o.get(l+1,l+1)))));)l--;for(i=l+2;i<=b;i++)o.set(i,i-2,0),i>l+2&&o.set(i,i-3,0);for(a=l;a<=b-1&&(v=a!==b-1,a!==l&&(j=o.get(a,a-1),S=o.get(a+1,a-1),T=v?o.get(a+2,a-1):0,h=Math.abs(j)+Math.abs(S)+Math.abs(T),0!==h&&(j/=h,S/=h,T/=h)),0!==h);a++)if(C=Math.sqrt(j*j+S*S+T*T),j<0&&(C=-C),0!==C){for(a!==l?o.set(a,a-1,-C*h):u!==l&&o.set(a,a-1,-o.get(a,a-1)),j+=C,h=j/C,g=S/C,P=T/C,S/=j,T/=j,s=a;s<t;s++)j=o.get(a,s)+S*o.get(a+1,s),v&&(j+=T*o.get(a+2,s),o.set(a+2,s,o.get(a+2,s)-j*P)),o.set(a,s,o.get(a,s)-j*h),o.set(a+1,s,o.get(a+1,s)-j*g);for(i=0;i<=Math.min(b,a+3);i++)j=h*o.get(i,a)+g*o.get(i,a+1),v&&(j+=P*o.get(i,a+2),o.set(i,a+2,o.get(i,a+2)-j*T)),o.set(i,a,o.get(i,a)-j),o.set(i,a+1,o.get(i,a+1)-j*S);for(i=0;i<=M;i++)j=h*r.get(i,a)+g*r.get(i,a+1),v&&(j+=P*r.get(i,a+2),r.set(i,a+2,r.get(i,a+2)-j*T)),r.set(i,a,r.get(i,a)-j),r.set(i,a+1,r.get(i,a+1)-j*S)}}}if(0===k)return;for(b=t-1;b>=0;b--)if(j=n[b],S=e[b],0===S)for(u=b,o.set(b,b,1),i=b-1;i>=0;i--){for(f=o.get(i,i)-j,T=0,s=u;s<=b;s++)T+=o.get(i,s)*o.get(s,b);if(e[i]<0)P=f,C=T;else if(u=i,0===e[i]?o.set(i,b,0!==f?-T/f:-T/(_*k)):(h=o.get(i,i+1),g=o.get(i+1,i),S=(n[i]-j)*(n[i]-j)+e[i]*e[i],c=(h*C-P*T)/S,o.set(i,b,c),o.set(i+1,b,Math.abs(h)>Math.abs(P)?(-T-f*c)/h:(-C-g*c)/P)),c=Math.abs(o.get(i,b)),_*c*c>1)for(s=i;s<=b;s++)o.set(s,b,o.get(s,b)/c)}else if(S<0)for(u=b-1,Math.abs(o.get(b,b-1))>Math.abs(o.get(b-1,b))?(o.set(b-1,b-1,S/o.get(b,b-1)),o.set(b-1,b,-(o.get(b,b)-j)/o.get(b,b-1))):(y=Ot(0,-o.get(b-1,b),o.get(b-1,b-1)-j,S),o.set(b-1,b-1,y[0]),o.set(b-1,b,y[1])),o.set(b,b-1,0),o.set(b,b,1),i=b-2;i>=0;i--){for(d=0,p=0,s=u;s<=b;s++)d+=o.get(i,s)*o.get(s,b-1),p+=o.get(i,s)*o.get(s,b);if(f=o.get(i,i)-j,e[i]<0)P=f,T=d,C=p;else if(u=i,0===e[i]?(y=Ot(-d,-p,f,S),o.set(i,b-1,y[0]),o.set(i,b,y[1])):(h=o.get(i,i+1),g=o.get(i+1,i),m=(n[i]-j)*(n[i]-j)+e[i]*e[i]-S*S,w=2*(n[i]-j)*S,0===m&&0===w&&(m=_*k*(Math.abs(f)+Math.abs(S)+Math.abs(h)+Math.abs(g)+Math.abs(P))),y=Ot(h*T-P*d+S*p,h*C-P*p-S*d,m,w),o.set(i,b-1,y[0]),o.set(i,b,y[1]),Math.abs(h)>Math.abs(P)+Math.abs(S)?(o.set(i+1,b-1,(-d-f*o.get(i,b-1)+S*o.get(i,b))/h),o.set(i+1,b,(-p-f*o.get(i,b)-S*o.get(i,b-1))/h)):(y=Ot(-T-g*o.get(i,b-1),-C-g*o.get(i,b),P,S),o.set(i+1,b-1,y[0]),o.set(i+1,b,y[1]))),c=Math.max(Math.abs(o.get(i,b-1)),Math.abs(o.get(i,b))),_*c*c>1)for(s=i;s<=b;s++)o.set(s,b-1,o.get(s,b-1)/c),o.set(s,b,o.get(s,b)/c)}for(i=0;i<t;i++)if(i<0||i>M)for(s=i;s<t;s++)r.set(i,s,o.get(i,s));for(s=t-1;s>=0;s--)for(i=0;i<=M;i++){for(P=0,a=0;a<=Math.min(s,M);a++)P+=r.get(i,a)*o.get(a,s);r.set(i,s,P)}}(i,u,a,s,t)}this.n=i,this.e=u,this.d=a,this.V=s}get realEigenvalues(){return Array.from(this.d)}get imaginaryEigenvalues(){return Array.from(this.e)}get eigenvectorMatrix(){return this.V}get diagonalMatrix(){let t,e,n=this.n,r=this.e,o=this.d,i=new Et(n,n);for(t=0;t<n;t++){for(e=0;e<n;e++)i.set(t,e,0);i.set(t,t,o[t]),r[t]>0?i.set(t,t+1,r[t]):r[t]<0&&i.set(t,t-1,r[t])}return i}}function Ot(t,e,n,r){let o,i;return Math.abs(n)>Math.abs(r)?(o=r/n,i=n+o*r,[(t+o*e)/i,(e-o*t)/i]):(o=n/r,i=r+o*n,[(o*t+e)/i,(o*e-t)/i])}function Ut(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var zt=function(){function t(e,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),e instanceof Et&&n instanceof Et?(this.eta=e,this.lam=n):(this.eta=new Et([e]).transpose(),this.lam=new Et(n))}var e,n,r;return e=t,(n=[{key:"getCov",value:function(){return Lt(this.lam)}},{key:"getMean",value:function(){return this.getCov().mmul(this.eta)}},{key:"product",value:function(t){this.eta.add(t.eta),this.lam.add(t.lam)}},{key:"getCovEllipse",value:function(){var t=this.getCov(),e=new Ft(t),n=e.realEigenvalues,r=e.eigenvectorMatrix;return[n,Math.atan(r.get(1,0)/r.get(0,0))]}}])&&Ut(e.prototype,n),r&&Ut(e,r),t}();function Ht(t){var e=new Ft(t),n=e.realEigenvalues,r=e.eigenvectorMatrix;return[n,Math.atan(r.get(1,0)/r.get(0,0))]}class Vt extends Ct{constructor(t,e,n){super(),this.matrix=t,this.rows=e,this.columns=n}}class Bt extends Vt{constructor(t,e,n,r,o){kt(t,e,n,r,o),super(t,n-e+1,o-r+1),this.startRow=e,this.startColumn=r}set(t,e,n){return this.matrix.set(this.startRow+t,this.startColumn+e,n),this}get(t,e){return this.matrix.get(this.startRow+t,this.startColumn+e)}}function Yt(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function Gt(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function Xt(t,e,n){return e&&Gt(t.prototype,e),n&&Gt(t,n),t}var Wt=function(){function t(){Yt(this,t),this.pose_nodes=[],this.lmk_nodes=[],this.factors=[]}return Xt(t,[{key:"update_beliefs",value:function(){for(var t=0;t<this.pose_nodes.length;t++)this.pose_nodes[t].update_belief();for(t=0;t<this.lmk_nodes.length;t++)this.lmk_nodes[t].update_belief()}},{key:"send_messages",value:function(){for(var t=0;t<this.factors.length;t++)this.factors[t].send_mess()}},{key:"sync_iter",value:function(){this.send_messages(),this.update_beliefs()}},{key:"energy",value:function(){for(var t=0;t<this.factors.length;t++)this.factors[t].energy()}},{key:"relinearise",value:function(){for(var t=0;t<this.factors.length;t++)this.factors[t].compute_factor()}},{key:"computeMAP",value:function(t,e){for(var n=0,r=0;r<this.pose_nodes.length;r++)n+=this.pose_nodes[r].dofs;for(r=0;r<this.lmk_nodes.length;r++)n+=this.lmk_nodes[r].dofs;var o=Et.zeros(n,1),i=Et.zeros(n,n),s=2*this.lmk_nodes.length;for(r=0;r<this.pose_nodes.length;r++)new Bt(o,s+2*r,s+2*(r+1)-1,0,0).add(this.pose_nodes[r].prior.eta),new Bt(i,s+2*r,s+2*(r+1)-1,s+2*r,s+2*(r+1)-1).add(this.pose_nodes[r].prior.lam);for(r=0;r<this.lmk_nodes.length;r++)new Bt(o,2*r,2*(r+1)-1,0,0).add(this.lmk_nodes[r].prior.eta),new Bt(i,2*r,2*(r+1)-1,2*r,2*(r+1)-1).add(this.lmk_nodes[r].prior.lam);for(r=0;r<this.factors.length;r++)if(this.factors[r].adj_var_ids[1]<t){var a=new Bt(this.factors[r].factor.eta,0,1,0,0),u=new Bt(this.factors[r].factor.eta,2,3,0,0),l=new Bt(this.factors[r].factor.lam,0,1,0,1),c=new Bt(this.factors[r].factor.lam,2,3,2,3),f=new Bt(this.factors[r].factor.lam,0,1,2,3),h=new Bt(this.factors[r].factor.lam,2,3,0,1),g=this.lmk_nodes.length+this.factors[r].adj_var_ids[0]-t,d=e[this.factors[r].adj_var_ids[1]];new Bt(o,2*g,2*(g+1)-1,0,0).add(a),new Bt(o,2*d,2*(d+1)-1,0,0).add(u),new Bt(i,2*g,2*(g+1)-1,2*g,2*(g+1)-1).add(l),new Bt(i,2*d,2*(d+1)-1,2*d,2*(d+1)-1).add(c),new Bt(i,2*g,2*(g+1)-1,2*d,2*(d+1)-1).add(f),new Bt(i,2*d,2*(d+1)-1,2*g,2*(g+1)-1).add(h)}else{var p=new Et(new Bt(this.factors[r].factor.eta,0,1,0,0)),m=new Et(new Bt(this.factors[r].factor.eta,2,3,0,0)),w=new Et(new Bt(this.factors[r].factor.lam,0,1,0,1)),v=new Et(new Bt(this.factors[r].factor.lam,2,3,2,3)),y=new Et(new Bt(this.factors[r].factor.lam,0,1,2,3)),b=new Et(new Bt(this.factors[r].factor.lam,2,3,0,1)),M=this.lmk_nodes.length+this.factors[r].adj_var_ids[0]-t,_=this.lmk_nodes.length+this.factors[r].adj_var_ids[1]-t;new Bt(o,2*M,2*(M+1)-1,0,0).add(p),new Bt(o,2*_,2*(_+1)-1,0,0).add(m),new Bt(i,2*M,2*(M+1)-1,2*M,2*(M+1)-1).add(w),new Bt(i,2*_,2*(_+1)-1,2*_,2*(_+1)-1).add(v),new Bt(i,2*M,2*(M+1)-1,2*_,2*(_+1)-1).add(y),new Bt(i,2*_,2*(_+1)-1,2*M,2*(M+1)-1).add(b)}var x=Lt(i);return[x.mmul(o),x]}},{key:"compare_to_MAP",value:function(t,e){for(var n=[],r=0;r<this.lmk_nodes.length;r++)n.push(this.lmk_nodes[r].belief.getMean().get(0,0)),n.push(this.lmk_nodes[r].belief.getMean().get(1,0));for(r=0;r<this.pose_nodes.length;r++)n.push(this.pose_nodes[r].belief.getMean().get(0,0)),n.push(this.pose_nodes[r].belief.getMean().get(1,0));var o=new Et([n]);return this.computeMAP(t,e)[0].sub(o.transpose()).norm()}}]),t}(),Zt=function(){function t(e,n){Yt(this,t),this.dofs=e,this.var_id=n,this.belief=new zt(Et.zeros(e,1),Et.zeros(e,e)),this.prior=new zt(Et.zeros(e,1),Et.zeros(e,e)),this.adj_factors=[]}return Xt(t,[{key:"update_belief",value:function(){this.belief.eta=this.prior.eta.clone(),this.belief.lam=this.prior.lam.clone();for(var t=0;t<this.adj_factors.length;t++){var e=this.adj_factors[t].adj_var_ids.indexOf(this.var_id);this.belief.product(this.adj_factors[t].messages[e])}for(t=0;t<this.adj_factors.length;t++){e=this.adj_factors[t].adj_var_ids.indexOf(this.var_id);this.adj_factors[t].adj_beliefs[e]=this.belief}}}]),t}(),Qt=function(){function t(e,n,r,o){Yt(this,t),this.dofs=e,this.adj_var_ids=n,this.adj_beliefs=[],this.adj_var_dofs=[],this.meas,this.lambda,this.factor=new zt(Et.zeros(e,1),Et.zeros(e,e)),this.linpoint,this.jacFn=o,this.measFn=r,this.messages=[],this.eta_damping=0}return Xt(t,[{key:"compute_factor",value:function(){var t=this.adj_beliefs[0].getMean(),e=this.adj_beliefs[1].getMean();this.linpoint=new Et([[t.get(0,0)],[t.get(1,0)],[e.get(0,0)],[e.get(1,0)]]);var n=this.jacFn(t,e),r=this.measFn(t,e),o=n.mmul(this.linpoint).add(this.meas).sub(r);this.factor.eta=n.transpose().mmul(this.lambda).mmul(o),this.factor.lam=n.transpose().mmul(this.lambda).mmul(n)}},{key:"energy",value:function(){var t=this.meas_fn(cam_coords,lmk_coords).sub(this.meas);return.5*t.mmul(this.lambda).mmul(t)}},{key:"send_mess",value:function(){for(var t=0;t<this.adj_var_ids.length;t++){for(var e=this.factor.eta.clone(),n=this.factor.lam.clone(),r=0,o=0;o<this.adj_var_ids.length;o++){if(t!=o){var i=Et.sub(this.adj_beliefs[o].eta,this.messages[o].eta),s=Et.sub(this.adj_beliefs[o].lam,this.messages[o].lam);new Bt(e,r,r+this.adj_var_dofs[o]-1,0,0).add(i),new Bt(n,r,r+this.adj_var_dofs[o]-1,r,r+this.adj_var_dofs[o]-1).add(s)}r+=this.adj_var_dofs[o]}if(0==t)var a=new Bt(e,0,1,0,0),u=new Bt(e,2,3,0,0),l=new Bt(n,0,1,0,1),c=new Bt(n,2,3,2,3),f=new Bt(n,2,3,0,1),h=new Bt(n,0,1,2,3);else if(1==t)u=new Bt(e,0,1,0,0),a=new Bt(e,2,3,0,0),c=new Bt(n,0,1,0,1),l=new Bt(n,2,3,2,3),h=new Bt(n,2,3,0,1),f=new Bt(n,0,1,2,3);var g=new zt([[0],[0]],[[0,0],[0,0]]),d=h.mmul(Lt(c));g.eta=new Et(a.sub(d.mmul(u))),g.eta.mul(1-this.eta_damping),g.eta.add(this.messages[t].eta.mul(this.eta_damping)),g.lam=new Et(l.sub(d.mmul(f))),this.messages[t]=g}}}]),t}(),Jt=function(){function t(e,n){Yt(this,t),this.dofs=e,this.adj_var_ids=n,this.adj_beliefs=[],this.adj_var_dofs=[],this.jacs=[],this.meas=[],this.lambdas=[],this.factor=new zt(Et.zeros(e,1),Et.zeros(e,e)),this.messages=[],this.eta_damping=0}return Xt(t,[{key:"compute_factor",value:function(){this.factor.eta=Et.zeros(this.dofs,1),this.factor.lam=Et.zeros(this.dofs,this.dofs);for(var t=0;t<this.jacs.length;t++)this.factor.eta.add(this.jacs[t].transpose().mmul(this.meas[t]).mul(this.lambdas[t])),this.factor.lam.add(this.jacs[t].transpose().mmul(this.jacs[t]).mul(this.lambdas[t]))}},{key:"energy",value:function(){var t=this.adj_beliefs[0].getMean(),e=this.adj_beliefs[1].getMean();linpoint=new Et([[t.get(0,0)],[t.get(1,0)],[e.get(0,0)],[e.get(1,0)]]);var n=this.jacs[0].mmul(linpoint).sub(this.meas[0]);return.5*n.mmul(this.lambdas[0]).mmul(n)}},{key:"send_mess",value:function(){for(var t=0;t<this.adj_var_ids.length;t++){for(var e=this.factor.eta.clone(),n=this.factor.lam.clone(),r=0,o=0;o<this.adj_var_ids.length;o++){if(t!=o){var i=Et.sub(this.adj_beliefs[o].eta,this.messages[o].eta),s=Et.sub(this.adj_beliefs[o].lam,this.messages[o].lam);new Bt(e,r,r+this.adj_var_dofs[o]-1,0,0).add(i),new Bt(n,r,r+this.adj_var_dofs[o]-1,r,r+this.adj_var_dofs[o]-1).add(s)}r+=this.adj_var_dofs[o]}if(0==t)var a=new Bt(e,0,1,0,0),u=new Bt(e,2,3,0,0),l=new Bt(n,0,1,0,1),c=new Bt(n,2,3,2,3),f=new Bt(n,2,3,0,1),h=new Bt(n,0,1,2,3);else if(1==t)u=new Bt(e,0,1,0,0),a=new Bt(e,2,3,0,0),c=new Bt(n,0,1,0,1),l=new Bt(n,2,3,2,3),h=new Bt(n,2,3,0,1),f=new Bt(n,0,1,2,3);var g=new zt([[0],[0]],[[0,0],[0,0]]),d=h.mmul(Lt(c));g.eta=new Et(a.sub(d.mmul(u))),g.eta.mul(1-this.eta_damping),g.eta.add(this.messages[t].eta.mul(this.eta_damping)),g.lam=new Et(l.sub(d.mmul(f))),this.messages[t]=g}}}]),t}();function Kt(t,e){var n,r;return t instanceof Et&&e instanceof Et?(n=Math.sqrt(Math.pow(e.get(0,0)-t.get(0,0),2)+Math.pow(e.get(1,0)-t.get(1,0),2)),r=Math.atan2(e.get(1,0)-t.get(1,0),e.get(0,0)-t.get(0,0))):(n=Math.sqrt(Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2)),r=Math.atan2(e.y-t.y,e.x-t.x)),new Et([[r],[n]])}function te(t,e){var n=t.get(0,0),r=t.get(1,0),o=e.get(0,0),i=e.get(1,0),s=Math.sqrt(Math.pow(o-n,2)+Math.pow(i-r,2)),a=Math.pow(o-n,2)+Math.pow(i-r,2);return new Et([[(i-r)/a,-(o-n)/a,-(i-r)/a,(o-n)/a],[-(o-n)/s,-(i-r)/s,(o-n)/s,(i-r)/s]])}function ee(t,e){var n,r;return t instanceof Et&&e instanceof Et?(n=Math.sqrt(Math.pow(e.get(0,0)-t.get(0,0),2)+Math.pow(e.get(1,0)-t.get(1,0),2)),r=Math.atan2(e.get(1,0)-t.get(1,0),-e.get(0,0)+t.get(0,0))):(n=Math.sqrt(Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2)),r=Math.atan2(e.y-t.y,-e.x+t.x)),new Et([[r],[n]])}function ne(t,e){var n=t.get(0,0),r=t.get(1,0),o=e.get(0,0),i=e.get(1,0),s=Math.sqrt(Math.pow(o-n,2)+Math.pow(i-r,2)),a=Math.pow(o-n,2)+Math.pow(i-r,2);return new Et([[-(i-r)/a,(o-n)/a,(i-r)/a,-(o-n)/a],[-(o-n)/s,-(i-r)/s,(o-n)/s,(i-r)/s]])}function re(t,e){var n,r=setInterval(t,e);n=function(){clearInterval(r)},F().$$.on_destroy.push(n)}function oe(t){let e,n,o,i,s,u,l,c,f,h,g,d,p,y,M,k,T,E,A,N,q,R,$,D,I,L,F,O,U,z,H,V,B;return{c(){e=b("div"),n=b("div"),o=b("canvas"),u=x(),l=b("div"),c=x(),f=b("div"),h=b("b"),h.innerHTML="Standard deviation of noise in Gaussian measurement models:<br>",g=_("\n\n   \t    Distance factors, σ = "),d=b("b"),p=_(t[2]),y=x(),M=b("input"),k=b("br"),T=_(" \n   \t    Angle factors, σ = "),E=b("b"),A=_(t[3]),N=x(),q=b("input"),R=b("br"),$=_("\n\t\tPrior factor, σ = "),D=b("b"),I=_(t[1]),L=x(),F=b("input"),O=b("br"),U=x(),z=b("br"),H=x(),V=b("div"),V.innerHTML='<img id="pointer" src="images/pointer.svg" alt="pointer" ,="" style="width: 40px"> \n\t        <div id="hint">\n\t          \tDrag to move the cameras.                \n\t        </div>',S(o,"width",i=1200),S(o,"height",s=800),S(l,"class","buttons-panel"),S(n,"id","gbp-container"),S(M,"type","range"),S(M,"min","10"),S(M,"max","400"),S(q,"type","range"),S(q,"min","0.001"),S(q,"max","0.2"),S(q,"step","0.001"),S(F,"type","range"),S(F,"min","1"),S(F,"max","200"),S(V,"id","left-demo-tip"),S(f,"id","settings-panel"),S(e,"class","demo-container")},m(r,i){w(r,e,i),m(e,n),m(n,o),t[25](o),m(n,u),m(n,l),m(e,c),m(e,f),m(f,h),m(f,g),m(f,d),m(d,p),m(f,y),m(f,M),P(M,t[2]),m(f,k),m(f,T),m(f,E),m(E,A),m(f,N),m(f,q),P(q,t[3]),m(f,R),m(f,$),m(f,D),m(D,I),m(f,L),m(f,F),P(F,t[1]),m(f,O),m(f,U),m(f,z),m(f,H),m(f,V),B=[j(o,"mousedown",t[5]),j(o,"mousemove",t[4]),j(o,"mouseup",t[6]),j(M,"change",t[26]),j(M,"input",t[26]),j(q,"change",t[27]),j(q,"input",t[27]),j(F,"change",t[28]),j(F,"input",t[28])]},p(t,[e]){4&e&&C(p,t[2]),4&e&&P(M,t[2]),8&e&&C(A,t[3]),8&e&&P(q,t[3]),2&e&&C(I,t[1]),2&e&&P(F,t[1])},i:r,o:r,d(n){n&&v(e),t[25](null),a(B)}}}function ie(t,e,n){let r,o,i,s=!1,a=100,u=250,l=.05,c={x:600,y:200},f=[{x:200,y:640},{x:1e3,y:640}],h=!1,g=0,d=[!1,!1];function p(){const t=r.getContext("2d");t.beginPath(),t.moveTo(0,640),t.lineTo(r.width,640),t.strokeStyle="#2F4F4F",t.stroke()}function m(){const t=r.getContext("2d");for(var e=0;e<2;e++){var n=f[e].x,o=f[e].y;t.beginPath(),t.moveTo(n,o+30),t.lineTo(n+20,o-20),t.lineTo(n-20,o-20),t.fill(),t.fillStyle="#0095DD",t.fill(),t.closePath()}}function w(){const t=r.getContext("2d"),e=i.lmk_nodes[0].belief.getMean();var n=e.get(0,0),o=e.get(1,0);t.beginPath(),t.arc(n,o,9,0,2*Math.PI),t.fillStyle="yellow",t.fill(),t.closePath();var s=i.lmk_nodes[0].belief.getCovEllipse(),a=s[0],u=s[1];t.beginPath(),t.ellipse(n,o,Math.sqrt(a[0]),Math.sqrt(a[1]),u,0,2*Math.PI),t.strokeStyle="yellow",t.stroke()}function v(){const t=r.getContext("2d"),e=i.lmk_nodes[0].prior.getMean();var n=e.get(0,0),o=e.get(1,0),s=i.lmk_nodes[0].prior.getCovEllipse(),a=s[0],u=s[1];t.beginPath(),t.ellipse(n,o,Math.sqrt(a[0]),Math.sqrt(a[1]),u,0,2*Math.PI),t.strokeStyle="blue",t.stroke()}function y(){const t=r.getContext("2d");for(var e=0;e<2;e++){const r=i.factors[e].messages[1].getMean();var n=r.get(0,0),o=r.get(1,0),s=i.factors[e].messages[1].getCovEllipse(),a=s[0],u=s[1];t.beginPath(),t.ellipse(n,o,Math.sqrt(a[0]),Math.sqrt(a[1]),u,0,2*Math.PI),t.strokeStyle="red",t.stroke()}}function b(){r.getContext("2d").clearRect(0,0,r.width,r.height);var t=Date.now(),e=t-o;e>1e3/60&&(o=t-e%(1e3/60),h&&(i.relinearise(),i.sync_iter(),g++)),k(),h&&(y(),x()),p(),v(),m(),w();var n=r.getBoundingClientRect();!s&&n.top<window.innerHeight&&(h=!0,s=!0)}function M(){const t=1/Math.pow(a,2),e=1/Math.pow(1,2);let n=new Zt(2,0);n.prior.lam=new Et([[t,0],[0,t]]),n.prior.eta=n.prior.lam.mmul(new Et([[c.x],[c.y]])),n.update_belief(),i.lmk_nodes.push(n);let r=new Zt(2,1);r.prior.lam=new Et([[e,0],[0,e]]),r.prior.eta=r.prior.lam.mmul(new Et([[f[0].x],[f[0].y]])),r.update_belief(),i.pose_nodes.push(r);let o=new Zt(2,2);o.prior.lam=new Et([[e,0],[0,e]]),o.prior.eta=o.prior.lam.mmul(new Et([[f[1].x],[f[1].y]])),o.update_belief(),i.pose_nodes.push(o);for(var s=new Et([[1/Math.pow(l,2),0],[0,1/Math.pow(u,2)]]),h=0;h<2;h++){var g=c.x-f[h].x;const t=new Qt(4,[h+1,0],Kt,te);g<0&&(t.measFn=ee,t.jacFn=ne),t.meas=t.measFn(f[h],c),t.lambda=s,t.adj_var_dofs.push(2),t.adj_var_dofs.push(2),t.adj_beliefs.push(i.pose_nodes[h].belief),t.adj_beliefs.push(i.lmk_nodes[0].belief),t.messages.push(new zt([[0],[0]],[[0,0],[0,0]])),t.messages.push(new zt([[0],[0]],[[0,0],[0,0]])),i.factors.push(t),i.pose_nodes[h].adj_factors.push(t),i.lmk_nodes[0].adj_factors.push(t)}i.relinearise()}function _(t){i.pose_nodes[t].prior.eta=i.pose_nodes[t].prior.lam.mmul(new Et([[f[t].x],[f[t].y]])),i.pose_nodes[t].update_belief();const e=i.factors[t].measFn(f[t],c);i.factors[t].meas=e,i.factors[t].compute_factor()}function x(){for(var t=0;t<2;t++)i.factors[t].lambda=new Et([[1/Math.pow(l,2),0],[0,1/Math.pow(u,2)]])}function k(){var t=1/Math.pow(a,2);i.lmk_nodes[0].prior.lam=new Et([[t,0],[0,t]]),i.lmk_nodes[0].prior.eta=i.lmk_nodes[0].prior.lam.mmul(new Et([[c.x],[c.y]]))}return O(()=>{r.getContext("2d").lineWidth=4,i=new Wt,M(),o=Date.now()}),re(()=>b(),60),[r,a,u,l,function(t){const e=r.getContext("2d");for(var o=r.getBoundingClientRect(),i=r.width*(t.clientX-o.left)/o.width,s=r.height*(t.clientY-o.top)/o.height,a=!1,u=0;u<2;u++){var l=f[u].x,c=f[u].y;e.beginPath(),e.moveTo(l,c+30),e.lineTo(l+20,c-20),e.lineTo(l-20,c-20),e.closePath(),e.isPointInPath(i,s)&&(a=!0)}n(0,r.style.cursor=a?"pointer":"default",r),d[0]?(f[0].x=i,_(0)):d[1]&&(f[1].x=i,_(1))},function(t){const e=r.getContext("2d");for(var n=r.getBoundingClientRect(),o=r.width*(t.clientX-n.left)/n.width,i=r.height*(t.clientY-n.top)/n.height,s=0;s<2;s++){var a=f[s].x,u=f[s].y;e.beginPath(),e.moveTo(a,u+30),e.lineTo(a+20,u-20),e.lineTo(a-20,u-20),e.closePath(),e.isPointInPath(o,i)&&(d[s]=!0)}},function(t){d[0]=!1,d[1]=!1},o,s,i,f,h,g,d,c,p,m,w,v,y,b,M,_,x,k,function(t){z[t?"unshift":"push"](()=>{n(0,r=t)})},function(){u=T(this.value),n(2,u)},function(){l=T(this.value),n(3,l)},function(){a=T(this.value),n(1,a)}]}var se=class extends ht{constructor(t){super(),ft(this,t,ie,oe,l,{})}};function ae(t,{delay:e=0,duration:n=400,easing:r=o}){const i=+getComputedStyle(t).opacity;return{delay:e,duration:n,easing:r,css:t=>`opacity: ${t*i}`}}function ue(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function le(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function ce(t,e,n){return e&&le(t.prototype,e),n&&le(t,n),t}var fe=function(){function t(){ue(this,t),this.var_nodes=[],this.factors=[],this.sweep_ix=0,this.forward=1,this.past_first_meas=0}return ce(t,[{key:"update_beliefs",value:function(){for(var t=0;t<this.var_nodes.length;t++)this.var_nodes[t].update_belief()}},{key:"send_messages",value:function(){for(var t=0;t<this.factors.length;t++)this.factors[t].send_both_mess()}},{key:"sync_iter",value:function(){this.send_messages(),this.update_beliefs()}},{key:"addLinearMeasurement",value:function(t,e,n,r,o,i){var s=(e-r)/(o-r),a=new Et([[1-s,s]]);this.factors[n[0]].jacs.push(a),this.factors[n[0]].meas.push(t),this.factors[n[0]].lambdas.push(1/Math.pow(i,2)),this.factors[n[0]].compute_factor()}},{key:"computeMAP",value:function(){for(var t=0,e=0;e<this.var_nodes.length;e++)t+=this.var_nodes[e].dofs;var n=Et.zeros(t,1),r=Et.zeros(t,t);for(e=0;e<this.factors.length;e++){var o=this.factors[e].adj_var_ids[0];n.set(o,0,n.get(o,0)+this.factors[e].factor.eta.get(0,0)),n.set(o+1,0,n.get(o+1,0)+this.factors[e].factor.eta.get(1,0)),r.set(o,o,r.get(o,o)+this.factors[e].factor.lam.get(0,0)),r.set(o+1,o,r.get(o+1,o)+this.factors[e].factor.lam.get(1,0)),r.set(o,o+1,r.get(o,o+1)+this.factors[e].factor.lam.get(0,1)),r.set(o+1,o+1,r.get(o+1,o+1)+this.factors[e].factor.lam.get(1,1))}var i=Lt(r);return[i.mmul(n),i]}},{key:"compare_to_MAP",value:function(){for(var t=[],e=0;e<this.var_nodes.length;e++)t.push(this.var_nodes[e].belief.getMean().get(0,0));var n=new Et([t]);return this.computeMAP()[0].sub(n.transpose()).norm()}},{key:"sweep_step",value:function(){var t=0,e=this.forward;this.forward?(t=this.sweep_ix+1,this.sweep_ix==this.var_nodes.length-2&&(e=0)):(t=this.sweep_ix-1,1==this.sweep_ix&&(e=1)),this.forward?(this.factors[this.sweep_ix].meas.length>1&&(this.past_first_meas=1),this.factors[this.sweep_ix].send_mess(this.forward)):this.factors[t].send_mess(this.forward),this.past_first_meas&&this.var_nodes[t].update_belief(),this.sweep_ix=t,this.forward=e}}]),t}(),he=function(){function t(e,n){ue(this,t),this.dofs=e,this.var_id=n,this.belief=new zt(Et.zeros(e,1),Et.zeros(e,e)),this.adj_factors=[]}return ce(t,[{key:"update_belief",value:function(){this.belief.eta=Et.zeros(this.dofs,1),this.belief.lam=Et.zeros(this.dofs,this.dofs);for(var t=0;t<this.adj_factors.length;t++){var e=this.adj_factors[t].adj_var_ids.indexOf(this.var_id);this.belief.product(this.adj_factors[t].messages[e])}for(t=0;t<this.adj_factors.length;t++){e=this.adj_factors[t].adj_var_ids.indexOf(this.var_id);this.adj_factors[t].adj_beliefs[e]=this.belief}}}]),t}(),ge=function(){function t(e,n){ue(this,t),this.dofs=e,this.adj_var_ids=n,this.adj_beliefs=[],this.jacs=[],this.meas=[],this.lambdas=[],this.factor=new zt(Et.zeros(e,1),Et.zeros(e,e)),this.messages=[]}return ce(t,[{key:"compute_factor",value:function(){this.factor.eta=Et.zeros(this.dofs,1),this.factor.lam=Et.zeros(this.dofs,this.dofs);for(var t=0;t<this.jacs.length;t++)this.factor.eta.add(this.jacs[t].transpose().mul(this.lambdas[t]*this.meas[t])),this.factor.lam.add(this.jacs[t].transpose().mmul(this.jacs[t]).mul(this.lambdas[t]))}},{key:"send_mess",value:function(t){if(t){var e=new zt([[0]],[[0]]);e.eta=new Et([[this.factor.eta.get(1,0)-this.factor.lam.get(1,0)*(this.factor.eta.get(0,0)+this.adj_beliefs[0].eta.get(0,0)-this.messages[0].eta.get(0,0))/(this.factor.lam.get(0,0)+this.adj_beliefs[0].lam.get(0,0)-this.messages[0].lam.get(0,0))]]),e.lam=new Et([[this.factor.lam.get(1,1)-this.factor.lam.get(1,0)*this.factor.lam.get(0,1)/(this.factor.lam.get(0,0)+this.adj_beliefs[0].lam.get(0,0)-this.messages[0].lam.get(0,0))]]),this.messages[1]=e}else{var n=new zt([[0]],[[0]]);n.eta=new Et([[this.factor.eta.get(0,0)-this.factor.lam.get(0,1)*(this.factor.eta.get(1,0)+this.adj_beliefs[1].eta.get(0,0)-this.messages[1].eta.get(0,0))/(this.factor.lam.get(1,1)+this.adj_beliefs[1].lam.get(0,0)-this.messages[1].lam.get(0,0))]]),n.lam=new Et([[this.factor.lam.get(0,0)-this.factor.lam.get(0,1)*this.factor.lam.get(1,0)/(this.factor.lam.get(1,1)+this.adj_beliefs[1].lam.get(0,0)-this.messages[1].lam.get(0,0))]]),this.messages[0]=n}}},{key:"send_both_mess",value:function(){this.send_mess(0),this.send_mess(1)}}]),t}();function de(t,e){for(var n=new fe,r=0;r<t;r++){var o=new he(1,r);n.var_nodes.push(o)}var i=new Et([[-1,1]]);for(r=0;r<t-1;r++){var s=new ge(2,[r,r+1]);s.jacs.push(i),s.meas.push(0),s.lambdas.push(1/Math.pow(e,2)),s.adj_beliefs.push(n.var_nodes[r].belief),s.adj_beliefs.push(n.var_nodes[r+1].belief),s.messages.push(new zt([[0]],[[0]])),s.messages.push(new zt([[0]],[[0]])),s.compute_factor(),n.factors.push(s),n.var_nodes[r].adj_factors.push(s),n.var_nodes[r+1].adj_factors.push(s)}return n}function pe(t){let e,n,r;return{c(){e=b("p"),e.textContent="Before starting add measurements!",S(e,"id","alert")},m(t,n){w(t,e,n),r=!0},i(t){r||(W(()=>{n||(n=at(e,ae,{},!0)),n.run(1)}),r=!0)},o(t){n||(n=at(e,ae,{},!1)),n.run(0),r=!1},d(t){t&&v(e),t&&n&&n.end()}}}function me(t){let e,n;return{c(){e=b("i"),e.innerHTML='<span class="tooltiptext">Play GBP sweep</span>',S(e,"class","fa fa-play tooltip"),E(e,"width","25px")},m(r,o){w(r,e,o),n=j(e,"click",t[13])},p:r,d(t){t&&v(e),n()}}}function we(t){let e,n;return{c(){e=b("i"),e.innerHTML='<span class="tooltiptext">Pause GBP sweep</span>',S(e,"class","fa fa-pause tooltip"),E(e,"width","25px")},m(r,o){w(r,e,o),n=j(e,"click",t[13])},p:r,d(t){t&&v(e),n()}}}function ve(t){let e;function n(t,e){return t[6]?be:ye}let r=n(t),o=r(t);return{c(){o.c(),e=k()},m(t,n){o.m(t,n),w(t,e,n)},p(t,i){r===(r=n(t))&&o?o.p(t,i):(o.d(1),o=r(t),o&&(o.c(),o.m(e.parentNode,e)))},d(t){o.d(t),t&&v(e)}}}function ye(t){let e,n;return{c(){e=b("i"),e.innerHTML='<span class="tooltiptext">Play synchronous GBP</span>',S(e,"class","fa fa-play tooltip"),E(e,"width","25px")},m(r,o){w(r,e,o),n=j(e,"click",t[14])},p:r,d(t){t&&v(e),n()}}}function be(t){let e,n;return{c(){e=b("i"),e.innerHTML='<span class="tooltiptext">Pause synchronous GBP</span>',S(e,"class","fa fa-pause tooltip"),E(e,"width","25px")},m(r,o){w(r,e,o),n=j(e,"click",t[14])},p:r,d(t){t&&v(e),n()}}}function Me(t){let e,n;return{c(){e=b("button"),e.innerHTML='<b>MAP</b> \n          <span class="tooltiptext">Display MAP</span>',S(e,"class","tooltip"),E(e,"color","rgb(39, 36, 36, 0.6)")},m(r,o){w(r,e,o),n=j(e,"click",t[15])},p:r,d(t){t&&v(e),n()}}}function _e(t){let e,n;return{c(){e=b("button"),e.innerHTML='<b>MAP</b> \n          <span class="tooltiptext">Hide MAP</span>',S(e,"class","tooltip")},m(r,o){w(r,e,o),n=j(e,"click",t[15])},p:r,d(t){t&&v(e),n()}}}function xe(t){let e,n,r,o,i,s,u,l,c,f,h;return{c(){e=b("br"),n=x(),r=b("b"),o=_("Iteration "),i=_(t[8]),s=_("   (iters / s: "),u=_(t[9]),l=_(")\n      "),c=b("input"),f=b("br"),S(c,"type","range"),S(c,"min","1"),S(c,"max","50")},m(a,g){w(a,e,g),w(a,n,g),w(a,r,g),m(r,o),m(r,i),w(a,s,g),w(a,u,g),w(a,l,g),w(a,c,g),P(c,t[9]),w(a,f,g),h=[j(c,"change",t[39]),j(c,"input",t[39])]},p(t,e){256&e[0]&&C(i,t[8]),512&e[0]&&C(u,t[9]),512&e[0]&&P(c,t[9])},d(t){t&&v(e),t&&v(n),t&&v(r),t&&v(s),t&&v(u),t&&v(l),t&&v(c),t&&v(f),a(h)}}}function ke(t){let e,n,r,o,i,s,u,l,c,f,h,g,d,p,y,M,k,T,E,A,N,q,R,$,D,I,L,F,O,U,z,H,V,B,Y,G,X,W,Z,Q,J,K,tt,et,st,at,ut,lt,ct,ft,ht,gt,dt=t[2]&&pe();function pt(t,e){return t[5]?ve:t[7]?we:me}let mt=pt(t),wt=mt(t);function vt(t,e){return t[1]?_e:Me}let yt=vt(t),bt=yt(t),Mt=t[5]&&xe(t);return{c(){e=b("div"),n=b("div"),r=b("canvas"),s=x(),u=b("div"),dt&&dt.c(),l=x(),c=b("div"),wt.c(),f=x(),h=b("i"),h.innerHTML='<span class="tooltiptext">Generate new random measurements</span>',g=x(),d=b("i"),d.innerHTML='<span class="tooltiptext">Clear measurements</span>',p=x(),bt.c(),y=x(),M=b("div"),M.innerHTML='<img id="pointer" src="images/pointer.svg" alt="pointer"> \n        <div id="hint">\n          Click on the canvas to surface factors.                \n        </div>',k=x(),T=b("div"),E=b("b"),E.textContent="Message Passing Schedule:",A=x(),N=b("br"),q=x(),R=b("label"),$=b("input"),I=_("\n      Sweep\n    "),L=b("br"),F=x(),O=b("label"),U=b("input"),H=_("\n      Synchronous"),V=x(),B=b("br"),Y=x(),G=b("br"),X=b("b"),X.innerHTML="Standard deviation of noise in Gaussian measurement models:<br>",W=_("\n\n    Surface factors, σ = "),Z=b("b"),Q=_(t[3]),J=x(),K=b("input"),tt=b("br"),et=_("\n\n    Smoothness factors, σ = "),st=b("b"),at=_(t[4]),ut=x(),lt=b("input"),ct=b("br"),ft=x(),Mt&&Mt.c(),S(r,"width",o=1300),S(r,"height",i=640),S(r,"id","click-canvas"),S(u,"class","center"),S(h,"class","fa fa-repeat tooltip"),S(d,"class","fa fa-remove tooltip"),S(M,"id","demo-tip"),S(c,"class","buttons-panel"),S(n,"id","gbp-container"),S($,"type","radio"),$.__value=D=0,$.value=$.__value,t[35][0].push($),S(U,"type","radio"),U.__value=z=1,U.value=U.__value,t[35][0].push(U),S(K,"type","range"),S(K,"min","1"),S(K,"max","100"),S(lt,"type","range"),S(lt,"min","1"),S(lt,"max","100"),S(T,"id","settings-panel"),S(e,"class","demo-container")},m(o,i){w(o,e,i),m(e,n),m(n,r),t[33](r),m(n,s),m(n,u),dt&&dt.m(u,null),m(n,l),m(n,c),wt.m(c,null),m(c,f),m(c,h),m(c,g),m(c,d),m(c,p),bt.m(c,null),m(c,y),m(c,M),m(e,k),m(e,T),m(T,E),m(T,A),m(T,N),m(T,q),m(T,R),m(R,$),$.checked=$.__value===t[5],m(R,I),m(T,L),m(T,F),m(T,O),m(O,U),U.checked=U.__value===t[5],m(O,H),m(T,V),m(T,B),m(T,Y),m(T,G),m(T,X),m(T,W),m(T,Z),m(Z,Q),m(T,J),m(T,K),P(K,t[3]),m(T,tt),m(T,et),m(T,st),m(st,at),m(T,ut),m(T,lt),P(lt,t[4]),m(T,ct),m(T,ft),Mt&&Mt.m(T,null),ht=!0,gt=[j(r,"click",t[10]),j(h,"click",t[11]),j(d,"click",t[12]),j($,"change",t[34]),j($,"click",t[16]),j(U,"change",t[36]),j(U,"click",t[16]),j(K,"change",t[37]),j(K,"input",t[37]),j(lt,"change",t[38]),j(lt,"input",t[38])]},p(t,e){t[2]?dt?ot(dt,1):(dt=pe(),dt.c(),ot(dt,1),dt.m(u,null)):dt&&(nt(),it(dt,1,1,()=>{dt=null}),rt()),mt===(mt=pt(t))&&wt?wt.p(t,e):(wt.d(1),wt=mt(t),wt&&(wt.c(),wt.m(c,f))),yt===(yt=vt(t))&&bt?bt.p(t,e):(bt.d(1),bt=yt(t),bt&&(bt.c(),bt.m(c,y))),32&e[0]&&($.checked=$.__value===t[5]),32&e[0]&&(U.checked=U.__value===t[5]),(!ht||8&e[0])&&C(Q,t[3]),8&e[0]&&P(K,t[3]),(!ht||16&e[0])&&C(at,t[4]),16&e[0]&&P(lt,t[4]),t[5]?Mt?Mt.p(t,e):(Mt=xe(t),Mt.c(),Mt.m(T,null)):Mt&&(Mt.d(1),Mt=null)},i(t){ht||(ot(dt),ht=!0)},o(t){it(dt),ht=!1},d(n){n&&v(e),t[33](null),dt&&dt.d(),wt.d(),bt.d(),t[35][0].splice(t[35][0].indexOf($),1),t[35][0].splice(t[35][0].indexOf(U),1),Mt&&Mt.d(),a(gt)}}}function je(t,e,n){let r,o,i,s,a,u,l=!1,c=!1,f=50,h=50,g=[],d=0;var p=!1,m=!1;let w=!1,v=0,y=2.5,b=0;function M(){const t=r.getContext("2d");for(let l=0;l<u.var_nodes.length;l++){var e=o+l*i;if(0==u.var_nodes[l].belief.lam.get(0,0))var n=r.height-r.height/8,a=Math.pow(r.height/10,2);else n=u.var_nodes[l].belief.getMean().get(0,0),a=u.var_nodes[l].belief.getCov().get(0,0);t.beginPath(),t.arc(e,n,s,0,2*Math.PI),t.fillStyle="#0095DD",t.fill(),t.closePath(),t.beginPath(),t.moveTo(e,parseInt(n)+parseInt(Math.sqrt(a))),t.lineTo(e,parseInt(n)-parseInt(Math.sqrt(a))),t.strokeStyle="#0095DD",t.stroke()}}function _(t){const e=r.getContext("2d");for(var n=0;n<g.length;n++){var o=g[n].x,i=g[n].y;e.beginPath(),e.arc(o,i,s,0,2*Math.PI),e.fillStyle="red",e.fill(),e.closePath(),e.beginPath(),e.moveTo(o,parseInt(i)-parseInt(t)),e.lineTo(o,parseInt(i)+parseInt(t)),e.strokeStyle="red",e.stroke()}}function x(){const t=r.getContext("2d");var e=u.computeMAP();const n=e[0],a=e[1];for(var l=0;l<u.var_nodes.length;l++){var c=o+l*i,f=n.get(l,0),h=a.get(l,l);t.beginPath(),t.arc(c,f,s,0,2*Math.PI),t.strokeStyle="green",t.stroke(),t.beginPath(),t.moveTo(c,parseInt(f)+parseInt(Math.sqrt(h))),t.lineTo(c,parseInt(f)-parseInt(Math.sqrt(h))),t.strokeStyle="green",t.stroke()}}function k(){r.getContext("2d").clearRect(0,0,r.width,r.height);var t=1e3/y,e=Date.now(),o=e-a;o>t&&(a=e-o%t,d&&p?j():0==d&&m&&(u.sweep_step(),1==u.forward&&0==u.sweep_ix&&(n(7,m=!1),w=!0))),C(),P(),M(),_(f),l&&x()}function j(){if(0==v&&0==w)for(let t=0;t<u.var_nodes.length;t++)u.var_nodes[t].belief.eta=new Et([[.05]]),u.var_nodes[t].belief.lam=new Et([[1e-4]]);u.sync_iter(),0!=v&&(b=u.compare_to_MAP()),n(8,v++,v)}function S(){n(2,c=!1),g=[],u.factors=u.factors.slice(0,9);for(var t=0;t<8;t++){var e=Math.random()*(r.width-2*o)+o,s=Math.random()*(r.height-2*o)+o,a=(e-o)/i,l=o+Math.floor(a)*i,h=o+Math.ceil(a)*i;u.addLinearMeasurement(s,e,[Math.floor(a),Math.ceil(a)],l,h,f),g.push({x:e,y:s})}}function C(){for(var t=1/Math.pow(f,2),e=0;e<u.factors.length;e++){for(var n=!1,r=1;r<u.factors[e].lambdas.length;r++)u.factors[e].lambdas[r]!=t&&(u.factors[e].lambdas[r]=t,n=!0);n&&u.factors[e].compute_factor()}}function P(){for(var t=1/Math.pow(h,2),e=0;e<u.factors.length;e++)u.factors[e].lambdas[0]!=t&&(u.factors[e].lambdas[0]=t,u.factors[e].compute_factor())}O(()=>{const t=r.getContext("2d");u=de(10,h),t.lineWidth=4,o=r.width/20,i=(r.width-2*o)/9,s=r.height/38,S(),a=Date.now()}),re(()=>k(),25);return[r,l,c,f,h,d,p,m,v,y,function(t){n(2,c=!1);var e=r.getBoundingClientRect(),s=r.width*(t.clientX-e.left)/e.width,a=r.height*(t.clientY-e.top)/e.height;if(s>o&&s<r.width-o&&a>0&&a<r.height){var l=(s-o)/i,h=o+Math.floor(l)*i,d=o+Math.ceil(l)*i;u.addLinearMeasurement(a,s,[Math.floor(l),Math.ceil(l)],h,d,f),g.push({x:s,y:a})}},function(){n(6,p=!1),n(7,m=!1),n(8,v=0),u=de(10,h),S(),a=Date.now()},function(){g=[],u.factors=u.factors.slice(0,9),n(6,p=!1),n(7,m=!1),n(1,l=!1),n(8,v=0),u=de(10,h),a=Date.now()},function(){0==g.length?n(2,c=!0):m?n(7,m=!1):(n(7,m=!0),n(9,y=2.5),n(6,p=!1))},function(){0==g.length?n(2,c=!0):n(6,p=!p)},function(){0==g.length?n(2,c=!0):n(1,l=0==l)},function(){n(6,p=0),n(7,m=0),n(9,y=25)},o,i,s,a,u,g,w,b,M,_,x,k,j,S,C,P,function(t){z[t?"unshift":"push"](()=>{n(0,r=t)})},function(){d=this.__value,n(5,d)},[[]],function(){d=this.__value,n(5,d)},function(){f=T(this.value),n(3,f)},function(){h=T(this.value),n(4,h)},function(){y=T(this.value),n(9,y)}]}var Se=class extends ht{constructor(t){super(),ft(this,t,je,ke,l,{},[-1,-1])}},Te=function(t,e){return t<e?-1:t>e?1:t>=e?0:NaN},Ce=function(t){var e;return 1===t.length&&(e=t,t=function(t,n){return Te(e(t),n)}),{left:function(e,n,r,o){for(null==r&&(r=0),null==o&&(o=e.length);r<o;){var i=r+o>>>1;t(e[i],n)<0?r=i+1:o=i}return r},right:function(e,n,r,o){for(null==r&&(r=0),null==o&&(o=e.length);r<o;){var i=r+o>>>1;t(e[i],n)>0?o=i:r=i+1}return r}}};var Pe=Ce(Te),Ee=Pe.right,Ae=(Pe.left,Ee);var Ne=Array.prototype,qe=(Ne.slice,Ne.map,Math.sqrt(50)),Re=Math.sqrt(10),$e=Math.sqrt(2),De=function(t,e,n){var r,o,i,s,a=-1;if(n=+n,(t=+t)===(e=+e)&&n>0)return[t];if((r=e<t)&&(o=t,t=e,e=o),0===(s=Ie(t,e,n))||!isFinite(s))return[];if(s>0)for(t=Math.ceil(t/s),e=Math.floor(e/s),i=new Array(o=Math.ceil(e-t+1));++a<o;)i[a]=(t+a)*s;else for(t=Math.floor(t*s),e=Math.ceil(e*s),i=new Array(o=Math.ceil(t-e+1));++a<o;)i[a]=(t-a)/s;return r&&i.reverse(),i};function Ie(t,e,n){var r=(e-t)/Math.max(0,n),o=Math.floor(Math.log(r)/Math.LN10),i=r/Math.pow(10,o);return o>=0?(i>=qe?10:i>=Re?5:i>=$e?2:1)*Math.pow(10,o):-Math.pow(10,-o)/(i>=qe?10:i>=Re?5:i>=$e?2:1)}function Le(t,e,n){var r=Math.abs(e-t)/Math.max(0,n),o=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),i=r/o;return i>=qe?o*=10:i>=Re?o*=5:i>=$e&&(o*=2),e<t?-o:o}function Fe(t,e){switch(arguments.length){case 0:break;case 1:this.range(t);break;default:this.range(e).domain(t)}return this}function Oe(){}function Ue(t,e){var n=new Oe;if(t instanceof Oe)t.each((function(t,e){n.set(e,t)}));else if(Array.isArray(t)){var r,o=-1,i=t.length;if(null==e)for(;++o<i;)n.set(o,t[o]);else for(;++o<i;)n.set(e(r=t[o],o,t),r)}else if(t)for(var s in t)n.set(s,t[s]);return n}Oe.prototype=Ue.prototype={constructor:Oe,has:function(t){return"$"+t in this},get:function(t){return this["$"+t]},set:function(t,e){return this["$"+t]=e,this},remove:function(t){var e="$"+t;return e in this&&delete this[e]},clear:function(){for(var t in this)"$"===t[0]&&delete this[t]},keys:function(){var t=[];for(var e in this)"$"===e[0]&&t.push(e.slice(1));return t},values:function(){var t=[];for(var e in this)"$"===e[0]&&t.push(this[e]);return t},entries:function(){var t=[];for(var e in this)"$"===e[0]&&t.push({key:e.slice(1),value:this[e]});return t},size:function(){var t=0;for(var e in this)"$"===e[0]&&++t;return t},empty:function(){for(var t in this)if("$"===t[0])return!1;return!0},each:function(t){for(var e in this)"$"===e[0]&&t(this[e],e.slice(1),this)}};var ze=Ue;function He(){}var Ve=ze.prototype;function Be(t,e){var n=new He;if(t instanceof He)t.each((function(t){n.add(t)}));else if(t){var r=-1,o=t.length;if(null==e)for(;++r<o;)n.add(t[r]);else for(;++r<o;)n.add(e(t[r],r,t))}return n}He.prototype=Be.prototype={constructor:He,has:Ve.has,add:function(t){return this["$"+(t+="")]=t,this},remove:Ve.remove,clear:Ve.clear,values:Ve.keys,size:Ve.size,empty:Ve.empty,each:Ve.each};var Ye=Array.prototype,Ge=Ye.map,Xe=Ye.slice,We={name:"implicit"};function Ze(){var t=ze(),e=[],n=[],r=We;function o(o){var i=o+"",s=t.get(i);if(!s){if(r!==We)return r;t.set(i,s=e.push(o))}return n[(s-1)%n.length]}return o.domain=function(n){if(!arguments.length)return e.slice();e=[],t=ze();for(var r,i,s=-1,a=n.length;++s<a;)t.has(i=(r=n[s])+"")||t.set(i,e.push(r));return o},o.range=function(t){return arguments.length?(n=Xe.call(t),o):n.slice()},o.unknown=function(t){return arguments.length?(r=t,o):r},o.copy=function(){return Ze(e,n).unknown(r)},Fe.apply(o,arguments),o}var Qe=function(t,e,n){t.prototype=e.prototype=n,n.constructor=t};function Je(t,e){var n=Object.create(t.prototype);for(var r in e)n[r]=e[r];return n}function Ke(){}var tn="\\s*([+-]?\\d+)\\s*",en="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",nn="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",rn=/^#([0-9a-f]{3,8})$/,on=new RegExp("^rgb\\("+[tn,tn,tn]+"\\)$"),sn=new RegExp("^rgb\\("+[nn,nn,nn]+"\\)$"),an=new RegExp("^rgba\\("+[tn,tn,tn,en]+"\\)$"),un=new RegExp("^rgba\\("+[nn,nn,nn,en]+"\\)$"),ln=new RegExp("^hsl\\("+[en,nn,nn]+"\\)$"),cn=new RegExp("^hsla\\("+[en,nn,nn,en]+"\\)$"),fn={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function hn(){return this.rgb().formatHex()}function gn(){return this.rgb().formatRgb()}function dn(t){var e,n;return t=(t+"").trim().toLowerCase(),(e=rn.exec(t))?(n=e[1].length,e=parseInt(e[1],16),6===n?pn(e):3===n?new yn(e>>8&15|e>>4&240,e>>4&15|240&e,(15&e)<<4|15&e,1):8===n?new yn(e>>24&255,e>>16&255,e>>8&255,(255&e)/255):4===n?new yn(e>>12&15|e>>8&240,e>>8&15|e>>4&240,e>>4&15|240&e,((15&e)<<4|15&e)/255):null):(e=on.exec(t))?new yn(e[1],e[2],e[3],1):(e=sn.exec(t))?new yn(255*e[1]/100,255*e[2]/100,255*e[3]/100,1):(e=an.exec(t))?mn(e[1],e[2],e[3],e[4]):(e=un.exec(t))?mn(255*e[1]/100,255*e[2]/100,255*e[3]/100,e[4]):(e=ln.exec(t))?xn(e[1],e[2]/100,e[3]/100,1):(e=cn.exec(t))?xn(e[1],e[2]/100,e[3]/100,e[4]):fn.hasOwnProperty(t)?pn(fn[t]):"transparent"===t?new yn(NaN,NaN,NaN,0):null}function pn(t){return new yn(t>>16&255,t>>8&255,255&t,1)}function mn(t,e,n,r){return r<=0&&(t=e=n=NaN),new yn(t,e,n,r)}function wn(t){return t instanceof Ke||(t=dn(t)),t?new yn((t=t.rgb()).r,t.g,t.b,t.opacity):new yn}function vn(t,e,n,r){return 1===arguments.length?wn(t):new yn(t,e,n,null==r?1:r)}function yn(t,e,n,r){this.r=+t,this.g=+e,this.b=+n,this.opacity=+r}function bn(){return"#"+_n(this.r)+_n(this.g)+_n(this.b)}function Mn(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}function _n(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function xn(t,e,n,r){return r<=0?t=e=n=NaN:n<=0||n>=1?t=e=NaN:e<=0&&(t=NaN),new jn(t,e,n,r)}function kn(t){if(t instanceof jn)return new jn(t.h,t.s,t.l,t.opacity);if(t instanceof Ke||(t=dn(t)),!t)return new jn;if(t instanceof jn)return t;var e=(t=t.rgb()).r/255,n=t.g/255,r=t.b/255,o=Math.min(e,n,r),i=Math.max(e,n,r),s=NaN,a=i-o,u=(i+o)/2;return a?(s=e===i?(n-r)/a+6*(n<r):n===i?(r-e)/a+2:(e-n)/a+4,a/=u<.5?i+o:2-i-o,s*=60):a=u>0&&u<1?0:s,new jn(s,a,u,t.opacity)}function jn(t,e,n,r){this.h=+t,this.s=+e,this.l=+n,this.opacity=+r}function Sn(t,e,n){return 255*(t<60?e+(n-e)*t/60:t<180?n:t<240?e+(n-e)*(240-t)/60:e)}function Tn(t,e,n,r,o){var i=t*t,s=i*t;return((1-3*t+3*i-s)*e+(4-6*i+3*s)*n+(1+3*t+3*i-3*s)*r+s*o)/6}Qe(Ke,dn,{copy:function(t){return Object.assign(new this.constructor,this,t)},displayable:function(){return this.rgb().displayable()},hex:hn,formatHex:hn,formatHsl:function(){return kn(this).formatHsl()},formatRgb:gn,toString:gn}),Qe(yn,vn,Je(Ke,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new yn(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new yn(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:bn,formatHex:bn,formatRgb:Mn,toString:Mn})),Qe(jn,(function(t,e,n,r){return 1===arguments.length?kn(t):new jn(t,e,n,null==r?1:r)}),Je(Ke,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new jn(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new jn(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),e=isNaN(t)||isNaN(this.s)?0:this.s,n=this.l,r=n+(n<.5?n:1-n)*e,o=2*n-r;return new yn(Sn(t>=240?t-240:t+120,o,r),Sn(t,o,r),Sn(t<120?t+240:t-120,o,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"hsl(":"hsla(")+(this.h||0)+", "+100*(this.s||0)+"%, "+100*(this.l||0)+"%"+(1===t?")":", "+t+")")}}));var Cn=function(t){return function(){return t}};function Pn(t,e){return function(n){return t+n*e}}function En(t){return 1==(t=+t)?An:function(e,n){return n-e?function(t,e,n){return t=Math.pow(t,n),e=Math.pow(e,n)-t,n=1/n,function(r){return Math.pow(t+r*e,n)}}(e,n,t):Cn(isNaN(e)?n:e)}}function An(t,e){var n=e-t;return n?Pn(t,n):Cn(isNaN(t)?e:t)}var Nn=function t(e){var n=En(e);function r(t,e){var r=n((t=vn(t)).r,(e=vn(e)).r),o=n(t.g,e.g),i=n(t.b,e.b),s=An(t.opacity,e.opacity);return function(e){return t.r=r(e),t.g=o(e),t.b=i(e),t.opacity=s(e),t+""}}return r.gamma=t,r}(1);function qn(t){return function(e){var n,r,o=e.length,i=new Array(o),s=new Array(o),a=new Array(o);for(n=0;n<o;++n)r=vn(e[n]),i[n]=r.r||0,s[n]=r.g||0,a[n]=r.b||0;return i=t(i),s=t(s),a=t(a),r.opacity=1,function(t){return r.r=i(t),r.g=s(t),r.b=a(t),r+""}}}qn((function(t){var e=t.length-1;return function(n){var r=n<=0?n=0:n>=1?(n=1,e-1):Math.floor(n*e),o=t[r],i=t[r+1],s=r>0?t[r-1]:2*o-i,a=r<e-1?t[r+2]:2*i-o;return Tn((n-r/e)*e,s,o,i,a)}})),qn((function(t){var e=t.length;return function(n){var r=Math.floor(((n%=1)<0?++n:n)*e),o=t[(r+e-1)%e],i=t[r%e],s=t[(r+1)%e],a=t[(r+2)%e];return Tn((n-r/e)*e,o,i,s,a)}}));var Rn=function(t,e){e||(e=[]);var n,r=t?Math.min(e.length,t.length):0,o=e.slice();return function(i){for(n=0;n<r;++n)o[n]=t[n]*(1-i)+e[n]*i;return o}};function $n(t){return ArrayBuffer.isView(t)&&!(t instanceof DataView)}function Dn(t,e){var n,r=e?e.length:0,o=t?Math.min(r,t.length):0,i=new Array(o),s=new Array(r);for(n=0;n<o;++n)i[n]=Hn(t[n],e[n]);for(;n<r;++n)s[n]=e[n];return function(t){for(n=0;n<o;++n)s[n]=i[n](t);return s}}var In=function(t,e){var n=new Date;return t=+t,e=+e,function(r){return n.setTime(t*(1-r)+e*r),n}},Ln=function(t,e){return t=+t,e=+e,function(n){return t*(1-n)+e*n}},Fn=function(t,e){var n,r={},o={};for(n in null!==t&&"object"==typeof t||(t={}),null!==e&&"object"==typeof e||(e={}),e)n in t?r[n]=Hn(t[n],e[n]):o[n]=e[n];return function(t){for(n in r)o[n]=r[n](t);return o}},On=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,Un=new RegExp(On.source,"g");var zn=function(t,e){var n,r,o,i=On.lastIndex=Un.lastIndex=0,s=-1,a=[],u=[];for(t+="",e+="";(n=On.exec(t))&&(r=Un.exec(e));)(o=r.index)>i&&(o=e.slice(i,o),a[s]?a[s]+=o:a[++s]=o),(n=n[0])===(r=r[0])?a[s]?a[s]+=r:a[++s]=r:(a[++s]=null,u.push({i:s,x:Ln(n,r)})),i=Un.lastIndex;return i<e.length&&(o=e.slice(i),a[s]?a[s]+=o:a[++s]=o),a.length<2?u[0]?function(t){return function(e){return t(e)+""}}(u[0].x):function(t){return function(){return t}}(e):(e=u.length,function(t){for(var n,r=0;r<e;++r)a[(n=u[r]).i]=n.x(t);return a.join("")})},Hn=function(t,e){var n,r=typeof e;return null==e||"boolean"===r?Cn(e):("number"===r?Ln:"string"===r?(n=dn(e))?(e=n,Nn):zn:e instanceof dn?Nn:e instanceof Date?In:$n(e)?Rn:Array.isArray(e)?Dn:"function"!=typeof e.valueOf&&"function"!=typeof e.toString||isNaN(e)?Fn:Ln)(t,e)},Vn=function(t,e){return t=+t,e=+e,function(n){return Math.round(t*(1-n)+e*n)}},Bn=function(t){return+t},Yn=[0,1];function Gn(t){return t}function Xn(t,e){return(e-=t=+t)?function(n){return(n-t)/e}:(n=isNaN(e)?NaN:.5,function(){return n});var n}function Wn(t){var e,n=t[0],r=t[t.length-1];return n>r&&(e=n,n=r,r=e),function(t){return Math.max(n,Math.min(r,t))}}function Zn(t,e,n){var r=t[0],o=t[1],i=e[0],s=e[1];return o<r?(r=Xn(o,r),i=n(s,i)):(r=Xn(r,o),i=n(i,s)),function(t){return i(r(t))}}function Qn(t,e,n){var r=Math.min(t.length,e.length)-1,o=new Array(r),i=new Array(r),s=-1;for(t[r]<t[0]&&(t=t.slice().reverse(),e=e.slice().reverse());++s<r;)o[s]=Xn(t[s],t[s+1]),i[s]=n(e[s],e[s+1]);return function(e){var n=Ae(t,e,1,r)-1;return i[n](o[n](e))}}function Jn(t,e){return e.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp()).unknown(t.unknown())}function Kn(){var t,e,n,r,o,i,s=Yn,a=Yn,u=Hn,l=Gn;function c(){return r=Math.min(s.length,a.length)>2?Qn:Zn,o=i=null,f}function f(e){return isNaN(e=+e)?n:(o||(o=r(s.map(t),a,u)))(t(l(e)))}return f.invert=function(n){return l(e((i||(i=r(a,s.map(t),Ln)))(n)))},f.domain=function(t){return arguments.length?(s=Ge.call(t,Bn),l===Gn||(l=Wn(s)),c()):s.slice()},f.range=function(t){return arguments.length?(a=Xe.call(t),c()):a.slice()},f.rangeRound=function(t){return a=Xe.call(t),u=Vn,c()},f.clamp=function(t){return arguments.length?(l=t?Wn(s):Gn,f):l!==Gn},f.interpolate=function(t){return arguments.length?(u=t,c()):u},f.unknown=function(t){return arguments.length?(n=t,f):n},function(n,r){return t=n,e=r,c()}}function tr(t,e){return Kn()(t,e)}var er=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function nr(t){if(!(e=er.exec(t)))throw new Error("invalid format: "+t);var e;return new rr({fill:e[1],align:e[2],sign:e[3],symbol:e[4],zero:e[5],width:e[6],comma:e[7],precision:e[8]&&e[8].slice(1),trim:e[9],type:e[10]})}function rr(t){this.fill=void 0===t.fill?" ":t.fill+"",this.align=void 0===t.align?">":t.align+"",this.sign=void 0===t.sign?"-":t.sign+"",this.symbol=void 0===t.symbol?"":t.symbol+"",this.zero=!!t.zero,this.width=void 0===t.width?void 0:+t.width,this.comma=!!t.comma,this.precision=void 0===t.precision?void 0:+t.precision,this.trim=!!t.trim,this.type=void 0===t.type?"":t.type+""}nr.prototype=rr.prototype,rr.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(void 0===this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(void 0===this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var or,ir,sr,ar,ur=function(t,e){if((n=(t=e?t.toExponential(e-1):t.toExponential()).indexOf("e"))<0)return null;var n,r=t.slice(0,n);return[r.length>1?r[0]+r.slice(2):r,+t.slice(n+1)]},lr=function(t){return(t=ur(Math.abs(t)))?t[1]:NaN},cr=function(t,e){var n=ur(t,e);if(!n)return t+"";var r=n[0],o=n[1];return o<0?"0."+new Array(-o).join("0")+r:r.length>o+1?r.slice(0,o+1)+"."+r.slice(o+1):r+new Array(o-r.length+2).join("0")},fr={"%":function(t,e){return(100*t).toFixed(e)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.round(t).toString(10)},e:function(t,e){return t.toExponential(e)},f:function(t,e){return t.toFixed(e)},g:function(t,e){return t.toPrecision(e)},o:function(t){return Math.round(t).toString(8)},p:function(t,e){return cr(100*t,e)},r:cr,s:function(t,e){var n=ur(t,e);if(!n)return t+"";var r=n[0],o=n[1],i=o-(or=3*Math.max(-8,Math.min(8,Math.floor(o/3))))+1,s=r.length;return i===s?r:i>s?r+new Array(i-s+1).join("0"):i>0?r.slice(0,i)+"."+r.slice(i):"0."+new Array(1-i).join("0")+ur(t,Math.max(0,e+i-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}},hr=function(t){return t},gr=Array.prototype.map,dr=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];ir=function(t){var e,n,r=void 0===t.grouping||void 0===t.thousands?hr:(e=gr.call(t.grouping,Number),n=t.thousands+"",function(t,r){for(var o=t.length,i=[],s=0,a=e[0],u=0;o>0&&a>0&&(u+a+1>r&&(a=Math.max(1,r-u)),i.push(t.substring(o-=a,o+a)),!((u+=a+1)>r));)a=e[s=(s+1)%e.length];return i.reverse().join(n)}),o=void 0===t.currency?"":t.currency[0]+"",i=void 0===t.currency?"":t.currency[1]+"",s=void 0===t.decimal?".":t.decimal+"",a=void 0===t.numerals?hr:function(t){return function(e){return e.replace(/[0-9]/g,(function(e){return t[+e]}))}}(gr.call(t.numerals,String)),u=void 0===t.percent?"%":t.percent+"",l=void 0===t.minus?"-":t.minus+"",c=void 0===t.nan?"NaN":t.nan+"";function f(t){var e=(t=nr(t)).fill,n=t.align,f=t.sign,h=t.symbol,g=t.zero,d=t.width,p=t.comma,m=t.precision,w=t.trim,v=t.type;"n"===v?(p=!0,v="g"):fr[v]||(void 0===m&&(m=12),w=!0,v="g"),(g||"0"===e&&"="===n)&&(g=!0,e="0",n="=");var y="$"===h?o:"#"===h&&/[boxX]/.test(v)?"0"+v.toLowerCase():"",b="$"===h?i:/[%p]/.test(v)?u:"",M=fr[v],_=/[defgprs%]/.test(v);function x(t){var o,i,u,h=y,x=b;if("c"===v)x=M(t)+x,t="";else{var k=(t=+t)<0||1/t<0;if(t=isNaN(t)?c:M(Math.abs(t),m),w&&(t=function(t){t:for(var e,n=t.length,r=1,o=-1;r<n;++r)switch(t[r]){case".":o=e=r;break;case"0":0===o&&(o=r),e=r;break;default:if(!+t[r])break t;o>0&&(o=0)}return o>0?t.slice(0,o)+t.slice(e+1):t}(t)),k&&0==+t&&"+"!==f&&(k=!1),h=(k?"("===f?f:l:"-"===f||"("===f?"":f)+h,x=("s"===v?dr[8+or/3]:"")+x+(k&&"("===f?")":""),_)for(o=-1,i=t.length;++o<i;)if(48>(u=t.charCodeAt(o))||u>57){x=(46===u?s+t.slice(o+1):t.slice(o))+x,t=t.slice(0,o);break}}p&&!g&&(t=r(t,1/0));var j=h.length+t.length+x.length,S=j<d?new Array(d-j+1).join(e):"";switch(p&&g&&(t=r(S+t,S.length?d-x.length:1/0),S=""),n){case"<":t=h+t+x+S;break;case"=":t=h+S+t+x;break;case"^":t=S.slice(0,j=S.length>>1)+h+t+x+S.slice(j);break;default:t=S+h+t+x}return a(t)}return m=void 0===m?6:/[gprs]/.test(v)?Math.max(1,Math.min(21,m)):Math.max(0,Math.min(20,m)),x.toString=function(){return t+""},x}return{format:f,formatPrefix:function(t,e){var n=f(((t=nr(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(lr(e)/3))),o=Math.pow(10,-r),i=dr[8+r/3];return function(t){return n(o*t)+i}}}}({decimal:".",thousands:",",grouping:[3],currency:["$",""],minus:"-"}),sr=ir.format,ar=ir.formatPrefix;var pr=function(t,e,n,r){var o,i=Le(t,e,n);switch((r=nr(null==r?",f":r)).type){case"s":var s=Math.max(Math.abs(t),Math.abs(e));return null!=r.precision||isNaN(o=function(t,e){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(lr(e)/3)))-lr(Math.abs(t)))}(i,s))||(r.precision=o),ar(r,s);case"":case"e":case"g":case"p":case"r":null!=r.precision||isNaN(o=function(t,e){return t=Math.abs(t),e=Math.abs(e)-t,Math.max(0,lr(e)-lr(t))+1}(i,Math.max(Math.abs(t),Math.abs(e))))||(r.precision=o-("e"===r.type));break;case"f":case"%":null!=r.precision||isNaN(o=function(t){return Math.max(0,-lr(Math.abs(t)))}(i))||(r.precision=o-2*("%"===r.type))}return sr(r)};function mr(t){var e=t.domain;return t.ticks=function(t){var n=e();return De(n[0],n[n.length-1],null==t?10:t)},t.tickFormat=function(t,n){var r=e();return pr(r[0],r[r.length-1],null==t?10:t,n)},t.nice=function(n){null==n&&(n=10);var r,o=e(),i=0,s=o.length-1,a=o[i],u=o[s];return u<a&&(r=a,a=u,u=r,r=i,i=s,s=r),(r=Ie(a,u,n))>0?r=Ie(a=Math.floor(a/r)*r,u=Math.ceil(u/r)*r,n):r<0&&(r=Ie(a=Math.ceil(a*r)/r,u=Math.floor(u*r)/r,n)),r>0?(o[i]=Math.floor(a/r)*r,o[s]=Math.ceil(u/r)*r,e(o)):r<0&&(o[i]=Math.ceil(a*r)/r,o[s]=Math.floor(u*r)/r,e(o)),t},t}function wr(){var t=tr(Gn,Gn);return t.copy=function(){return Jn(t,wr())},Fe.apply(t,arguments),mr(t)}var vr=new Date,yr=new Date;function br(t,e,n,r){function o(e){return t(e=0===arguments.length?new Date:new Date(+e)),e}return o.floor=function(e){return t(e=new Date(+e)),e},o.ceil=function(n){return t(n=new Date(n-1)),e(n,1),t(n),n},o.round=function(t){var e=o(t),n=o.ceil(t);return t-e<n-t?e:n},o.offset=function(t,n){return e(t=new Date(+t),null==n?1:Math.floor(n)),t},o.range=function(n,r,i){var s,a=[];if(n=o.ceil(n),i=null==i?1:Math.floor(i),!(n<r&&i>0))return a;do{a.push(s=new Date(+n)),e(n,i),t(n)}while(s<n&&n<r);return a},o.filter=function(n){return br((function(e){if(e>=e)for(;t(e),!n(e);)e.setTime(e-1)}),(function(t,r){if(t>=t)if(r<0)for(;++r<=0;)for(;e(t,-1),!n(t););else for(;--r>=0;)for(;e(t,1),!n(t););}))},n&&(o.count=function(e,r){return vr.setTime(+e),yr.setTime(+r),t(vr),t(yr),Math.floor(n(vr,yr))},o.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?o.filter(r?function(e){return r(e)%t==0}:function(e){return o.count(0,e)%t==0}):o:null}),o}var Mr=br((function(t){t.setMonth(0,1),t.setHours(0,0,0,0)}),(function(t,e){t.setFullYear(t.getFullYear()+e)}),(function(t,e){return e.getFullYear()-t.getFullYear()}),(function(t){return t.getFullYear()}));Mr.every=function(t){return isFinite(t=Math.floor(t))&&t>0?br((function(e){e.setFullYear(Math.floor(e.getFullYear()/t)*t),e.setMonth(0,1),e.setHours(0,0,0,0)}),(function(e,n){e.setFullYear(e.getFullYear()+n*t)})):null};var _r=Mr,xr=(Mr.range,br((function(t){t.setDate(1),t.setHours(0,0,0,0)}),(function(t,e){t.setMonth(t.getMonth()+e)}),(function(t,e){return e.getMonth()-t.getMonth()+12*(e.getFullYear()-t.getFullYear())}),(function(t){return t.getMonth()})));xr.range;function kr(t){return br((function(e){e.setDate(e.getDate()-(e.getDay()+7-t)%7),e.setHours(0,0,0,0)}),(function(t,e){t.setDate(t.getDate()+7*e)}),(function(t,e){return(e-t-6e4*(e.getTimezoneOffset()-t.getTimezoneOffset()))/6048e5}))}var jr=kr(0),Sr=kr(1),Tr=kr(2),Cr=kr(3),Pr=kr(4),Er=kr(5),Ar=kr(6),Nr=(jr.range,Sr.range,Tr.range,Cr.range,Pr.range,Er.range,Ar.range,br((function(t){t.setHours(0,0,0,0)}),(function(t,e){t.setDate(t.getDate()+e)}),(function(t,e){return(e-t-6e4*(e.getTimezoneOffset()-t.getTimezoneOffset()))/864e5}),(function(t){return t.getDate()-1}))),qr=Nr,Rr=(Nr.range,br((function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds()-6e4*t.getMinutes())}),(function(t,e){t.setTime(+t+36e5*e)}),(function(t,e){return(e-t)/36e5}),(function(t){return t.getHours()}))),$r=(Rr.range,br((function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds())}),(function(t,e){t.setTime(+t+6e4*e)}),(function(t,e){return(e-t)/6e4}),(function(t){return t.getMinutes()}))),Dr=($r.range,br((function(t){t.setTime(t-t.getMilliseconds())}),(function(t,e){t.setTime(+t+1e3*e)}),(function(t,e){return(e-t)/1e3}),(function(t){return t.getUTCSeconds()}))),Ir=(Dr.range,br((function(){}),(function(t,e){t.setTime(+t+e)}),(function(t,e){return e-t})));Ir.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?br((function(e){e.setTime(Math.floor(e/t)*t)}),(function(e,n){e.setTime(+e+n*t)}),(function(e,n){return(n-e)/t})):Ir:null};Ir.range;function Lr(t){return br((function(e){e.setUTCDate(e.getUTCDate()-(e.getUTCDay()+7-t)%7),e.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCDate(t.getUTCDate()+7*e)}),(function(t,e){return(e-t)/6048e5}))}var Fr=Lr(0),Or=Lr(1),Ur=Lr(2),zr=Lr(3),Hr=Lr(4),Vr=Lr(5),Br=Lr(6),Yr=(Fr.range,Or.range,Ur.range,zr.range,Hr.range,Vr.range,Br.range,br((function(t){t.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCDate(t.getUTCDate()+e)}),(function(t,e){return(e-t)/864e5}),(function(t){return t.getUTCDate()-1}))),Gr=Yr,Xr=(Yr.range,br((function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCFullYear(t.getUTCFullYear()+e)}),(function(t,e){return e.getUTCFullYear()-t.getUTCFullYear()}),(function(t){return t.getUTCFullYear()})));Xr.every=function(t){return isFinite(t=Math.floor(t))&&t>0?br((function(e){e.setUTCFullYear(Math.floor(e.getUTCFullYear()/t)*t),e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0)}),(function(e,n){e.setUTCFullYear(e.getUTCFullYear()+n*t)})):null};var Wr=Xr;Xr.range;function Zr(t){if(0<=t.y&&t.y<100){var e=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return e.setFullYear(t.y),e}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function Qr(t){if(0<=t.y&&t.y<100){var e=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return e.setUTCFullYear(t.y),e}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function Jr(t,e,n){return{y:t,m:e,d:n,H:0,M:0,S:0,L:0}}var Kr,to={"-":"",_:" ",0:"0"},eo=/^\s*\d+/,no=/^%/,ro=/[\\^$*+?|[\]().{}]/g;function oo(t,e,n){var r=t<0?"-":"",o=(r?-t:t)+"",i=o.length;return r+(i<n?new Array(n-i+1).join(e)+o:o)}function io(t){return t.replace(ro,"\\$&")}function so(t){return new RegExp("^(?:"+t.map(io).join("|")+")","i")}function ao(t){for(var e={},n=-1,r=t.length;++n<r;)e[t[n].toLowerCase()]=n;return e}function uo(t,e,n){var r=eo.exec(e.slice(n,n+1));return r?(t.w=+r[0],n+r[0].length):-1}function lo(t,e,n){var r=eo.exec(e.slice(n,n+1));return r?(t.u=+r[0],n+r[0].length):-1}function co(t,e,n){var r=eo.exec(e.slice(n,n+2));return r?(t.U=+r[0],n+r[0].length):-1}function fo(t,e,n){var r=eo.exec(e.slice(n,n+2));return r?(t.V=+r[0],n+r[0].length):-1}function ho(t,e,n){var r=eo.exec(e.slice(n,n+2));return r?(t.W=+r[0],n+r[0].length):-1}function go(t,e,n){var r=eo.exec(e.slice(n,n+4));return r?(t.y=+r[0],n+r[0].length):-1}function po(t,e,n){var r=eo.exec(e.slice(n,n+2));return r?(t.y=+r[0]+(+r[0]>68?1900:2e3),n+r[0].length):-1}function mo(t,e,n){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(e.slice(n,n+6));return r?(t.Z=r[1]?0:-(r[2]+(r[3]||"00")),n+r[0].length):-1}function wo(t,e,n){var r=eo.exec(e.slice(n,n+1));return r?(t.q=3*r[0]-3,n+r[0].length):-1}function vo(t,e,n){var r=eo.exec(e.slice(n,n+2));return r?(t.m=r[0]-1,n+r[0].length):-1}function yo(t,e,n){var r=eo.exec(e.slice(n,n+2));return r?(t.d=+r[0],n+r[0].length):-1}function bo(t,e,n){var r=eo.exec(e.slice(n,n+3));return r?(t.m=0,t.d=+r[0],n+r[0].length):-1}function Mo(t,e,n){var r=eo.exec(e.slice(n,n+2));return r?(t.H=+r[0],n+r[0].length):-1}function _o(t,e,n){var r=eo.exec(e.slice(n,n+2));return r?(t.M=+r[0],n+r[0].length):-1}function xo(t,e,n){var r=eo.exec(e.slice(n,n+2));return r?(t.S=+r[0],n+r[0].length):-1}function ko(t,e,n){var r=eo.exec(e.slice(n,n+3));return r?(t.L=+r[0],n+r[0].length):-1}function jo(t,e,n){var r=eo.exec(e.slice(n,n+6));return r?(t.L=Math.floor(r[0]/1e3),n+r[0].length):-1}function So(t,e,n){var r=no.exec(e.slice(n,n+1));return r?n+r[0].length:-1}function To(t,e,n){var r=eo.exec(e.slice(n));return r?(t.Q=+r[0],n+r[0].length):-1}function Co(t,e,n){var r=eo.exec(e.slice(n));return r?(t.s=+r[0],n+r[0].length):-1}function Po(t,e){return oo(t.getDate(),e,2)}function Eo(t,e){return oo(t.getHours(),e,2)}function Ao(t,e){return oo(t.getHours()%12||12,e,2)}function No(t,e){return oo(1+qr.count(_r(t),t),e,3)}function qo(t,e){return oo(t.getMilliseconds(),e,3)}function Ro(t,e){return qo(t,e)+"000"}function $o(t,e){return oo(t.getMonth()+1,e,2)}function Do(t,e){return oo(t.getMinutes(),e,2)}function Io(t,e){return oo(t.getSeconds(),e,2)}function Lo(t){var e=t.getDay();return 0===e?7:e}function Fo(t,e){return oo(jr.count(_r(t)-1,t),e,2)}function Oo(t,e){var n=t.getDay();return t=n>=4||0===n?Pr(t):Pr.ceil(t),oo(Pr.count(_r(t),t)+(4===_r(t).getDay()),e,2)}function Uo(t){return t.getDay()}function zo(t,e){return oo(Sr.count(_r(t)-1,t),e,2)}function Ho(t,e){return oo(t.getFullYear()%100,e,2)}function Vo(t,e){return oo(t.getFullYear()%1e4,e,4)}function Bo(t){var e=t.getTimezoneOffset();return(e>0?"-":(e*=-1,"+"))+oo(e/60|0,"0",2)+oo(e%60,"0",2)}function Yo(t,e){return oo(t.getUTCDate(),e,2)}function Go(t,e){return oo(t.getUTCHours(),e,2)}function Xo(t,e){return oo(t.getUTCHours()%12||12,e,2)}function Wo(t,e){return oo(1+Gr.count(Wr(t),t),e,3)}function Zo(t,e){return oo(t.getUTCMilliseconds(),e,3)}function Qo(t,e){return Zo(t,e)+"000"}function Jo(t,e){return oo(t.getUTCMonth()+1,e,2)}function Ko(t,e){return oo(t.getUTCMinutes(),e,2)}function ti(t,e){return oo(t.getUTCSeconds(),e,2)}function ei(t){var e=t.getUTCDay();return 0===e?7:e}function ni(t,e){return oo(Fr.count(Wr(t)-1,t),e,2)}function ri(t,e){var n=t.getUTCDay();return t=n>=4||0===n?Hr(t):Hr.ceil(t),oo(Hr.count(Wr(t),t)+(4===Wr(t).getUTCDay()),e,2)}function oi(t){return t.getUTCDay()}function ii(t,e){return oo(Or.count(Wr(t)-1,t),e,2)}function si(t,e){return oo(t.getUTCFullYear()%100,e,2)}function ai(t,e){return oo(t.getUTCFullYear()%1e4,e,4)}function ui(){return"+0000"}function li(){return"%"}function ci(t){return+t}function fi(t){return Math.floor(+t/1e3)}!function(t){Kr=function(t){var e=t.dateTime,n=t.date,r=t.time,o=t.periods,i=t.days,s=t.shortDays,a=t.months,u=t.shortMonths,l=so(o),c=ao(o),f=so(i),h=ao(i),g=so(s),d=ao(s),p=so(a),m=ao(a),w=so(u),v=ao(u),y={a:function(t){return s[t.getDay()]},A:function(t){return i[t.getDay()]},b:function(t){return u[t.getMonth()]},B:function(t){return a[t.getMonth()]},c:null,d:Po,e:Po,f:Ro,H:Eo,I:Ao,j:No,L:qo,m:$o,M:Do,p:function(t){return o[+(t.getHours()>=12)]},q:function(t){return 1+~~(t.getMonth()/3)},Q:ci,s:fi,S:Io,u:Lo,U:Fo,V:Oo,w:Uo,W:zo,x:null,X:null,y:Ho,Y:Vo,Z:Bo,"%":li},b={a:function(t){return s[t.getUTCDay()]},A:function(t){return i[t.getUTCDay()]},b:function(t){return u[t.getUTCMonth()]},B:function(t){return a[t.getUTCMonth()]},c:null,d:Yo,e:Yo,f:Qo,H:Go,I:Xo,j:Wo,L:Zo,m:Jo,M:Ko,p:function(t){return o[+(t.getUTCHours()>=12)]},q:function(t){return 1+~~(t.getUTCMonth()/3)},Q:ci,s:fi,S:ti,u:ei,U:ni,V:ri,w:oi,W:ii,x:null,X:null,y:si,Y:ai,Z:ui,"%":li},M={a:function(t,e,n){var r=g.exec(e.slice(n));return r?(t.w=d[r[0].toLowerCase()],n+r[0].length):-1},A:function(t,e,n){var r=f.exec(e.slice(n));return r?(t.w=h[r[0].toLowerCase()],n+r[0].length):-1},b:function(t,e,n){var r=w.exec(e.slice(n));return r?(t.m=v[r[0].toLowerCase()],n+r[0].length):-1},B:function(t,e,n){var r=p.exec(e.slice(n));return r?(t.m=m[r[0].toLowerCase()],n+r[0].length):-1},c:function(t,n,r){return k(t,e,n,r)},d:yo,e:yo,f:jo,H:Mo,I:Mo,j:bo,L:ko,m:vo,M:_o,p:function(t,e,n){var r=l.exec(e.slice(n));return r?(t.p=c[r[0].toLowerCase()],n+r[0].length):-1},q:wo,Q:To,s:Co,S:xo,u:lo,U:co,V:fo,w:uo,W:ho,x:function(t,e,r){return k(t,n,e,r)},X:function(t,e,n){return k(t,r,e,n)},y:po,Y:go,Z:mo,"%":So};function _(t,e){return function(n){var r,o,i,s=[],a=-1,u=0,l=t.length;for(n instanceof Date||(n=new Date(+n));++a<l;)37===t.charCodeAt(a)&&(s.push(t.slice(u,a)),null!=(o=to[r=t.charAt(++a)])?r=t.charAt(++a):o="e"===r?" ":"0",(i=e[r])&&(r=i(n,o)),s.push(r),u=a+1);return s.push(t.slice(u,a)),s.join("")}}function x(t,e){return function(n){var r,o,i=Jr(1900,void 0,1);if(k(i,t,n+="",0)!=n.length)return null;if("Q"in i)return new Date(i.Q);if("s"in i)return new Date(1e3*i.s+("L"in i?i.L:0));if(!e||"Z"in i||(i.Z=0),"p"in i&&(i.H=i.H%12+12*i.p),void 0===i.m&&(i.m="q"in i?i.q:0),"V"in i){if(i.V<1||i.V>53)return null;"w"in i||(i.w=1),"Z"in i?(o=(r=Qr(Jr(i.y,0,1))).getUTCDay(),r=o>4||0===o?Or.ceil(r):Or(r),r=Gr.offset(r,7*(i.V-1)),i.y=r.getUTCFullYear(),i.m=r.getUTCMonth(),i.d=r.getUTCDate()+(i.w+6)%7):(o=(r=Zr(Jr(i.y,0,1))).getDay(),r=o>4||0===o?Sr.ceil(r):Sr(r),r=qr.offset(r,7*(i.V-1)),i.y=r.getFullYear(),i.m=r.getMonth(),i.d=r.getDate()+(i.w+6)%7)}else("W"in i||"U"in i)&&("w"in i||(i.w="u"in i?i.u%7:"W"in i?1:0),o="Z"in i?Qr(Jr(i.y,0,1)).getUTCDay():Zr(Jr(i.y,0,1)).getDay(),i.m=0,i.d="W"in i?(i.w+6)%7+7*i.W-(o+5)%7:i.w+7*i.U-(o+6)%7);return"Z"in i?(i.H+=i.Z/100|0,i.M+=i.Z%100,Qr(i)):Zr(i)}}function k(t,e,n,r){for(var o,i,s=0,a=e.length,u=n.length;s<a;){if(r>=u)return-1;if(37===(o=e.charCodeAt(s++))){if(o=e.charAt(s++),!(i=M[o in to?e.charAt(s++):o])||(r=i(t,n,r))<0)return-1}else if(o!=n.charCodeAt(r++))return-1}return r}return(y.x=_(n,y),y.X=_(r,y),y.c=_(e,y),b.x=_(n,b),b.X=_(r,b),b.c=_(e,b),{format:function(t){var e=_(t+="",y);return e.toString=function(){return t},e},parse:function(t){var e=x(t+="",!1);return e.toString=function(){return t},e},utcFormat:function(t){var e=_(t+="",b);return e.toString=function(){return t},e},utcParse:function(t){var e=x(t+="",!0);return e.toString=function(){return t},e}})}(t),Kr.format,Kr.parse,Kr.utcFormat,Kr.utcParse}({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});var hi=br((function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCMonth(t.getUTCMonth()+e)}),(function(t,e){return e.getUTCMonth()-t.getUTCMonth()+12*(e.getUTCFullYear()-t.getUTCFullYear())}),(function(t){return t.getUTCMonth()})),gi=(hi.range,br((function(t){t.setUTCMinutes(0,0,0)}),(function(t,e){t.setTime(+t+36e5*e)}),(function(t,e){return(e-t)/36e5}),(function(t){return t.getUTCHours()}))),di=(gi.range,br((function(t){t.setUTCSeconds(0,0)}),(function(t,e){t.setTime(+t+6e4*e)}),(function(t,e){return(e-t)/6e4}),(function(t){return t.getUTCMinutes()})));di.range;var pi=function(t){for(var e=t.length/6|0,n=new Array(e),r=0;r<e;)n[r]="#"+t.slice(6*r,6*++r);return n}("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf");function mi(){}var wi=function(t){return null==t?mi:function(){return this.querySelector(t)}};function vi(){return[]}var yi=function(t){return new Array(t.length)};function bi(t,e){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=e}bi.prototype={constructor:bi,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,e){return this._parent.insertBefore(t,e)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};function Mi(t,e,n,r,o,i){for(var s,a=0,u=e.length,l=i.length;a<l;++a)(s=e[a])?(s.__data__=i[a],r[a]=s):n[a]=new bi(t,i[a]);for(;a<u;++a)(s=e[a])&&(o[a]=s)}function _i(t,e,n,r,o,i,s){var a,u,l,c={},f=e.length,h=i.length,g=new Array(f);for(a=0;a<f;++a)(u=e[a])&&(g[a]=l="$"+s.call(u,u.__data__,a,e),l in c?o[a]=u:c[l]=u);for(a=0;a<h;++a)(u=c[l="$"+s.call(t,i[a],a,i)])?(r[a]=u,u.__data__=i[a],c[l]=null):n[a]=new bi(t,i[a]);for(a=0;a<f;++a)(u=e[a])&&c[g[a]]===u&&(o[a]=u)}function xi(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}var ki="http://www.w3.org/1999/xhtml",ji={svg:"http://www.w3.org/2000/svg",xhtml:ki,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"},Si=function(t){var e=t+="",n=e.indexOf(":");return n>=0&&"xmlns"!==(e=t.slice(0,n))&&(t=t.slice(n+1)),ji.hasOwnProperty(e)?{space:ji[e],local:t}:t};function Ti(t){return function(){this.removeAttribute(t)}}function Ci(t){return function(){this.removeAttributeNS(t.space,t.local)}}function Pi(t,e){return function(){this.setAttribute(t,e)}}function Ei(t,e){return function(){this.setAttributeNS(t.space,t.local,e)}}function Ai(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttribute(t):this.setAttribute(t,n)}}function Ni(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,n)}}var qi=function(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView};function Ri(t){return function(){this.style.removeProperty(t)}}function $i(t,e,n){return function(){this.style.setProperty(t,e,n)}}function Di(t,e,n){return function(){var r=e.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,n)}}function Ii(t,e){return t.style.getPropertyValue(e)||qi(t).getComputedStyle(t,null).getPropertyValue(e)}function Li(t){return function(){delete this[t]}}function Fi(t,e){return function(){this[t]=e}}function Oi(t,e){return function(){var n=e.apply(this,arguments);null==n?delete this[t]:this[t]=n}}function Ui(t){return t.trim().split(/^|\s+/)}function zi(t){return t.classList||new Hi(t)}function Hi(t){this._node=t,this._names=Ui(t.getAttribute("class")||"")}function Vi(t,e){for(var n=zi(t),r=-1,o=e.length;++r<o;)n.add(e[r])}function Bi(t,e){for(var n=zi(t),r=-1,o=e.length;++r<o;)n.remove(e[r])}function Yi(t){return function(){Vi(this,t)}}function Gi(t){return function(){Bi(this,t)}}function Xi(t,e){return function(){(e.apply(this,arguments)?Vi:Bi)(this,t)}}Hi.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var e=this._names.indexOf(t);e>=0&&(this._names.splice(e,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};function Wi(){this.textContent=""}function Zi(t){return function(){this.textContent=t}}function Qi(t){return function(){var e=t.apply(this,arguments);this.textContent=null==e?"":e}}function Ji(){this.innerHTML=""}function Ki(t){return function(){this.innerHTML=t}}function ts(t){return function(){var e=t.apply(this,arguments);this.innerHTML=null==e?"":e}}function es(){this.nextSibling&&this.parentNode.appendChild(this)}function ns(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function rs(t){return function(){var e=this.ownerDocument,n=this.namespaceURI;return n===ki&&e.documentElement.namespaceURI===ki?e.createElement(t):e.createElementNS(n,t)}}function os(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}var is=function(t){var e=Si(t);return(e.local?os:rs)(e)};function ss(){return null}function as(){var t=this.parentNode;t&&t.removeChild(this)}function us(){var t=this.cloneNode(!1),e=this.parentNode;return e?e.insertBefore(t,this.nextSibling):t}function ls(){var t=this.cloneNode(!0),e=this.parentNode;return e?e.insertBefore(t,this.nextSibling):t}var cs={},fs=null;"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(cs={mouseenter:"mouseover",mouseleave:"mouseout"}));function hs(t,e,n){return t=gs(t,e,n),function(e){var n=e.relatedTarget;n&&(n===this||8&n.compareDocumentPosition(this))||t.call(this,e)}}function gs(t,e,n){return function(r){var o=fs;fs=r;try{t.call(this,this.__data__,e,n)}finally{fs=o}}}function ds(t){return t.trim().split(/^|\s+/).map((function(t){var e="",n=t.indexOf(".");return n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),{type:t,name:e}}))}function ps(t){return function(){var e=this.__on;if(e){for(var n,r=0,o=-1,i=e.length;r<i;++r)n=e[r],t.type&&n.type!==t.type||n.name!==t.name?e[++o]=n:this.removeEventListener(n.type,n.listener,n.capture);++o?e.length=o:delete this.__on}}}function ms(t,e,n){var r=cs.hasOwnProperty(t.type)?hs:gs;return function(o,i,s){var a,u=this.__on,l=r(e,i,s);if(u)for(var c=0,f=u.length;c<f;++c)if((a=u[c]).type===t.type&&a.name===t.name)return this.removeEventListener(a.type,a.listener,a.capture),this.addEventListener(a.type,a.listener=l,a.capture=n),void(a.value=e);this.addEventListener(t.type,l,n),a={type:t.type,name:t.name,value:e,listener:l,capture:n},u?u.push(a):this.__on=[a]}}function ws(t,e,n,r){var o=fs;t.sourceEvent=fs,fs=t;try{return e.apply(n,r)}finally{fs=o}}function vs(t,e,n){var r=qi(t),o=r.CustomEvent;"function"==typeof o?o=new o(e,n):(o=r.document.createEvent("Event"),n?(o.initEvent(e,n.bubbles,n.cancelable),o.detail=n.detail):o.initEvent(e,!1,!1)),t.dispatchEvent(o)}function ys(t,e){return function(){return vs(this,t,e)}}function bs(t,e){return function(){return vs(this,t,e.apply(this,arguments))}}var Ms=[null];function _s(t,e){this._groups=t,this._parents=e}function xs(){return new _s([[document.documentElement]],Ms)}_s.prototype=xs.prototype={constructor:_s,select:function(t){"function"!=typeof t&&(t=wi(t));for(var e=this._groups,n=e.length,r=new Array(n),o=0;o<n;++o)for(var i,s,a=e[o],u=a.length,l=r[o]=new Array(u),c=0;c<u;++c)(i=a[c])&&(s=t.call(i,i.__data__,c,a))&&("__data__"in i&&(s.__data__=i.__data__),l[c]=s);return new _s(r,this._parents)},selectAll:function(t){var e;"function"!=typeof t&&(t=null==(e=t)?vi:function(){return this.querySelectorAll(e)});for(var n=this._groups,r=n.length,o=[],i=[],s=0;s<r;++s)for(var a,u=n[s],l=u.length,c=0;c<l;++c)(a=u[c])&&(o.push(t.call(a,a.__data__,c,u)),i.push(a));return new _s(o,i)},filter:function(t){var e;"function"!=typeof t&&(e=t,t=function(){return this.matches(e)});for(var n=this._groups,r=n.length,o=new Array(r),i=0;i<r;++i)for(var s,a=n[i],u=a.length,l=o[i]=[],c=0;c<u;++c)(s=a[c])&&t.call(s,s.__data__,c,a)&&l.push(s);return new _s(o,this._parents)},data:function(t,e){if(!t)return d=new Array(this.size()),c=-1,this.each((function(t){d[++c]=t})),d;var n,r=e?_i:Mi,o=this._parents,i=this._groups;"function"!=typeof t&&(n=t,t=function(){return n});for(var s=i.length,a=new Array(s),u=new Array(s),l=new Array(s),c=0;c<s;++c){var f=o[c],h=i[c],g=h.length,d=t.call(f,f&&f.__data__,c,o),p=d.length,m=u[c]=new Array(p),w=a[c]=new Array(p);r(f,h,m,w,l[c]=new Array(g),d,e);for(var v,y,b=0,M=0;b<p;++b)if(v=m[b]){for(b>=M&&(M=b+1);!(y=w[M])&&++M<p;);v._next=y||null}}return(a=new _s(a,o))._enter=u,a._exit=l,a},enter:function(){return new _s(this._enter||this._groups.map(yi),this._parents)},exit:function(){return new _s(this._exit||this._groups.map(yi),this._parents)},join:function(t,e,n){var r=this.enter(),o=this,i=this.exit();return r="function"==typeof t?t(r):r.append(t+""),null!=e&&(o=e(o)),null==n?i.remove():n(i),r&&o?r.merge(o).order():o},merge:function(t){for(var e=this._groups,n=t._groups,r=e.length,o=n.length,i=Math.min(r,o),s=new Array(r),a=0;a<i;++a)for(var u,l=e[a],c=n[a],f=l.length,h=s[a]=new Array(f),g=0;g<f;++g)(u=l[g]||c[g])&&(h[g]=u);for(;a<r;++a)s[a]=e[a];return new _s(s,this._parents)},order:function(){for(var t=this._groups,e=-1,n=t.length;++e<n;)for(var r,o=t[e],i=o.length-1,s=o[i];--i>=0;)(r=o[i])&&(s&&4^r.compareDocumentPosition(s)&&s.parentNode.insertBefore(r,s),s=r);return this},sort:function(t){function e(e,n){return e&&n?t(e.__data__,n.__data__):!e-!n}t||(t=xi);for(var n=this._groups,r=n.length,o=new Array(r),i=0;i<r;++i){for(var s,a=n[i],u=a.length,l=o[i]=new Array(u),c=0;c<u;++c)(s=a[c])&&(l[c]=s);l.sort(e)}return new _s(o,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),e=-1;return this.each((function(){t[++e]=this})),t},node:function(){for(var t=this._groups,e=0,n=t.length;e<n;++e)for(var r=t[e],o=0,i=r.length;o<i;++o){var s=r[o];if(s)return s}return null},size:function(){var t=0;return this.each((function(){++t})),t},empty:function(){return!this.node()},each:function(t){for(var e=this._groups,n=0,r=e.length;n<r;++n)for(var o,i=e[n],s=0,a=i.length;s<a;++s)(o=i[s])&&t.call(o,o.__data__,s,i);return this},attr:function(t,e){var n=Si(t);if(arguments.length<2){var r=this.node();return n.local?r.getAttributeNS(n.space,n.local):r.getAttribute(n)}return this.each((null==e?n.local?Ci:Ti:"function"==typeof e?n.local?Ni:Ai:n.local?Ei:Pi)(n,e))},style:function(t,e,n){return arguments.length>1?this.each((null==e?Ri:"function"==typeof e?Di:$i)(t,e,null==n?"":n)):Ii(this.node(),t)},property:function(t,e){return arguments.length>1?this.each((null==e?Li:"function"==typeof e?Oi:Fi)(t,e)):this.node()[t]},classed:function(t,e){var n=Ui(t+"");if(arguments.length<2){for(var r=zi(this.node()),o=-1,i=n.length;++o<i;)if(!r.contains(n[o]))return!1;return!0}return this.each(("function"==typeof e?Xi:e?Yi:Gi)(n,e))},text:function(t){return arguments.length?this.each(null==t?Wi:("function"==typeof t?Qi:Zi)(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?Ji:("function"==typeof t?ts:Ki)(t)):this.node().innerHTML},raise:function(){return this.each(es)},lower:function(){return this.each(ns)},append:function(t){var e="function"==typeof t?t:is(t);return this.select((function(){return this.appendChild(e.apply(this,arguments))}))},insert:function(t,e){var n="function"==typeof t?t:is(t),r=null==e?ss:"function"==typeof e?e:wi(e);return this.select((function(){return this.insertBefore(n.apply(this,arguments),r.apply(this,arguments)||null)}))},remove:function(){return this.each(as)},clone:function(t){return this.select(t?ls:us)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,e,n){var r,o,i=ds(t+""),s=i.length;if(!(arguments.length<2)){for(a=e?ms:ps,null==n&&(n=!1),r=0;r<s;++r)this.each(a(i[r],e,n));return this}var a=this.node().__on;if(a)for(var u,l=0,c=a.length;l<c;++l)for(r=0,u=a[l];r<s;++r)if((o=i[r]).type===u.type&&o.name===u.name)return u.value},dispatch:function(t,e){return this.each(("function"==typeof e?bs:ys)(t,e))}};var ks=function(t){return"string"==typeof t?new _s([[document.querySelector(t)]],[document.documentElement]):new _s([[t]],Ms)},js=function(t){return"string"==typeof t?new _s([document.querySelectorAll(t)],[document.documentElement]):new _s([null==t?[]:t],Ms)},Ss={value:function(){}};function Ts(){for(var t,e=0,n=arguments.length,r={};e<n;++e){if(!(t=arguments[e]+"")||t in r||/[\s.]/.test(t))throw new Error("illegal type: "+t);r[t]=[]}return new Cs(r)}function Cs(t){this._=t}function Ps(t,e){return t.trim().split(/^|\s+/).map((function(t){var n="",r=t.indexOf(".");if(r>=0&&(n=t.slice(r+1),t=t.slice(0,r)),t&&!e.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:n}}))}function Es(t,e){for(var n,r=0,o=t.length;r<o;++r)if((n=t[r]).name===e)return n.value}function As(t,e,n){for(var r=0,o=t.length;r<o;++r)if(t[r].name===e){t[r]=Ss,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=n&&t.push({name:e,value:n}),t}Cs.prototype=Ts.prototype={constructor:Cs,on:function(t,e){var n,r=this._,o=Ps(t+"",r),i=-1,s=o.length;if(!(arguments.length<2)){if(null!=e&&"function"!=typeof e)throw new Error("invalid callback: "+e);for(;++i<s;)if(n=(t=o[i]).type)r[n]=As(r[n],t.name,e);else if(null==e)for(n in r)r[n]=As(r[n],t.name,null);return this}for(;++i<s;)if((n=(t=o[i]).type)&&(n=Es(r[n],t.name)))return n},copy:function(){var t={},e=this._;for(var n in e)t[n]=e[n].slice();return new Cs(t)},call:function(t,e){if((n=arguments.length-2)>0)for(var n,r,o=new Array(n),i=0;i<n;++i)o[i]=arguments[i+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(i=0,n=(r=this._[t]).length;i<n;++i)r[i].value.apply(e,o)},apply:function(t,e,n){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],o=0,i=r.length;o<i;++o)r[o].value.apply(e,n)}};var Ns=Ts,qs=function(){for(var t,e=fs;t=e.sourceEvent;)e=t;return e},Rs=function(t,e){var n=t.ownerSVGElement||t;if(n.createSVGPoint){var r=n.createSVGPoint();return r.x=e.clientX,r.y=e.clientY,[(r=r.matrixTransform(t.getScreenCTM().inverse())).x,r.y]}var o=t.getBoundingClientRect();return[e.clientX-o.left-t.clientLeft,e.clientY-o.top-t.clientTop]},$s=function(t){var e=qs();return e.changedTouches&&(e=e.changedTouches[0]),Rs(t,e)},Ds=function(t,e,n){arguments.length<3&&(n=e,e=qs().changedTouches);for(var r,o=0,i=e?e.length:0;o<i;++o)if((r=e[o]).identifier===n)return Rs(t,r);return null};function Is(){fs.stopImmediatePropagation()}var Ls=function(){fs.preventDefault(),fs.stopImmediatePropagation()},Fs=function(t){var e=t.document.documentElement,n=ks(t).on("dragstart.drag",Ls,!0);"onselectstart"in e?n.on("selectstart.drag",Ls,!0):(e.__noselect=e.style.MozUserSelect,e.style.MozUserSelect="none")};var Os=function(t){return function(){return t}};function Us(t,e,n,r,o,i,s,a,u,l){this.target=t,this.type=e,this.subject=n,this.identifier=r,this.active=o,this.x=i,this.y=s,this.dx=a,this.dy=u,this._=l}function zs(){return!fs.ctrlKey&&!fs.button}function Hs(){return this.parentNode}function Vs(t){return null==t?{x:fs.x,y:fs.y}:t}function Bs(){return navigator.maxTouchPoints||"ontouchstart"in this}Us.prototype.on=function(){var t=this._.on.apply(this._,arguments);return t===this._?this:t};var Ys=function(){var t,e,n,r,o=zs,i=Hs,s=Vs,a=Bs,u={},l=Ns("start","drag","end"),c=0,f=0;function h(t){t.on("mousedown.drag",g).filter(a).on("touchstart.drag",m).on("touchmove.drag",w).on("touchend.drag touchcancel.drag",v).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function g(){if(!r&&o.apply(this,arguments)){var s=y("mouse",i.apply(this,arguments),$s,this,arguments);s&&(ks(fs.view).on("mousemove.drag",d,!0).on("mouseup.drag",p,!0),Fs(fs.view),Is(),n=!1,t=fs.clientX,e=fs.clientY,s("start"))}}function d(){if(Ls(),!n){var r=fs.clientX-t,o=fs.clientY-e;n=r*r+o*o>f}u.mouse("drag")}function p(){var t,e,r,o;ks(fs.view).on("mousemove.drag mouseup.drag",null),t=fs.view,e=n,r=t.document.documentElement,o=ks(t).on("dragstart.drag",null),e&&(o.on("click.drag",Ls,!0),setTimeout((function(){o.on("click.drag",null)}),0)),"onselectstart"in r?o.on("selectstart.drag",null):(r.style.MozUserSelect=r.__noselect,delete r.__noselect),Ls(),u.mouse("end")}function m(){if(o.apply(this,arguments)){var t,e,n=fs.changedTouches,r=i.apply(this,arguments),s=n.length;for(t=0;t<s;++t)(e=y(n[t].identifier,r,Ds,this,arguments))&&(Is(),e("start"))}}function w(){var t,e,n=fs.changedTouches,r=n.length;for(t=0;t<r;++t)(e=u[n[t].identifier])&&(Ls(),e("drag"))}function v(){var t,e,n=fs.changedTouches,o=n.length;for(r&&clearTimeout(r),r=setTimeout((function(){r=null}),500),t=0;t<o;++t)(e=u[n[t].identifier])&&(Is(),e("end"))}function y(t,e,n,r,o){var i,a,f,g=n(e,t),d=l.copy();if(ws(new Us(h,"beforestart",i,t,c,g[0],g[1],0,0,d),(function(){return null!=(fs.subject=i=s.apply(r,o))&&(a=i.x-g[0]||0,f=i.y-g[1]||0,!0)})))return function s(l){var p,m=g;switch(l){case"start":u[t]=s,p=c++;break;case"end":delete u[t],--c;case"drag":g=n(e,t),p=c}ws(new Us(h,l,i,t,p,g[0]+a,g[1]+f,g[0]-m[0],g[1]-m[1],d),d.apply,d,[l,r,o])}}return h.filter=function(t){return arguments.length?(o="function"==typeof t?t:Os(!!t),h):o},h.container=function(t){return arguments.length?(i="function"==typeof t?t:Os(t),h):i},h.subject=function(t){return arguments.length?(s="function"==typeof t?t:Os(t),h):s},h.touchable=function(t){return arguments.length?(a="function"==typeof t?t:Os(!!t),h):a},h.on=function(){var t=l.on.apply(l,arguments);return t===l?h:t},h.clickDistance=function(t){return arguments.length?(f=(t=+t)*t,h):Math.sqrt(f)},h},Gs=function(t,e){var n;function r(){var r,o,i=n.length,s=0,a=0;for(r=0;r<i;++r)s+=(o=n[r]).x,a+=o.y;for(s=s/i-t,a=a/i-e,r=0;r<i;++r)(o=n[r]).x-=s,o.y-=a}return null==t&&(t=0),null==e&&(e=0),r.initialize=function(t){n=t},r.x=function(e){return arguments.length?(t=+e,r):t},r.y=function(t){return arguments.length?(e=+t,r):e},r},Xs=function(t){return function(){return t}},Ws=function(){return 1e-6*(Math.random()-.5)};function Zs(t,e,n,r){if(isNaN(e)||isNaN(n))return t;var o,i,s,a,u,l,c,f,h,g=t._root,d={data:r},p=t._x0,m=t._y0,w=t._x1,v=t._y1;if(!g)return t._root=d,t;for(;g.length;)if((l=e>=(i=(p+w)/2))?p=i:w=i,(c=n>=(s=(m+v)/2))?m=s:v=s,o=g,!(g=g[f=c<<1|l]))return o[f]=d,t;if(a=+t._x.call(null,g.data),u=+t._y.call(null,g.data),e===a&&n===u)return d.next=g,o?o[f]=d:t._root=d,t;do{o=o?o[f]=new Array(4):t._root=new Array(4),(l=e>=(i=(p+w)/2))?p=i:w=i,(c=n>=(s=(m+v)/2))?m=s:v=s}while((f=c<<1|l)==(h=(u>=s)<<1|a>=i));return o[h]=g,o[f]=d,t}var Qs=function(t,e,n,r,o){this.node=t,this.x0=e,this.y0=n,this.x1=r,this.y1=o};function Js(t){return t[0]}function Ks(t){return t[1]}function ta(t,e,n){var r=new ea(null==e?Js:e,null==n?Ks:n,NaN,NaN,NaN,NaN);return null==t?r:r.addAll(t)}function ea(t,e,n,r,o,i){this._x=t,this._y=e,this._x0=n,this._y0=r,this._x1=o,this._y1=i,this._root=void 0}function na(t){for(var e={data:t.data},n=e;t=t.next;)n=n.next={data:t.data};return e}var ra=ta.prototype=ea.prototype;ra.copy=function(){var t,e,n=new ea(this._x,this._y,this._x0,this._y0,this._x1,this._y1),r=this._root;if(!r)return n;if(!r.length)return n._root=na(r),n;for(t=[{source:r,target:n._root=new Array(4)}];r=t.pop();)for(var o=0;o<4;++o)(e=r.source[o])&&(e.length?t.push({source:e,target:r.target[o]=new Array(4)}):r.target[o]=na(e));return n},ra.add=function(t){var e=+this._x.call(null,t),n=+this._y.call(null,t);return Zs(this.cover(e,n),e,n,t)},ra.addAll=function(t){var e,n,r,o,i=t.length,s=new Array(i),a=new Array(i),u=1/0,l=1/0,c=-1/0,f=-1/0;for(n=0;n<i;++n)isNaN(r=+this._x.call(null,e=t[n]))||isNaN(o=+this._y.call(null,e))||(s[n]=r,a[n]=o,r<u&&(u=r),r>c&&(c=r),o<l&&(l=o),o>f&&(f=o));if(u>c||l>f)return this;for(this.cover(u,l).cover(c,f),n=0;n<i;++n)Zs(this,s[n],a[n],t[n]);return this},ra.cover=function(t,e){if(isNaN(t=+t)||isNaN(e=+e))return this;var n=this._x0,r=this._y0,o=this._x1,i=this._y1;if(isNaN(n))o=(n=Math.floor(t))+1,i=(r=Math.floor(e))+1;else{for(var s,a,u=o-n,l=this._root;n>t||t>=o||r>e||e>=i;)switch(a=(e<r)<<1|t<n,(s=new Array(4))[a]=l,l=s,u*=2,a){case 0:o=n+u,i=r+u;break;case 1:n=o-u,i=r+u;break;case 2:o=n+u,r=i-u;break;case 3:n=o-u,r=i-u}this._root&&this._root.length&&(this._root=l)}return this._x0=n,this._y0=r,this._x1=o,this._y1=i,this},ra.data=function(){var t=[];return this.visit((function(e){if(!e.length)do{t.push(e.data)}while(e=e.next)})),t},ra.extent=function(t){return arguments.length?this.cover(+t[0][0],+t[0][1]).cover(+t[1][0],+t[1][1]):isNaN(this._x0)?void 0:[[this._x0,this._y0],[this._x1,this._y1]]},ra.find=function(t,e,n){var r,o,i,s,a,u,l,c=this._x0,f=this._y0,h=this._x1,g=this._y1,d=[],p=this._root;for(p&&d.push(new Qs(p,c,f,h,g)),null==n?n=1/0:(c=t-n,f=e-n,h=t+n,g=e+n,n*=n);u=d.pop();)if(!(!(p=u.node)||(o=u.x0)>h||(i=u.y0)>g||(s=u.x1)<c||(a=u.y1)<f))if(p.length){var m=(o+s)/2,w=(i+a)/2;d.push(new Qs(p[3],m,w,s,a),new Qs(p[2],o,w,m,a),new Qs(p[1],m,i,s,w),new Qs(p[0],o,i,m,w)),(l=(e>=w)<<1|t>=m)&&(u=d[d.length-1],d[d.length-1]=d[d.length-1-l],d[d.length-1-l]=u)}else{var v=t-+this._x.call(null,p.data),y=e-+this._y.call(null,p.data),b=v*v+y*y;if(b<n){var M=Math.sqrt(n=b);c=t-M,f=e-M,h=t+M,g=e+M,r=p.data}}return r},ra.remove=function(t){if(isNaN(i=+this._x.call(null,t))||isNaN(s=+this._y.call(null,t)))return this;var e,n,r,o,i,s,a,u,l,c,f,h,g=this._root,d=this._x0,p=this._y0,m=this._x1,w=this._y1;if(!g)return this;if(g.length)for(;;){if((l=i>=(a=(d+m)/2))?d=a:m=a,(c=s>=(u=(p+w)/2))?p=u:w=u,e=g,!(g=g[f=c<<1|l]))return this;if(!g.length)break;(e[f+1&3]||e[f+2&3]||e[f+3&3])&&(n=e,h=f)}for(;g.data!==t;)if(r=g,!(g=g.next))return this;return(o=g.next)&&delete g.next,r?(o?r.next=o:delete r.next,this):e?(o?e[f]=o:delete e[f],(g=e[0]||e[1]||e[2]||e[3])&&g===(e[3]||e[2]||e[1]||e[0])&&!g.length&&(n?n[h]=g:this._root=g),this):(this._root=o,this)},ra.removeAll=function(t){for(var e=0,n=t.length;e<n;++e)this.remove(t[e]);return this},ra.root=function(){return this._root},ra.size=function(){var t=0;return this.visit((function(e){if(!e.length)do{++t}while(e=e.next)})),t},ra.visit=function(t){var e,n,r,o,i,s,a=[],u=this._root;for(u&&a.push(new Qs(u,this._x0,this._y0,this._x1,this._y1));e=a.pop();)if(!t(u=e.node,r=e.x0,o=e.y0,i=e.x1,s=e.y1)&&u.length){var l=(r+i)/2,c=(o+s)/2;(n=u[3])&&a.push(new Qs(n,l,c,i,s)),(n=u[2])&&a.push(new Qs(n,r,c,l,s)),(n=u[1])&&a.push(new Qs(n,l,o,i,c)),(n=u[0])&&a.push(new Qs(n,r,o,l,c))}return this},ra.visitAfter=function(t){var e,n=[],r=[];for(this._root&&n.push(new Qs(this._root,this._x0,this._y0,this._x1,this._y1));e=n.pop();){var o=e.node;if(o.length){var i,s=e.x0,a=e.y0,u=e.x1,l=e.y1,c=(s+u)/2,f=(a+l)/2;(i=o[0])&&n.push(new Qs(i,s,a,c,f)),(i=o[1])&&n.push(new Qs(i,c,a,u,f)),(i=o[2])&&n.push(new Qs(i,s,f,c,l)),(i=o[3])&&n.push(new Qs(i,c,f,u,l))}r.push(e)}for(;e=r.pop();)t(e.node,e.x0,e.y0,e.x1,e.y1);return this},ra.x=function(t){return arguments.length?(this._x=t,this):this._x},ra.y=function(t){return arguments.length?(this._y=t,this):this._y};function oa(t){return t.index}function ia(t,e){var n=t.get(e);if(!n)throw new Error("missing: "+e);return n}var sa,aa,ua=function(t){var e,n,r,o,i,s=oa,a=function(t){return 1/Math.min(o[t.source.index],o[t.target.index])},u=Xs(30),l=1;function c(r){for(var o=0,s=t.length;o<l;++o)for(var a,u,c,f,h,g,d,p=0;p<s;++p)u=(a=t[p]).source,f=(c=a.target).x+c.vx-u.x-u.vx||Ws(),h=c.y+c.vy-u.y-u.vy||Ws(),f*=g=((g=Math.sqrt(f*f+h*h))-n[p])/g*r*e[p],h*=g,c.vx-=f*(d=i[p]),c.vy-=h*d,u.vx+=f*(d=1-d),u.vy+=h*d}function f(){if(r){var a,u,l=r.length,c=t.length,f=ze(r,s);for(a=0,o=new Array(l);a<c;++a)(u=t[a]).index=a,"object"!=typeof u.source&&(u.source=ia(f,u.source)),"object"!=typeof u.target&&(u.target=ia(f,u.target)),o[u.source.index]=(o[u.source.index]||0)+1,o[u.target.index]=(o[u.target.index]||0)+1;for(a=0,i=new Array(c);a<c;++a)u=t[a],i[a]=o[u.source.index]/(o[u.source.index]+o[u.target.index]);e=new Array(c),h(),n=new Array(c),g()}}function h(){if(r)for(var n=0,o=t.length;n<o;++n)e[n]=+a(t[n],n,t)}function g(){if(r)for(var e=0,o=t.length;e<o;++e)n[e]=+u(t[e],e,t)}return null==t&&(t=[]),c.initialize=function(t){r=t,f()},c.links=function(e){return arguments.length?(t=e,f(),c):t},c.id=function(t){return arguments.length?(s=t,c):s},c.iterations=function(t){return arguments.length?(l=+t,c):l},c.strength=function(t){return arguments.length?(a="function"==typeof t?t:Xs(+t),h(),c):a},c.distance=function(t){return arguments.length?(u="function"==typeof t?t:Xs(+t),g(),c):u},c},la=0,ca=0,fa=0,ha=0,ga=0,da=0,pa="object"==typeof performance&&performance.now?performance:Date,ma="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function wa(){return ga||(ma(va),ga=pa.now()+da)}function va(){ga=0}function ya(){this._call=this._time=this._next=null}function ba(t,e,n){var r=new ya;return r.restart(t,e,n),r}function Ma(){ga=(ha=pa.now())+da,la=ca=0;try{!function(){wa(),++la;for(var t,e=sa;e;)(t=ga-e._time)>=0&&e._call.call(null,t),e=e._next;--la}()}finally{la=0,function(){var t,e,n=sa,r=1/0;for(;n;)n._call?(r>n._time&&(r=n._time),t=n,n=n._next):(e=n._next,n._next=null,n=t?t._next=e:sa=e);aa=t,xa(r)}(),ga=0}}function _a(){var t=pa.now(),e=t-ha;e>1e3&&(da-=e,ha=t)}function xa(t){la||(ca&&(ca=clearTimeout(ca)),t-ga>24?(t<1/0&&(ca=setTimeout(Ma,t-pa.now()-da)),fa&&(fa=clearInterval(fa))):(fa||(ha=pa.now(),fa=setInterval(_a,1e3)),la=1,ma(Ma)))}function ka(t){return t.x}function ja(t){return t.y}ya.prototype=ba.prototype={constructor:ya,restart:function(t,e,n){if("function"!=typeof t)throw new TypeError("callback is not a function");n=(null==n?wa():+n)+(null==e?0:+e),this._next||aa===this||(aa?aa._next=this:sa=this,aa=this),this._call=t,this._time=n,xa()},stop:function(){this._call&&(this._call=null,this._time=1/0,xa())}};var Sa=Math.PI*(3-Math.sqrt(5)),Ta=function(t){var e,n=1,r=.001,o=1-Math.pow(r,1/300),i=0,s=.6,a=ze(),u=ba(c),l=Ns("tick","end");function c(){f(),l.call("tick",e),n<r&&(u.stop(),l.call("end",e))}function f(r){var u,l,c=t.length;void 0===r&&(r=1);for(var f=0;f<r;++f)for(n+=(i-n)*o,a.each((function(t){t(n)})),u=0;u<c;++u)null==(l=t[u]).fx?l.x+=l.vx*=s:(l.x=l.fx,l.vx=0),null==l.fy?l.y+=l.vy*=s:(l.y=l.fy,l.vy=0);return e}function h(){for(var e,n=0,r=t.length;n<r;++n){if((e=t[n]).index=n,null!=e.fx&&(e.x=e.fx),null!=e.fy&&(e.y=e.fy),isNaN(e.x)||isNaN(e.y)){var o=10*Math.sqrt(n),i=n*Sa;e.x=o*Math.cos(i),e.y=o*Math.sin(i)}(isNaN(e.vx)||isNaN(e.vy))&&(e.vx=e.vy=0)}}function g(e){return e.initialize&&e.initialize(t),e}return null==t&&(t=[]),h(),e={tick:f,restart:function(){return u.restart(c),e},stop:function(){return u.stop(),e},nodes:function(n){return arguments.length?(t=n,h(),a.each(g),e):t},alpha:function(t){return arguments.length?(n=+t,e):n},alphaMin:function(t){return arguments.length?(r=+t,e):r},alphaDecay:function(t){return arguments.length?(o=+t,e):+o},alphaTarget:function(t){return arguments.length?(i=+t,e):i},velocityDecay:function(t){return arguments.length?(s=1-t,e):1-s},force:function(t,n){return arguments.length>1?(null==n?a.remove(t):a.set(t,g(n)),e):a.get(t)},find:function(e,n,r){var o,i,s,a,u,l=0,c=t.length;for(null==r?r=1/0:r*=r,l=0;l<c;++l)(s=(o=e-(a=t[l]).x)*o+(i=n-a.y)*i)<r&&(u=a,r=s);return u},on:function(t,n){return arguments.length>1?(l.on(t,n),e):l.on(t)}}},Ca=function(){var t,e,n,r,o=Xs(-30),i=1,s=1/0,a=.81;function u(r){var o,i=t.length,s=ta(t,ka,ja).visitAfter(c);for(n=r,o=0;o<i;++o)e=t[o],s.visit(f)}function l(){if(t){var e,n,i=t.length;for(r=new Array(i),e=0;e<i;++e)n=t[e],r[n.index]=+o(n,e,t)}}function c(t){var e,n,o,i,s,a=0,u=0;if(t.length){for(o=i=s=0;s<4;++s)(e=t[s])&&(n=Math.abs(e.value))&&(a+=e.value,u+=n,o+=n*e.x,i+=n*e.y);t.x=o/u,t.y=i/u}else{(e=t).x=e.data.x,e.y=e.data.y;do{a+=r[e.data.index]}while(e=e.next)}t.value=a}function f(t,o,u,l){if(!t.value)return!0;var c=t.x-e.x,f=t.y-e.y,h=l-o,g=c*c+f*f;if(h*h/a<g)return g<s&&(0===c&&(g+=(c=Ws())*c),0===f&&(g+=(f=Ws())*f),g<i&&(g=Math.sqrt(i*g)),e.vx+=c*t.value*n/g,e.vy+=f*t.value*n/g),!0;if(!(t.length||g>=s)){(t.data!==e||t.next)&&(0===c&&(g+=(c=Ws())*c),0===f&&(g+=(f=Ws())*f),g<i&&(g=Math.sqrt(i*g)));do{t.data!==e&&(h=r[t.data.index]*n/g,e.vx+=c*h,e.vy+=f*h)}while(t=t.next)}}return u.initialize=function(e){t=e,l()},u.strength=function(t){return arguments.length?(o="function"==typeof t?t:Xs(+t),l(),u):o},u.distanceMin=function(t){return arguments.length?(i=t*t,u):Math.sqrt(i)},u.distanceMax=function(t){return arguments.length?(s=t*t,u):Math.sqrt(s)},u.theta=function(t){return arguments.length?(a=t*t,u):Math.sqrt(a)},u};function Pa(t,e,n){const r=t.slice();return r[17]=e[n],r}function Ea(t,e,n){const r=t.slice();return r[20]=e[n],r}function Aa(t){let e,n,r,o,i,s,a,u,l,c=t[20].source.id+"";return{c(){e=M("g"),n=M("line"),r=M("title"),o=_(c),S(n,"x1",i=t[20].source.x),S(n,"y1",s=t[2](t[20].source.y)),S(n,"x2",a=t[20].target.x),S(n,"y2",u=t[2](t[20].target.y)),S(n,"transform",l="translate(0 "+t[1]+") scale(1 -1)"),S(e,"stroke","#999"),S(e,"stroke-opacity","0.6")},m(t,i){w(t,e,i),m(e,n),m(n,r),m(r,o)},p(t,e){8&e&&c!==(c=t[20].source.id+"")&&C(o,c),8&e&&i!==(i=t[20].source.x)&&S(n,"x1",i),12&e&&s!==(s=t[2](t[20].source.y))&&S(n,"y1",s),8&e&&a!==(a=t[20].target.x)&&S(n,"x2",a),12&e&&u!==(u=t[2](t[20].target.y))&&S(n,"y2",u),2&e&&l!==(l="translate(0 "+t[1]+") scale(1 -1)")&&S(n,"transform",l)},d(t){t&&v(e)}}}function Na(t){let e,n,r,o,i,s,a,u=t[17].id+"";return{c(){e=M("circle"),n=M("title"),r=_(u),S(e,"class","node svelte-3l01mv"),S(e,"r","5"),S(e,"fill",o=t[5](t[17].group)),S(e,"cx",i=t[17].x),S(e,"cy",s=t[2](t[17].y)),S(e,"transform",a="translate(0 "+t[1]+") scale(1 -1)")},m(t,o){w(t,e,o),m(e,n),m(n,r)},p(t,n){16&n&&u!==(u=t[17].id+"")&&C(r,u),16&n&&o!==(o=t[5](t[17].group))&&S(e,"fill",o),16&n&&i!==(i=t[17].x)&&S(e,"cx",i),20&n&&s!==(s=t[2](t[17].y))&&S(e,"cy",s),2&n&&a!==(a="translate(0 "+t[1]+") scale(1 -1)")&&S(e,"transform",a)},d(t){t&&v(e)}}}function qa(t){let e,n,o,i=t[3],s=[];for(let e=0;e<i.length;e+=1)s[e]=Aa(Ea(t,i,e));let a=t[4],u=[];for(let e=0;e<a.length;e+=1)u[e]=Na(Pa(t,a,e));return{c(){e=M("svg");for(let t=0;t<s.length;t+=1)s[t].c();n=k();for(let t=0;t<u.length;t+=1)u[t].c();S(e,"class","svelte-3l01mv")},m(r,i){w(r,e,i);for(let t=0;t<s.length;t+=1)s[t].m(e,null);m(e,n);for(let t=0;t<u.length;t+=1)u[t].m(e,null);t[16](e),o=j(window,"resize",t[6])},p(t,[r]){if(14&r){let o;for(i=t[3],o=0;o<i.length;o+=1){const a=Ea(t,i,o);s[o]?s[o].p(a,r):(s[o]=Aa(a),s[o].c(),s[o].m(e,n))}for(;o<s.length;o+=1)s[o].d(1);s.length=i.length}if(54&r){let n;for(a=t[4],n=0;n<a.length;n+=1){const o=Pa(t,a,n);u[n]?u[n].p(o,r):(u[n]=Na(o),u[n].c(),u[n].m(e,null))}for(;n<u.length;n+=1)u[n].d(1);u.length=a.length}},i:r,o:r,d(n){n&&v(e),y(s,n),y(u,n),t[16](null),o()}}}function Ra(t,e,n){let r,o={scaleLinear:wr,scaleOrdinal:Ze,schemeCategory10:pi,select:ks,selectAll:js,drag:Ys,forceSimulation:Ta,forceLink:ua,forceManyBody:Ca,forceCenter:Gs},{graph:i}=e,s=500,a=600;const u=o.scaleOrdinal(o.schemeCategory10);function l(){n(1,({width:s,height:a}=r.getBoundingClientRect()),a),console.log("resize()",s,a)}let c,f,h,g;function d(){fs.active||c.alphaTarget(.3).restart(),fs.subject.fx=fs.subject.x,fs.subject.fy=fs.subject.y}function p(){fs.subject.fx=fs.x,fs.subject.fy=fs.y}function m(){fs.active||c.alphaTarget(0),fs.subject.fx=null,fs.subject.fy=null}function w(){return c.find(fs.x,fs.y)}function v(){l(),c=o.forceSimulation(g).force("link",o.forceLink(h).id(t=>t.id)).force("charge",o.forceManyBody()).force("center",o.forceCenter(s/2,a/2)).on("tick",(function(){c.tick(),n(4,g=[...g]),n(3,h=[...h])})),o.select(r).call(o.drag().container(r).subject(w).on("start",d).on("drag",p).on("end",m))}return O(v),t.$set=t=>{"graph"in t&&n(7,i=t.graph)},t.$$.update=()=>{2&t.$$.dirty&&n(2,f=wr().domain([0,a]).range([a,0])),128&t.$$.dirty&&n(3,h=i.links.map(t=>Object.create(t))),128&t.$$.dirty&&n(4,g=i.nodes.map(t=>Object.create(t)))},[r,a,f,h,g,u,l,i,s,c,o,d,p,m,w,v,function(t){z[t?"unshift":"push"](()=>{n(0,r=t)})}]}var $a=class extends ht{constructor(t){var e;super(),document.getElementById("svelte-3l01mv-style")||((e=b("style")).id="svelte-3l01mv-style",e.textContent="svg.svelte-3l01mv{width:100%;height:100%;float:left}circle.svelte-3l01mv{stroke:#fff;stroke-width:1.5}",m(document.head,e)),ft(this,t,Ra,qa,l,{graph:7})}},Da={nodes:[{id:"Myriel",group:1},{id:"Napoleon",group:1},{id:"Mlle.Baptistine",group:1}],links:[{source:"Napoleon",target:"Myriel"},{source:"Mlle.Baptistine",target:"Myriel"}]};function Ia(t){let e,n;const o=new $a({props:{graph:Da}});return{c(){var t;e=b("div"),(t=o.$$.fragment)&&t.c(),S(e,"class","chart svelte-4pk107")},m(t,r){w(t,e,r),lt(o,e,null),n=!0},p:r,i(t){n||(ot(o.$$.fragment,t),n=!0)},o(t){it(o.$$.fragment,t),n=!1},d(t){t&&v(e),ct(o)}}}function La(t){return Da.nodes.push({id:"cam1",group:2}),Da.links.push({source:"Myriel",target:"cam1"}),console.log(Da),[]}var Fa=class extends ht{constructor(t){var e;super(),document.getElementById("svelte-4pk107-style")||((e=b("style")).id="svelte-4pk107-style",e.textContent=".chart.svelte-4pk107{width:100%;height:500px}",m(document.head,e)),ft(this,t,La,Ia,l,{})}},Oa=n(2);function Ua(t){let e,n;return{c(){e=b("i"),e.innerHTML='<span class="tooltiptext">Toggle fullscreen</span>',S(e,"class","fas fa-expand-arrows-alt tooltip-fs"),E(e,"width","20px")},m(r,o){w(r,e,o),n=j(e,"click",t[13])},p:r,d(t){t&&v(e),n()}}}function za(t){let e,n;return{c(){e=b("i"),e.innerHTML='<span class="tooltiptext">Toggle fullscreen</span>',S(e,"class","fa fa-compress-arrows-alt tooltip-fs"),E(e,"width","10%")},m(r,o){w(r,e,o),n=j(e,"click",t[13])},p:r,d(t){t&&v(e),n()}}}function Ha(t){let e,n;return{c(){e=b("i"),e.innerHTML='<span class="tooltiptext">Play synchronous GBP</span>',S(e,"class","fa fa-play tooltip"),E(e,"width","25px")},m(r,o){w(r,e,o),n=j(e,"click",t[11])},p:r,d(t){t&&v(e),n()}}}function Va(t){let e,n;return{c(){e=b("i"),e.innerHTML='<span class="tooltiptext">Pause synchronous GBP</span>',S(e,"class","fa fa-pause tooltip"),E(e,"width","25px")},m(r,o){w(r,e,o),n=j(e,"click",t[11])},p:r,d(t){t&&v(e),n()}}}function Ba(t){let e,n;return{c(){e=b("button"),e.innerHTML='<b>MAP</b> \n          <span class="tooltiptext">Display MAP</span>',S(e,"class","tooltip"),E(e,"color","rgb(39, 36, 36, 0.6)")},m(r,o){w(r,e,o),n=j(e,"click",t[12])},p:r,d(t){t&&v(e),n()}}}function Ya(t){let e,n;return{c(){e=b("button"),e.innerHTML='<b>MAP</b> \n          <span class="tooltiptext">Hide MAP</span>',S(e,"class","tooltip")},m(r,o){w(r,e,o),n=j(e,"click",t[12])},p:r,d(t){t&&v(e),n()}}}function Ga(t){let e,n,o,i,s,u,l,c,f,h,g,d,p,y,M,k,T,E,A,N,q,R,$,D,I,L,F,O,U,z,H,V,B,Y,G,X,W,Z,Q,J,K,tt,et,nt,rt,ot,it,st,at,ut,lt,ct,ft,ht,gt,dt,pt,mt;function wt(t,e){return t[2]?za:Ua}let vt=wt(t),yt=vt(t);function bt(t,e){return t[7]?Va:Ha}let Mt=bt(t),_t=Mt(t);function xt(t,e){return t[1]?Ya:Ba}let kt=xt(t),jt=kt(t);return{c(){e=b("div"),n=b("div"),o=b("canvas"),u=x(),l=b("div"),yt.c(),c=x(),f=b("div"),_t.c(),h=x(),g=b("i"),g.innerHTML='<span class="tooltiptext">Reset</span>',d=x(),jt.c(),p=x(),y=b("div"),y.innerHTML='<i class="fa fa-keyboard-o"></i> \n        <div id="hint">\n          Use WASD to move the robot.                \n        </div>',M=x(),k=b("div"),T=b("b"),E=_("Iteration "),A=_(t[8]),N=_("   (iters / s: "),q=_(t[9]),R=_(")\n    "),$=b("input"),D=b("br"),I=x(),L=b("br"),F=b("b"),F.innerHTML="Standard deviation of noise in Gaussian measurement models:<br>",O=x(),U=b("b"),U.textContent="Odometry",z=b("br"),H=_("\n    Distance factors, σ = "),V=b("b"),B=_(t[3]),Y=x(),G=b("input"),X=b("br"),W=_(" \n    Angle factors, σ = "),Z=b("b"),Q=_(t[4]),J=x(),K=b("input"),tt=b("br"),et=x(),nt=b("b"),nt.textContent="Landmark Measurements",rt=b("br"),ot=_("\n    Distance factors, σ = "),it=b("b"),st=_(t[5]),at=x(),ut=b("input"),lt=b("br"),ct=_(" \n    Angle factors, σ = "),ft=b("b"),ht=_(t[6]),gt=x(),dt=b("input"),pt=b("br"),S(o,"width",i=1400),S(o,"height",s=800),S(l,"class","top-left"),S(g,"class","fa fa-repeat tooltip"),S(y,"id","demo-tip"),S(f,"class","buttons-panel"),S(n,"id","gbp-container"),S($,"type","range"),S($,"min","1"),S($,"max","50"),S(G,"type","range"),S(G,"min","5"),S(G,"max","40"),S(K,"type","range"),S(K,"min","0.01"),S(K,"max","1"),S(K,"step","0.01"),S(ut,"type","range"),S(ut,"min","30"),S(ut,"max","100"),S(dt,"type","range"),S(dt,"min","0.4"),S(dt,"max","1"),S(dt,"step","0.01"),S(k,"id","settings-panel"),S(e,"class","demo-container")},m(r,i){w(r,e,i),m(e,n),m(n,o),t[45](o),m(n,u),m(n,l),yt.m(l,null),m(n,c),m(n,f),_t.m(f,null),m(f,h),m(f,g),m(f,d),jt.m(f,null),m(f,p),m(f,y),m(e,M),m(e,k),m(k,T),m(T,E),m(T,A),m(k,N),m(k,q),m(k,R),m(k,$),P($,t[9]),m(k,D),m(k,I),m(k,L),m(k,F),m(k,O),m(k,U),m(k,z),m(k,H),m(k,V),m(V,B),m(k,Y),m(k,G),P(G,t[3]),m(k,X),m(k,W),m(k,Z),m(Z,Q),m(k,J),m(k,K),P(K,t[4]),m(k,tt),m(k,et),m(k,nt),m(k,rt),m(k,ot),m(k,it),m(it,st),m(k,at),m(k,ut),P(ut,t[5]),m(k,lt),m(k,ct),m(k,ft),m(ft,ht),m(k,gt),m(k,dt),P(dt,t[6]),m(k,pt),mt=[j(g,"click",t[10]),j($,"change",t[46]),j($,"input",t[46]),j(G,"change",t[47]),j(G,"input",t[47]),j(K,"change",t[48]),j(K,"input",t[48]),j(ut,"change",t[49]),j(ut,"input",t[49]),j(dt,"change",t[50]),j(dt,"input",t[50])]},p(t,e){vt===(vt=wt(t))&&yt?yt.p(t,e):(yt.d(1),yt=vt(t),yt&&(yt.c(),yt.m(l,null))),Mt===(Mt=bt(t))&&_t?_t.p(t,e):(_t.d(1),_t=Mt(t),_t&&(_t.c(),_t.m(f,h))),kt===(kt=xt(t))&&jt?jt.p(t,e):(jt.d(1),jt=kt(t),jt&&(jt.c(),jt.m(f,p))),256&e[0]&&C(A,t[8]),512&e[0]&&C(q,t[9]),512&e[0]&&P($,t[9]),8&e[0]&&C(B,t[3]),8&e[0]&&P(G,t[3]),16&e[0]&&C(Q,t[4]),16&e[0]&&P(K,t[4]),32&e[0]&&C(st,t[5]),32&e[0]&&P(ut,t[5]),64&e[0]&&C(ht,t[6]),64&e[0]&&P(dt,t[6])},i:r,o:r,d(n){n&&v(e),t[45](null),yt.d(),_t.d(),jt.d(),a(mt)}}}function Xa(t,e,n){let r,o,i=!1,s=!1,a=!1,u=30,l=.5,c=70,f=.5;const h=Oa.normal(0,.1),g=Oa.normal(0,5),d=Oa.normal(0,.01),p=Oa.normal(0,2);let m,w=[],v=[],y=[],b=[],M=!1,_=0,x=25,k=0,j=[80,720],S=[80,720];function C(){const t=r.getContext("2d");t.beginPath(),t.arc(j[0],j[1],9,0,2*Math.PI),t.fillStyle="red",t.fill(),t.closePath()}function P(){const t=r.getContext("2d");for(var e=0;e<m.pose_nodes.length;e++){const r=m.pose_nodes[e].belief.getMean();var n=r.get(0,0),o=r.get(1,0);t.beginPath(),t.arc(n,o,9,0,2*Math.PI),t.fillStyle="#0095DD",t.fill(),t.closePath();var i=m.pose_nodes[e].belief.getCovEllipse(),s=i[0],a=i[1];t.beginPath(),t.ellipse(n,o,Math.sqrt(s[0]),Math.sqrt(s[1]),a,0,2*Math.PI),t.strokeStyle="#0095DD",t.stroke()}}function E(){const t=r.getContext("2d");for(var e=0;e<m.lmk_nodes.length;e++){const r=m.lmk_nodes[e].belief.getMean();var n=r.get(0,0),o=r.get(1,0);t.beginPath(),t.arc(n,o,9,0,2*Math.PI),t.fillStyle="yellow",t.fill(),t.closePath();var i=m.lmk_nodes[e].belief.getCovEllipse(),s=i[0],a=i[1];t.beginPath(),t.ellipse(n,o,Math.sqrt(s[0]),Math.sqrt(s[1]),a,0,2*Math.PI),t.strokeStyle="yellow",t.stroke()}}function A(){const t=r.getContext("2d");for(var e=0;e<v.length;e++)t.beginPath(),t.arc(v[e].x,v[e].y,6,0,2*Math.PI),t.fillStyle="black",t.fill(),t.closePath()}function N(){const t=r.getContext("2d");for(var e=0;e<w.length;e++)t.beginPath(),t.arc(w[e].x,w[e].y,6,0,2*Math.PI),t.fillStyle="orange",t.fill(),t.closePath()}function q(){const t=r.getContext("2d");for(var e=0;e<m.factors.length;e++){if(t.beginPath(),m.factors[e].adj_var_ids[1]<25){const n=m.pose_nodes[m.factors[e].adj_var_ids[0]-25].belief.getMean(),r=m.lmk_nodes[b[m.factors[e].adj_var_ids[1]]].belief.getMean();t.moveTo(n.get(0,0),n.get(1,0)),t.lineTo(r.get(0,0),r.get(1,0)),t.strokeStyle="black"}else{const n=m.pose_nodes[m.factors[e].adj_var_ids[0]-25].belief.getMean(),r=m.pose_nodes[m.factors[e].adj_var_ids[1]-25].belief.getMean();t.moveTo(n.get(0,0),n.get(1,0)),t.lineTo(r.get(0,0),r.get(1,0)),t.strokeStyle="blue"}t.stroke()}}function R(){const t=r.getContext("2d");const e=(l=m.computeMAP(25,b))[0],n=l[1];for(var o=0;o<m.lmk_nodes.length;o++){const r=new Bt(e,2*o,2*o+1,0,0),c=new Bt(n,2*o,2*o+1,2*o,2*o+1);var i=r.get(0,0),s=r.get(1,0);t.beginPath(),t.arc(i,s,9,0,2*Math.PI),t.fillStyle="green",t.fill(),t.closePath();var a=(l=Ht(c))[0],u=l[1];t.beginPath(),t.ellipse(i,s,Math.sqrt(a[0]),Math.sqrt(a[1]),u,0,2*Math.PI),t.strokeStyle="green",t.stroke()}for(o=0;o<m.pose_nodes.length;o++){const r=o+m.lmk_nodes.length,c=new Et(new Bt(e,2*r,2*r+1,0,0)),f=new Et(new Bt(n,2*r,2*r+1,2*r,2*r+1));i=c.get(0,0),s=c.get(1,0);t.beginPath(),t.arc(i,s,9,0,2*Math.PI),t.fillStyle="green",t.fill(),t.closePath();var l;a=(l=Ht(f))[0],u=l[1];t.beginPath(),t.ellipse(i,s,Math.sqrt(a[0]),Math.sqrt(a[1]),u,0,2*Math.PI),t.strokeStyle="green",t.stroke()}}function $(){r.getContext("2d").clearRect(0,0,r.width,r.height);var t=1e3/x,e=Date.now(),s=e-o;s>t&&(o=e-s%t,M&&D()),I(),q(),C(),P(),E(),A(),N(),i&&R();var u=r.getBoundingClientRect();!a&&u.top<window.innerHeight&&(n(7,M=!0),a=!0)}function D(){m.relinearise(),m.sync_iter(),0!=_&&(k=m.compare_to_MAP(25,b)),n(8,_++,_)}function I(){for(var t=0;t<m.factors.length;t++){if(m.factors[t].adj_var_ids[1]>=25)var e=new Et([[1/Math.pow(l,2),0],[0,1/Math.pow(u,2)]]);else e=new Et([[1/Math.pow(f,2),0],[0,1/Math.pow(c,2)]]);m.factors[t].lambda=e}}function L(t){const e=new Zt(2,t);var n=1/Math.pow(60,2);e.prior.lam=new Et([[n,0],[0,n]]),e.prior.eta=e.prior.lam.mmul(new Et([[w[t].x],[w[t].y]])),e.update_belief(),b[t]=m.lmk_nodes.length,m.lmk_nodes.push(e)}function F(){var t=m.pose_nodes.length,e=v[t-1].x-v[t-2].x;const n=new Qt(4,[m.pose_nodes[t-2].var_id,m.pose_nodes[t-1].var_id],Kt,te);e<0&&(n.measFn=ee,n.jacFn=ne);const r=n.measFn(v[t-2],v[t-1]),o=new Et([[h()],[g()]]);r.add(o),n.meas=r,n.eta_damping=0;var i=new Et([[1/Math.pow(l,2),0],[0,1/Math.pow(u,2)]]);n.lambda=i,n.adj_var_dofs.push(2),n.adj_var_dofs.push(2),n.adj_beliefs.push(m.pose_nodes[t-2].belief),n.adj_beliefs.push(m.pose_nodes[t-1].belief),n.compute_factor(),n.messages.push(new zt([[0],[0]],[[0,0],[0,0]])),n.messages.push(new zt([[0],[0]],[[0,0],[0,0]])),m.factors.push(n),m.pose_nodes[t-2].adj_factors.push(n),m.pose_nodes[t-1].adj_factors.push(n)}function U(){let t=m.pose_nodes.length;for(var e=0;e<25;e++){if(Math.sqrt(Math.pow(w[e].x-v[t-1].x,2)+Math.pow(w[e].y-v[t-1].y,2))<170){y[e]||(L(e),y[e]=1);var n=w[e].x-v[t-1].x;const o=new Qt(4,[m.pose_nodes[t-1].var_id,e],Kt,te);n<0&&(o.measFn=ee,o.jacFn=ne);const i=o.measFn(v[t-1],w[e]),s=new Et([[d()],[p()]]);i.add(s),o.meas=i,o.eta_damping=0;var r=new Et([[1/Math.pow(f,2),0],[0,1/Math.pow(c,2)]]);o.lambda=r,o.adj_var_dofs.push(2),o.adj_var_dofs.push(2),o.adj_beliefs.push(m.pose_nodes[t-1].belief),o.adj_beliefs.push(m.lmk_nodes[b[e]].belief),o.compute_factor(),o.messages.push(new zt([[0],[0]],[[0,0],[0,0]])),o.messages.push(new zt([[0],[0]],[[0,0],[0,0]])),m.factors.push(o),m.pose_nodes[t-1].adj_factors.push(o),m.lmk_nodes[b[e]].adj_factors.push(o)}}}function H(){if(Math.sqrt(Math.pow(j[0]-S[0],2)+Math.pow(j[1]-S[1],2))>75){const e=new Zt(2,25+m.pose_nodes.length);var t=1/Math.pow(60,2);e.prior.lam=new Et([[t,0],[0,t]]),e.prior.eta=e.prior.lam.mmul(new Et([[j[0]],[j[1]]])),e.update_belief(),m.pose_nodes.push(e),v.push({x:j[0],y:j[1]}),S[0]=j[0],S[1]=j[1],F(),U()}}function V(t){"87"==(t=t||window.event).keyCode?j[1]>20&&(j[1]-=11):"83"==t.keyCode?j[1]<r.height-9-11&&(j[1]+=11):"65"==t.keyCode?j[0]>20&&(j[0]-=11):"68"==t.keyCode&&j[0]<r.width-9-11&&(j[0]+=11),H()}return O(()=>{r.getContext("2d").lineWidth=4,m=new Wt;let t=new Zt(2,25);t.prior.lam=new Et([[.1,0],[0,.1]]),t.prior.eta=t.prior.lam.mmul(new Et([[j[0]],[j[1]]])),t.update_belief(),m.pose_nodes.push(t),v.push({x:j[0],y:j[1]});let e=!0;for(;e;){var n=j[0]+170*Math.random()/Math.sqrt(2)-170/(2*Math.sqrt(2)),i=j[1]+170*Math.random()/Math.sqrt(2)-170/(2*Math.sqrt(2));n>20&&n<r.width-20&&i>20&&i<r.height-20&&(e=!1)}w.push({x:n,y:i}),y.push(0),b.push(-1);for(var s=0;s<24;s++){n=Math.random()*(r.width-20)+10,i=Math.random()*(r.height-20)+10;w.push({x:n,y:i}),y.push(0),b.push(-1)}U(),o=Date.now()}),re(()=>$(),25),document.addEventListener("keydown",V),[r,i,s,u,l,c,f,M,_,x,function(){n(7,M=!1),n(8,_=0),w=[],v=[],y=[],b=[],m=new Wt;let t=new Zt(2,25);t.prior.eta=new Et([[j[0]],[j[1]]]),t.prior.lam=new Et([[1,0],[0,1]]),t.update_belief(),m.pose_nodes.push(t),v.push({x:j[0],y:j[1]});let e=!0;for(;e;){var i=j[0]+170*Math.random()/Math.sqrt(2)-170/(2*Math.sqrt(2)),s=j[1]+170*Math.random()/Math.sqrt(2)-170/(2*Math.sqrt(2));i>20&&i<r.width-20&&s>20&&s<r.height-20&&(e=!1)}w.push({x:i,y:s}),y.push(0),b.push(-1);for(var a=0;a<24;a++){i=Math.random()*(r.width-20)+10,s=Math.random()*(r.height-20)+10;w.push({x:i,y:s}),y.push(0),b.push(-1)}U(),o=Date.now(),n(7,M=!0)},function(){n(7,M=!M)},function(){n(1,i=0==i)},function(){document.getElementById("robot-nonlinear-container").classList.contains("l-page-outset")?(document.getElementById("robot-nonlinear-container").classList.remove("l-page-outset"),document.getElementById("robot-nonlinear-container").classList.add("l-screen-inset"),n(2,s=!0)):(document.getElementById("robot-nonlinear-container").classList.remove("l-screen-inset"),document.getElementById("robot-nonlinear-container").classList.add("l-page-outset"),n(2,s=!1))},o,a,m,w,v,y,b,k,j,S,h,g,d,p,C,P,E,A,N,q,R,$,D,I,L,F,U,H,function(){for(var t=1/Math.pow(odometry_std,2),e=0;e<m.factors.length;e++)m.factors[e].adj_var_ids[1]>=25&&(m.factors[e].lambdas[0]=t,m.factors[e].compute_factor())},function(t){var e=t.clientX-r.offsetLeft,n=t.clientY-r.offsetTop;e>0&&e<r.width&&n>0&&n<r.height&&landmarks.push({x:e,y:n})},V,function(t){z[t?"unshift":"push"](()=>{n(0,r=t)})},function(){x=T(this.value),n(9,x)},function(){u=T(this.value),n(3,u)},function(){l=T(this.value),n(4,l)},function(){c=T(this.value),n(5,c)},function(){f=T(this.value),n(6,f)}]}var Wa=class extends ht{constructor(t){super(),ft(this,t,Xa,Ga,l,{},[-1,-1])}};function Za(t){let e,n;return{c(){e=b("i"),e.innerHTML='<span class="tooltiptext">Toggle fullscreen</span>',S(e,"class","fas fa-expand-arrows-alt tooltip-fs"),E(e,"width","20px")},m(r,o){w(r,e,o),n=j(e,"click",t[13])},p:r,d(t){t&&v(e),n()}}}function Qa(t){let e,n;return{c(){e=b("i"),e.innerHTML='<span class="tooltiptext">Toggle fullscreen</span>',S(e,"class","fa fa-compress-arrows-alt tooltip-fs"),E(e,"width","10%")},m(r,o){w(r,e,o),n=j(e,"click",t[13])},p:r,d(t){t&&v(e),n()}}}function Ja(t){let e,n;return{c(){e=b("i"),e.innerHTML='<span class="tooltiptext">Play synchronous GBP</span>',S(e,"class","fa fa-play tooltip"),E(e,"width","25px")},m(r,o){w(r,e,o),n=j(e,"click",t[11])},p:r,d(t){t&&v(e),n()}}}function Ka(t){let e,n;return{c(){e=b("i"),e.innerHTML='<span class="tooltiptext">Pause synchronous GBP</span>',S(e,"class","fa fa-pause tooltip"),E(e,"width","25px")},m(r,o){w(r,e,o),n=j(e,"click",t[11])},p:r,d(t){t&&v(e),n()}}}function tu(t){let e,n;return{c(){e=b("button"),e.innerHTML='<b>MAP</b> \n          <span class="tooltiptext">Display MAP</span>',S(e,"class","tooltip"),E(e,"color","rgb(39, 36, 36, 0.6)")},m(r,o){w(r,e,o),n=j(e,"click",t[12])},p:r,d(t){t&&v(e),n()}}}function eu(t){let e,n;return{c(){e=b("button"),e.innerHTML='<b>MAP</b> \n          <span class="tooltiptext">Hide MAP</span>',S(e,"class","tooltip")},m(r,o){w(r,e,o),n=j(e,"click",t[12])},p:r,d(t){t&&v(e),n()}}}function nu(t){let e,n,o,i,s,u,l,c,f,h,g,d,p,y,M,k,T,E,A,N,q,R,$,D,I,L,F,O,U,z,H,V,B,Y,G,X,W,Z,Q,J,K,tt,et,nt,rt,ot,it,st,at,ut,lt,ct,ft,ht,gt,dt,pt,mt;function wt(t,e){return t[2]?Qa:Za}let vt=wt(t),yt=vt(t);function bt(t,e){return t[7]?Ka:Ja}let Mt=bt(t),_t=Mt(t);function xt(t,e){return t[1]?eu:tu}let kt=xt(t),jt=kt(t);return{c(){e=b("div"),n=b("div"),o=b("canvas"),u=x(),l=b("div"),yt.c(),c=x(),f=b("div"),_t.c(),h=x(),g=b("i"),g.innerHTML='<span class="tooltiptext">Reset</span>',d=x(),jt.c(),p=x(),y=b("div"),y.innerHTML='<i class="fa fa-keyboard-o"></i> \n        <div id="hint">\n          Use WASD to move the robot.                \n        </div>',M=x(),k=b("div"),T=b("b"),E=_("Iteration "),A=_(t[8]),N=_("   (iters / s: "),q=_(t[9]),R=_(")\n    "),$=b("input"),D=b("br"),I=x(),L=b("br"),F=b("b"),F.innerHTML="Standard deviation of noise in Gaussian measurement models:<br>",O=x(),U=b("b"),U.textContent="Odometry",z=b("br"),H=_("\n    Distance factors, σ = "),V=b("b"),B=_(t[3]),Y=x(),G=b("input"),X=b("br"),W=_(" \n    Angle factors, σ = "),Z=b("b"),Q=_(t[4]),J=x(),K=b("input"),tt=b("br"),et=x(),nt=b("b"),nt.textContent="Landmark Measurements",rt=b("br"),ot=_("\n    Distance factors, σ = "),it=b("b"),st=_(t[5]),at=x(),ut=b("input"),lt=b("br"),ct=_(" \n    Angle factors, σ = "),ft=b("b"),ht=_(t[6]),gt=x(),dt=b("input"),pt=b("br"),S(o,"width",i=1400),S(o,"height",s=800),S(l,"class","top-left"),S(g,"class","fa fa-repeat tooltip"),S(y,"id","demo-tip"),S(f,"class","buttons-panel"),S(n,"id","gbp-container"),S($,"type","range"),S($,"min","1"),S($,"max","50"),S(G,"type","range"),S(G,"min","10"),S(G,"max","150"),S(K,"type","range"),S(K,"min","0.1"),S(K,"max","1"),S(K,"step","0.01"),S(ut,"type","range"),S(ut,"min","10"),S(ut,"max","150"),S(dt,"type","range"),S(dt,"min","0.1"),S(dt,"max","1"),S(dt,"step","0.01"),S(k,"id","settings-panel"),S(e,"class","demo-container")},m(r,i){w(r,e,i),m(e,n),m(n,o),t[47](o),m(n,u),m(n,l),yt.m(l,null),m(n,c),m(n,f),_t.m(f,null),m(f,h),m(f,g),m(f,d),jt.m(f,null),m(f,p),m(f,y),m(e,M),m(e,k),m(k,T),m(T,E),m(T,A),m(k,N),m(k,q),m(k,R),m(k,$),P($,t[9]),m(k,D),m(k,I),m(k,L),m(k,F),m(k,O),m(k,U),m(k,z),m(k,H),m(k,V),m(V,B),m(k,Y),m(k,G),P(G,t[3]),m(k,X),m(k,W),m(k,Z),m(Z,Q),m(k,J),m(k,K),P(K,t[4]),m(k,tt),m(k,et),m(k,nt),m(k,rt),m(k,ot),m(k,it),m(it,st),m(k,at),m(k,ut),P(ut,t[5]),m(k,lt),m(k,ct),m(k,ft),m(ft,ht),m(k,gt),m(k,dt),P(dt,t[6]),m(k,pt),mt=[j(g,"click",t[10]),j($,"change",t[48]),j($,"input",t[48]),j(G,"change",t[49]),j(G,"input",t[49]),j(K,"change",t[50]),j(K,"input",t[50]),j(ut,"change",t[51]),j(ut,"input",t[51]),j(dt,"change",t[52]),j(dt,"input",t[52])]},p(t,e){vt===(vt=wt(t))&&yt?yt.p(t,e):(yt.d(1),yt=vt(t),yt&&(yt.c(),yt.m(l,null))),Mt===(Mt=bt(t))&&_t?_t.p(t,e):(_t.d(1),_t=Mt(t),_t&&(_t.c(),_t.m(f,h))),kt===(kt=xt(t))&&jt?jt.p(t,e):(jt.d(1),jt=kt(t),jt&&(jt.c(),jt.m(f,p))),256&e[0]&&C(A,t[8]),512&e[0]&&C(q,t[9]),512&e[0]&&P($,t[9]),8&e[0]&&C(B,t[3]),8&e[0]&&P(G,t[3]),16&e[0]&&C(Q,t[4]),16&e[0]&&P(K,t[4]),32&e[0]&&C(st,t[5]),32&e[0]&&P(ut,t[5]),64&e[0]&&C(ht,t[6]),64&e[0]&&P(dt,t[6])},i:r,o:r,d(n){n&&v(e),t[47](null),yt.d(),_t.d(),jt.d(),a(mt)}}}function ru(t,e){var n=t.get(0,0),r=t.get(1,0),o=e.get(0,0),i=e.get(1,0),s=Math.sqrt(Math.pow(o-n,2)+Math.pow(i-r,2)),a=(i-r)*(o-n)/Math.pow(s,3),u=Math.pow(i-r,2)/Math.pow(s,3)-1/s,l=-(i-r)*(o-n)/Math.pow(s,3),c=-Math.pow(i-r,2)/Math.pow(s,3)+1/s;return new Et([[a,u,l,c],[-(o-n)/s,-(i-r)/s,(o-n)/s,(i-r)/s]])}function ou(t,e,n){let r,o,i=!1,s=!1,a=!1,u=80,l=.5,c=80,f=.5;const h=Oa.normal(0,.02),g=Oa.normal(0,5),d=Oa.normal(0,.02),p=Oa.normal(0,5);let m,w,v=[],y=[],b=[],M=[],_=!1,x=0,k=25,j=0,S=[180,580],C=[180,580];for(var P=0;P<y.length;P++)b.push(0),M.push(-1);function E(){const t=r.getContext("2d");t.beginPath(),t.arc(S[0],S[1],9,0,2*Math.PI),t.fillStyle="red",t.fill(),t.closePath()}function A(){const t=r.getContext("2d");for(var e=0;e<m.pose_nodes.length;e++){const r=m.pose_nodes[e].belief.getMean();var n=r.get(0,0),o=r.get(1,0);t.beginPath(),t.arc(n,o,9,0,2*Math.PI),t.fillStyle="#0095DD",t.fill(),t.closePath();var i=m.pose_nodes[e].belief.getCovEllipse(),s=i[0],a=i[1];t.beginPath(),t.ellipse(n,o,Math.sqrt(s[0]),Math.sqrt(s[1]),a,0,2*Math.PI),t.strokeStyle="#0095DD",t.stroke()}}function N(){const t=r.getContext("2d");for(var e=0;e<m.lmk_nodes.length;e++){const r=m.lmk_nodes[e].belief.getMean();var n=r.get(0,0),o=r.get(1,0);t.beginPath(),t.arc(n,o,9,0,2*Math.PI),t.fillStyle="yellow",t.fill(),t.closePath();var i=m.lmk_nodes[e].belief.getCovEllipse(),s=i[0],a=i[1];t.beginPath(),t.ellipse(n,o,Math.sqrt(s[0]),Math.sqrt(s[1]),a,0,2*Math.PI),t.strokeStyle="yellow",t.stroke()}}function q(){const t=r.getContext("2d");for(var e=0;e<v.length;e++)t.beginPath(),t.arc(v[e].x,v[e].y,6,0,2*Math.PI),t.fillStyle="black",t.fill(),t.closePath()}function R(){const t=r.getContext("2d");for(var e=0;e<y.length;e++)t.beginPath(),t.arc(y[e].x,y[e].y,6,0,2*Math.PI),t.fillStyle="orange",t.fill(),t.closePath()}function $(){const t=r.getContext("2d");for(var e=0;e<m.factors.length;e++){if(t.beginPath(),m.factors[e].adj_var_ids[1]<w){const n=m.pose_nodes[m.factors[e].adj_var_ids[0]-w].belief.getMean(),r=m.lmk_nodes[M[m.factors[e].adj_var_ids[1]]].belief.getMean();t.moveTo(n.get(0,0),n.get(1,0)),t.lineTo(r.get(0,0),r.get(1,0)),t.strokeStyle="black"}else{const n=m.pose_nodes[m.factors[e].adj_var_ids[0]-w].belief.getMean(),r=m.pose_nodes[m.factors[e].adj_var_ids[1]-w].belief.getMean();t.moveTo(n.get(0,0),n.get(1,0)),t.lineTo(r.get(0,0),r.get(1,0)),t.strokeStyle="blue"}t.stroke()}}function D(){const t=r.getContext("2d");const e=(l=m.computeMAP(w,M))[0],n=l[1];for(var o=0;o<m.lmk_nodes.length;o++){const r=new Bt(e,2*o,2*o+1,0,0),c=new Bt(n,2*o,2*o+1,2*o,2*o+1);var i=r.get(0,0),s=r.get(1,0);t.beginPath(),t.arc(i,s,9,0,2*Math.PI),t.fillStyle="green",t.fill(),t.closePath();var a=(l=Ht(c))[0],u=l[1];t.beginPath(),t.ellipse(i,s,Math.sqrt(a[0]),Math.sqrt(a[1]),u,0,2*Math.PI),t.strokeStyle="green",t.stroke()}for(o=0;o<m.pose_nodes.length;o++){const r=o+m.lmk_nodes.length,c=new Et(new Bt(e,2*r,2*r+1,0,0)),f=new Et(new Bt(n,2*r,2*r+1,2*r,2*r+1));i=c.get(0,0),s=c.get(1,0);t.beginPath(),t.arc(i,s,9,0,2*Math.PI),t.fillStyle="green",t.fill(),t.closePath();var l;a=(l=Ht(f))[0],u=l[1];t.beginPath(),t.ellipse(i,s,Math.sqrt(a[0]),Math.sqrt(a[1]),u,0,2*Math.PI),t.strokeStyle="green",t.stroke()}}function I(){r.getContext("2d").clearRect(0,0,r.width,r.height);var t=1e3/k,e=Date.now(),s=e-o;s>t&&(o=e-s%t,_&&L()),$(),E(),A(),N(),q(),R(),i&&D();var u=r.getBoundingClientRect();!a&&u.top<window.innerHeight&&(n(7,_=!0),a=!0)}function L(){m.sync_iter(),F(),0!=x&&(j=m.compare_to_MAP(w,M)),n(8,x++,x)}function F(){for(var t=0;t<m.factors.length;t++){const o=m.factors[t].adj_beliefs[0].getMean(),i=m.factors[t].adj_beliefs[1].getMean();var e=new Et([[o.get(0,0)],[o.get(1,0)],[i.get(0,0)],[i.get(1,0)]]);let s=ru(o,i);if(m.factors[t].jacs[0]=s,m.factors[t].factor.eta=Et.zeros(m.factors[t].dofs,1),m.factors[t].factor.lam=Et.zeros(m.factors[t].dofs,m.factors[t].dofs),m.factors[t].adj_var_ids[1]>=w)var n=new Et([[1/Math.pow(l,2),0],[0,1/Math.pow(u,2)]]);else n=new Et([[1/Math.pow(f,2),0],[0,1/Math.pow(c,2)]]);m.factors[t].lambdas[0]=n;var r=Math.sqrt(Math.pow(i.get(0,0)-o.get(0,0),2)+Math.pow(i.get(1,0)-o.get(1,0),2));const a=new Et([[(i.get(1,0)-o.get(1,0))/r],[r]]),h=s.mmul(e).add(m.factors[t].meas[0]).sub(a);m.factors[t].factor.eta.add(s.transpose().mmul(n).mmul(h)),m.factors[t].factor.lam.add(s.transpose().mmul(n).mmul(s))}}function U(t){const e=new Zt(2,t);var n=1/Math.pow(60,2);e.prior.lam=new Et([[n,0],[0,n]]),e.prior.eta=e.prior.lam.mmul(new Et([[y[t].x],[y[t].y]])),e.update_belief(),M[t]=m.lmk_nodes.length,m.lmk_nodes.push(e)}function H(){var t=m.pose_nodes.length;const e=new Jt(4,[m.pose_nodes[t-2].var_id,m.pose_nodes[t-1].var_id]);var n=ru(m.pose_nodes[t-2].belief.getMean(),m.pose_nodes[t-1].belief.getMean());e.jacs.push(n);var r=Math.sqrt(Math.pow(v[t-1].x-v[t-2].x,2)+Math.pow(v[t-1].y-v[t-2].y,2));const o=new Et([[(v[t-1].y-v[t-2].y)/r+h()],[r+g()]]);e.meas.push(o);var i=new Et([[1/Math.pow(l,2),0],[0,1/Math.pow(u,2)]]);e.lambdas.push(i),e.adj_var_dofs.push(2),e.adj_var_dofs.push(2),e.adj_beliefs.push(m.pose_nodes[t-2].belief),e.adj_beliefs.push(m.pose_nodes[t-1].belief),e.messages.push(new zt([[0],[0]],[[0,0],[0,0]])),e.messages.push(new zt([[0],[0]],[[0,0],[0,0]])),m.factors.push(e),m.pose_nodes[t-2].adj_factors.push(e),m.pose_nodes[t-1].adj_factors.push(e)}function V(){let t=m.pose_nodes.length;for(var e=0;e<w;e++){if(Math.sqrt(Math.pow(y[e].x-v[t-1].x,2)+Math.pow(y[e].y-v[t-1].y,2))<170){b[e]||(U(e),b[e]=1);const i=new Jt(4,[m.pose_nodes[t-1].var_id,e]);var n=ru(m.pose_nodes[t-1].belief.getMean(),m.lmk_nodes[M[e]].belief.getMean());i.jacs.push(n);var r=Math.sqrt(Math.pow(y[e].x-v[t-1].x,2)+Math.pow(y[e].y-v[t-1].y,2));const s=new Et([[(y[e].y-v[t-1].y)/r+d()],[r+p()]]);i.meas.push(s);var o=new Et([[1/Math.pow(f,2),0],[0,1/Math.pow(c,2)]]);i.lambdas.push(o),i.adj_var_dofs.push(2),i.adj_var_dofs.push(2),i.adj_beliefs.push(m.pose_nodes[t-1].belief),i.adj_beliefs.push(m.lmk_nodes[M[e]].belief),i.messages.push(new zt([[0],[0]],[[0,0],[0,0]])),i.messages.push(new zt([[0],[0]],[[0,0],[0,0]])),m.factors.push(i),m.pose_nodes[t-1].adj_factors.push(i),m.lmk_nodes[M[e]].adj_factors.push(i)}}}function B(){if(Math.sqrt(Math.pow(S[0]-C[0],2)+Math.pow(S[1]-C[1],2))>75){const e=new Zt(2,w+m.pose_nodes.length);var t=1/Math.pow(60,2);e.prior.lam=new Et([[t,0],[0,t]]),e.prior.eta=e.prior.lam.mmul(new Et([[S[0]],[S[1]]])),e.update_belief(),m.pose_nodes.push(e),v.push({x:S[0],y:S[1]}),C[0]=S[0],C[1]=S[1],H(),V()}}function Y(t){"87"==(t=t||window.event).keyCode?S[1]>20&&(S[1]-=11):"83"==t.keyCode?S[1]<r.height-9-11&&(S[1]+=11):"65"==t.keyCode?S[0]>20&&(S[0]-=11):"68"==t.keyCode&&S[0]<r.width-9-11&&(S[0]+=11),B()}return O(()=>{r.getContext("2d").lineWidth=4;for(var t=0;t<8;t++){var e=60+t*(r.width-120)/7;y.push({x:e,y:740}),y.push({x:e,y:60})}for(t=0;t<4;t++){e=400+t*(r.width-800)/3;y.push({x:e,y:400})}for(t=0;t<3;t++){var n=200+t*(r.height-400)/2,i=r.width-60;y.push({x:i,y:n}),y.push({x:60,y:n})}w=y.length,m=new Wt;let s=new Zt(2,w);s.prior.eta=new Et([[S[0]],[S[1]]]),s.prior.lam=new Et([[1,0],[0,1]]),s.update_belief(),m.pose_nodes.push(s),v.push({x:S[0],y:S[1]}),V(),o=Date.now()}),re(()=>I(),25),document.addEventListener("keydown",Y),[r,i,s,u,l,c,f,_,x,k,function(){n(7,_=!1),n(8,x=0),v=[],b=[],M=[],m=new Wt;let t=new Zt(2,w);t.prior.eta=new Et([[S[0]],[S[1]]]),t.prior.lam=new Et([[1,0],[0,1]]),t.update_belief(),m.pose_nodes.push(t),v.push({x:S[0],y:S[1]}),V(),o=Date.now(),n(7,_=!0)},function(){n(7,_=!_)},function(){n(1,i=0==i)},function(){document.getElementById("robot-room-container").classList.contains("l-page-outset")?(document.getElementById("robot-room-container").classList.remove("l-page-outset"),document.getElementById("robot-room-container").classList.add("l-screen-inset"),n(2,s=!0)):(document.getElementById("robot-room-container").classList.remove("l-screen-inset"),document.getElementById("robot-room-container").classList.add("l-page-outset"),n(2,s=!1))},o,a,m,v,w,b,M,j,S,C,P,h,g,d,p,y,E,A,N,q,R,$,D,I,L,F,U,H,V,B,function(){for(var t=1/Math.pow(odometry_std,2),e=0;e<m.factors.length;e++)m.factors[e].adj_var_ids[1]>=w&&(m.factors[e].lambdas[0]=t,m.factors[e].compute_factor())},function(t){var e=t.clientX-r.offsetLeft,n=t.clientY-r.offsetTop;e>0&&e<r.width&&n>0&&n<r.height&&landmarks.push({x:e,y:n})},Y,function(t){z[t?"unshift":"push"](()=>{n(0,r=t)})},function(){k=T(this.value),n(9,k)},function(){u=T(this.value),n(3,u)},function(){l=T(this.value),n(4,l)},function(){c=T(this.value),n(5,c)},function(){f=T(this.value),n(6,f)}]}var iu=class extends ht{constructor(t){super(),ft(this,t,ou,nu,l,{},[-1,-1])}};new se({target:document.querySelector("#gaussprod")}),new Se({target:document.querySelector("#gbp1d")}),new Fa({target:document.querySelector("#Graph")}),new Wa({target:document.querySelector("#RobotNonlinearSim")}),new iu({target:document.querySelector("#RobotRoomSim")})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL293LWxpdGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2FtZC1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JhbmRvbS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaXMtYW55LWFycmF5L3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vbW9kdWxlLmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9hbWQtb3B0aW9ucy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb3ctbGl0ZS9saWIvc3ltYm9scy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmFuZG9tL2Rpc3Qvcm5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yYW5kb20vZGlzdC9yYW5kb20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL293LWxpdGUvbGliL251bWJlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb3ctbGl0ZS9saWIvc3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9vdy1saXRlL2xpYi9vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JhbmRvbS9kaXN0L3JuZy1mYWN0b3J5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZWVkcmFuZG9tL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZWVkcmFuZG9tL2xpYi9hbGVhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZWVkcmFuZG9tL2xpYi94b3IxMjguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NlZWRyYW5kb20vbGliL3hvcndvdy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2VlZHJhbmRvbS9saWIveG9yc2hpZnQ3LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZWVkcmFuZG9tL2xpYi94b3I0MDk2LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZWVkcmFuZG9tL2xpYi90eWNoZWkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NlZWRyYW5kb20vc2VlZHJhbmRvbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmFuZG9tL2Rpc3QvZ2VuZXJhdG9ycy9mdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmFuZG9tL2Rpc3QvZGlzdHJpYnV0aW9ucy91bmlmb3JtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yYW5kb20vZGlzdC9kaXN0cmlidXRpb25zL3VuaWZvcm0taW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yYW5kb20vZGlzdC9kaXN0cmlidXRpb25zL3VuaWZvcm0tYm9vbGVhbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmFuZG9tL2Rpc3QvZGlzdHJpYnV0aW9ucy9ub3JtYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JhbmRvbS9kaXN0L2Rpc3RyaWJ1dGlvbnMvbG9nLW5vcm1hbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmFuZG9tL2Rpc3QvZGlzdHJpYnV0aW9ucy9iZXJub3VsbGkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JhbmRvbS9kaXN0L2Rpc3RyaWJ1dGlvbnMvYmlub21pYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JhbmRvbS9kaXN0L2Rpc3RyaWJ1dGlvbnMvZ2VvbWV0cmljLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yYW5kb20vZGlzdC9kaXN0cmlidXRpb25zL3BvaXNzb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JhbmRvbS9kaXN0L2Rpc3RyaWJ1dGlvbnMvZXhwb25lbnRpYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JhbmRvbS9kaXN0L2Rpc3RyaWJ1dGlvbnMvaXJ3aW4taGFsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmFuZG9tL2Rpc3QvZGlzdHJpYnV0aW9ucy9iYXRlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmFuZG9tL2Rpc3QvZGlzdHJpYnV0aW9ucy9wYXJldG8uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N2ZWx0ZS9pbnRlcm5hbC9pbmRleC5tanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21sLWFycmF5LW1heC9saWItZXM2L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tbC1hcnJheS1taW4vbGliLWVzNi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWwtYXJyYXktcmVzY2FsZS9saWItZXM2L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tbC1tYXRyaXgvc3JjL3V0aWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21sLW1hdHJpeC9zcmMvaW5zcGVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWwtbWF0cml4L3NyYy9tYXRyaXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21sLW1hdHJpeC9zcmMvc3RhdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWwtbWF0cml4L3NyYy9tYXRoT3BlcmF0aW9ucy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWwtbWF0cml4L3NyYy93cmFwL1dyYXBwZXJNYXRyaXgyRC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWwtbWF0cml4L3NyYy9kYy9sdS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWwtbWF0cml4L3NyYy9kYy91dGlsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tbC1tYXRyaXgvc3JjL2RjL3FyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tbC1tYXRyaXgvc3JjL2RjL3N2ZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWwtbWF0cml4L3NyYy9kZWNvbXBvc2l0aW9ucy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWwtbWF0cml4L3NyYy9kYy9ldmQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2dhdXNzaWFuL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tbC1tYXRyaXgvc3JjL3ZpZXdzL2Jhc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21sLW1hdHJpeC9zcmMvdmlld3Mvc3ViLmpzIiwid2VicGFjazovLy8uL3NyYy9nYnAvZ2JwMmQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2dicC9ub25saW5lYXJfbWVhc19mbi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdXRpbC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZGlhZ3JhbXMvZ2F1c3NfcHJvZHVjdC5zdmVsdGUiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N2ZWx0ZS90cmFuc2l0aW9uL2luZGV4Lm1qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZ2JwL2dicDFkLmpzIiwid2VicGFjazovLy8uL3NyYy9kaWFncmFtcy9nYnAxZC5zdmVsdGUiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9hc2NlbmRpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9iaXNlY3Rvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL2Jpc2VjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL2Nyb3NzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy90aWNrcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL2luaXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWNvbGxlY3Rpb24vc3JjL21hcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtY29sbGVjdGlvbi9zcmMvc2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlL3NyYy9vcmRpbmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1jb2xvci9zcmMvZGVmaW5lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1jb2xvci9zcmMvY29sb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9iYXNpcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL2NvbnN0YW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvY29sb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9yZ2IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9iYXNpc0Nsb3NlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL251bWJlckFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9kYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvbnVtYmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvc3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvdmFsdWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9yb3VuZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL251bWJlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL2NvbnRpbnVvdXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlL3NyYy9jb25zdGFudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9mb3JtYXRTcGVjaWZpZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvZm9ybWF0RGVjaW1hbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9mb3JtYXRQcmVmaXhBdXRvLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2RlZmF1bHRMb2NhbGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvZXhwb25lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvZm9ybWF0Um91bmRlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9mb3JtYXRUeXBlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9pZGVudGl0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9sb2NhbGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvZm9ybWF0R3JvdXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvZm9ybWF0TnVtZXJhbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvZm9ybWF0VHJpbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9wcmVjaXNpb25Sb3VuZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL3RpY2tGb3JtYXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvcHJlY2lzaW9uUHJlZml4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL3ByZWNpc2lvbkZpeGVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvbGluZWFyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy9pbnRlcnZhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMveWVhci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvbW9udGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL3dlZWsuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL2R1cmF0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy9kYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL2hvdXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL21pbnV0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvc2Vjb25kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy9taWxsaXNlY29uZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvdXRjV2Vlay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvdXRjRGF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy91dGNZZWFyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10aW1lLWZvcm1hdC9zcmMvbG9jYWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10aW1lLWZvcm1hdC9zcmMvZGVmYXVsdExvY2FsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL3RpbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL3V0Y01vbnRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy91dGNIb3VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy91dGNNaW51dGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvY29sb3JzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL2NhdGVnb3JpY2FsL2NhdGVnb3J5MTAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0b3JBbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3NwYXJzZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vZW50ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2RhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3NvcnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2NhbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvbmFtZXNwYWNlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9uYW1lc3BhY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2F0dHIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvd2luZG93LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9zdHlsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2NsYXNzZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3RleHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2h0bWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3JhaXNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9sb3dlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9jcmVhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9pbnNlcnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3JlbW92ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vY2xvbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL29uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9kaXNwYXRjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3NlbGVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vc2VsZWN0QWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9maWx0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvbWF0Y2hlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9jb25zdGFudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vZXhpdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vam9pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vbWVyZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL29yZGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9ub2Rlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vbm9kZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vc2l6ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vZW1wdHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2VhY2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2FwcGVuZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vZGF0dW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdEFsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZGlzcGF0Y2gvc3JjL2Rpc3BhdGNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NvdXJjZUV2ZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3BvaW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL21vdXNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3RvdWNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1kcmFnL3NyYy9ub2V2ZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1kcmFnL3NyYy9ub2RyYWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWRyYWcvc3JjL2NvbnN0YW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1kcmFnL3NyYy9ldmVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZHJhZy9zcmMvZHJhZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZm9yY2Uvc3JjL2NlbnRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZm9yY2Uvc3JjL2NvbnN0YW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1mb3JjZS9zcmMvamlnZ2xlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1xdWFkdHJlZS9zcmMvYWRkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1xdWFkdHJlZS9zcmMvY292ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXF1YWR0cmVlL3NyYy9xdWFkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1xdWFkdHJlZS9zcmMveC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtcXVhZHRyZWUvc3JjL3kuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXF1YWR0cmVlL3NyYy9xdWFkdHJlZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtcXVhZHRyZWUvc3JjL2RhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXF1YWR0cmVlL3NyYy9leHRlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXF1YWR0cmVlL3NyYy9maW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1xdWFkdHJlZS9zcmMvcmVtb3ZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1xdWFkdHJlZS9zcmMvcm9vdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtcXVhZHRyZWUvc3JjL3NpemUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXF1YWR0cmVlL3NyYy92aXNpdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtcXVhZHRyZWUvc3JjL3Zpc2l0QWZ0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWZvcmNlL3NyYy9saW5rLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10aW1lci9zcmMvdGltZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWZvcmNlL3NyYy9zaW11bGF0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1mb3JjZS9zcmMvbWFueUJvZHkuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2RpYWdyYW1zL05ldHdvcmtHcmFwaC5zdmVsdGUiLCJ3ZWJwYWNrOi8vLy4vc3JjL2RpYWdyYW1zL2ZnX2RhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2RpYWdyYW1zL2dyYXBoLnN2ZWx0ZSIsIndlYnBhY2s6Ly8vLi9zcmMvZGlhZ3JhbXMvZ2JwMmRfbm9ubGluZWFyLnN2ZWx0ZSIsIndlYnBhY2s6Ly8vLi9zcmMvZGlhZ3JhbXMvZ2JwMmRfcm9vbS5zdmVsdGUiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LmpzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwic3ltYm9scyIsInR5cGVQcmVkaWNhdGVzIiwibnVtYmVyIiwic3RyaW5nIiwiY3JlYXRlT3ciLCJ2YWxpZGF0b3JzIiwicHJlZGljYXRlcyIsInR5cGUiLCJvdyIsIlByb3h5Iiwib2JqIiwidmFsaWRhdGUiLCJsYWJlbCIsIkVycm9yIiwibGVuZ3RoIiwidmFsaWRhdG9yIiwiZm4iLCJwcmVkaWNhdGUiLCJwdXNoIiwiZnVuYyIsImFwcGx5IiwidGhpc0FyZyIsImFyZ3MiLCJkZWZhdWx0IiwidG9TdHJpbmciLCJlbmRzV2l0aCIsIndlYnBhY2tQb2x5ZmlsbCIsImRlcHJlY2F0ZSIsInBhdGhzIiwiY2hpbGRyZW4iLCJfX3dlYnBhY2tfYW1kX29wdGlvbnNfXyIsIl9jcmVhdGVDbGFzcyIsImRlZmluZVByb3BlcnRpZXMiLCJ0YXJnZXQiLCJwcm9wcyIsImRlc2NyaXB0b3IiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIkNvbnN0cnVjdG9yIiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwiUk5HIiwiaW5zdGFuY2UiLCJUeXBlRXJyb3IiLCJfY2xhc3NDYWxsQ2hlY2siLCJ0aGlzIiwiX3NlZWQiLCJvcHRzIiwic2VlZCIsInN0clNlZWQiLCJrIiwiY2hhckNvZGVBdCIsIlJOR0ZhY3RvcnkiLCJ1bmRlZmluZWQiLCJfb3dMaXRlMiIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfcm5nMiIsIl9ybmdGYWN0b3J5MiIsIl91bmlmb3JtMyIsIl91bmlmb3JtSW50MyIsIl91bmlmb3JtQm9vbGVhbjMiLCJfbm9ybWFsMyIsIl9sb2dOb3JtYWwzIiwiX2Jlcm5vdWxsaTMiLCJfYmlub21pYWwzIiwiX2dlb21ldHJpYzMiLCJfcG9pc3NvbjMiLCJfZXhwb25lbnRpYWwzIiwiX2lyd2luSGFsbDMiLCJfYmF0ZXMzIiwiX3BhcmV0bzMiLCJSYW5kb20iLCJybmciLCJpbnN0YW5jZU9mIiwiX2NhY2hlIiwidXNlIiwiYXJndW1lbnRzIiwiY2xvbmUiLCJfcm5nIiwiX3BhdGNoIiwiTWF0aCIsInJhbmRvbSIsInVuaWZvcm0iLCJuZXh0IiwibWluIiwibWF4IiwidW5pZm9ybUludCIsInVuaWZvcm1Cb29sZWFuIiwiX21lbW9pemUiLCJtdSIsInNpZ21hIiwibGFtYmRhIiwiYWxwaGEiLCJfbGVuIiwiQXJyYXkiLCJfa2V5Iiwiam9pbiIsImRpc3RyaWJ1dGlvbiIsImNvbmNhdCIsIm51bWJlclByZWRpY2F0ZXMiLCJwb3NpdGl2ZSIsIm5lZ2F0aXZlIiwibm9uTmVnYXRpdmUiLCJpbnRlZ2VyIiwiaXMiLCJlcSIsInYiLCJndCIsImd0ZSIsImx0IiwibHRlIiwic3RyaW5nUHJlZGljYXRlcyIsImVtcHR5Iiwibm9uRW1wdHkiLCJtaW5MZW5ndGgiLCJtYXhMZW5ndGgiLCJtYXRjaGVzIiwidGVzdCIsInN0YXJ0c1dpdGgiLCJvYmplY3RQcmVkaWNhdGVzIiwicGxhaW4iLCJwcm90byIsImdldFByb3RvdHlwZU9mIiwia2V5cyIsIl90eXBlb2YiLCJpdGVyYXRvciIsImNvbnN0cnVjdG9yIiwiX3NlZWRyYW5kb20yIiwiX2Z1bmN0aW9uMiIsIl90b0NvbnN1bWFibGVBcnJheSIsImFyciIsImlzQXJyYXkiLCJhcnIyIiwiZnJvbSIsIl9hcmdzJCIsImFyZzAiLCJyZXN0Iiwic2xpY2UiLCJhbGVhIiwieG9yMTI4IiwieG9yd293IiwieG9yc2hpZnQ3IiwieG9yNDA5NiIsInR5Y2hlaSIsInNyIiwiZ2xvYmFsIiwiZGVmaW5lIiwiQWxlYSIsIm1lIiwibWFzaCIsImRhdGEiLCJTdHJpbmciLCJoIiwiczAiLCJzMSIsInMyIiwiY29weSIsImYiLCJpbXBsIiwieGciLCJzdGF0ZSIsInBybmciLCJpbnQzMiIsImRvdWJsZSIsInF1aWNrIiwiWG9yR2VuIiwic3Ryc2VlZCIsIngiLCJ5IiwieiIsInciLCJyZXN1bHQiLCJYIiwiaiIsImluaXQiLCJEYXRlIiwibGltaXQiLCJiIiwiYSIsImZsb29yIiwicG9vbCIsIm1hdGgiLCJub2RlY3J5cHRvIiwic3RhcnRkZW5vbSIsInBvdyIsInNpZ25pZmljYW5jZSIsIm92ZXJmbG93Iiwic2VlZHJhbmRvbSIsIm9wdGlvbnMiLCJjYWxsYmFjayIsInNob3J0c2VlZCIsIm1peGtleSIsImZsYXR0ZW4iLCJkZXB0aCIsInByb3AiLCJ0eXAiLCJlIiwiZW50cm9weSIsInRvc3RyaW5nIiwib3V0IiwicmFuZG9tQnl0ZXMiLCJVaW50OEFycmF5IiwiY3J5cHRvIiwibXNDcnlwdG8iLCJnZXRSYW5kb21WYWx1ZXMiLCJicm93c2VyIiwibmF2aWdhdG9yIiwicGx1Z2lucyIsInNjcmVlbiIsImF1dG9zZWVkIiwiYXJjNCIsIkFSQzQiLCJnIiwiUyIsInBhc3MiLCJpc19tYXRoX2NhbGwiLCJrZXlsZW4iLCJ3aWR0aCIsImNvdW50Iiwic21lYXIiLCJzdHJpbmdzZWVkIiwiZnJvbUNoYXJDb2RlIiwiZXgiLCJzZWxmIiwiUk5HRnVuY3Rpb24iLCJfUk5HIiwidGh1bmsiLCJfdGhpcyIsIlJlZmVyZW5jZUVycm9yIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJfX3Byb3RvX18iLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJzZXRQcm90b3R5cGVPZiIsIl9pbmhlcml0cyIsImZ1bmN0aW9uIiwiRnVuY3Rpb24iLCJfb3dMaXRlIiwic3FydCIsImxvZyIsIm5vcm1hbCIsImV4cCIsImludkxvZ1AiLCJsb2dGYWN0b3JpYWxUYWJsZSIsImxvZ0ZhY3RvcmlhbCIsImV4cE1lYW4iLCJ1Iiwic211IiwiaW52QWxwaGEiLCJ2UiIsImFicyIsInVzIiwic3VtIiwiaXJ3aW5IYWxsIiwibm9vcCIsImlkZW50aXR5IiwicnVuIiwiYmxhbmtfb2JqZWN0IiwicnVuX2FsbCIsImZucyIsImZvckVhY2giLCJpc19mdW5jdGlvbiIsInRoaW5nIiwic2FmZV9ub3RfZXF1YWwiLCJpc19jbGllbnQiLCJ3aW5kb3ciLCJub3ciLCJwZXJmb3JtYW5jZSIsInJhZiIsImNiIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwidGFza3MiLCJTZXQiLCJydW5fdGFza3MiLCJ0YXNrIiwiZGVsZXRlIiwic2l6ZSIsImxvb3AiLCJwcm9taXNlIiwiUHJvbWlzZSIsImZ1bGZpbGwiLCJhZGQiLCJhcHBlbmQiLCJub2RlIiwiYXBwZW5kQ2hpbGQiLCJpbnNlcnQiLCJhbmNob3IiLCJpbnNlcnRCZWZvcmUiLCJkZXRhY2giLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJkZXN0cm95X2VhY2giLCJpdGVyYXRpb25zIiwiZGV0YWNoaW5nIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50Iiwic3ZnX2VsZW1lbnQiLCJjcmVhdGVFbGVtZW50TlMiLCJjcmVhdGVUZXh0Tm9kZSIsInNwYWNlIiwibGlzdGVuIiwiZXZlbnQiLCJoYW5kbGVyIiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJhdHRyIiwiYXR0cmlidXRlIiwicmVtb3ZlQXR0cmlidXRlIiwiZ2V0QXR0cmlidXRlIiwic2V0QXR0cmlidXRlIiwidG9fbnVtYmVyIiwic2V0X2RhdGEiLCJ0ZXh0Iiwic2V0X2lucHV0X3ZhbHVlIiwiaW5wdXQiLCJzZXRfc3R5bGUiLCJpbXBvcnRhbnQiLCJzdHlsZSIsInNldFByb3BlcnR5IiwiY3VzdG9tX2V2ZW50IiwiZGV0YWlsIiwiY3JlYXRlRXZlbnQiLCJpbml0Q3VzdG9tRXZlbnQiLCJzdHlsZXNoZWV0IiwiY3VycmVudF9jb21wb25lbnQiLCJjdXJyZW50X3J1bGVzIiwiY3JlYXRlX3J1bGUiLCJkdXJhdGlvbiIsImRlbGF5IiwiZWFzZSIsInVpZCIsInN0ZXAiLCJrZXlmcmFtZXMiLCJydWxlIiwic3RyIiwiaGFzaCIsImhlYWQiLCJzaGVldCIsImluc2VydFJ1bGUiLCJjc3NSdWxlcyIsImFuaW1hdGlvbiIsImRlbGV0ZV9ydWxlIiwic3BsaXQiLCJmaWx0ZXIiLCJhbmltIiwiaW5kZXhPZiIsImRlbGV0ZVJ1bGUiLCJzZXRfY3VycmVudF9jb21wb25lbnQiLCJjb21wb25lbnQiLCJnZXRfY3VycmVudF9jb21wb25lbnQiLCJvbk1vdW50IiwiJCQiLCJvbl9tb3VudCIsImRpcnR5X2NvbXBvbmVudHMiLCJiaW5kaW5nX2NhbGxiYWNrcyIsInJlbmRlcl9jYWxsYmFja3MiLCJmbHVzaF9jYWxsYmFja3MiLCJyZXNvbHZlZF9wcm9taXNlIiwicmVzb2x2ZSIsInVwZGF0ZV9zY2hlZHVsZWQiLCJzY2hlZHVsZV91cGRhdGUiLCJ0aGVuIiwiZmx1c2giLCJhZGRfcmVuZGVyX2NhbGxiYWNrIiwic2Vlbl9jYWxsYmFja3MiLCJzaGlmdCIsInBvcCIsImhhcyIsImZyYWdtZW50IiwidXBkYXRlIiwiYmVmb3JlX3VwZGF0ZSIsImRpcnR5IiwiY3R4IiwiYWZ0ZXJfdXBkYXRlIiwid2FpdCIsImRpc3BhdGNoIiwiZGlyZWN0aW9uIiwia2luZCIsImRpc3BhdGNoRXZlbnQiLCJvdXRyb2luZyIsIm91dHJvcyIsImdyb3VwX291dHJvcyIsImNoZWNrX291dHJvcyIsInRyYW5zaXRpb25faW4iLCJibG9jayIsImxvY2FsIiwidHJhbnNpdGlvbl9vdXQiLCJudWxsX3RyYW5zaXRpb24iLCJjcmVhdGVfYmlkaXJlY3Rpb25hbF90cmFuc2l0aW9uIiwicGFyYW1zIiwiaW50cm8iLCJjb25maWciLCJydW5uaW5nX3Byb2dyYW0iLCJwZW5kaW5nX3Byb2dyYW0iLCJhbmltYXRpb25fbmFtZSIsImNsZWFyX2FuaW1hdGlvbiIsInByb2dyYW0iLCJzdGFydCIsImVuZCIsImdyb3VwIiwiZ28iLCJlYXNpbmciLCJ0aWNrIiwiY3NzIiwiU3ZlbHRlRWxlbWVudCIsIm1vdW50X2NvbXBvbmVudCIsIm9uX2Rlc3Ryb3kiLCJuZXdfb25fZGVzdHJveSIsIm1hcCIsImRlc3Ryb3lfY29tcG9uZW50IiwiY3JlYXRlX2ZyYWdtZW50Iiwibm90X2VxdWFsIiwicGFyZW50X2NvbXBvbmVudCIsInByb3BfdmFsdWVzIiwiYm91bmQiLCJjb250ZXh0IiwiTWFwIiwiY2FsbGJhY2tzIiwicmVhZHkiLCJlbGVtZW50IiwicmV0IiwiZmlsbCIsIm1ha2VfZGlydHkiLCJoeWRyYXRlIiwiY2hpbGROb2RlcyIsIkhUTUxFbGVtZW50Iiwic3VwZXIiLCJhdHRhY2hTaGFkb3ciLCJzbG90dGVkIiwiX29sZFZhbHVlIiwibmV3VmFsdWUiLCIkZGVzdHJveSIsImluZGV4Iiwic3BsaWNlIiwiU3ZlbHRlQ29tcG9uZW50IiwibWF4VmFsdWUiLCJtaW5WYWx1ZSIsIm91dHB1dCIsImN1cnJlbnRNaW4iLCJjdXJyZW50TWF4IiwiUmFuZ2VFcnJvciIsIl9vcHRpb25zJG1pbiIsImF1dG9NaW5NYXgiLCJfb3B0aW9ucyRtYXgiLCJmYWN0b3IiLCJjaGVja1Jvd0luZGV4IiwibWF0cml4Iiwib3V0ZXIiLCJyb3dzIiwiY2hlY2tDb2x1bW5JbmRleCIsImNvbHVtbnMiLCJjaGVja1Jvd1ZlY3RvciIsInZlY3RvciIsInRvMURBcnJheSIsImNoZWNrQ29sdW1uVmVjdG9yIiwiY2hlY2tSb3dJbmRpY2VzIiwicm93SW5kaWNlcyIsInNvbWUiLCJjaGVja0NvbHVtbkluZGljZXMiLCJjb2x1bW5JbmRpY2VzIiwiY2hlY2tSYW5nZSIsInN0YXJ0Um93IiwiZW5kUm93Iiwic3RhcnRDb2x1bW4iLCJlbmRDb2x1bW4iLCJjaGVja051bWJlciIsIm5ld0FycmF5IiwiYXJyYXkiLCJmb3JtYXROdW1iZXIiLCJudW0iLCJudW1TdHIiLCJwYWRFbmQiLCJwcmVjaXNlIiwidG9QcmVjaXNpb24iLCJtYXhOdW1TaXplIiwiZXhwb25lbnRpYWwiLCJ0b0V4cG9uZW50aWFsIiwiZUluZGV4Iiwic3Vic3RyaW5nIiwibmV3Um93cyIsIm5ld0NvbHVtbnMiLCJuZXdEYXRhIiwibmV3TWF0cml4Iiwicm93IiwiY29sdW1uIiwic2V0IiwiTnVtYmVyIiwiaXNJbnRlZ2VyIiwiaW50ZXJ2YWwiLCJyb3VuZCIsInplcm9zIiwibWF0cml4MSIsIm1hdHJpeDIiLCJjaGVja01hdHJpeCIsImlzTWF0cml4Iiwia2xhc3MiLCJ0bzJEQXJyYXkiLCJpc1NxdWFyZSIsInByZXZpb3VzQ29sdW1uIiwiaXNFY2hlbG9uRm9ybSIsImNoZWNrZWQiLCJpc1JlZHVjZWRFY2hlbG9uRm9ybSIsImlNYXgiLCJzd2FwUm93cyIsInRtcCIsImVjaGVsb25Gb3JtIiwibWF4Um93IiwicGl2b3QiLCJzZXRTdWJNYXRyaXgiLCJtdWxTIiwicm93VmVjdG9yIiwiZ2V0Um93Iiwicm93MSIsInJvdzIiLCJ0ZW1wIiwiY29sdW1uVmVjdG9yIiwiZ2V0Q29sdW1uIiwiY29sdW1uMSIsImNvbHVtbjIiLCJpZHgiLCJkaWFnIiwidmVjdG9yMiIsInZlY3RvcjEiLCJkb3QiLCJvdGhlciIsIkJjb2xqIiwiRmxvYXQ2NEFycmF5IiwiYTExIiwiYjExIiwiYTEyIiwiYjEyIiwiYTIxIiwiYjIxIiwiYTIyIiwiYjIyIiwibTEiLCJtMiIsIm0zIiwibTQiLCJtNSIsImMwMCIsImMwMSIsImMxMCIsImMxMSIsImEwMCIsImEwMSIsImEwMiIsImExMCIsImEyMCIsImIwMCIsImIwMSIsImIwMiIsImIxMCIsImIyMCIsIm02IiwibTciLCJtOCIsIm05IiwibTEyIiwibTEzIiwibTE0IiwibTE1IiwibTE2IiwibTE3IiwibTE4IiwiYzAyIiwiYzEyIiwiYzIwIiwiYzIxIiwiYzIyIiwicjEiLCJjMSIsInIyIiwiYzIiLCJlbWJlZCIsIm1hdCIsImNvbHMiLCJyZXN1bHRhdCIsImNvbnNvbGUiLCJ3YXJuIiwiYmxvY2tNdWx0IiwibW11bCIsImhhbGZSb3dzIiwicGFyc2VJbnQiLCJoYWxmQ29scyIsInN1Yk1hdHJpeCIsInN1YiIsImlzRmluaXRlIiwic2V0Um93Iiwic2V0Q29sdW1uIiwibWlkZGxlIiwiY2VpbCIsImZpcnN0IiwibGFzdCIsInEiLCJjb21wYXJlRnVuY3Rpb24iLCJjb21wYXJlTnVtYmVycyIsInNvcnQiLCJpbmRpY2VzIiwiY2hlY2tJbmRpY2VzIiwicm93SW5kZXgiLCJjb2x1bW5JbmRleCIsInRyYWNlIiwiYnkiLCJzdW1CeVJvdyIsInN1bUJ5Q29sdW1uIiwic3VtQWxsIiwicHJvZHVjdEJ5Um93IiwicHJvZHVjdEJ5Q29sdW1uIiwicHJvZHVjdEFsbCIsInVuYmlhc2VkIiwibWVhbiIsInZhcmlhbmNlIiwic3VtMSIsInN1bTIiLCJ2YXJpYW5jZUJ5Um93IiwidmFyaWFuY2VCeUNvbHVtbiIsInZhcmlhbmNlQWxsIiwiY2VudGVyIiwiY2VudGVyQnlSb3ciLCJjZW50ZXJCeUNvbHVtbiIsImNlbnRlckFsbCIsInNjYWxlIiwiZ2V0U2NhbGVCeVJvdyIsInNjYWxlQnlSb3ciLCJnZXRTY2FsZUJ5Q29sdW1uIiwic2NhbGVCeUNvbHVtbiIsImRpdmlkZXIiLCJnZXRTY2FsZUFsbCIsInNjYWxlQWxsIiwiZm9yIiwiaW5kZW50IiwicmVwZWF0IiwiaW5kZW50RGF0YSIsIm1heEkiLCJtYXhKIiwibGluZSIsImluc3BlY3REYXRhIiwicmFuZCIsInJhbmRvbUludCIsInJhbmRJbnQiLCJkaWFnb25hbCIsImV5ZSIsIm5lZ2F0ZSIsIm5lZyIsInRlbnNvclByb2R1Y3QiLCJrcm9uZWNrZXJQcm9kdWN0IiwiblJvd3MiLCJuQ29sdW1ucyIsImFycmF5RGF0YSIsIm5ld1JvdyIsIkFic3RyYWN0TWF0cml4IiwiTWF0cml4IiwiYWRkUyIsImFkZE0iLCJzdWJTIiwic3ViTSIsInN1YnRyYWN0Iiwic3VidHJhY3RTIiwic3VidHJhY3RNIiwibXVsIiwibXVsTSIsIm11bHRpcGx5IiwibXVsdGlwbHlTIiwibXVsdGlwbHlNIiwiZGl2IiwiZGl2UyIsImRpdk0iLCJkaXZpZGUiLCJkaXZpZGVTIiwiZGl2aWRlTSIsIm1vZCIsIm1vZFMiLCJtb2RNIiwibW9kdWx1cyIsIm1vZHVsdXNTIiwibW9kdWx1c00iLCJhbmQiLCJhbmRTIiwiYW5kTSIsIm9yIiwib3JTIiwib3JNIiwieG9yIiwieG9yUyIsInhvck0iLCJsZWZ0U2hpZnQiLCJsZWZ0U2hpZnRTIiwibGVmdFNoaWZ0TSIsInNpZ25Qcm9wYWdhdGluZ1JpZ2h0U2hpZnQiLCJzaWduUHJvcGFnYXRpbmdSaWdodFNoaWZ0UyIsInNpZ25Qcm9wYWdhdGluZ1JpZ2h0U2hpZnRNIiwicmlnaHRTaGlmdCIsInJpZ2h0U2hpZnRTIiwicmlnaHRTaGlmdE0iLCJ6ZXJvRmlsbFJpZ2h0U2hpZnQiLCJ6ZXJvRmlsbFJpZ2h0U2hpZnRTIiwiemVyb0ZpbGxSaWdodFNoaWZ0TSIsIm5vdCIsImFjb3MiLCJhY29zaCIsImFzaW4iLCJhc2luaCIsImF0YW4iLCJhdGFuaCIsImNicnQiLCJjbHozMiIsImNvcyIsImNvc2giLCJleHBtMSIsImZyb3VuZCIsImxvZzFwIiwibG9nMTAiLCJsb2cyIiwic2lnbiIsInNpbiIsInNpbmgiLCJ0YW4iLCJ0YW5oIiwidHJ1bmMiLCJwb3dTIiwicG93TSIsIkxVY29saiIsImttYXgiLCJsdSIsInBpdm90VmVjdG9yIiwicGl2b3RTaWduIiwiTFUiLCJjb2wiLCJpc1Npbmd1bGFyIiwic3ViTWF0cml4Um93IiwiZGV0ZXJtaW5hbnQiLCJoeXBvdGVudXNlIiwicXIiLCJyZGlhZyIsIm5ybSIsIlFSIiwiUmRpYWciLCJpc0Z1bGxSYW5rIiwiY29tcHV0ZUxlZnRTaW5ndWxhclZlY3RvcnMiLCJjb21wdXRlUmlnaHRTaW5ndWxhclZlY3RvcnMiLCJhdXRvVHJhbnNwb3NlIiwid2FudHUiLCJCb29sZWFuIiwid2FudHYiLCJzd2FwcGVkIiwidHJhbnNwb3NlIiwiYXV4IiwibnUiLCJuaSIsIlUiLCJWIiwid29yayIsInNpIiwibmN0IiwibnJ0IiwibXJjIiwicHAiLCJpdGVyIiwiZXBzIiwiRVBTSUxPTiIsImthc2UiLCJNSU5fVkFMVUUiLCJpc05hTiIsImtzIiwiY3MiLCJzbiIsInNwIiwic3BtMSIsImVwbTEiLCJzayIsImVrIiwiWSIsInRocmVzaG9sZCIsInNjb2xzIiwiTHMiLCJyaWdodFNpbmd1bGFyVmVjdG9ycyIsIlZMIiwidnJvd3MiLCJ1cm93cyIsIlZMVSIsInNvbHZlIiwidmNvbHMiLCJ1Y29scyIsInRvbCIsImlpIiwiaW52ZXJzZSIsInVzZVNWRCIsImxlZnRIYW5kU2lkZSIsInJpZ2h0SGFuZFNpZGUiLCJhc3N1bWVTeW1tZXRyaWMiLCJpc1N5bW1ldHJpYyIsImhoIiwidHJlZDIiLCJkbDEiLCJjMyIsImVsMSIsInRzdDEiLCJ0cWwyIiwiSCIsIm9ydCIsImhpZ2giLCJsb3ciLCJvcnRoZXMiLCJubiIsInJhIiwic2EiLCJ2ciIsInZpIiwibm90bGFzdCIsImNkaXZyZXMiLCJleHNoaWZ0Iiwibm9ybSIsImNkaXYiLCJocXIyIiwieHIiLCJ4aSIsInlyIiwieWkiLCJHYXVzc2lhbiIsImV0YSIsImxhbSIsImdldENvdiIsImdhdXNzaWFuIiwiY292IiwicmVhbCIsInJlYWxFaWdlbnZhbHVlcyIsInZlY3RvcnMiLCJlaWdlbnZlY3Rvck1hdHJpeCIsImdldEVsbGlwc2UiLCJGYWN0b3JHcmFwaCIsInBvc2Vfbm9kZXMiLCJsbWtfbm9kZXMiLCJmYWN0b3JzIiwidXBkYXRlX2JlbGllZiIsInNlbmRfbWVzcyIsInNlbmRfbWVzc2FnZXMiLCJ1cGRhdGVfYmVsaWVmcyIsImVuZXJneSIsImNvbXB1dGVfZmFjdG9yIiwibl9sYW5kbWFya3MiLCJsbWtfZ3JhcGhfaXgiLCJ0b3RfZG9mcyIsImRvZnMiLCJiaWdFdGEiLCJiaWdMYW0iLCJsX2RvZnMiLCJwcmlvciIsImFkal92YXJfaWRzIiwiZl9wb3NlX2V0YSIsImZfbG1rX2V0YSIsImZfcG9zZV9sYW0iLCJmX2xta19sYW0iLCJmX3Bvc2VfbG1rX2xhbSIsImZfbG1rX3Bvc2VfbGFtIiwiY19pZCIsImxfaWQiLCJmX3AxX2V0YSIsImZfcDJfZXRhIiwiZl9wMV9sYW0iLCJmX3AyX2xhbSIsImZfcDFfcDJfbGFtIiwiZl9wMl9wMV9sYW0iLCJjX2lkMSIsImNfaWQyIiwiYmlnQ292IiwiZ2JwX21lYW5zIiwiYmVsaWVmIiwiZ2V0TWVhbiIsIm1lYW5zIiwiY29tcHV0ZU1BUCIsIlZhcmlhYmxlTm9kZSIsInZhcl9pZCIsImdhdXNzIiwiYWRqX2ZhY3RvcnMiLCJpeCIsInByb2R1Y3QiLCJtZXNzYWdlcyIsImFkal9iZWxpZWZzIiwiTm9uTGluZWFyRmFjdG9yIiwibWVhc0ZuIiwiamFjRm4iLCJhZGpfdmFyX2RvZnMiLCJtZWFzIiwibGlucG9pbnQiLCJldGFfZGFtcGluZyIsImNhbV9jb29yZHMiLCJsbWtfY29vcmRzIiwiamFjIiwibWVhc3VyZW1lbnQiLCJicmFja2V0IiwicmVzIiwibWVhc19mbiIsImV0YV9mYWN0b3IiLCJsYW1fZmFjdG9yIiwibWVzc19zdGFydF9kaW0iLCJldGFfcHJvZCIsImxhbV9wcm9kIiwiZW8iLCJlbm8iLCJsb28iLCJsbm9ubyIsImxub28iLCJsb25vIiwibWVzcyIsIkxpbmVhckZhY3RvciIsImphY3MiLCJsYW1iZGFzIiwibWVhc0ZuUiIsInRoZXRhIiwiYXRhbjIiLCJqYWNGblIiLCJ4MSIsInkxIiwieDIiLCJ5MiIsImRlbm9taW5hdG9yIiwibWVhc0ZuTCIsImphY0ZuTCIsIm9uSW50ZXJ2YWwiLCJtaWxsaXNlY29uZHMiLCJzZXRJbnRlcnZhbCIsImNsZWFySW50ZXJ2YWwiLCJjYW52YXMiLCJncmFwaCIsInN0YXJ0ZWQiLCJsbWtfcHJpb3Jfc3RkIiwiZGlzdGFuY2Vfc3RkIiwiYW5nbGVfc3RkIiwibG1rX2xvYyIsImNhbV9sb2NzIiwic3luY19vbiIsIm5faXRlcnMiLCJkb3duIiwiZHJhd0xpbmUiLCJnZXRDb250ZXh0IiwiYmVnaW5QYXRoIiwibW92ZVRvIiwibGluZVRvIiwic3Ryb2tlU3R5bGUiLCJzdHJva2UiLCJkcmF3Q2FtcyIsImZpbGxTdHlsZSIsImNsb3NlUGF0aCIsImRyYXdMYW5kbWFyayIsImFyYyIsIlBJIiwidmFsdWVzIiwiZ2V0Q292RWxsaXBzZSIsImVpZ192YWx1ZXMiLCJhbmdsZSIsImVsbGlwc2UiLCJkcmF3TG1rUHJpb3IiLCJkcmF3TWVzc2FnZXMiLCJ1cGRhdGVWaXMiLCJjbGVhclJlY3QiLCJoZWlnaHQiLCJlbGFwc2VkIiwicmVsaW5lYXJpc2UiLCJzeW5jX2l0ZXIiLCJ1cGRhdGVfbGFuZG1hcmtfcHJpb3Jfc3RkIiwidXBkYXRlX2xhbWJkYXMiLCJyZWN0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwidG9wIiwiaW5uZXJIZWlnaHQiLCJnZW5HcmFwaCIsImxta19sYW1iZGEiLCJjYW1fbGFtYmRhIiwiZmlyc3RfdmFyX25vZGUiLCJjYW0xIiwiY2FtMiIsImR4IiwibmV3X2ZhY3RvciIsInVwZGF0ZUNhbVBvc2l0aW9uIiwiY2FtX2l4IiwibGluZVdpZHRoIiwibW91c2VYIiwiY2xpZW50WCIsImxlZnQiLCJtb3VzZVkiLCJjbGllbnRZIiwib24iLCJpc1BvaW50SW5QYXRoIiwiY3Vyc29yIiwiZmFkZSIsImdldENvbXB1dGVkU3R5bGUiLCJvcGFjaXR5IiwidmFyX25vZGVzIiwic3dlZXBfaXgiLCJmb3J3YXJkIiwicGFzdF9maXJzdF9tZWFzIiwic2VuZF9ib3RoX21lc3MiLCJ4X21lYXMiLCJ4X3Zhcl9saHMiLCJ4X3Zhcl9yaHMiLCJtZWFzX3N0ZCIsImdhbW1hIiwibWVhc19qYWMiLCJuZXh0X2l4IiwibmV4dF9mb3J3YXJkIiwibWVzczEiLCJtZXNzMCIsImNyZWF0ZTFEZ3JhcGgiLCJuX3Zhcl9ub2RlcyIsInNtb290aG5lc3Nfc3RkIiwibmV3X3Zhcl9ub2RlIiwic21vb3RobmVzc19qYWMiLCJub2Rlc194X29mZnNldCIsIm5vZGVfeF9zcGFjaW5nIiwibm9kZV9yYWRpdXMiLCJkaXNwbGF5X21hcCIsInZpc2libGVfYWxlcnQiLCJtZWFzX21vZGVsX3N0ZCIsIm1lYXN1cmVtZW50cyIsIm1wX3NjaGVkdWxlIiwic3dlZXBfb24iLCJHQlBfc3dlZXBfZG9uZSIsIml0ZXJzX3Blcl9zZWMiLCJkaXN0IiwiZHJhd05vZGVzIiwidmFyX3kiLCJkcmF3TWVhc3VyZW1lbnRzIiwiZHJhd01BUCIsImJpZ1NpZ21hIiwiZnBzSW50ZXJ2YWwiLCJzeW5jR0JQIiwic3dlZXBfc3RlcCIsInVwZGF0ZV9tZWFzX21vZGVsX3N0ZCIsInVwZGF0ZV9zbW9vdGhuZXNzX3N0ZCIsImNvbXBhcmVfdG9fTUFQIiwiZ2VuUmFuZG9tTWVhc3VyZW1lbnRzIiwieF9saHMiLCJ4X3JocyIsImFkZExpbmVhck1lYXN1cmVtZW50IiwiZGlmZiIsIk5hTiIsImNvbXBhcmUiLCJhc2NlbmRpbmciLCJsbyIsImhpIiwibWlkIiwicmlnaHQiLCJhc2NlbmRpbmdCaXNlY3QiLCJiaXNlY3RvciIsImJpc2VjdFJpZ2h0IiwiYmlzZWN0IiwiZTEwIiwiZTUiLCJlMiIsInJldmVyc2UiLCJ0aWNrcyIsInN0b3AiLCJ0aWNrSW5jcmVtZW50IiwicG93ZXIiLCJMTjEwIiwiZXJyb3IiLCJ0aWNrU3RlcCIsInN0ZXAwIiwic3RlcDEiLCJpbml0UmFuZ2UiLCJkb21haW4iLCJyYW5nZSIsImVhY2giLCJyZW1vdmUiLCJjbGVhciIsImVudHJpZXMiLCJpbXBsaWNpdCIsIm9yZGluYWwiLCJ1bmtub3duIiwiXyIsImZhY3RvcnkiLCJleHRlbmQiLCJwYXJlbnQiLCJkZWZpbml0aW9uIiwiQ29sb3IiLCJyZUkiLCJyZU4iLCJyZVAiLCJyZUhleCIsInJlUmdiSW50ZWdlciIsIlJlZ0V4cCIsInJlUmdiUGVyY2VudCIsInJlUmdiYUludGVnZXIiLCJyZVJnYmFQZXJjZW50IiwicmVIc2xQZXJjZW50IiwicmVIc2xhUGVyY2VudCIsIm5hbWVkIiwiYWxpY2VibHVlIiwiYW50aXF1ZXdoaXRlIiwiYXF1YSIsImFxdWFtYXJpbmUiLCJhenVyZSIsImJlaWdlIiwiYmlzcXVlIiwiYmxhY2siLCJibGFuY2hlZGFsbW9uZCIsImJsdWUiLCJibHVldmlvbGV0IiwiYnJvd24iLCJidXJseXdvb2QiLCJjYWRldGJsdWUiLCJjaGFydHJldXNlIiwiY2hvY29sYXRlIiwiY29yYWwiLCJjb3JuZmxvd2VyYmx1ZSIsImNvcm5zaWxrIiwiY3JpbXNvbiIsImN5YW4iLCJkYXJrYmx1ZSIsImRhcmtjeWFuIiwiZGFya2dvbGRlbnJvZCIsImRhcmtncmF5IiwiZGFya2dyZWVuIiwiZGFya2dyZXkiLCJkYXJra2hha2kiLCJkYXJrbWFnZW50YSIsImRhcmtvbGl2ZWdyZWVuIiwiZGFya29yYW5nZSIsImRhcmtvcmNoaWQiLCJkYXJrcmVkIiwiZGFya3NhbG1vbiIsImRhcmtzZWFncmVlbiIsImRhcmtzbGF0ZWJsdWUiLCJkYXJrc2xhdGVncmF5IiwiZGFya3NsYXRlZ3JleSIsImRhcmt0dXJxdW9pc2UiLCJkYXJrdmlvbGV0IiwiZGVlcHBpbmsiLCJkZWVwc2t5Ymx1ZSIsImRpbWdyYXkiLCJkaW1ncmV5IiwiZG9kZ2VyYmx1ZSIsImZpcmVicmljayIsImZsb3JhbHdoaXRlIiwiZm9yZXN0Z3JlZW4iLCJmdWNoc2lhIiwiZ2FpbnNib3JvIiwiZ2hvc3R3aGl0ZSIsImdvbGQiLCJnb2xkZW5yb2QiLCJncmF5IiwiZ3JlZW4iLCJncmVlbnllbGxvdyIsImdyZXkiLCJob25leWRldyIsImhvdHBpbmsiLCJpbmRpYW5yZWQiLCJpbmRpZ28iLCJpdm9yeSIsImtoYWtpIiwibGF2ZW5kZXIiLCJsYXZlbmRlcmJsdXNoIiwibGF3bmdyZWVuIiwibGVtb25jaGlmZm9uIiwibGlnaHRibHVlIiwibGlnaHRjb3JhbCIsImxpZ2h0Y3lhbiIsImxpZ2h0Z29sZGVucm9keWVsbG93IiwibGlnaHRncmF5IiwibGlnaHRncmVlbiIsImxpZ2h0Z3JleSIsImxpZ2h0cGluayIsImxpZ2h0c2FsbW9uIiwibGlnaHRzZWFncmVlbiIsImxpZ2h0c2t5Ymx1ZSIsImxpZ2h0c2xhdGVncmF5IiwibGlnaHRzbGF0ZWdyZXkiLCJsaWdodHN0ZWVsYmx1ZSIsImxpZ2h0eWVsbG93IiwibGltZSIsImxpbWVncmVlbiIsImxpbmVuIiwibWFnZW50YSIsIm1hcm9vbiIsIm1lZGl1bWFxdWFtYXJpbmUiLCJtZWRpdW1ibHVlIiwibWVkaXVtb3JjaGlkIiwibWVkaXVtcHVycGxlIiwibWVkaXVtc2VhZ3JlZW4iLCJtZWRpdW1zbGF0ZWJsdWUiLCJtZWRpdW1zcHJpbmdncmVlbiIsIm1lZGl1bXR1cnF1b2lzZSIsIm1lZGl1bXZpb2xldHJlZCIsIm1pZG5pZ2h0Ymx1ZSIsIm1pbnRjcmVhbSIsIm1pc3R5cm9zZSIsIm1vY2Nhc2luIiwibmF2YWpvd2hpdGUiLCJuYXZ5Iiwib2xkbGFjZSIsIm9saXZlIiwib2xpdmVkcmFiIiwib3JhbmdlIiwib3JhbmdlcmVkIiwib3JjaGlkIiwicGFsZWdvbGRlbnJvZCIsInBhbGVncmVlbiIsInBhbGV0dXJxdW9pc2UiLCJwYWxldmlvbGV0cmVkIiwicGFwYXlhd2hpcCIsInBlYWNocHVmZiIsInBlcnUiLCJwaW5rIiwicGx1bSIsInBvd2RlcmJsdWUiLCJwdXJwbGUiLCJyZWJlY2NhcHVycGxlIiwicmVkIiwicm9zeWJyb3duIiwicm95YWxibHVlIiwic2FkZGxlYnJvd24iLCJzYWxtb24iLCJzYW5keWJyb3duIiwic2VhZ3JlZW4iLCJzZWFzaGVsbCIsInNpZW5uYSIsInNpbHZlciIsInNreWJsdWUiLCJzbGF0ZWJsdWUiLCJzbGF0ZWdyYXkiLCJzbGF0ZWdyZXkiLCJzbm93Iiwic3ByaW5nZ3JlZW4iLCJzdGVlbGJsdWUiLCJ0ZWFsIiwidGhpc3RsZSIsInRvbWF0byIsInR1cnF1b2lzZSIsInZpb2xldCIsIndoZWF0Iiwid2hpdGUiLCJ3aGl0ZXNtb2tlIiwieWVsbG93IiwieWVsbG93Z3JlZW4iLCJjb2xvcl9mb3JtYXRIZXgiLCJyZ2IiLCJmb3JtYXRIZXgiLCJjb2xvcl9mb3JtYXRSZ2IiLCJmb3JtYXRSZ2IiLCJmb3JtYXQiLCJ0cmltIiwidG9Mb3dlckNhc2UiLCJleGVjIiwicmdibiIsIlJnYiIsInJnYmEiLCJoc2xhIiwicmdiQ29udmVydCIsInJnYl9mb3JtYXRIZXgiLCJoZXgiLCJyZ2JfZm9ybWF0UmdiIiwiSHNsIiwiaHNsQ29udmVydCIsImhzbDJyZ2IiLCJiYXNpcyIsInQxIiwidjAiLCJ2MSIsInYyIiwidjMiLCJ0MiIsInQzIiwiY2hhbm5lbHMiLCJhc3NpZ24iLCJkaXNwbGF5YWJsZSIsImZvcm1hdEhzbCIsImJyaWdodGVyIiwiZGFya2VyIiwibGluZWFyIiwibm9nYW1tYSIsImNvbG9yIiwicmdiR2FtbWEiLCJyZ2JTcGxpbmUiLCJzcGxpbmUiLCJjb2xvcnMiLCJpc051bWJlckFycmF5IiwiQXJyYXlCdWZmZXIiLCJpc1ZpZXciLCJEYXRhVmlldyIsImdlbmVyaWNBcnJheSIsIm5iIiwibmEiLCJzZXRUaW1lIiwicmVBIiwicmVCIiwic291cmNlIiwiYW0iLCJibSIsImJzIiwiYmkiLCJsYXN0SW5kZXgiLCJvbmUiLCJudW1iZXJBcnJheSIsInZhbHVlT2YiLCJ1bml0Iiwibm9ybWFsaXplIiwiY2xhbXBlciIsImJpbWFwIiwiaW50ZXJwb2xhdGUiLCJkMCIsImQxIiwicjAiLCJwb2x5bWFwIiwiY2xhbXAiLCJ0cmFuc2Zvcm1lciIsInRyYW5zZm9ybSIsInVudHJhbnNmb3JtIiwicGllY2V3aXNlIiwicmVzY2FsZSIsImludmVydCIsInJhbmdlUm91bmQiLCJjb250aW51b3VzIiwicmUiLCJmb3JtYXRTcGVjaWZpZXIiLCJzcGVjaWZpZXIiLCJtYXRjaCIsIkZvcm1hdFNwZWNpZmllciIsImFsaWduIiwic3ltYm9sIiwiemVybyIsImNvbW1hIiwicHJlY2lzaW9uIiwicHJlZml4RXhwb25lbnQiLCJjb2VmZmljaWVudCIsImZvcm1hdERlY2ltYWwiLCJleHBvbmVudCIsInRvRml4ZWQiLCJmb3JtYXRSb3VuZGVkIiwidG9VcHBlckNhc2UiLCJwcmVmaXhlcyIsImxvY2FsZSIsImdyb3VwaW5nIiwidGhvdXNhbmRzIiwiY3VycmVuY3lQcmVmaXgiLCJjdXJyZW5jeSIsImN1cnJlbmN5U3VmZml4IiwiZGVjaW1hbCIsIm51bWVyYWxzIiwicmVwbGFjZSIsImZvcm1hdE51bWVyYWxzIiwicGVyY2VudCIsIm1pbnVzIiwibmFuIiwibmV3Rm9ybWF0IiwiZm9ybWF0VHlwZXMiLCJwcmVmaXgiLCJzdWZmaXgiLCJmb3JtYXRUeXBlIiwibWF5YmVTdWZmaXgiLCJ2YWx1ZVByZWZpeCIsInZhbHVlU3VmZml4IiwidmFsdWVOZWdhdGl2ZSIsImkxIiwiaTAiLCJmb3JtYXRUcmltIiwiSW5maW5pdHkiLCJwYWRkaW5nIiwiZm9ybWF0UHJlZml4IiwicHJlY2lzaW9uUHJlZml4IiwicHJlY2lzaW9uUm91bmQiLCJwcmVjaXNpb25GaXhlZCIsImxpbmVhcmlzaCIsInRpY2tGb3JtYXQiLCJuaWNlIiwibmV3SW50ZXJ2YWwiLCJmbG9vcmkiLCJvZmZzZXRpIiwiZmllbGQiLCJkYXRlIiwib2Zmc2V0IiwicHJldmlvdXMiLCJldmVyeSIsInNldE1vbnRoIiwic2V0SG91cnMiLCJzZXRGdWxsWWVhciIsImdldEZ1bGxZZWFyIiwic2V0RGF0ZSIsImdldE1vbnRoIiwid2Vla2RheSIsImdldERhdGUiLCJnZXREYXkiLCJnZXRUaW1lem9uZU9mZnNldCIsInN1bmRheSIsIm1vbmRheSIsInR1ZXNkYXkiLCJ3ZWRuZXNkYXkiLCJ0aHVyc2RheSIsImZyaWRheSIsInNhdHVyZGF5IiwiZ2V0TWlsbGlzZWNvbmRzIiwiZ2V0U2Vjb25kcyIsImdldE1pbnV0ZXMiLCJnZXRIb3VycyIsImdldFVUQ1NlY29uZHMiLCJ1dGNXZWVrZGF5Iiwic2V0VVRDRGF0ZSIsImdldFVUQ0RhdGUiLCJnZXRVVENEYXkiLCJzZXRVVENIb3VycyIsInV0Y1N1bmRheSIsInV0Y01vbmRheSIsInV0Y1R1ZXNkYXkiLCJ1dGNXZWRuZXNkYXkiLCJ1dGNUaHVyc2RheSIsInV0Y0ZyaWRheSIsInV0Y1NhdHVyZGF5IiwidXRjRGF5IiwidXRjWWVhciIsInNldFVUQ01vbnRoIiwic2V0VVRDRnVsbFllYXIiLCJnZXRVVENGdWxsWWVhciIsImxvY2FsRGF0ZSIsIk0iLCJMIiwidXRjRGF0ZSIsIlVUQyIsIm5ld0RhdGUiLCJwYWRzIiwibnVtYmVyUmUiLCJwZXJjZW50UmUiLCJyZXF1b3RlUmUiLCJwYWQiLCJyZXF1b3RlIiwiZm9ybWF0UmUiLCJuYW1lcyIsImZvcm1hdExvb2t1cCIsInBhcnNlV2Vla2RheU51bWJlclN1bmRheSIsInBhcnNlV2Vla2RheU51bWJlck1vbmRheSIsInBhcnNlV2Vla051bWJlclN1bmRheSIsInBhcnNlV2Vla051bWJlcklTTyIsInBhcnNlV2Vla051bWJlck1vbmRheSIsIlciLCJwYXJzZUZ1bGxZZWFyIiwicGFyc2VZZWFyIiwicGFyc2Vab25lIiwiWiIsInBhcnNlUXVhcnRlciIsInBhcnNlTW9udGhOdW1iZXIiLCJwYXJzZURheU9mTW9udGgiLCJwYXJzZURheU9mWWVhciIsInBhcnNlSG91cjI0IiwicGFyc2VNaW51dGVzIiwicGFyc2VTZWNvbmRzIiwicGFyc2VNaWxsaXNlY29uZHMiLCJwYXJzZU1pY3Jvc2Vjb25kcyIsInBhcnNlTGl0ZXJhbFBlcmNlbnQiLCJwYXJzZVVuaXhUaW1lc3RhbXAiLCJRIiwicGFyc2VVbml4VGltZXN0YW1wU2Vjb25kcyIsImZvcm1hdERheU9mTW9udGgiLCJmb3JtYXRIb3VyMjQiLCJmb3JtYXRIb3VyMTIiLCJmb3JtYXREYXlPZlllYXIiLCJmb3JtYXRNaWxsaXNlY29uZHMiLCJmb3JtYXRNaWNyb3NlY29uZHMiLCJmb3JtYXRNb250aE51bWJlciIsImZvcm1hdE1pbnV0ZXMiLCJmb3JtYXRTZWNvbmRzIiwiZm9ybWF0V2Vla2RheU51bWJlck1vbmRheSIsImRheSIsImZvcm1hdFdlZWtOdW1iZXJTdW5kYXkiLCJmb3JtYXRXZWVrTnVtYmVySVNPIiwiZm9ybWF0V2Vla2RheU51bWJlclN1bmRheSIsImZvcm1hdFdlZWtOdW1iZXJNb25kYXkiLCJmb3JtYXRGdWxsWWVhciIsImZvcm1hdFpvbmUiLCJmb3JtYXRVVENEYXlPZk1vbnRoIiwiZm9ybWF0VVRDSG91cjI0IiwiZ2V0VVRDSG91cnMiLCJmb3JtYXRVVENIb3VyMTIiLCJmb3JtYXRVVENEYXlPZlllYXIiLCJmb3JtYXRVVENNaWxsaXNlY29uZHMiLCJnZXRVVENNaWxsaXNlY29uZHMiLCJmb3JtYXRVVENNaWNyb3NlY29uZHMiLCJmb3JtYXRVVENNb250aE51bWJlciIsImdldFVUQ01vbnRoIiwiZm9ybWF0VVRDTWludXRlcyIsImdldFVUQ01pbnV0ZXMiLCJmb3JtYXRVVENTZWNvbmRzIiwiZm9ybWF0VVRDV2Vla2RheU51bWJlck1vbmRheSIsImRvdyIsImZvcm1hdFVUQ1dlZWtOdW1iZXJTdW5kYXkiLCJmb3JtYXRVVENXZWVrTnVtYmVySVNPIiwiZm9ybWF0VVRDV2Vla2RheU51bWJlclN1bmRheSIsImZvcm1hdFVUQ1dlZWtOdW1iZXJNb25kYXkiLCJmb3JtYXRVVENZZWFyIiwiZm9ybWF0VVRDRnVsbFllYXIiLCJmb3JtYXRVVENab25lIiwiZm9ybWF0TGl0ZXJhbFBlcmNlbnQiLCJmb3JtYXRVbml4VGltZXN0YW1wIiwiZm9ybWF0VW5peFRpbWVzdGFtcFNlY29uZHMiLCJsb2NhbGVfZGF0ZVRpbWUiLCJkYXRlVGltZSIsImxvY2FsZV9kYXRlIiwibG9jYWxlX3RpbWUiLCJ0aW1lIiwibG9jYWxlX3BlcmlvZHMiLCJwZXJpb2RzIiwibG9jYWxlX3dlZWtkYXlzIiwiZGF5cyIsImxvY2FsZV9zaG9ydFdlZWtkYXlzIiwic2hvcnREYXlzIiwibG9jYWxlX21vbnRocyIsIm1vbnRocyIsImxvY2FsZV9zaG9ydE1vbnRocyIsInNob3J0TW9udGhzIiwicGVyaW9kUmUiLCJwZXJpb2RMb29rdXAiLCJ3ZWVrZGF5UmUiLCJ3ZWVrZGF5TG9va3VwIiwic2hvcnRXZWVrZGF5UmUiLCJzaG9ydFdlZWtkYXlMb29rdXAiLCJtb250aFJlIiwibW9udGhMb29rdXAiLCJzaG9ydE1vbnRoUmUiLCJzaG9ydE1vbnRoTG9va3VwIiwiZm9ybWF0cyIsInV0Y0Zvcm1hdHMiLCJwYXJzZXMiLCJwYXJzZVNwZWNpZmllciIsImNoYXJBdCIsIm5ld1BhcnNlIiwid2VlayIsInBhcnNlIiwidXRjRm9ybWF0IiwidXRjUGFyc2UiLCJmb3JtYXRMb2NhbGUiLCJ1dGNNb250aCIsInV0Y0hvdXIiLCJzZXRVVENNaW51dGVzIiwidXRjTWludXRlIiwic2V0VVRDU2Vjb25kcyIsIm5vbmUiLCJzZWxlY3RvciIsInF1ZXJ5U2VsZWN0b3IiLCJFbnRlck5vZGUiLCJkYXR1bSIsIm93bmVyRG9jdW1lbnQiLCJuYW1lc3BhY2VVUkkiLCJfbmV4dCIsIl9wYXJlbnQiLCJfX2RhdGFfXyIsImNoaWxkIiwicXVlcnlTZWxlY3RvckFsbCIsImJpbmRJbmRleCIsImVudGVyIiwiZXhpdCIsImdyb3VwTGVuZ3RoIiwiZGF0YUxlbmd0aCIsImJpbmRLZXkiLCJrZXlWYWx1ZSIsIm5vZGVCeUtleVZhbHVlIiwia2V5VmFsdWVzIiwieGh0bWwiLCJzdmciLCJ4bGluayIsInhtbCIsInhtbG5zIiwibmFtZXNwYWNlcyIsImF0dHJSZW1vdmUiLCJhdHRyUmVtb3ZlTlMiLCJmdWxsbmFtZSIsInJlbW92ZUF0dHJpYnV0ZU5TIiwiYXR0ckNvbnN0YW50IiwiYXR0ckNvbnN0YW50TlMiLCJzZXRBdHRyaWJ1dGVOUyIsImF0dHJGdW5jdGlvbiIsImF0dHJGdW5jdGlvbk5TIiwiZGVmYXVsdFZpZXciLCJzdHlsZVJlbW92ZSIsInJlbW92ZVByb3BlcnR5Iiwic3R5bGVDb25zdGFudCIsInByaW9yaXR5Iiwic3R5bGVGdW5jdGlvbiIsInN0eWxlVmFsdWUiLCJnZXRQcm9wZXJ0eVZhbHVlIiwicHJvcGVydHlSZW1vdmUiLCJwcm9wZXJ0eUNvbnN0YW50IiwicHJvcGVydHlGdW5jdGlvbiIsImNsYXNzQXJyYXkiLCJjbGFzc0xpc3QiLCJDbGFzc0xpc3QiLCJfbm9kZSIsIl9uYW1lcyIsImNsYXNzZWRBZGQiLCJsaXN0IiwiY2xhc3NlZFJlbW92ZSIsImNsYXNzZWRUcnVlIiwiY2xhc3NlZEZhbHNlIiwiY2xhc3NlZEZ1bmN0aW9uIiwiY29udGFpbnMiLCJ0ZXh0UmVtb3ZlIiwidGV4dENvbnRlbnQiLCJ0ZXh0Q29uc3RhbnQiLCJ0ZXh0RnVuY3Rpb24iLCJodG1sUmVtb3ZlIiwiaW5uZXJIVE1MIiwiaHRtbENvbnN0YW50IiwiaHRtbEZ1bmN0aW9uIiwicmFpc2UiLCJuZXh0U2libGluZyIsImxvd2VyIiwicHJldmlvdXNTaWJsaW5nIiwiZmlyc3RDaGlsZCIsImNyZWF0b3JJbmhlcml0IiwidXJpIiwiZG9jdW1lbnRFbGVtZW50IiwiY3JlYXRvckZpeGVkIiwibmFtZXNwYWNlIiwiY29uc3RhbnROdWxsIiwic2VsZWN0aW9uX2Nsb25lU2hhbGxvdyIsImNsb25lTm9kZSIsInNlbGVjdGlvbl9jbG9uZURlZXAiLCJmaWx0ZXJFdmVudHMiLCJtb3VzZWVudGVyIiwibW91c2VsZWF2ZSIsImZpbHRlckNvbnRleHRMaXN0ZW5lciIsImxpc3RlbmVyIiwiY29udGV4dExpc3RlbmVyIiwicmVsYXRlZCIsInJlbGF0ZWRUYXJnZXQiLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsImV2ZW50MSIsImV2ZW50MCIsInBhcnNlVHlwZW5hbWVzIiwidHlwZW5hbWVzIiwib25SZW1vdmUiLCJ0eXBlbmFtZSIsIl9fb24iLCJjYXB0dXJlIiwib25BZGQiLCJ3cmFwIiwiY3VzdG9tRXZlbnQiLCJ0aGF0Iiwic291cmNlRXZlbnQiLCJDdXN0b21FdmVudCIsImluaXRFdmVudCIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwiZGlzcGF0Y2hDb25zdGFudCIsImRpc3BhdGNoRnVuY3Rpb24iLCJTZWxlY3Rpb24iLCJncm91cHMiLCJwYXJlbnRzIiwiX2dyb3VwcyIsIl9wYXJlbnRzIiwic2VsZWN0Iiwic3ViZ3JvdXBzIiwic3Vibm9kZSIsInN1Ymdyb3VwIiwic2VsZWN0QWxsIiwiZW50ZXJHcm91cCIsInVwZGF0ZUdyb3VwIiwiX2VudGVyIiwiX2V4aXQiLCJzcGFyc2UiLCJvbmVudGVyIiwib251cGRhdGUiLCJvbmV4aXQiLCJtZXJnZSIsIm9yZGVyIiwiZ3JvdXBzMCIsImdyb3VwczEiLCJzZWxlY3Rpb24iLCJtMCIsIm1lcmdlcyIsImdyb3VwMCIsImdyb3VwMSIsImNvbXBhcmVOb2RlIiwic29ydGdyb3VwcyIsInNvcnRncm91cCIsIm5vZGVzIiwiZ2V0QXR0cmlidXRlTlMiLCJjbGFzc2VkIiwiaHRtbCIsImNyZWF0b3IiLCJiZWZvcmUiLCJkZWVwIiwiRGlzcGF0Y2giLCJ0eXBlcyIsIlQiLCJjdXJyZW50Iiwib3duZXJTVkdFbGVtZW50IiwiY3JlYXRlU1ZHUG9pbnQiLCJwb2ludCIsIm1hdHJpeFRyYW5zZm9ybSIsImdldFNjcmVlbkNUTSIsImNsaWVudExlZnQiLCJjbGllbnRUb3AiLCJjaGFuZ2VkVG91Y2hlcyIsImlkZW50aWZpZXIiLCJ0b3VjaGVzIiwidG91Y2giLCJub3Byb3BhZ2F0aW9uIiwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwicHJldmVudERlZmF1bHQiLCJyb290IiwidmlldyIsIm5vZXZlbnQiLCJfX25vc2VsZWN0IiwiTW96VXNlclNlbGVjdCIsIkRyYWdFdmVudCIsInN1YmplY3QiLCJpZCIsImFjdGl2ZSIsImR5IiwiZGVmYXVsdEZpbHRlciIsImN0cmxLZXkiLCJidXR0b24iLCJkZWZhdWx0Q29udGFpbmVyIiwiZGVmYXVsdFN1YmplY3QiLCJkZWZhdWx0VG91Y2hhYmxlIiwibWF4VG91Y2hQb2ludHMiLCJtb3VzZWRvd254IiwibW91c2Vkb3dueSIsIm1vdXNlbW92aW5nIiwidG91Y2hlbmRpbmciLCJjb250YWluZXIiLCJ0b3VjaGFibGUiLCJnZXN0dXJlcyIsImxpc3RlbmVycyIsImNsaWNrRGlzdGFuY2UyIiwiZHJhZyIsIm1vdXNlZG93bmVkIiwidG91Y2hzdGFydGVkIiwidG91Y2htb3ZlZCIsInRvdWNoZW5kZWQiLCJnZXN0dXJlIiwiYmVmb3Jlc3RhcnQiLCJtb3VzZSIsIm1vdXNlbW92ZWQiLCJtb3VzZXVwcGVkIiwibm9kcmFnIiwibm9jbGljayIsInNldFRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJzdWJsaXN0ZW5lcnMiLCJwMCIsImNsaWNrRGlzdGFuY2UiLCJmb3JjZSIsInN4Iiwic3kiLCJpbml0aWFsaXplIiwidHJlZSIsInhtIiwieW0iLCJ4cCIsInlwIiwiYm90dG9tIiwiX3Jvb3QiLCJsZWFmIiwieDAiLCJfeDAiLCJ5MCIsIl95MCIsIl94MSIsIl95MSIsIl94IiwiX3kiLCJkZWZhdWx0WCIsImRlZmF1bHRZIiwicXVhZHRyZWUiLCJRdWFkdHJlZSIsImFkZEFsbCIsImxlYWZfY29weSIsInRyZWVQcm90byIsImNvdmVyIiwieHoiLCJ5eiIsInZpc2l0IiwiZXh0ZW50IiwiZmluZCIsIngzIiwieTMiLCJxdWFkcyIsInJhZGl1cyIsImQyIiwicmV0YWluZXIiLCJyZW1vdmVBbGwiLCJ2aXNpdEFmdGVyIiwibm9kZUJ5SWQiLCJub2RlSWQiLCJ0YXNrSGVhZCIsInRhc2tUYWlsIiwic3RyZW5ndGhzIiwiZGlzdGFuY2VzIiwiYmlhcyIsInN0cmVuZ3RoIiwibGluayIsImRpc3RhbmNlIiwibGlua3MiLCJ2eCIsImppZ2dsZSIsInZ5IiwiaW5pdGlhbGl6ZVN0cmVuZ3RoIiwiaW5pdGlhbGl6ZURpc3RhbmNlIiwidGltZW91dCIsImNsb2NrTGFzdCIsImNsb2NrTm93IiwiY2xvY2tTa2V3IiwiY2xvY2siLCJzZXRGcmFtZSIsImNsZWFyTm93IiwiVGltZXIiLCJfY2FsbCIsIl90aW1lIiwidGltZXIiLCJyZXN0YXJ0Iiwid2FrZSIsInRpbWVyRmx1c2giLCJ0MCIsInNsZWVwIiwibmFwIiwicG9rZSIsImluaXRpYWxBbmdsZSIsInNpbXVsYXRpb24iLCJhbHBoYU1pbiIsImFscGhhRGVjYXkiLCJhbHBoYVRhcmdldCIsInZlbG9jaXR5RGVjYXkiLCJmb3JjZXMiLCJzdGVwcGVyIiwiZngiLCJmeSIsImluaXRpYWxpemVOb2RlcyIsImluaXRpYWxpemVGb3JjZSIsImNsb3Nlc3QiLCJkaXN0YW5jZU1pbjIiLCJkaXN0YW5jZU1heDIiLCJ0aGV0YTIiLCJhY2N1bXVsYXRlIiwicXVhZCIsIndlaWdodCIsImRpc3RhbmNlTWluIiwiZGlzdGFuY2VNYXgiLCJkMyIsInNjYWxlTGluZWFyIiwic2NhbGVPcmRpbmFsIiwic2NoZW1lQ2F0ZWdvcnkxMCIsImZvcmNlU2ltdWxhdGlvbiIsImZvcmNlTGluayIsImZvcmNlTWFueUJvZHkiLCJmb3JjZUNlbnRlciIsImNvbG91clNjYWxlIiwicmVzaXplIiwiZHJhZ3N0YXJ0ZWQiLCJkcmFnZ2VkIiwiZHJhZ2VuZGVkIiwiZHJhZ3N1YmplY3QiLCJuZXR3b3JrIiwiZDN5U2NhbGUiLCJmdWxsc2NyZWVuIiwib2RvbWV0cnlfZGlzdGFuY2Vfc3RkIiwib2RvbWV0cnlfYW5nbGVfc3RkIiwibWVhc19kaXN0YW5jZV9zdGQiLCJtZWFzX2FuZ2xlX3N0ZCIsIm9kb21ldHJ5X2FuZ2xlX25vaXNlIiwib2RvbWV0cnlfZGlzdF9ub2lzZSIsIm1lYXNfYW5nbGVfbm9pc2UiLCJtZWFzX2Rpc3Rfbm9pc2UiLCJsYW5kbWFya3NfZ3QiLCJwb3Nlc19ndCIsImxta19vYnNlcnZlZF95ZXQiLCJyb2JvdF9sb2MiLCJsYXN0X2tleV9wb3NlIiwiZHJhd1JvYm90IiwiZHJhd1Bvc2VOb2RlcyIsImRyYXdMYW5kbWFya05vZGVzIiwiZHJhd1Bvc2VzR1QiLCJkcmF3TGFuZG1hcmtzR1QiLCJkcmF3TGluZXMiLCJtZWFuMCIsIm1lYW4xIiwiU2lnbWEiLCJhZGRMYW5kbWFya05vZGUiLCJsbWtfbm9kZSIsImFkZE9kb21ldHJ5RmFjdG9yIiwibl9wb3NlX25vZGVzIiwib2RvbWV0cnlfZmFjdG9yIiwibm9pc2UiLCJhZGRNZWFzdXJlbWVudEZhY3RvcnMiLCJjaGVja0FkZFZhck5vZGUiLCJjaGVja0tleSIsImtleUNvZGUiLCJmaXJzdF9wb3NlX25vZGUiLCJsbWsxX3RvZG8iLCJnZXRFbGVtZW50QnlJZCIsIm9kb21ldHJ5X3N0ZCIsInJlbGF0aXZlWCIsIm9mZnNldExlZnQiLCJyZWxhdGl2ZVkiLCJvZmZzZXRUb3AiLCJsYW5kbWFya3MiLCJnZXRKYWMiLCJqMDAiLCJqMDEiLCJqMDIiLCJqMDMiLCJsaW5fcG9pbnQiLCJ4X3JpZ2h0IiwiR2F1c3NQcm9kdWN0IiwiR2JwMWQiLCJHcmFwaCIsIlJvYm90Tm9ubGluZWFyU2ltIiwiUm9ib3RSb29tU2ltIl0sIm1hcHBpbmdzIjoiYUFDRSxJQUFJQSxFQUFtQixHQUd2QixTQUFTQyxFQUFvQkMsR0FHNUIs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RCxLQUFLLENBQUNxSixFQUFHMHJELEVBQVd6ckQsRUFBRzJyRCxLLGdFQW9HY3oyQixFQUFhLGMsbUJBTVhtMEIsRUFBcUIsYyxtQkFFVkMsRUFBa0IsYyxtQkFJN0JDLEVBQWlCLGMsbUJBRU5DLEVBQWMsYyx3RkN0bUJyRCxJQUFJNkMsR0FBYSxDQUMxQzUwRCxPQUFRcVEsU0FBU3l0QyxjQUFjLGdCQUlWLElBQUkrVyxHQUFNLENBQy9CNzBELE9BQVFxUSxTQUFTeXRDLGNBQWMsWUFTVixJQUFJZ1gsR0FBTSxDQUMvQjkwRCxPQUFRcVEsU0FBU3l0QyxjQUFjLFlBSUUsSUFBSWlYLEdBQWtCLENBQ3ZELzBELE9BQVFxUSxTQUFTeXRDLGNBQWMsd0JBSUgsSUFBSWtYLEdBQWEsQ0FDN0NoMUQsT0FBUXFRLFNBQVN5dEMsY0FBYyIsImZpbGUiOiJpbmRleC5idW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gNDQpO1xuIiwiJ3VzZSBzdHJpY3QnXG5cbmNvbnN0IHN5bWJvbHMgPSByZXF1aXJlKCcuL2xpYi9zeW1ib2xzJylcbmNvbnN0IG51bWJlciA9IHJlcXVpcmUoJy4vbGliL251bWJlcicpXG5jb25zdCBzdHJpbmcgPSByZXF1aXJlKCcuL2xpYi9zdHJpbmcnKVxuY29uc3Qgb2JqZWN0ID0gcmVxdWlyZSgnLi9saWIvb2JqZWN0JylcblxuY29uc3QgdHlwZVByZWRpY2F0ZXMgPSB7XG4gIG51bWJlcixcbiAgc3RyaW5nLFxuICBvYmplY3Rcbn1cblxuY29uc3QgY3JlYXRlT3cgPSAoe1xuICB2YWxpZGF0b3JzID0gW10sXG4gIHByZWRpY2F0ZXMgPSB0eXBlUHJlZGljYXRlcyxcbiAgdHlwZSA9IG51bGxcbn0gPSB7IH0pID0+IHtcbiAgY29uc3Qgb3cgPSBuZXcgUHJveHkoZnVuY3Rpb24gKCkgeyB9LCB7XG4gICAgZ2V0OiAob2JqLCBrZXkpID0+IHtcbiAgICAgIGlmIChrZXkgPT09IHN5bWJvbHMudmFsaWRhdGUpIHtcbiAgICAgICAgcmV0dXJuICh2YWx1ZSwgbGFiZWwgPSAnYXJndW1lbnQnKSA9PiB7XG4gICAgICAgICAgaWYgKCF0eXBlKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEVycm9yKCdtaXNzaW5nIHJlcXVpcmVkIHR5cGUgc3BlY2lmaWVyJylcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZhbGlkYXRvcnMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGNvbnN0IHZhbGlkYXRvciA9IHZhbGlkYXRvcnNbaV1cbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHZhbGlkYXRvci5mbih2YWx1ZSlcblxuICAgICAgICAgICAgaWYgKCFyZXN1bHQpIHtcbiAgICAgICAgICAgICAgaWYgKGkgPT09IDApIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEV4cGVjdGVkICR7bGFiZWx9IFxcYCR7dmFsdWV9XFxgIHRvIGJlIG9mIHR5cGUgXFxgJHt0eXBlfVxcYCwgYnV0IHJlY2VpdmVkIHR5cGUgXFxgJHt0eXBlb2YgdmFsdWV9XFxgYClcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEV4cGVjdGVkICR7dHlwZX0gXFxgJHtsYWJlbH1cXGAgXFxgJHt2YWx1ZX1cXGAgZmFpbGVkIHByZWRpY2F0ZSBcXGAke3ZhbGlkYXRvci5rZXl9XFxgYClcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBjb25zdCBwcmVkaWNhdGUgPSBwcmVkaWNhdGVzW2tleV1cblxuICAgICAgaWYgKHByZWRpY2F0ZSkge1xuICAgICAgICBpZiAodHlwZW9mIHByZWRpY2F0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHZhbGlkYXRvcnMucHVzaCh7XG4gICAgICAgICAgICBrZXksXG4gICAgICAgICAgICBmbjogcHJlZGljYXRlXG4gICAgICAgICAgfSlcblxuICAgICAgICAgIHJldHVybiBvd1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBjcmVhdGVPdyh7XG4gICAgICAgICAgICB0eXBlOiBrZXksXG4gICAgICAgICAgICB2YWxpZGF0b3JzOiBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBrZXksXG4gICAgICAgICAgICAgICAgZm46IHByZWRpY2F0ZS52YWxpZGF0b3JcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIHByZWRpY2F0ZXM6IHByZWRpY2F0ZS5wcmVkaWNhdGVzXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgZm4gPSBwcmVkaWNhdGVzW3N5bWJvbHMuZnVuY10gJiYgcHJlZGljYXRlc1tzeW1ib2xzLmZ1bmNdW2tleV1cblxuICAgICAgICBpZiAoZm4pIHtcbiAgICAgICAgICByZXR1cm4gbmV3IFByb3h5KGZ1bmN0aW9uICgpIHsgfSwge1xuICAgICAgICAgICAgZ2V0OiAoKSA9PiB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgaW52YWxpZCB1c2Ugb2YgZnVuY3Rpb25hbCBwcmVkaWNhdGUgXCIke2tleX1cImApXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBhcHBseTogKG9iaiwgdGhpc0FyZywgYXJncykgPT4ge1xuICAgICAgICAgICAgICB2YWxpZGF0b3JzLnB1c2goe1xuICAgICAgICAgICAgICAgIGtleSxcbiAgICAgICAgICAgICAgICBmbjogZm4oLi4uYXJncylcbiAgICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgICByZXR1cm4gb3dcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChrZXkgPT09ICdkZWZhdWx0JyB8fCBrZXkgPT09ICdfX2VzTW9kdWxlJykge1xuICAgICAgICAgICAgcmV0dXJuIG93XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIG93XG4gICAgICAgICAgLy8gdGhyb3cgbmV3IEVycm9yKGB1bnJlY29nbml6ZWQgcHJlZGljYXRlIFwiJHtrZXl9XCJgKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIGFwcGx5OiAob2JqLCB0aGlzQXJnLCBhcmdzKSA9PiB7XG4gICAgICBpZiAoYXJncy5sZW5ndGggIT09IDIgJiYgYXJncy5sZW5ndGggIT09IDMpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIG51bWJlciBvZiBhcmd1bWVudHMgdG8gXCJvd1wiJylcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFyZ3NbMV1bc3ltYm9scy52YWxpZGF0ZV0oYXJnc1swXSwgYXJnc1syXSlcbiAgICAgIH1cbiAgICB9XG4gIH0pXG5cbiAgcmV0dXJuIG93XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY3JlYXRlT3coKVxuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcblx0dGhyb3cgbmV3IEVycm9yKFwiZGVmaW5lIGNhbm5vdCBiZSB1c2VkIGluZGlyZWN0XCIpO1xufTtcbiIsIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZGlzdC9yYW5kb20nKS5kZWZhdWx0XG4iLCIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxuZnVuY3Rpb24gaXNBbnlBcnJheShvYmplY3QpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwob2JqZWN0KS5lbmRzV2l0aCgnQXJyYXldJyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNBbnlBcnJheTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obW9kdWxlKSB7XG5cdGlmICghbW9kdWxlLndlYnBhY2tQb2x5ZmlsbCkge1xuXHRcdG1vZHVsZS5kZXByZWNhdGUgPSBmdW5jdGlvbigpIHt9O1xuXHRcdG1vZHVsZS5wYXRocyA9IFtdO1xuXHRcdC8vIG1vZHVsZS5wYXJlbnQgPSB1bmRlZmluZWQgYnkgZGVmYXVsdFxuXHRcdGlmICghbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImxvYWRlZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5sO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiaWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUuaTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRtb2R1bGUud2VicGFja1BvbHlmaWxsID0gMTtcblx0fVxuXHRyZXR1cm4gbW9kdWxlO1xufTtcbiIsIi8qIGdsb2JhbHMgX193ZWJwYWNrX2FtZF9vcHRpb25zX18gKi9cbm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX2FtZF9vcHRpb25zX187XG4iLCIndXNlIHN0cmljdCdcblxuZXhwb3J0cy5mdW5jID0gU3ltYm9sKCdmdW5jJylcbmV4cG9ydHMudmFsaWRhdGUgPSBTeW1ib2woJ3ZhbGlkYXRlJylcbiIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIFJORyA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gUk5HKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBSTkcpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFJORywgW3tcbiAgICBrZXk6ICduZXh0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignUk5HLm5leHQgbXVzdCBiZSBvdmVycmlkZGVuJyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc2VlZCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNlZWQoX3NlZWQsIG9wdHMpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignUk5HLnNlZWQgbXVzdCBiZSBvdmVycmlkZGVuJyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY2xvbmUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjbG9uZShzZWVkLCBvcHRzKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JORy5jbG9uZSBtdXN0IGJlIG92ZXJyaWRkZW4nKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdfc2VlZCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9zZWVkKHNlZWQsIG9wdHMpIHtcbiAgICAgIC8vIFRPRE86IGFkZCBlbnRyb3B5IGFuZCBzdHVmZlxuXG4gICAgICBpZiAoc2VlZCA9PT0gKHNlZWQgfCAwKSkge1xuICAgICAgICByZXR1cm4gc2VlZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBzdHJTZWVkID0gJycgKyBzZWVkO1xuICAgICAgICB2YXIgcyA9IDA7XG5cbiAgICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCBzdHJTZWVkLmxlbmd0aDsgKytrKSB7XG4gICAgICAgICAgcyBePSBzdHJTZWVkLmNoYXJDb2RlQXQoaykgfCAwO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHM7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnbmFtZScsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JORy5uYW1lIG11c3QgYmUgb3ZlcnJpZGRlbicpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBSTkc7XG59KCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IFJORztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJuZy5qcy5tYXAiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLlJOR0ZhY3RvcnkgPSBleHBvcnRzLlJORyA9IHVuZGVmaW5lZDtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9vd0xpdGUgPSByZXF1aXJlKCdvdy1saXRlJyk7XG5cbnZhciBfb3dMaXRlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX293TGl0ZSk7XG5cbnZhciBfcm5nID0gcmVxdWlyZSgnLi9ybmcnKTtcblxudmFyIF9ybmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcm5nKTtcblxudmFyIF9ybmdGYWN0b3J5ID0gcmVxdWlyZSgnLi9ybmctZmFjdG9yeScpO1xuXG52YXIgX3JuZ0ZhY3RvcnkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcm5nRmFjdG9yeSk7XG5cbnZhciBfdW5pZm9ybTIgPSByZXF1aXJlKCcuL2Rpc3RyaWJ1dGlvbnMvdW5pZm9ybScpO1xuXG52YXIgX3VuaWZvcm0zID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdW5pZm9ybTIpO1xuXG52YXIgX3VuaWZvcm1JbnQyID0gcmVxdWlyZSgnLi9kaXN0cmlidXRpb25zL3VuaWZvcm0taW50Jyk7XG5cbnZhciBfdW5pZm9ybUludDMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF91bmlmb3JtSW50Mik7XG5cbnZhciBfdW5pZm9ybUJvb2xlYW4yID0gcmVxdWlyZSgnLi9kaXN0cmlidXRpb25zL3VuaWZvcm0tYm9vbGVhbicpO1xuXG52YXIgX3VuaWZvcm1Cb29sZWFuMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3VuaWZvcm1Cb29sZWFuMik7XG5cbnZhciBfbm9ybWFsMiA9IHJlcXVpcmUoJy4vZGlzdHJpYnV0aW9ucy9ub3JtYWwnKTtcblxudmFyIF9ub3JtYWwzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfbm9ybWFsMik7XG5cbnZhciBfbG9nTm9ybWFsMiA9IHJlcXVpcmUoJy4vZGlzdHJpYnV0aW9ucy9sb2ctbm9ybWFsJyk7XG5cbnZhciBfbG9nTm9ybWFsMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2xvZ05vcm1hbDIpO1xuXG52YXIgX2Jlcm5vdWxsaTIgPSByZXF1aXJlKCcuL2Rpc3RyaWJ1dGlvbnMvYmVybm91bGxpJyk7XG5cbnZhciBfYmVybm91bGxpMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2Jlcm5vdWxsaTIpO1xuXG52YXIgX2Jpbm9taWFsMiA9IHJlcXVpcmUoJy4vZGlzdHJpYnV0aW9ucy9iaW5vbWlhbCcpO1xuXG52YXIgX2Jpbm9taWFsMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2Jpbm9taWFsMik7XG5cbnZhciBfZ2VvbWV0cmljMiA9IHJlcXVpcmUoJy4vZGlzdHJpYnV0aW9ucy9nZW9tZXRyaWMnKTtcblxudmFyIF9nZW9tZXRyaWMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2VvbWV0cmljMik7XG5cbnZhciBfcG9pc3NvbjIgPSByZXF1aXJlKCcuL2Rpc3RyaWJ1dGlvbnMvcG9pc3NvbicpO1xuXG52YXIgX3BvaXNzb24zID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcG9pc3NvbjIpO1xuXG52YXIgX2V4cG9uZW50aWFsMiA9IHJlcXVpcmUoJy4vZGlzdHJpYnV0aW9ucy9leHBvbmVudGlhbCcpO1xuXG52YXIgX2V4cG9uZW50aWFsMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2V4cG9uZW50aWFsMik7XG5cbnZhciBfaXJ3aW5IYWxsMiA9IHJlcXVpcmUoJy4vZGlzdHJpYnV0aW9ucy9pcndpbi1oYWxsJyk7XG5cbnZhciBfaXJ3aW5IYWxsMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2lyd2luSGFsbDIpO1xuXG52YXIgX2JhdGVzMiA9IHJlcXVpcmUoJy4vZGlzdHJpYnV0aW9ucy9iYXRlcycpO1xuXG52YXIgX2JhdGVzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2JhdGVzMik7XG5cbnZhciBfcGFyZXRvMiA9IHJlcXVpcmUoJy4vZGlzdHJpYnV0aW9ucy9wYXJldG8nKTtcblxudmFyIF9wYXJldG8zID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcGFyZXRvMik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmV4cG9ydHMuUk5HID0gX3JuZzIuZGVmYXVsdDtcbmV4cG9ydHMuUk5HRmFjdG9yeSA9IF9ybmdGYWN0b3J5Mi5kZWZhdWx0O1xuXG4vKipcbiAqIFNlZWRhYmxlIHJhbmRvbSBudW1iZXIgZ2VuZXJhdG9yIHN1cHBvcnRpbmcgbWFueSBjb21tb24gZGlzdHJpYnV0aW9ucy5cbiAqXG4gKiBEZWZhdWx0cyB0byBNYXRoLnJhbmRvbSBhcyBpdHMgdW5kZXJseWluZyBwc2V1ZG9yYW5kb20gbnVtYmVyIGdlbmVyYXRvci5cbiAqXG4gKiBAbmFtZSBSYW5kb21cbiAqIEBjbGFzc1xuICpcbiAqIEBwYXJhbSB7Uk5HfGZ1bmN0aW9ufSBbcm5nPU1hdGgucmFuZG9tXSAtIFVuZGVybHlpbmcgcHNldWRvcmFuZG9tIG51bWJlciBnZW5lcmF0b3IuXG4gKi9cblxudmFyIFJhbmRvbSA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gUmFuZG9tKHJuZykge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBSYW5kb20pO1xuXG4gICAgaWYgKHJuZykgKDAsIF9vd0xpdGUyLmRlZmF1bHQpKHJuZywgX293TGl0ZTIuZGVmYXVsdC5vYmplY3QuaW5zdGFuY2VPZihfcm5nMi5kZWZhdWx0KSk7XG5cbiAgICB0aGlzLl9jYWNoZSA9IHt9O1xuICAgIHRoaXMudXNlKHJuZyk7XG4gIH1cblxuICAvKipcbiAgICogQG1lbWJlciB7Uk5HfSBVbmRlcmx5aW5nIHBzZXVkby1yYW5kb20gbnVtYmVyIGdlbmVyYXRvclxuICAgKi9cblxuXG4gIF9jcmVhdGVDbGFzcyhSYW5kb20sIFt7XG4gICAga2V5OiAnY2xvbmUnLFxuXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IGBSYW5kb21gIGluc3RhbmNlLCBvcHRpb25hbGx5IHNwZWNpZnlpbmcgcGFyYW1ldGVycyB0b1xuICAgICAqIHNldCBhIG5ldyBzZWVkLlxuICAgICAqXG4gICAgICogQHNlZSBSTkcuY2xvbmVcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc2VlZF0gLSBPcHRpb25hbCBzZWVkIGZvciBuZXcgUk5HLlxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0c10gLSBPcHRpb25hbCBjb25maWcgZm9yIG5ldyBSTkcgb3B0aW9ucy5cbiAgICAgKiBAcmV0dXJuIHtSYW5kb219XG4gICAgICovXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNsb25lKCkge1xuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBSYW5kb20oX3JuZ0ZhY3RvcnkyLmRlZmF1bHQuYXBwbHkodW5kZWZpbmVkLCBhcmd1bWVudHMpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBuZXcgUmFuZG9tKHRoaXMucm5nLmNsb25lKCkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHVuZGVybHlpbmcgcHNldWRvcmFuZG9tIG51bWJlciBnZW5lcmF0b3IgdXNlZCB2aWFcbiAgICAgKiBlaXRoZXIgYW4gaW5zdGFuY2Ugb2YgYHNlZWRyYW5kb21gLCBhIGN1c3RvbSBpbnN0YW5jZSBvZiBSTkdcbiAgICAgKiAoZm9yIFBSTkcgcGx1Z2lucyksIG9yIGEgc3RyaW5nIHNwZWNpZnlpbmcgdGhlIFBSTkcgdG8gdXNlXG4gICAgICogYWxvbmcgd2l0aCBhbiBvcHRpb25hbCBgc2VlZGAgYW5kIGBvcHRzYCB0byBpbml0aWFsaXplIHRoZVxuICAgICAqIFJORy5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogY29uc3QgcmFuZG9tID0gcmVxdWlyZSgncmFuZG9tJylcbiAgICAgKlxuICAgICAqIHJhbmRvbS51c2UoJ2V4YW1wbGVfc2VlZHJhbmRvbV9zdHJpbmcnKVxuICAgICAqIC8vIG9yXG4gICAgICogcmFuZG9tLnVzZShzZWVkcmFuZG9tKCdraXR0ZW5zJykpXG4gICAgICogLy8gb3JcbiAgICAgKiByYW5kb20udXNlKE1hdGgucmFuZG9tKVxuICAgICAqXG4gICAgICogQHBhcmFtIHsuLi4qfSBhcmdzXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3VzZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVzZSgpIHtcbiAgICAgIHRoaXMuX3JuZyA9IF9ybmdGYWN0b3J5Mi5kZWZhdWx0LmFwcGx5KHVuZGVmaW5lZCwgYXJndW1lbnRzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQYXRjaGVzIGBNYXRoLnJhbmRvbWAgd2l0aCB0aGlzIFJhbmRvbSBpbnN0YW5jZSdzIFBSTkcuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3BhdGNoJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcGF0Y2goKSB7XG4gICAgICBpZiAodGhpcy5fcGF0Y2gpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdNYXRoLnJhbmRvbSBhbHJlYWR5IHBhdGNoZWQnKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fcGF0Y2ggPSBNYXRoLnJhbmRvbTtcbiAgICAgIE1hdGgucmFuZG9tID0gdGhpcy51bmlmb3JtKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVzdG9yZXMgYSBwcmV2aW91c2x5IHBhdGNoZWQgYE1hdGgucmFuZG9tYCB0byBpdHMgb3JpZ2luYWwgdmFsdWUuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3VucGF0Y2gnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1bnBhdGNoKCkge1xuICAgICAgaWYgKHRoaXMuX3BhdGNoKSB7XG4gICAgICAgIE1hdGgucmFuZG9tID0gdGhpcy5fcGF0Y2g7XG4gICAgICAgIGRlbGV0ZSB0aGlzLl9wYXRjaDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIC8vIFVuaWZvcm0gdXRpbGl0eSBmdW5jdGlvbnNcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gICAgLyoqXG4gICAgICogQ29udmVuaWVuY2Ugd3JhcHBlciBhcm91bmQgYHRoaXMucm5nLm5leHQoKWBcbiAgICAgKlxuICAgICAqIFJldHVybnMgYSBmbG9hdGluZyBwb2ludCBudW1iZXIgaW4gWzAsIDEpLlxuICAgICAqXG4gICAgICogQHJldHVybiB7bnVtYmVyfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICduZXh0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9ybmcubmV4dCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNhbXBsZXMgYSB1bmlmb3JtIHJhbmRvbSBmbG9hdGluZyBwb2ludCBudW1iZXIsIG9wdGlvbmFsbHkgc3BlY2lmeWluZ1xuICAgICAqIGxvd2VyIGFuZCB1cHBlciBib3VuZHMuXG4gICAgICpcbiAgICAgKiBDb252ZW5jZSB3cmFwcGVyIGFyb3VuZCBgcmFuZG9tLnVuaWZvcm0oKWBcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbWluPTBdIC0gTG93ZXIgYm91bmQgKGZsb2F0LCBpbmNsdXNpdmUpXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFttYXg9MV0gLSBVcHBlciBib3VuZCAoZmxvYXQsIGV4Y2x1c2l2ZSlcbiAgICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2Zsb2F0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZmxvYXQobWluLCBtYXgpIHtcbiAgICAgIHJldHVybiB0aGlzLnVuaWZvcm0obWluLCBtYXgpKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2FtcGxlcyBhIHVuaWZvcm0gcmFuZG9tIGludGVnZXIsIG9wdGlvbmFsbHkgc3BlY2lmeWluZyBsb3dlciBhbmQgdXBwZXJcbiAgICAgKiBib3VuZHMuXG4gICAgICpcbiAgICAgKiBDb252ZW5jZSB3cmFwcGVyIGFyb3VuZCBgcmFuZG9tLnVuaWZvcm1JbnQoKWBcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbWluPTBdIC0gTG93ZXIgYm91bmQgKGludGVnZXIsIGluY2x1c2l2ZSlcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW21heD0xXSAtIFVwcGVyIGJvdW5kIChpbnRlZ2VyLCBpbmNsdXNpdmUpXG4gICAgICogQHJldHVybiB7bnVtYmVyfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdpbnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpbnQobWluLCBtYXgpIHtcbiAgICAgIHJldHVybiB0aGlzLnVuaWZvcm1JbnQobWluLCBtYXgpKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2FtcGxlcyBhIHVuaWZvcm0gcmFuZG9tIGludGVnZXIsIG9wdGlvbmFsbHkgc3BlY2lmeWluZyBsb3dlciBhbmQgdXBwZXJcbiAgICAgKiBib3VuZHMuXG4gICAgICpcbiAgICAgKiBDb252ZW5jZSB3cmFwcGVyIGFyb3VuZCBgcmFuZG9tLnVuaWZvcm1JbnQoKWBcbiAgICAgKlxuICAgICAqIEBhbGlhcyBgcmFuZG9tLmludGBcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbWluPTBdIC0gTG93ZXIgYm91bmQgKGludGVnZXIsIGluY2x1c2l2ZSlcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW21heD0xXSAtIFVwcGVyIGJvdW5kIChpbnRlZ2VyLCBpbmNsdXNpdmUpXG4gICAgICogQHJldHVybiB7bnVtYmVyfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdpbnRlZ2VyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gaW50ZWdlcihtaW4sIG1heCkge1xuICAgICAgcmV0dXJuIHRoaXMudW5pZm9ybUludChtaW4sIG1heCkoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTYW1wbGVzIGEgdW5pZm9ybSByYW5kb20gYm9vbGVhbiB2YWx1ZS5cbiAgICAgKlxuICAgICAqIENvbnZlbmNlIHdyYXBwZXIgYXJvdW5kIGByYW5kb20udW5pZm9ybUJvb2xlYW4oKWBcbiAgICAgKlxuICAgICAqIEBhbGlhcyBgcmFuZG9tLmJvb2xlYW5gXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdib29sJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gYm9vbCgpIHtcbiAgICAgIHJldHVybiB0aGlzLnVuaWZvcm1Cb29sZWFuKCkoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTYW1wbGVzIGEgdW5pZm9ybSByYW5kb20gYm9vbGVhbiB2YWx1ZS5cbiAgICAgKlxuICAgICAqIENvbnZlbmNlIHdyYXBwZXIgYXJvdW5kIGByYW5kb20udW5pZm9ybUJvb2xlYW4oKWBcbiAgICAgKlxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2Jvb2xlYW4nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBib29sZWFuKCkge1xuICAgICAgcmV0dXJuIHRoaXMudW5pZm9ybUJvb2xlYW4oKSgpO1xuICAgIH1cblxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLy8gVW5pZm9ybSBkaXN0cmlidXRpb25zXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAgIC8qKlxuICAgICAqIEdlbmVyYXRlcyBhIFtDb250aW51b3VzIHVuaWZvcm0gZGlzdHJpYnV0aW9uXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Vbmlmb3JtX2Rpc3RyaWJ1dGlvbl8oY29udGludW91cykpLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFttaW49MF0gLSBMb3dlciBib3VuZCAoZmxvYXQsIGluY2x1c2l2ZSlcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW21heD0xXSAtIFVwcGVyIGJvdW5kIChmbG9hdCwgZXhjbHVzaXZlKVxuICAgICAqIEByZXR1cm4ge2Z1bmN0aW9ufVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICd1bmlmb3JtJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdW5pZm9ybShtaW4sIG1heCkge1xuICAgICAgcmV0dXJuIHRoaXMuX21lbW9pemUoJ3VuaWZvcm0nLCBfdW5pZm9ybTMuZGVmYXVsdCwgbWluLCBtYXgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdlbmVyYXRlcyBhIFtEaXNjcmV0ZSB1bmlmb3JtIGRpc3RyaWJ1dGlvbl0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRGlzY3JldGVfdW5pZm9ybV9kaXN0cmlidXRpb24pLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFttaW49MF0gLSBMb3dlciBib3VuZCAoaW50ZWdlciwgaW5jbHVzaXZlKVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbWF4PTFdIC0gVXBwZXIgYm91bmQgKGludGVnZXIsIGluY2x1c2l2ZSlcbiAgICAgKiBAcmV0dXJuIHtmdW5jdGlvbn1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAndW5pZm9ybUludCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVuaWZvcm1JbnQobWluLCBtYXgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9tZW1vaXplKCd1bmlmb3JtSW50JywgX3VuaWZvcm1JbnQzLmRlZmF1bHQsIG1pbiwgbWF4KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZXMgYSBbRGlzY3JldGUgdW5pZm9ybSBkaXN0cmlidXRpb25dKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0Rpc2NyZXRlX3VuaWZvcm1fZGlzdHJpYnV0aW9uKSxcbiAgICAgKiB3aXRoIHR3byBwb3NzaWJsZSBvdXRjb21lcywgYHRydWVgIG9yIGBmYWxzZS5cbiAgICAgKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGFuYWxvZ291cyB0byBmbGlwcGluZyBhIGNvaW4uXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtmdW5jdGlvbn1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAndW5pZm9ybUJvb2xlYW4nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1bmlmb3JtQm9vbGVhbigpIHtcbiAgICAgIHJldHVybiB0aGlzLl9tZW1vaXplKCd1bmlmb3JtQm9vbGVhbicsIF91bmlmb3JtQm9vbGVhbjMuZGVmYXVsdCk7XG4gICAgfVxuXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvLyBOb3JtYWwgZGlzdHJpYnV0aW9uc1xuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZXMgYSBbTm9ybWFsIGRpc3RyaWJ1dGlvbl0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTm9ybWFsX2Rpc3RyaWJ1dGlvbikuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW211PTBdIC0gTWVhblxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc2lnbWE9MV0gLSBTdGFuZGFyZCBkZXZpYXRpb25cbiAgICAgKiBAcmV0dXJuIHtmdW5jdGlvbn1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnbm9ybWFsJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gbm9ybWFsKG11LCBzaWdtYSkge1xuICAgICAgcmV0dXJuICgwLCBfbm9ybWFsMy5kZWZhdWx0KSh0aGlzLCBtdSwgc2lnbWEpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdlbmVyYXRlcyBhIFtMb2ctbm9ybWFsIGRpc3RyaWJ1dGlvbl0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTG9nLW5vcm1hbF9kaXN0cmlidXRpb24pLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFttdT0wXSAtIE1lYW4gb2YgdW5kZXJseWluZyBub3JtYWwgZGlzdHJpYnV0aW9uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzaWdtYT0xXSAtIFN0YW5kYXJkIGRldmlhdGlvbiBvZiB1bmRlcmx5aW5nIG5vcm1hbCBkaXN0cmlidXRpb25cbiAgICAgKiBAcmV0dXJuIHtmdW5jdGlvbn1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnbG9nTm9ybWFsJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gbG9nTm9ybWFsKG11LCBzaWdtYSkge1xuICAgICAgcmV0dXJuICgwLCBfbG9nTm9ybWFsMy5kZWZhdWx0KSh0aGlzLCBtdSwgc2lnbWEpO1xuICAgIH1cblxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLy8gQmVybm91bGxpIGRpc3RyaWJ1dGlvbnNcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gICAgLyoqXG4gICAgICogR2VuZXJhdGVzIGEgW0Jlcm5vdWxsaSBkaXN0cmlidXRpb25dKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0Jlcm5vdWxsaV9kaXN0cmlidXRpb24pLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtwPTAuNV0gLSBTdWNjZXNzIHByb2JhYmlsaXR5IG9mIGVhY2ggdHJpYWwuXG4gICAgICogQHJldHVybiB7ZnVuY3Rpb259XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2Jlcm5vdWxsaScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGJlcm5vdWxsaShwKSB7XG4gICAgICByZXR1cm4gKDAsIF9iZXJub3VsbGkzLmRlZmF1bHQpKHRoaXMsIHApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdlbmVyYXRlcyBhIFtCaW5vbWlhbCBkaXN0cmlidXRpb25dKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0Jpbm9taWFsX2Rpc3RyaWJ1dGlvbikuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249MV0gLSBOdW1iZXIgb2YgdHJpYWxzLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbcD0wLjVdIC0gU3VjY2VzcyBwcm9iYWJpbGl0eSBvZiBlYWNoIHRyaWFsLlxuICAgICAqIEByZXR1cm4ge2Z1bmN0aW9ufVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdiaW5vbWlhbCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGJpbm9taWFsKG4sIHApIHtcbiAgICAgIHJldHVybiAoMCwgX2Jpbm9taWFsMy5kZWZhdWx0KSh0aGlzLCBuLCBwKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZXMgYSBbR2VvbWV0cmljIGRpc3RyaWJ1dGlvbl0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvR2VvbWV0cmljX2Rpc3RyaWJ1dGlvbikuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3A9MC41XSAtIFN1Y2Nlc3MgcHJvYmFiaWxpdHkgb2YgZWFjaCB0cmlhbC5cbiAgICAgKiBAcmV0dXJuIHtmdW5jdGlvbn1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnZ2VvbWV0cmljJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2VvbWV0cmljKHApIHtcbiAgICAgIHJldHVybiAoMCwgX2dlb21ldHJpYzMuZGVmYXVsdCkodGhpcywgcCk7XG4gICAgfVxuXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvLyBQb2lzc29uIGRpc3RyaWJ1dGlvbnNcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gICAgLyoqXG4gICAgICogR2VuZXJhdGVzIGEgW1BvaXNzb24gZGlzdHJpYnV0aW9uXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Qb2lzc29uX2Rpc3RyaWJ1dGlvbikuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xhbWJkYT0xXSAtIE1lYW4gKGxhbWJkYSA+IDApXG4gICAgICogQHJldHVybiB7ZnVuY3Rpb259XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3BvaXNzb24nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBwb2lzc29uKGxhbWJkYSkge1xuICAgICAgcmV0dXJuICgwLCBfcG9pc3NvbjMuZGVmYXVsdCkodGhpcywgbGFtYmRhKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZXMgYW4gW0V4cG9uZW50aWFsIGRpc3RyaWJ1dGlvbl0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRXhwb25lbnRpYWxfZGlzdHJpYnV0aW9uKS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbGFtYmRhPTFdIC0gSW52ZXJzZSBtZWFuIChsYW1iZGEgPiAwKVxuICAgICAqIEByZXR1cm4ge2Z1bmN0aW9ufVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdleHBvbmVudGlhbCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGV4cG9uZW50aWFsKGxhbWJkYSkge1xuICAgICAgcmV0dXJuICgwLCBfZXhwb25lbnRpYWwzLmRlZmF1bHQpKHRoaXMsIGxhbWJkYSk7XG4gICAgfVxuXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvLyBNaXNjIGRpc3RyaWJ1dGlvbnNcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gICAgLyoqXG4gICAgICogR2VuZXJhdGVzIGFuIFtJcndpbiBIYWxsIGRpc3RyaWJ1dGlvbl0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSXJ3aW4lRTIlODAlOTNIYWxsX2Rpc3RyaWJ1dGlvbikuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249MV0gLSBOdW1iZXIgb2YgdW5pZm9ybSBzYW1wbGVzIHRvIHN1bSAobiA+PSAwKVxuICAgICAqIEByZXR1cm4ge2Z1bmN0aW9ufVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdpcndpbkhhbGwnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpcndpbkhhbGwobikge1xuICAgICAgcmV0dXJuICgwLCBfaXJ3aW5IYWxsMy5kZWZhdWx0KSh0aGlzLCBuKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZXMgYSBbQmF0ZXMgZGlzdHJpYnV0aW9uXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9CYXRlc19kaXN0cmlidXRpb24pLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuPTFdIC0gTnVtYmVyIG9mIHVuaWZvcm0gc2FtcGxlcyB0byBhdmVyYWdlIChuID49IDEpXG4gICAgICogQHJldHVybiB7ZnVuY3Rpb259XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2JhdGVzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gYmF0ZXMobikge1xuICAgICAgcmV0dXJuICgwLCBfYmF0ZXMzLmRlZmF1bHQpKHRoaXMsIG4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdlbmVyYXRlcyBhIFtQYXJldG8gZGlzdHJpYnV0aW9uXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9QYXJldG9fZGlzdHJpYnV0aW9uKS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYWxwaGE9MV0gLSBBbHBoYVxuICAgICAqIEByZXR1cm4ge2Z1bmN0aW9ufVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdwYXJldG8nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJldG8oYWxwaGEpIHtcbiAgICAgIHJldHVybiAoMCwgX3BhcmV0bzMuZGVmYXVsdCkodGhpcywgYWxwaGEpO1xuICAgIH1cblxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLy8gSW50ZXJuYWxcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gICAgLyoqXG4gICAgICogTWVtb2l6ZXMgZGlzdHJpYnV0aW9ucyB0byBlbnN1cmUgdGhleSdyZSBvbmx5IGNyZWF0ZWQgd2hlbiBuZWNlc3NhcnkuXG4gICAgICpcbiAgICAgKiBSZXR1cm5zIGEgdGh1bmsgd2hpY2ggdGhhdCByZXR1cm5zIGluZGVwZW5kZW50LCBpZGVudGljYWxseSBkaXN0cmlidXRlZFxuICAgICAqIHNhbXBsZXMgZnJvbSB0aGUgc3BlY2lmaWVkIGRpc3RyaWJ1dGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbGFiZWwgLSBOYW1lIG9mIGRpc3RyaWJ1dGlvblxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGdldHRlciAtIEZ1bmN0aW9uIHdoaWNoIGdlbmVyYXRlcyBhIG5ldyBkaXN0cmlidXRpb25cbiAgICAgKiBAcGFyYW0gey4uLip9IGFyZ3MgLSBEaXN0cmlidXRpb24tc3BlY2lmaWMgYXJndW1lbnRzXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtmdW5jdGlvbn1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX21lbW9pemUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfbWVtb2l6ZShsYWJlbCwgZ2V0dGVyKSB7XG4gICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4gPiAyID8gX2xlbiAtIDIgOiAwKSwgX2tleSA9IDI7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgYXJnc1tfa2V5IC0gMl0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICB9XG5cbiAgICAgIHZhciBrZXkgPSAnJyArIGFyZ3Muam9pbignOycpO1xuICAgICAgdmFyIHZhbHVlID0gdGhpcy5fY2FjaGVbbGFiZWxdO1xuXG4gICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCB8fCB2YWx1ZS5rZXkgIT09IGtleSkge1xuICAgICAgICB2YWx1ZSA9IHsga2V5OiBrZXksIGRpc3RyaWJ1dGlvbjogZ2V0dGVyLmFwcGx5KHVuZGVmaW5lZCwgW3RoaXNdLmNvbmNhdChhcmdzKSkgfTtcbiAgICAgICAgdGhpcy5fY2FjaGVbbGFiZWxdID0gdmFsdWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB2YWx1ZS5kaXN0cmlidXRpb247XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncm5nJyxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9ybmc7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFJhbmRvbTtcbn0oKTtcblxuLy8gZGVmYXVsdHMgdG8gTWF0aC5yYW5kb20gYXMgaXRzIFJOR1xuXG5cbmV4cG9ydHMuZGVmYXVsdCA9IG5ldyBSYW5kb20oKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJhbmRvbS5qcy5tYXAiLCIndXNlIHN0cmljdCdcblxuY29uc3QgeyBmdW5jIH0gPSByZXF1aXJlKCcuL3N5bWJvbHMnKVxuXG5jb25zdCBudW1iZXJQcmVkaWNhdGVzID0ge1xuICBwb3NpdGl2ZTogKHZhbHVlKSA9PiAodmFsdWUgPiAwKSxcbiAgbmVnYXRpdmU6ICh2YWx1ZSkgPT4gKHZhbHVlIDwgMCksXG4gIG5vbk5lZ2F0aXZlOiAodmFsdWUpID0+ICh2YWx1ZSA+PSAwKSxcbiAgaW50ZWdlcjogKHZhbHVlKSA9PiAodmFsdWUgPT09ICh2YWx1ZSB8IDApKSxcblxuICBbZnVuY106IHtcbiAgICBpczogKGZuKSA9PiBmbixcbiAgICBlcTogKHYpID0+ICh2YWx1ZSkgPT4gKHZhbHVlID09PSB2KSxcbiAgICBndDogKHYpID0+ICh2YWx1ZSkgPT4gKHZhbHVlID4gdiksXG4gICAgZ3RlOiAodikgPT4gKHZhbHVlKSA9PiAodmFsdWUgPj0gdiksXG4gICAgbHQ6ICh2KSA9PiAodmFsdWUpID0+ICh2YWx1ZSA8IHYpLFxuICAgIGx0ZTogKHYpID0+ICh2YWx1ZSkgPT4gKHZhbHVlIDw9IHYpXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHByZWRpY2F0ZXM6IG51bWJlclByZWRpY2F0ZXMsXG4gIHZhbGlkYXRvcjogKHZhbHVlKSA9PiB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcidcbiAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnXG5cbmNvbnN0IHsgZnVuYyB9ID0gcmVxdWlyZSgnLi9zeW1ib2xzJylcblxuY29uc3Qgc3RyaW5nUHJlZGljYXRlcyA9IHtcbiAgZW1wdHk6ICh2YWx1ZSkgPT4gKHZhbHVlID09PSAnJyksXG4gIG5vbkVtcHR5OiAodmFsdWUpID0+ICh2YWx1ZSAhPT0gJycpLFxuXG4gIFtmdW5jXToge1xuICAgIGlzOiAoZm4pID0+IGZuLFxuICAgIGVxOiAodikgPT4gKHZhbHVlKSA9PiAodmFsdWUgPT09IHYpLFxuICAgIGxlbmd0aDogKHYpID0+ICh2YWx1ZSkgPT4gKHZhbHVlLmxlbmd0aCA9PT0gdiksXG4gICAgbWluTGVuZ3RoOiAodikgPT4gKHZhbHVlKSA9PiAodmFsdWUubGVuZ3RoID49IHYpLFxuICAgIG1heExlbmd0aDogKHYpID0+ICh2YWx1ZSkgPT4gKHZhbHVlLmxlbmd0aCA8PSB2KSxcbiAgICBtYXRjaGVzOiAodikgPT4gKHZhbHVlKSA9PiB2LnRlc3QodmFsdWUpLFxuICAgIHN0YXJ0c1dpdGg6ICh2KSA9PiAodmFsdWUpID0+IHZhbHVlLnN0YXJ0c1dpdGgodiksXG4gICAgZW5kc1dpdGg6ICh2KSA9PiAodmFsdWUpID0+IHZhbHVlLmVuZHNXaXRoKHYpXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHByZWRpY2F0ZXM6IHN0cmluZ1ByZWRpY2F0ZXMsXG4gIHZhbGlkYXRvcjogKHZhbHVlKSA9PiB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZydcbiAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnXG5cbmNvbnN0IHsgZnVuYyB9ID0gcmVxdWlyZSgnLi9zeW1ib2xzJylcblxuY29uc3Qgb2JqZWN0UHJlZGljYXRlcyA9IHtcbiAgcGxhaW46ICh2YWx1ZSkgPT4ge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnKSByZXR1cm4gZmFsc2VcblxuICAgIGNvbnN0IHByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHZhbHVlKVxuICAgIHJldHVybiBwcm90byA9PT0gbnVsbCB8fCBwcm90byA9PT0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHt9KVxuICB9LFxuICBlbXB0eTogKHZhbHVlKSA9PiBPYmplY3Qua2V5cyh2YWx1ZSkubGVuZ3RoID09PSAwLFxuICBub25FbXB0eTogKHZhbHVlKSA9PiBPYmplY3Qua2V5cyh2YWx1ZSkubGVuZ3RoID4gMCxcblxuICBbZnVuY106IHtcbiAgICBpczogKGZuKSA9PiBmbixcbiAgICBpbnN0YW5jZU9mOiAodikgPT4gKHZhbHVlKSA9PiAodmFsdWUgaW5zdGFuY2VvZiB2KVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBwcmVkaWNhdGVzOiBvYmplY3RQcmVkaWNhdGVzLFxuICB2YWxpZGF0b3I6ICh2YWx1ZSkgPT4ge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnXG4gIH1cbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG52YXIgX3NlZWRyYW5kb20gPSByZXF1aXJlKCdzZWVkcmFuZG9tJyk7XG5cbnZhciBfc2VlZHJhbmRvbTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zZWVkcmFuZG9tKTtcblxudmFyIF9ybmcgPSByZXF1aXJlKCcuL3JuZycpO1xuXG52YXIgX3JuZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9ybmcpO1xuXG52YXIgX2Z1bmN0aW9uID0gcmVxdWlyZSgnLi9nZW5lcmF0b3JzL2Z1bmN0aW9uJyk7XG5cbnZhciBfZnVuY3Rpb24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZnVuY3Rpb24pO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBBcnJheShhcnIubGVuZ3RoKTsgaSA8IGFyci5sZW5ndGg7IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9IGVsc2UgeyByZXR1cm4gQXJyYXkuZnJvbShhcnIpOyB9IH1cblxuZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICB2YXIgX2FyZ3MkID0gYXJnc1swXSxcbiAgICAgIGFyZzAgPSBfYXJncyQgPT09IHVuZGVmaW5lZCA/ICdkZWZhdWx0JyA6IF9hcmdzJCxcbiAgICAgIHJlc3QgPSBhcmdzLnNsaWNlKDEpO1xuXG5cbiAgc3dpdGNoICh0eXBlb2YgYXJnMCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YoYXJnMCkpIHtcbiAgICBjYXNlICdvYmplY3QnOlxuICAgICAgaWYgKGFyZzAgaW5zdGFuY2VvZiBfcm5nMi5kZWZhdWx0KSB7XG4gICAgICAgIHJldHVybiBhcmcwO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdmdW5jdGlvbic6XG4gICAgICByZXR1cm4gbmV3IF9mdW5jdGlvbjIuZGVmYXVsdChhcmcwKTtcblxuICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgY2FzZSAnbnVtYmVyJzpcbiAgICAgIHJldHVybiBuZXcgX2Z1bmN0aW9uMi5kZWZhdWx0KF9zZWVkcmFuZG9tMi5kZWZhdWx0LmFwcGx5KHVuZGVmaW5lZCwgX3RvQ29uc3VtYWJsZUFycmF5KHJlc3QpKSk7XG4gIH1cblxuICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgUk5HIFwiJyArIGFyZzAgKyAnXCInKTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ybmctZmFjdG9yeS5qcy5tYXAiLCIvLyBBIGxpYnJhcnkgb2Ygc2VlZGFibGUgUk5HcyBpbXBsZW1lbnRlZCBpbiBKYXZhc2NyaXB0LlxuLy9cbi8vIFVzYWdlOlxuLy9cbi8vIHZhciBzZWVkcmFuZG9tID0gcmVxdWlyZSgnc2VlZHJhbmRvbScpO1xuLy8gdmFyIHJhbmRvbSA9IHNlZWRyYW5kb20oMSk7IC8vIG9yIGFueSBzZWVkLlxuLy8gdmFyIHggPSByYW5kb20oKTsgICAgICAgLy8gMCA8PSB4IDwgMS4gIEV2ZXJ5IGJpdCBpcyByYW5kb20uXG4vLyB2YXIgeCA9IHJhbmRvbS5xdWljaygpOyAvLyAwIDw9IHggPCAxLiAgMzIgYml0cyBvZiByYW5kb21uZXNzLlxuXG4vLyBhbGVhLCBhIDUzLWJpdCBtdWx0aXBseS13aXRoLWNhcnJ5IGdlbmVyYXRvciBieSBKb2hhbm5lcyBCYWFnw7hlLlxuLy8gUGVyaW9kOiB+Ml4xMTZcbi8vIFJlcG9ydGVkIHRvIHBhc3MgYWxsIEJpZ0NydXNoIHRlc3RzLlxudmFyIGFsZWEgPSByZXF1aXJlKCcuL2xpYi9hbGVhJyk7XG5cbi8vIHhvcjEyOCwgYSBwdXJlIHhvci1zaGlmdCBnZW5lcmF0b3IgYnkgR2VvcmdlIE1hcnNhZ2xpYS5cbi8vIFBlcmlvZDogMl4xMjgtMS5cbi8vIFJlcG9ydGVkIHRvIGZhaWw6IE1hdHJpeFJhbmsgYW5kIExpbmVhckNvbXAuXG52YXIgeG9yMTI4ID0gcmVxdWlyZSgnLi9saWIveG9yMTI4Jyk7XG5cbi8vIHhvcndvdywgR2VvcmdlIE1hcnNhZ2xpYSdzIDE2MC1iaXQgeG9yLXNoaWZ0IGNvbWJpbmVkIHBsdXMgd2V5bC5cbi8vIFBlcmlvZDogMl4xOTItMl4zMlxuLy8gUmVwb3J0ZWQgdG8gZmFpbDogQ29sbGlzaW9uT3ZlciwgU2ltcFBva2VyLCBhbmQgTGluZWFyQ29tcC5cbnZhciB4b3J3b3cgPSByZXF1aXJlKCcuL2xpYi94b3J3b3cnKTtcblxuLy8geG9yc2hpZnQ3LCBieSBGcmFuw6dvaXMgUGFubmV0b24gYW5kIFBpZXJyZSBMJ2VjdXllciwgdGFrZXNcbi8vIGEgZGlmZmVyZW50IGFwcHJvYWNoOiBpdCBhZGRzIHJvYnVzdG5lc3MgYnkgYWxsb3dpbmcgbW9yZSBzaGlmdHNcbi8vIHRoYW4gTWFyc2FnbGlhJ3Mgb3JpZ2luYWwgdGhyZWUuICBJdCBpcyBhIDctc2hpZnQgZ2VuZXJhdG9yXG4vLyB3aXRoIDI1NiBiaXRzLCB0aGF0IHBhc3NlcyBCaWdDcnVzaCB3aXRoIG5vIHN5c3RtYXRpYyBmYWlsdXJlcy5cbi8vIFBlcmlvZCAyXjI1Ni0xLlxuLy8gTm8gc3lzdGVtYXRpYyBCaWdDcnVzaCBmYWlsdXJlcyByZXBvcnRlZC5cbnZhciB4b3JzaGlmdDcgPSByZXF1aXJlKCcuL2xpYi94b3JzaGlmdDcnKTtcblxuLy8geG9yNDA5NiwgYnkgUmljaGFyZCBCcmVudCwgaXMgYSA0MDk2LWJpdCB4b3Itc2hpZnQgd2l0aCBhXG4vLyB2ZXJ5IGxvbmcgcGVyaW9kIHRoYXQgYWxzbyBhZGRzIGEgV2V5bCBnZW5lcmF0b3IuIEl0IGFsc28gcGFzc2VzXG4vLyBCaWdDcnVzaCB3aXRoIG5vIHN5c3RlbWF0aWMgZmFpbHVyZXMuICBJdHMgbG9uZyBwZXJpb2QgbWF5XG4vLyBiZSB1c2VmdWwgaWYgeW91IGhhdmUgbWFueSBnZW5lcmF0b3JzIGFuZCBuZWVkIHRvIGF2b2lkXG4vLyBjb2xsaXNpb25zLlxuLy8gUGVyaW9kOiAyXjQxMjgtMl4zMi5cbi8vIE5vIHN5c3RlbWF0aWMgQmlnQ3J1c2ggZmFpbHVyZXMgcmVwb3J0ZWQuXG52YXIgeG9yNDA5NiA9IHJlcXVpcmUoJy4vbGliL3hvcjQwOTYnKTtcblxuLy8gVHljaGUtaSwgYnkgU2FtdWVsIE5ldmVzIGFuZCBGaWxpcGUgQXJhdWpvLCBpcyBhIGJpdC1zaGlmdGluZyByYW5kb21cbi8vIG51bWJlciBnZW5lcmF0b3IgZGVyaXZlZCBmcm9tIENoYUNoYSwgYSBtb2Rlcm4gc3RyZWFtIGNpcGhlci5cbi8vIGh0dHBzOi8vZWRlbi5kZWkudWMucHQvfnNuZXZlcy9wdWJzLzIwMTEtc25mYTIucGRmXG4vLyBQZXJpb2Q6IH4yXjEyN1xuLy8gTm8gc3lzdGVtYXRpYyBCaWdDcnVzaCBmYWlsdXJlcyByZXBvcnRlZC5cbnZhciB0eWNoZWkgPSByZXF1aXJlKCcuL2xpYi90eWNoZWknKTtcblxuLy8gVGhlIG9yaWdpbmFsIEFSQzQtYmFzZWQgcHJuZyBpbmNsdWRlZCBpbiB0aGlzIGxpYnJhcnkuXG4vLyBQZXJpb2Q6IH4yXjE2MDBcbnZhciBzciA9IHJlcXVpcmUoJy4vc2VlZHJhbmRvbScpO1xuXG5zci5hbGVhID0gYWxlYTtcbnNyLnhvcjEyOCA9IHhvcjEyODtcbnNyLnhvcndvdyA9IHhvcndvdztcbnNyLnhvcnNoaWZ0NyA9IHhvcnNoaWZ0NztcbnNyLnhvcjQwOTYgPSB4b3I0MDk2O1xuc3IudHljaGVpID0gdHljaGVpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHNyO1xuIiwiLy8gQSBwb3J0IG9mIGFuIGFsZ29yaXRobSBieSBKb2hhbm5lcyBCYWFnw7hlIDxiYWFnb2VAYmFhZ29lLmNvbT4sIDIwMTBcbi8vIGh0dHA6Ly9iYWFnb2UuY29tL2VuL1JhbmRvbU11c2luZ3MvamF2YXNjcmlwdC9cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9ucXVpbmxhbi9iZXR0ZXItcmFuZG9tLW51bWJlcnMtZm9yLWphdmFzY3JpcHQtbWlycm9yXG4vLyBPcmlnaW5hbCB3b3JrIGlzIHVuZGVyIE1JVCBsaWNlbnNlIC1cblxuLy8gQ29weXJpZ2h0IChDKSAyMDEwIGJ5IEpvaGFubmVzIEJhYWfDuGUgPGJhYWdvZUBiYWFnb2Uub3JnPlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbi8vIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbi8vIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbi8vIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbi8vIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuLy8gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuLy8gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuLy8gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4vLyBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbi8vIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbi8vIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4vLyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4vLyBUSEUgU09GVFdBUkUuXG5cblxuXG4oZnVuY3Rpb24oZ2xvYmFsLCBtb2R1bGUsIGRlZmluZSkge1xuXG5mdW5jdGlvbiBBbGVhKHNlZWQpIHtcbiAgdmFyIG1lID0gdGhpcywgbWFzaCA9IE1hc2goKTtcblxuICBtZS5uZXh0ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHQgPSAyMDkxNjM5ICogbWUuczAgKyBtZS5jICogMi4zMjgzMDY0MzY1Mzg2OTYzZS0xMDsgLy8gMl4tMzJcbiAgICBtZS5zMCA9IG1lLnMxO1xuICAgIG1lLnMxID0gbWUuczI7XG4gICAgcmV0dXJuIG1lLnMyID0gdCAtIChtZS5jID0gdCB8IDApO1xuICB9O1xuXG4gIC8vIEFwcGx5IHRoZSBzZWVkaW5nIGFsZ29yaXRobSBmcm9tIEJhYWdvZS5cbiAgbWUuYyA9IDE7XG4gIG1lLnMwID0gbWFzaCgnICcpO1xuICBtZS5zMSA9IG1hc2goJyAnKTtcbiAgbWUuczIgPSBtYXNoKCcgJyk7XG4gIG1lLnMwIC09IG1hc2goc2VlZCk7XG4gIGlmIChtZS5zMCA8IDApIHsgbWUuczAgKz0gMTsgfVxuICBtZS5zMSAtPSBtYXNoKHNlZWQpO1xuICBpZiAobWUuczEgPCAwKSB7IG1lLnMxICs9IDE7IH1cbiAgbWUuczIgLT0gbWFzaChzZWVkKTtcbiAgaWYgKG1lLnMyIDwgMCkgeyBtZS5zMiArPSAxOyB9XG4gIG1hc2ggPSBudWxsO1xufVxuXG5mdW5jdGlvbiBjb3B5KGYsIHQpIHtcbiAgdC5jID0gZi5jO1xuICB0LnMwID0gZi5zMDtcbiAgdC5zMSA9IGYuczE7XG4gIHQuczIgPSBmLnMyO1xuICByZXR1cm4gdDtcbn1cblxuZnVuY3Rpb24gaW1wbChzZWVkLCBvcHRzKSB7XG4gIHZhciB4ZyA9IG5ldyBBbGVhKHNlZWQpLFxuICAgICAgc3RhdGUgPSBvcHRzICYmIG9wdHMuc3RhdGUsXG4gICAgICBwcm5nID0geGcubmV4dDtcbiAgcHJuZy5pbnQzMiA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gKHhnLm5leHQoKSAqIDB4MTAwMDAwMDAwKSB8IDA7IH1cbiAgcHJuZy5kb3VibGUgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gcHJuZygpICsgKHBybmcoKSAqIDB4MjAwMDAwIHwgMCkgKiAxLjExMDIyMzAyNDYyNTE1NjVlLTE2OyAvLyAyXi01M1xuICB9O1xuICBwcm5nLnF1aWNrID0gcHJuZztcbiAgaWYgKHN0YXRlKSB7XG4gICAgaWYgKHR5cGVvZihzdGF0ZSkgPT0gJ29iamVjdCcpIGNvcHkoc3RhdGUsIHhnKTtcbiAgICBwcm5nLnN0YXRlID0gZnVuY3Rpb24oKSB7IHJldHVybiBjb3B5KHhnLCB7fSk7IH1cbiAgfVxuICByZXR1cm4gcHJuZztcbn1cblxuZnVuY3Rpb24gTWFzaCgpIHtcbiAgdmFyIG4gPSAweGVmYzgyNDlkO1xuXG4gIHZhciBtYXNoID0gZnVuY3Rpb24oZGF0YSkge1xuICAgIGRhdGEgPSBTdHJpbmcoZGF0YSk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICBuICs9IGRhdGEuY2hhckNvZGVBdChpKTtcbiAgICAgIHZhciBoID0gMC4wMjUxOTYwMzI4MjQxNjkzOCAqIG47XG4gICAgICBuID0gaCA+Pj4gMDtcbiAgICAgIGggLT0gbjtcbiAgICAgIGggKj0gbjtcbiAgICAgIG4gPSBoID4+PiAwO1xuICAgICAgaCAtPSBuO1xuICAgICAgbiArPSBoICogMHgxMDAwMDAwMDA7IC8vIDJeMzJcbiAgICB9XG4gICAgcmV0dXJuIChuID4+PiAwKSAqIDIuMzI4MzA2NDM2NTM4Njk2M2UtMTA7IC8vIDJeLTMyXG4gIH07XG5cbiAgcmV0dXJuIG1hc2g7XG59XG5cblxuaWYgKG1vZHVsZSAmJiBtb2R1bGUuZXhwb3J0cykge1xuICBtb2R1bGUuZXhwb3J0cyA9IGltcGw7XG59IGVsc2UgaWYgKGRlZmluZSAmJiBkZWZpbmUuYW1kKSB7XG4gIGRlZmluZShmdW5jdGlvbigpIHsgcmV0dXJuIGltcGw7IH0pO1xufSBlbHNlIHtcbiAgdGhpcy5hbGVhID0gaW1wbDtcbn1cblxufSkoXG4gIHRoaXMsXG4gICh0eXBlb2YgbW9kdWxlKSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUsICAgIC8vIHByZXNlbnQgaW4gbm9kZS5qc1xuICAodHlwZW9mIGRlZmluZSkgPT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUgICAvLyBwcmVzZW50IHdpdGggYW4gQU1EIGxvYWRlclxuKTtcblxuXG4iLCIvLyBBIEphdmFzY3JpcHQgaW1wbGVtZW50YWlvbiBvZiB0aGUgXCJ4b3IxMjhcIiBwcm5nIGFsZ29yaXRobSBieVxuLy8gR2VvcmdlIE1hcnNhZ2xpYS4gIFNlZSBodHRwOi8vd3d3LmpzdGF0c29mdC5vcmcvdjA4L2kxNC9wYXBlclxuXG4oZnVuY3Rpb24oZ2xvYmFsLCBtb2R1bGUsIGRlZmluZSkge1xuXG5mdW5jdGlvbiBYb3JHZW4oc2VlZCkge1xuICB2YXIgbWUgPSB0aGlzLCBzdHJzZWVkID0gJyc7XG5cbiAgbWUueCA9IDA7XG4gIG1lLnkgPSAwO1xuICBtZS56ID0gMDtcbiAgbWUudyA9IDA7XG5cbiAgLy8gU2V0IHVwIGdlbmVyYXRvciBmdW5jdGlvbi5cbiAgbWUubmV4dCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciB0ID0gbWUueCBeIChtZS54IDw8IDExKTtcbiAgICBtZS54ID0gbWUueTtcbiAgICBtZS55ID0gbWUuejtcbiAgICBtZS56ID0gbWUudztcbiAgICByZXR1cm4gbWUudyBePSAobWUudyA+Pj4gMTkpIF4gdCBeICh0ID4+PiA4KTtcbiAgfTtcblxuICBpZiAoc2VlZCA9PT0gKHNlZWQgfCAwKSkge1xuICAgIC8vIEludGVnZXIgc2VlZC5cbiAgICBtZS54ID0gc2VlZDtcbiAgfSBlbHNlIHtcbiAgICAvLyBTdHJpbmcgc2VlZC5cbiAgICBzdHJzZWVkICs9IHNlZWQ7XG4gIH1cblxuICAvLyBNaXggaW4gc3RyaW5nIHNlZWQsIHRoZW4gZGlzY2FyZCBhbiBpbml0aWFsIGJhdGNoIG9mIDY0IHZhbHVlcy5cbiAgZm9yICh2YXIgayA9IDA7IGsgPCBzdHJzZWVkLmxlbmd0aCArIDY0OyBrKyspIHtcbiAgICBtZS54IF49IHN0cnNlZWQuY2hhckNvZGVBdChrKSB8IDA7XG4gICAgbWUubmV4dCgpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNvcHkoZiwgdCkge1xuICB0LnggPSBmLng7XG4gIHQueSA9IGYueTtcbiAgdC56ID0gZi56O1xuICB0LncgPSBmLnc7XG4gIHJldHVybiB0O1xufVxuXG5mdW5jdGlvbiBpbXBsKHNlZWQsIG9wdHMpIHtcbiAgdmFyIHhnID0gbmV3IFhvckdlbihzZWVkKSxcbiAgICAgIHN0YXRlID0gb3B0cyAmJiBvcHRzLnN0YXRlLFxuICAgICAgcHJuZyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gKHhnLm5leHQoKSA+Pj4gMCkgLyAweDEwMDAwMDAwMDsgfTtcbiAgcHJuZy5kb3VibGUgPSBmdW5jdGlvbigpIHtcbiAgICBkbyB7XG4gICAgICB2YXIgdG9wID0geGcubmV4dCgpID4+PiAxMSxcbiAgICAgICAgICBib3QgPSAoeGcubmV4dCgpID4+PiAwKSAvIDB4MTAwMDAwMDAwLFxuICAgICAgICAgIHJlc3VsdCA9ICh0b3AgKyBib3QpIC8gKDEgPDwgMjEpO1xuICAgIH0gd2hpbGUgKHJlc3VsdCA9PT0gMCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbiAgcHJuZy5pbnQzMiA9IHhnLm5leHQ7XG4gIHBybmcucXVpY2sgPSBwcm5nO1xuICBpZiAoc3RhdGUpIHtcbiAgICBpZiAodHlwZW9mKHN0YXRlKSA9PSAnb2JqZWN0JykgY29weShzdGF0ZSwgeGcpO1xuICAgIHBybmcuc3RhdGUgPSBmdW5jdGlvbigpIHsgcmV0dXJuIGNvcHkoeGcsIHt9KTsgfVxuICB9XG4gIHJldHVybiBwcm5nO1xufVxuXG5pZiAobW9kdWxlICYmIG1vZHVsZS5leHBvcnRzKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gaW1wbDtcbn0gZWxzZSBpZiAoZGVmaW5lICYmIGRlZmluZS5hbWQpIHtcbiAgZGVmaW5lKGZ1bmN0aW9uKCkgeyByZXR1cm4gaW1wbDsgfSk7XG59IGVsc2Uge1xuICB0aGlzLnhvcjEyOCA9IGltcGw7XG59XG5cbn0pKFxuICB0aGlzLFxuICAodHlwZW9mIG1vZHVsZSkgPT0gJ29iamVjdCcgJiYgbW9kdWxlLCAgICAvLyBwcmVzZW50IGluIG5vZGUuanNcbiAgKHR5cGVvZiBkZWZpbmUpID09ICdmdW5jdGlvbicgJiYgZGVmaW5lICAgLy8gcHJlc2VudCB3aXRoIGFuIEFNRCBsb2FkZXJcbik7XG5cblxuIiwiLy8gQSBKYXZhc2NyaXB0IGltcGxlbWVudGFpb24gb2YgdGhlIFwieG9yd293XCIgcHJuZyBhbGdvcml0aG0gYnlcbi8vIEdlb3JnZSBNYXJzYWdsaWEuICBTZWUgaHR0cDovL3d3dy5qc3RhdHNvZnQub3JnL3YwOC9pMTQvcGFwZXJcblxuKGZ1bmN0aW9uKGdsb2JhbCwgbW9kdWxlLCBkZWZpbmUpIHtcblxuZnVuY3Rpb24gWG9yR2VuKHNlZWQpIHtcbiAgdmFyIG1lID0gdGhpcywgc3Ryc2VlZCA9ICcnO1xuXG4gIC8vIFNldCB1cCBnZW5lcmF0b3IgZnVuY3Rpb24uXG4gIG1lLm5leHQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgdCA9IChtZS54IF4gKG1lLnggPj4+IDIpKTtcbiAgICBtZS54ID0gbWUueTsgbWUueSA9IG1lLno7IG1lLnogPSBtZS53OyBtZS53ID0gbWUudjtcbiAgICByZXR1cm4gKG1lLmQgPSAobWUuZCArIDM2MjQzNyB8IDApKSArXG4gICAgICAgKG1lLnYgPSAobWUudiBeIChtZS52IDw8IDQpKSBeICh0IF4gKHQgPDwgMSkpKSB8IDA7XG4gIH07XG5cbiAgbWUueCA9IDA7XG4gIG1lLnkgPSAwO1xuICBtZS56ID0gMDtcbiAgbWUudyA9IDA7XG4gIG1lLnYgPSAwO1xuXG4gIGlmIChzZWVkID09PSAoc2VlZCB8IDApKSB7XG4gICAgLy8gSW50ZWdlciBzZWVkLlxuICAgIG1lLnggPSBzZWVkO1xuICB9IGVsc2Uge1xuICAgIC8vIFN0cmluZyBzZWVkLlxuICAgIHN0cnNlZWQgKz0gc2VlZDtcbiAgfVxuXG4gIC8vIE1peCBpbiBzdHJpbmcgc2VlZCwgdGhlbiBkaXNjYXJkIGFuIGluaXRpYWwgYmF0Y2ggb2YgNjQgdmFsdWVzLlxuICBmb3IgKHZhciBrID0gMDsgayA8IHN0cnNlZWQubGVuZ3RoICsgNjQ7IGsrKykge1xuICAgIG1lLnggXj0gc3Ryc2VlZC5jaGFyQ29kZUF0KGspIHwgMDtcbiAgICBpZiAoayA9PSBzdHJzZWVkLmxlbmd0aCkge1xuICAgICAgbWUuZCA9IG1lLnggPDwgMTAgXiBtZS54ID4+PiA0O1xuICAgIH1cbiAgICBtZS5uZXh0KCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY29weShmLCB0KSB7XG4gIHQueCA9IGYueDtcbiAgdC55ID0gZi55O1xuICB0LnogPSBmLno7XG4gIHQudyA9IGYudztcbiAgdC52ID0gZi52O1xuICB0LmQgPSBmLmQ7XG4gIHJldHVybiB0O1xufVxuXG5mdW5jdGlvbiBpbXBsKHNlZWQsIG9wdHMpIHtcbiAgdmFyIHhnID0gbmV3IFhvckdlbihzZWVkKSxcbiAgICAgIHN0YXRlID0gb3B0cyAmJiBvcHRzLnN0YXRlLFxuICAgICAgcHJuZyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gKHhnLm5leHQoKSA+Pj4gMCkgLyAweDEwMDAwMDAwMDsgfTtcbiAgcHJuZy5kb3VibGUgPSBmdW5jdGlvbigpIHtcbiAgICBkbyB7XG4gICAgICB2YXIgdG9wID0geGcubmV4dCgpID4+PiAxMSxcbiAgICAgICAgICBib3QgPSAoeGcubmV4dCgpID4+PiAwKSAvIDB4MTAwMDAwMDAwLFxuICAgICAgICAgIHJlc3VsdCA9ICh0b3AgKyBib3QpIC8gKDEgPDwgMjEpO1xuICAgIH0gd2hpbGUgKHJlc3VsdCA9PT0gMCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbiAgcHJuZy5pbnQzMiA9IHhnLm5leHQ7XG4gIHBybmcucXVpY2sgPSBwcm5nO1xuICBpZiAoc3RhdGUpIHtcbiAgICBpZiAodHlwZW9mKHN0YXRlKSA9PSAnb2JqZWN0JykgY29weShzdGF0ZSwgeGcpO1xuICAgIHBybmcuc3RhdGUgPSBmdW5jdGlvbigpIHsgcmV0dXJuIGNvcHkoeGcsIHt9KTsgfVxuICB9XG4gIHJldHVybiBwcm5nO1xufVxuXG5pZiAobW9kdWxlICYmIG1vZHVsZS5leHBvcnRzKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gaW1wbDtcbn0gZWxzZSBpZiAoZGVmaW5lICYmIGRlZmluZS5hbWQpIHtcbiAgZGVmaW5lKGZ1bmN0aW9uKCkgeyByZXR1cm4gaW1wbDsgfSk7XG59IGVsc2Uge1xuICB0aGlzLnhvcndvdyA9IGltcGw7XG59XG5cbn0pKFxuICB0aGlzLFxuICAodHlwZW9mIG1vZHVsZSkgPT0gJ29iamVjdCcgJiYgbW9kdWxlLCAgICAvLyBwcmVzZW50IGluIG5vZGUuanNcbiAgKHR5cGVvZiBkZWZpbmUpID09ICdmdW5jdGlvbicgJiYgZGVmaW5lICAgLy8gcHJlc2VudCB3aXRoIGFuIEFNRCBsb2FkZXJcbik7XG5cblxuIiwiLy8gQSBKYXZhc2NyaXB0IGltcGxlbWVudGFpb24gb2YgdGhlIFwieG9yc2hpZnQ3XCIgYWxnb3JpdGhtIGJ5XG4vLyBGcmFuw6dvaXMgUGFubmV0b24gYW5kIFBpZXJyZSBMJ2VjdXllcjpcbi8vIFwiT24gdGhlIFhvcmdzaGlmdCBSYW5kb20gTnVtYmVyIEdlbmVyYXRvcnNcIlxuLy8gaHR0cDovL3NhbHVjLmVuZ3IudWNvbm4uZWR1L3JlZnMvY3J5cHRvL3JuZy9wYW5uZXRvbjA1b250aGV4b3JzaGlmdC5wZGZcblxuKGZ1bmN0aW9uKGdsb2JhbCwgbW9kdWxlLCBkZWZpbmUpIHtcblxuZnVuY3Rpb24gWG9yR2VuKHNlZWQpIHtcbiAgdmFyIG1lID0gdGhpcztcblxuICAvLyBTZXQgdXAgZ2VuZXJhdG9yIGZ1bmN0aW9uLlxuICBtZS5uZXh0ID0gZnVuY3Rpb24oKSB7XG4gICAgLy8gVXBkYXRlIHhvciBnZW5lcmF0b3IuXG4gICAgdmFyIFggPSBtZS54LCBpID0gbWUuaSwgdCwgdiwgdztcbiAgICB0ID0gWFtpXTsgdCBePSAodCA+Pj4gNyk7IHYgPSB0IF4gKHQgPDwgMjQpO1xuICAgIHQgPSBYWyhpICsgMSkgJiA3XTsgdiBePSB0IF4gKHQgPj4+IDEwKTtcbiAgICB0ID0gWFsoaSArIDMpICYgN107IHYgXj0gdCBeICh0ID4+PiAzKTtcbiAgICB0ID0gWFsoaSArIDQpICYgN107IHYgXj0gdCBeICh0IDw8IDcpO1xuICAgIHQgPSBYWyhpICsgNykgJiA3XTsgdCA9IHQgXiAodCA8PCAxMyk7IHYgXj0gdCBeICh0IDw8IDkpO1xuICAgIFhbaV0gPSB2O1xuICAgIG1lLmkgPSAoaSArIDEpICYgNztcbiAgICByZXR1cm4gdjtcbiAgfTtcblxuICBmdW5jdGlvbiBpbml0KG1lLCBzZWVkKSB7XG4gICAgdmFyIGosIHcsIFggPSBbXTtcblxuICAgIGlmIChzZWVkID09PSAoc2VlZCB8IDApKSB7XG4gICAgICAvLyBTZWVkIHN0YXRlIGFycmF5IHVzaW5nIGEgMzItYml0IGludGVnZXIuXG4gICAgICB3ID0gWFswXSA9IHNlZWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFNlZWQgc3RhdGUgdXNpbmcgYSBzdHJpbmcuXG4gICAgICBzZWVkID0gJycgKyBzZWVkO1xuICAgICAgZm9yIChqID0gMDsgaiA8IHNlZWQubGVuZ3RoOyArK2opIHtcbiAgICAgICAgWFtqICYgN10gPSAoWFtqICYgN10gPDwgMTUpIF5cbiAgICAgICAgICAgIChzZWVkLmNoYXJDb2RlQXQoaikgKyBYWyhqICsgMSkgJiA3XSA8PCAxMyk7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIEVuZm9yY2UgYW4gYXJyYXkgbGVuZ3RoIG9mIDgsIG5vdCBhbGwgemVyb2VzLlxuICAgIHdoaWxlIChYLmxlbmd0aCA8IDgpIFgucHVzaCgwKTtcbiAgICBmb3IgKGogPSAwOyBqIDwgOCAmJiBYW2pdID09PSAwOyArK2opO1xuICAgIGlmIChqID09IDgpIHcgPSBYWzddID0gLTE7IGVsc2UgdyA9IFhbal07XG5cbiAgICBtZS54ID0gWDtcbiAgICBtZS5pID0gMDtcblxuICAgIC8vIERpc2NhcmQgYW4gaW5pdGlhbCAyNTYgdmFsdWVzLlxuICAgIGZvciAoaiA9IDI1NjsgaiA+IDA7IC0taikge1xuICAgICAgbWUubmV4dCgpO1xuICAgIH1cbiAgfVxuXG4gIGluaXQobWUsIHNlZWQpO1xufVxuXG5mdW5jdGlvbiBjb3B5KGYsIHQpIHtcbiAgdC54ID0gZi54LnNsaWNlKCk7XG4gIHQuaSA9IGYuaTtcbiAgcmV0dXJuIHQ7XG59XG5cbmZ1bmN0aW9uIGltcGwoc2VlZCwgb3B0cykge1xuICBpZiAoc2VlZCA9PSBudWxsKSBzZWVkID0gKyhuZXcgRGF0ZSk7XG4gIHZhciB4ZyA9IG5ldyBYb3JHZW4oc2VlZCksXG4gICAgICBzdGF0ZSA9IG9wdHMgJiYgb3B0cy5zdGF0ZSxcbiAgICAgIHBybmcgPSBmdW5jdGlvbigpIHsgcmV0dXJuICh4Zy5uZXh0KCkgPj4+IDApIC8gMHgxMDAwMDAwMDA7IH07XG4gIHBybmcuZG91YmxlID0gZnVuY3Rpb24oKSB7XG4gICAgZG8ge1xuICAgICAgdmFyIHRvcCA9IHhnLm5leHQoKSA+Pj4gMTEsXG4gICAgICAgICAgYm90ID0gKHhnLm5leHQoKSA+Pj4gMCkgLyAweDEwMDAwMDAwMCxcbiAgICAgICAgICByZXN1bHQgPSAodG9wICsgYm90KSAvICgxIDw8IDIxKTtcbiAgICB9IHdoaWxlIChyZXN1bHQgPT09IDApO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG4gIHBybmcuaW50MzIgPSB4Zy5uZXh0O1xuICBwcm5nLnF1aWNrID0gcHJuZztcbiAgaWYgKHN0YXRlKSB7XG4gICAgaWYgKHN0YXRlLngpIGNvcHkoc3RhdGUsIHhnKTtcbiAgICBwcm5nLnN0YXRlID0gZnVuY3Rpb24oKSB7IHJldHVybiBjb3B5KHhnLCB7fSk7IH1cbiAgfVxuICByZXR1cm4gcHJuZztcbn1cblxuaWYgKG1vZHVsZSAmJiBtb2R1bGUuZXhwb3J0cykge1xuICBtb2R1bGUuZXhwb3J0cyA9IGltcGw7XG59IGVsc2UgaWYgKGRlZmluZSAmJiBkZWZpbmUuYW1kKSB7XG4gIGRlZmluZShmdW5jdGlvbigpIHsgcmV0dXJuIGltcGw7IH0pO1xufSBlbHNlIHtcbiAgdGhpcy54b3JzaGlmdDcgPSBpbXBsO1xufVxuXG59KShcbiAgdGhpcyxcbiAgKHR5cGVvZiBtb2R1bGUpID09ICdvYmplY3QnICYmIG1vZHVsZSwgICAgLy8gcHJlc2VudCBpbiBub2RlLmpzXG4gICh0eXBlb2YgZGVmaW5lKSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZSAgIC8vIHByZXNlbnQgd2l0aCBhbiBBTUQgbG9hZGVyXG4pO1xuXG4iLCIvLyBBIEphdmFzY3JpcHQgaW1wbGVtZW50YWlvbiBvZiBSaWNoYXJkIEJyZW50J3MgWG9yZ2VucyB4b3I0MDk2IGFsZ29yaXRobS5cbi8vXG4vLyBUaGlzIGZhc3Qgbm9uLWNyeXB0b2dyYXBoaWMgcmFuZG9tIG51bWJlciBnZW5lcmF0b3IgaXMgZGVzaWduZWQgZm9yXG4vLyB1c2UgaW4gTW9udGUtQ2FybG8gYWxnb3JpdGhtcy4gSXQgY29tYmluZXMgYSBsb25nLXBlcmlvZCB4b3JzaGlmdFxuLy8gZ2VuZXJhdG9yIHdpdGggYSBXZXlsIGdlbmVyYXRvciwgYW5kIGl0IHBhc3NlcyBhbGwgY29tbW9uIGJhdHRlcmllc1xuLy8gb2Ygc3Rhc3RpY2lhbCB0ZXN0cyBmb3IgcmFuZG9tbmVzcyB3aGlsZSBjb25zdW1pbmcgb25seSBhIGZldyBuYW5vc2Vjb25kc1xuLy8gZm9yIGVhY2ggcHJuZyBnZW5lcmF0ZWQuICBGb3IgYmFja2dyb3VuZCBvbiB0aGUgZ2VuZXJhdG9yLCBzZWUgQnJlbnQnc1xuLy8gcGFwZXI6IFwiU29tZSBsb25nLXBlcmlvZCByYW5kb20gbnVtYmVyIGdlbmVyYXRvcnMgdXNpbmcgc2hpZnRzIGFuZCB4b3JzLlwiXG4vLyBodHRwOi8vYXJ4aXYub3JnL3BkZi8xMDA0LjMxMTV2MS5wZGZcbi8vXG4vLyBVc2FnZTpcbi8vXG4vLyB2YXIgeG9yNDA5NiA9IHJlcXVpcmUoJ3hvcjQwOTYnKTtcbi8vIHJhbmRvbSA9IHhvcjQwOTYoMSk7ICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2VlZCB3aXRoIGludDMyIG9yIHN0cmluZy5cbi8vIGFzc2VydC5lcXVhbChyYW5kb20oKSwgMC4xNTIwNDM2NDUwNTM4NTQ3KTsgLy8gKDAsIDEpIHJhbmdlLCA1MyBiaXRzLlxuLy8gYXNzZXJ0LmVxdWFsKHJhbmRvbS5pbnQzMigpLCAxODA2NTM0ODk3KTsgICAvLyBzaWduZWQgaW50MzIsIDMyIGJpdHMuXG4vL1xuLy8gRm9yIG5vbnplcm8gbnVtZXJpYyBrZXlzLCB0aGlzIGltcGVsZW1lbnRhdGlvbiBwcm92aWRlcyBhIHNlcXVlbmNlXG4vLyBpZGVudGljYWwgdG8gdGhhdCBieSBCcmVudCdzIHhvcmdlbnMgMyBpbXBsZW1lbnRhaW9uIGluIEMuICBUaGlzXG4vLyBpbXBsZW1lbnRhdGlvbiBhbHNvIHByb3ZpZGVzIGZvciBpbml0YWxpemluZyB0aGUgZ2VuZXJhdG9yIHdpdGhcbi8vIHN0cmluZyBzZWVkcywgb3IgZm9yIHNhdmluZyBhbmQgcmVzdG9yaW5nIHRoZSBzdGF0ZSBvZiB0aGUgZ2VuZXJhdG9yLlxuLy9cbi8vIE9uIENocm9tZSwgdGhpcyBwcm5nIGJlbmNobWFya3MgYWJvdXQgMi4xIHRpbWVzIHNsb3dlciB0aGFuXG4vLyBKYXZhc2NyaXB0J3MgYnVpbHQtaW4gTWF0aC5yYW5kb20oKS5cblxuKGZ1bmN0aW9uKGdsb2JhbCwgbW9kdWxlLCBkZWZpbmUpIHtcblxuZnVuY3Rpb24gWG9yR2VuKHNlZWQpIHtcbiAgdmFyIG1lID0gdGhpcztcblxuICAvLyBTZXQgdXAgZ2VuZXJhdG9yIGZ1bmN0aW9uLlxuICBtZS5uZXh0ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHcgPSBtZS53LFxuICAgICAgICBYID0gbWUuWCwgaSA9IG1lLmksIHQsIHY7XG4gICAgLy8gVXBkYXRlIFdleWwgZ2VuZXJhdG9yLlxuICAgIG1lLncgPSB3ID0gKHcgKyAweDYxYzg4NjQ3KSB8IDA7XG4gICAgLy8gVXBkYXRlIHhvciBnZW5lcmF0b3IuXG4gICAgdiA9IFhbKGkgKyAzNCkgJiAxMjddO1xuICAgIHQgPSBYW2kgPSAoKGkgKyAxKSAmIDEyNyldO1xuICAgIHYgXj0gdiA8PCAxMztcbiAgICB0IF49IHQgPDwgMTc7XG4gICAgdiBePSB2ID4+PiAxNTtcbiAgICB0IF49IHQgPj4+IDEyO1xuICAgIC8vIFVwZGF0ZSBYb3IgZ2VuZXJhdG9yIGFycmF5IHN0YXRlLlxuICAgIHYgPSBYW2ldID0gdiBeIHQ7XG4gICAgbWUuaSA9IGk7XG4gICAgLy8gUmVzdWx0IGlzIHRoZSBjb21iaW5hdGlvbi5cbiAgICByZXR1cm4gKHYgKyAodyBeICh3ID4+PiAxNikpKSB8IDA7XG4gIH07XG5cbiAgZnVuY3Rpb24gaW5pdChtZSwgc2VlZCkge1xuICAgIHZhciB0LCB2LCBpLCBqLCB3LCBYID0gW10sIGxpbWl0ID0gMTI4O1xuICAgIGlmIChzZWVkID09PSAoc2VlZCB8IDApKSB7XG4gICAgICAvLyBOdW1lcmljIHNlZWRzIGluaXRpYWxpemUgdiwgd2hpY2ggaXMgdXNlZCB0byBnZW5lcmF0ZXMgWC5cbiAgICAgIHYgPSBzZWVkO1xuICAgICAgc2VlZCA9IG51bGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFN0cmluZyBzZWVkcyBhcmUgbWl4ZWQgaW50byB2IGFuZCBYIG9uZSBjaGFyYWN0ZXIgYXQgYSB0aW1lLlxuICAgICAgc2VlZCA9IHNlZWQgKyAnXFwwJztcbiAgICAgIHYgPSAwO1xuICAgICAgbGltaXQgPSBNYXRoLm1heChsaW1pdCwgc2VlZC5sZW5ndGgpO1xuICAgIH1cbiAgICAvLyBJbml0aWFsaXplIGNpcmN1bGFyIGFycmF5IGFuZCB3ZXlsIHZhbHVlLlxuICAgIGZvciAoaSA9IDAsIGogPSAtMzI7IGogPCBsaW1pdDsgKytqKSB7XG4gICAgICAvLyBQdXQgdGhlIHVuaWNvZGUgY2hhcmFjdGVycyBpbnRvIHRoZSBhcnJheSwgYW5kIHNodWZmbGUgdGhlbS5cbiAgICAgIGlmIChzZWVkKSB2IF49IHNlZWQuY2hhckNvZGVBdCgoaiArIDMyKSAlIHNlZWQubGVuZ3RoKTtcbiAgICAgIC8vIEFmdGVyIDMyIHNodWZmbGVzLCB0YWtlIHYgYXMgdGhlIHN0YXJ0aW5nIHcgdmFsdWUuXG4gICAgICBpZiAoaiA9PT0gMCkgdyA9IHY7XG4gICAgICB2IF49IHYgPDwgMTA7XG4gICAgICB2IF49IHYgPj4+IDE1O1xuICAgICAgdiBePSB2IDw8IDQ7XG4gICAgICB2IF49IHYgPj4+IDEzO1xuICAgICAgaWYgKGogPj0gMCkge1xuICAgICAgICB3ID0gKHcgKyAweDYxYzg4NjQ3KSB8IDA7ICAgICAvLyBXZXlsLlxuICAgICAgICB0ID0gKFhbaiAmIDEyN10gXj0gKHYgKyB3KSk7ICAvLyBDb21iaW5lIHhvciBhbmQgd2V5bCB0byBpbml0IGFycmF5LlxuICAgICAgICBpID0gKDAgPT0gdCkgPyBpICsgMSA6IDA7ICAgICAvLyBDb3VudCB6ZXJvZXMuXG4gICAgICB9XG4gICAgfVxuICAgIC8vIFdlIGhhdmUgZGV0ZWN0ZWQgYWxsIHplcm9lczsgbWFrZSB0aGUga2V5IG5vbnplcm8uXG4gICAgaWYgKGkgPj0gMTI4KSB7XG4gICAgICBYWyhzZWVkICYmIHNlZWQubGVuZ3RoIHx8IDApICYgMTI3XSA9IC0xO1xuICAgIH1cbiAgICAvLyBSdW4gdGhlIGdlbmVyYXRvciA1MTIgdGltZXMgdG8gZnVydGhlciBtaXggdGhlIHN0YXRlIGJlZm9yZSB1c2luZyBpdC5cbiAgICAvLyBGYWN0b3JpbmcgdGhpcyBhcyBhIGZ1bmN0aW9uIHNsb3dzIHRoZSBtYWluIGdlbmVyYXRvciwgc28gaXQgaXMganVzdFxuICAgIC8vIHVucm9sbGVkIGhlcmUuICBUaGUgd2V5bCBnZW5lcmF0b3IgaXMgbm90IGFkdmFuY2VkIHdoaWxlIHdhcm1pbmcgdXAuXG4gICAgaSA9IDEyNztcbiAgICBmb3IgKGogPSA0ICogMTI4OyBqID4gMDsgLS1qKSB7XG4gICAgICB2ID0gWFsoaSArIDM0KSAmIDEyN107XG4gICAgICB0ID0gWFtpID0gKChpICsgMSkgJiAxMjcpXTtcbiAgICAgIHYgXj0gdiA8PCAxMztcbiAgICAgIHQgXj0gdCA8PCAxNztcbiAgICAgIHYgXj0gdiA+Pj4gMTU7XG4gICAgICB0IF49IHQgPj4+IDEyO1xuICAgICAgWFtpXSA9IHYgXiB0O1xuICAgIH1cbiAgICAvLyBTdG9yaW5nIHN0YXRlIGFzIG9iamVjdCBtZW1iZXJzIGlzIGZhc3RlciB0aGFuIHVzaW5nIGNsb3N1cmUgdmFyaWFibGVzLlxuICAgIG1lLncgPSB3O1xuICAgIG1lLlggPSBYO1xuICAgIG1lLmkgPSBpO1xuICB9XG5cbiAgaW5pdChtZSwgc2VlZCk7XG59XG5cbmZ1bmN0aW9uIGNvcHkoZiwgdCkge1xuICB0LmkgPSBmLmk7XG4gIHQudyA9IGYudztcbiAgdC5YID0gZi5YLnNsaWNlKCk7XG4gIHJldHVybiB0O1xufTtcblxuZnVuY3Rpb24gaW1wbChzZWVkLCBvcHRzKSB7XG4gIGlmIChzZWVkID09IG51bGwpIHNlZWQgPSArKG5ldyBEYXRlKTtcbiAgdmFyIHhnID0gbmV3IFhvckdlbihzZWVkKSxcbiAgICAgIHN0YXRlID0gb3B0cyAmJiBvcHRzLnN0YXRlLFxuICAgICAgcHJuZyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gKHhnLm5leHQoKSA+Pj4gMCkgLyAweDEwMDAwMDAwMDsgfTtcbiAgcHJuZy5kb3VibGUgPSBmdW5jdGlvbigpIHtcbiAgICBkbyB7XG4gICAgICB2YXIgdG9wID0geGcubmV4dCgpID4+PiAxMSxcbiAgICAgICAgICBib3QgPSAoeGcubmV4dCgpID4+PiAwKSAvIDB4MTAwMDAwMDAwLFxuICAgICAgICAgIHJlc3VsdCA9ICh0b3AgKyBib3QpIC8gKDEgPDwgMjEpO1xuICAgIH0gd2hpbGUgKHJlc3VsdCA9PT0gMCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbiAgcHJuZy5pbnQzMiA9IHhnLm5leHQ7XG4gIHBybmcucXVpY2sgPSBwcm5nO1xuICBpZiAoc3RhdGUpIHtcbiAgICBpZiAoc3RhdGUuWCkgY29weShzdGF0ZSwgeGcpO1xuICAgIHBybmcuc3RhdGUgPSBmdW5jdGlvbigpIHsgcmV0dXJuIGNvcHkoeGcsIHt9KTsgfVxuICB9XG4gIHJldHVybiBwcm5nO1xufVxuXG5pZiAobW9kdWxlICYmIG1vZHVsZS5leHBvcnRzKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gaW1wbDtcbn0gZWxzZSBpZiAoZGVmaW5lICYmIGRlZmluZS5hbWQpIHtcbiAgZGVmaW5lKGZ1bmN0aW9uKCkgeyByZXR1cm4gaW1wbDsgfSk7XG59IGVsc2Uge1xuICB0aGlzLnhvcjQwOTYgPSBpbXBsO1xufVxuXG59KShcbiAgdGhpcywgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2luZG93IG9iamVjdCBvciBnbG9iYWxcbiAgKHR5cGVvZiBtb2R1bGUpID09ICdvYmplY3QnICYmIG1vZHVsZSwgICAgLy8gcHJlc2VudCBpbiBub2RlLmpzXG4gICh0eXBlb2YgZGVmaW5lKSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZSAgIC8vIHByZXNlbnQgd2l0aCBhbiBBTUQgbG9hZGVyXG4pO1xuIiwiLy8gQSBKYXZhc2NyaXB0IGltcGxlbWVudGFpb24gb2YgdGhlIFwiVHljaGUtaVwiIHBybmcgYWxnb3JpdGhtIGJ5XG4vLyBTYW11ZWwgTmV2ZXMgYW5kIEZpbGlwZSBBcmF1am8uXG4vLyBTZWUgaHR0cHM6Ly9lZGVuLmRlaS51Yy5wdC9+c25ldmVzL3B1YnMvMjAxMS1zbmZhMi5wZGZcblxuKGZ1bmN0aW9uKGdsb2JhbCwgbW9kdWxlLCBkZWZpbmUpIHtcblxuZnVuY3Rpb24gWG9yR2VuKHNlZWQpIHtcbiAgdmFyIG1lID0gdGhpcywgc3Ryc2VlZCA9ICcnO1xuXG4gIC8vIFNldCB1cCBnZW5lcmF0b3IgZnVuY3Rpb24uXG4gIG1lLm5leHQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgYiA9IG1lLmIsIGMgPSBtZS5jLCBkID0gbWUuZCwgYSA9IG1lLmE7XG4gICAgYiA9IChiIDw8IDI1KSBeIChiID4+PiA3KSBeIGM7XG4gICAgYyA9IChjIC0gZCkgfCAwO1xuICAgIGQgPSAoZCA8PCAyNCkgXiAoZCA+Pj4gOCkgXiBhO1xuICAgIGEgPSAoYSAtIGIpIHwgMDtcbiAgICBtZS5iID0gYiA9IChiIDw8IDIwKSBeIChiID4+PiAxMikgXiBjO1xuICAgIG1lLmMgPSBjID0gKGMgLSBkKSB8IDA7XG4gICAgbWUuZCA9IChkIDw8IDE2KSBeIChjID4+PiAxNikgXiBhO1xuICAgIHJldHVybiBtZS5hID0gKGEgLSBiKSB8IDA7XG4gIH07XG5cbiAgLyogVGhlIGZvbGxvd2luZyBpcyBub24taW52ZXJ0ZWQgdHljaGUsIHdoaWNoIGhhcyBiZXR0ZXIgaW50ZXJuYWxcbiAgICogYml0IGRpZmZ1c2lvbiwgYnV0IHdoaWNoIGlzIGFib3V0IDI1JSBzbG93ZXIgdGhhbiB0eWNoZS1pIGluIEpTLlxuICBtZS5uZXh0ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGEgPSBtZS5hLCBiID0gbWUuYiwgYyA9IG1lLmMsIGQgPSBtZS5kO1xuICAgIGEgPSAobWUuYSArIG1lLmIgfCAwKSA+Pj4gMDtcbiAgICBkID0gbWUuZCBeIGE7IGQgPSBkIDw8IDE2IF4gZCA+Pj4gMTY7XG4gICAgYyA9IG1lLmMgKyBkIHwgMDtcbiAgICBiID0gbWUuYiBeIGM7IGIgPSBiIDw8IDEyIF4gZCA+Pj4gMjA7XG4gICAgbWUuYSA9IGEgPSBhICsgYiB8IDA7XG4gICAgZCA9IGQgXiBhOyBtZS5kID0gZCA9IGQgPDwgOCBeIGQgPj4+IDI0O1xuICAgIG1lLmMgPSBjID0gYyArIGQgfCAwO1xuICAgIGIgPSBiIF4gYztcbiAgICByZXR1cm4gbWUuYiA9IChiIDw8IDcgXiBiID4+PiAyNSk7XG4gIH1cbiAgKi9cblxuICBtZS5hID0gMDtcbiAgbWUuYiA9IDA7XG4gIG1lLmMgPSAyNjU0NDM1NzY5IHwgMDtcbiAgbWUuZCA9IDEzNjcxMzA1NTE7XG5cbiAgaWYgKHNlZWQgPT09IE1hdGguZmxvb3Ioc2VlZCkpIHtcbiAgICAvLyBJbnRlZ2VyIHNlZWQuXG4gICAgbWUuYSA9IChzZWVkIC8gMHgxMDAwMDAwMDApIHwgMDtcbiAgICBtZS5iID0gc2VlZCB8IDA7XG4gIH0gZWxzZSB7XG4gICAgLy8gU3RyaW5nIHNlZWQuXG4gICAgc3Ryc2VlZCArPSBzZWVkO1xuICB9XG5cbiAgLy8gTWl4IGluIHN0cmluZyBzZWVkLCB0aGVuIGRpc2NhcmQgYW4gaW5pdGlhbCBiYXRjaCBvZiA2NCB2YWx1ZXMuXG4gIGZvciAodmFyIGsgPSAwOyBrIDwgc3Ryc2VlZC5sZW5ndGggKyAyMDsgaysrKSB7XG4gICAgbWUuYiBePSBzdHJzZWVkLmNoYXJDb2RlQXQoaykgfCAwO1xuICAgIG1lLm5leHQoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjb3B5KGYsIHQpIHtcbiAgdC5hID0gZi5hO1xuICB0LmIgPSBmLmI7XG4gIHQuYyA9IGYuYztcbiAgdC5kID0gZi5kO1xuICByZXR1cm4gdDtcbn07XG5cbmZ1bmN0aW9uIGltcGwoc2VlZCwgb3B0cykge1xuICB2YXIgeGcgPSBuZXcgWG9yR2VuKHNlZWQpLFxuICAgICAgc3RhdGUgPSBvcHRzICYmIG9wdHMuc3RhdGUsXG4gICAgICBwcm5nID0gZnVuY3Rpb24oKSB7IHJldHVybiAoeGcubmV4dCgpID4+PiAwKSAvIDB4MTAwMDAwMDAwOyB9O1xuICBwcm5nLmRvdWJsZSA9IGZ1bmN0aW9uKCkge1xuICAgIGRvIHtcbiAgICAgIHZhciB0b3AgPSB4Zy5uZXh0KCkgPj4+IDExLFxuICAgICAgICAgIGJvdCA9ICh4Zy5uZXh0KCkgPj4+IDApIC8gMHgxMDAwMDAwMDAsXG4gICAgICAgICAgcmVzdWx0ID0gKHRvcCArIGJvdCkgLyAoMSA8PCAyMSk7XG4gICAgfSB3aGlsZSAocmVzdWx0ID09PSAwKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuICBwcm5nLmludDMyID0geGcubmV4dDtcbiAgcHJuZy5xdWljayA9IHBybmc7XG4gIGlmIChzdGF0ZSkge1xuICAgIGlmICh0eXBlb2Yoc3RhdGUpID09ICdvYmplY3QnKSBjb3B5KHN0YXRlLCB4Zyk7XG4gICAgcHJuZy5zdGF0ZSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gY29weSh4Zywge30pOyB9XG4gIH1cbiAgcmV0dXJuIHBybmc7XG59XG5cbmlmIChtb2R1bGUgJiYgbW9kdWxlLmV4cG9ydHMpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBpbXBsO1xufSBlbHNlIGlmIChkZWZpbmUgJiYgZGVmaW5lLmFtZCkge1xuICBkZWZpbmUoZnVuY3Rpb24oKSB7IHJldHVybiBpbXBsOyB9KTtcbn0gZWxzZSB7XG4gIHRoaXMudHljaGVpID0gaW1wbDtcbn1cblxufSkoXG4gIHRoaXMsXG4gICh0eXBlb2YgbW9kdWxlKSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUsICAgIC8vIHByZXNlbnQgaW4gbm9kZS5qc1xuICAodHlwZW9mIGRlZmluZSkgPT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUgICAvLyBwcmVzZW50IHdpdGggYW4gQU1EIGxvYWRlclxuKTtcblxuXG4iLCIvKlxuQ29weXJpZ2h0IDIwMTkgRGF2aWQgQmF1LlxuXG5QZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmdcbmEgY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG53aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG5kaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG9cbnBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0b1xudGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXG5UaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZVxuaW5jbHVkZWQgaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsXG5FWFBSRVNTIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbk1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC5cbklOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZXG5DTEFJTSwgREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULFxuVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEVcblNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4qL1xuXG4oZnVuY3Rpb24gKGdsb2JhbCwgcG9vbCwgbWF0aCkge1xuLy9cbi8vIFRoZSBmb2xsb3dpbmcgY29uc3RhbnRzIGFyZSByZWxhdGVkIHRvIElFRUUgNzU0IGxpbWl0cy5cbi8vXG5cbnZhciB3aWR0aCA9IDI1NiwgICAgICAgIC8vIGVhY2ggUkM0IG91dHB1dCBpcyAwIDw9IHggPCAyNTZcbiAgICBjaHVua3MgPSA2LCAgICAgICAgIC8vIGF0IGxlYXN0IHNpeCBSQzQgb3V0cHV0cyBmb3IgZWFjaCBkb3VibGVcbiAgICBkaWdpdHMgPSA1MiwgICAgICAgIC8vIHRoZXJlIGFyZSA1MiBzaWduaWZpY2FudCBkaWdpdHMgaW4gYSBkb3VibGVcbiAgICBybmduYW1lID0gJ3JhbmRvbScsIC8vIHJuZ25hbWU6IG5hbWUgZm9yIE1hdGgucmFuZG9tIGFuZCBNYXRoLnNlZWRyYW5kb21cbiAgICBzdGFydGRlbm9tID0gbWF0aC5wb3cod2lkdGgsIGNodW5rcyksXG4gICAgc2lnbmlmaWNhbmNlID0gbWF0aC5wb3coMiwgZGlnaXRzKSxcbiAgICBvdmVyZmxvdyA9IHNpZ25pZmljYW5jZSAqIDIsXG4gICAgbWFzayA9IHdpZHRoIC0gMSxcbiAgICBub2RlY3J5cHRvOyAgICAgICAgIC8vIG5vZGUuanMgY3J5cHRvIG1vZHVsZSwgaW5pdGlhbGl6ZWQgYXQgdGhlIGJvdHRvbS5cblxuLy9cbi8vIHNlZWRyYW5kb20oKVxuLy8gVGhpcyBpcyB0aGUgc2VlZHJhbmRvbSBmdW5jdGlvbiBkZXNjcmliZWQgYWJvdmUuXG4vL1xuZnVuY3Rpb24gc2VlZHJhbmRvbShzZWVkLCBvcHRpb25zLCBjYWxsYmFjaykge1xuICB2YXIga2V5ID0gW107XG4gIG9wdGlvbnMgPSAob3B0aW9ucyA9PSB0cnVlKSA/IHsgZW50cm9weTogdHJ1ZSB9IDogKG9wdGlvbnMgfHwge30pO1xuXG4gIC8vIEZsYXR0ZW4gdGhlIHNlZWQgc3RyaW5nIG9yIGJ1aWxkIG9uZSBmcm9tIGxvY2FsIGVudHJvcHkgaWYgbmVlZGVkLlxuICB2YXIgc2hvcnRzZWVkID0gbWl4a2V5KGZsYXR0ZW4oXG4gICAgb3B0aW9ucy5lbnRyb3B5ID8gW3NlZWQsIHRvc3RyaW5nKHBvb2wpXSA6XG4gICAgKHNlZWQgPT0gbnVsbCkgPyBhdXRvc2VlZCgpIDogc2VlZCwgMyksIGtleSk7XG5cbiAgLy8gVXNlIHRoZSBzZWVkIHRvIGluaXRpYWxpemUgYW4gQVJDNCBnZW5lcmF0b3IuXG4gIHZhciBhcmM0ID0gbmV3IEFSQzQoa2V5KTtcblxuICAvLyBUaGlzIGZ1bmN0aW9uIHJldHVybnMgYSByYW5kb20gZG91YmxlIGluIFswLCAxKSB0aGF0IGNvbnRhaW5zXG4gIC8vIHJhbmRvbW5lc3MgaW4gZXZlcnkgYml0IG9mIHRoZSBtYW50aXNzYSBvZiB0aGUgSUVFRSA3NTQgdmFsdWUuXG4gIHZhciBwcm5nID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIG4gPSBhcmM0LmcoY2h1bmtzKSwgICAgICAgICAgICAgLy8gU3RhcnQgd2l0aCBhIG51bWVyYXRvciBuIDwgMiBeIDQ4XG4gICAgICAgIGQgPSBzdGFydGRlbm9tLCAgICAgICAgICAgICAgICAgLy8gICBhbmQgZGVub21pbmF0b3IgZCA9IDIgXiA0OC5cbiAgICAgICAgeCA9IDA7ICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgIGFuZCBubyAnZXh0cmEgbGFzdCBieXRlJy5cbiAgICB3aGlsZSAobiA8IHNpZ25pZmljYW5jZSkgeyAgICAgICAgICAvLyBGaWxsIHVwIGFsbCBzaWduaWZpY2FudCBkaWdpdHMgYnlcbiAgICAgIG4gPSAobiArIHgpICogd2lkdGg7ICAgICAgICAgICAgICAvLyAgIHNoaWZ0aW5nIG51bWVyYXRvciBhbmRcbiAgICAgIGQgKj0gd2lkdGg7ICAgICAgICAgICAgICAgICAgICAgICAvLyAgIGRlbm9taW5hdG9yIGFuZCBnZW5lcmF0aW5nIGFcbiAgICAgIHggPSBhcmM0LmcoMSk7ICAgICAgICAgICAgICAgICAgICAvLyAgIG5ldyBsZWFzdC1zaWduaWZpY2FudC1ieXRlLlxuICAgIH1cbiAgICB3aGlsZSAobiA+PSBvdmVyZmxvdykgeyAgICAgICAgICAgICAvLyBUbyBhdm9pZCByb3VuZGluZyB1cCwgYmVmb3JlIGFkZGluZ1xuICAgICAgbiAvPSAyOyAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgbGFzdCBieXRlLCBzaGlmdCBldmVyeXRoaW5nXG4gICAgICBkIC89IDI7ICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICByaWdodCB1c2luZyBpbnRlZ2VyIG1hdGggdW50aWxcbiAgICAgIHggPj4+PSAxOyAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgIHdlIGhhdmUgZXhhY3RseSB0aGUgZGVzaXJlZCBiaXRzLlxuICAgIH1cbiAgICByZXR1cm4gKG4gKyB4KSAvIGQ7ICAgICAgICAgICAgICAgICAvLyBGb3JtIHRoZSBudW1iZXIgd2l0aGluIFswLCAxKS5cbiAgfTtcblxuICBwcm5nLmludDMyID0gZnVuY3Rpb24oKSB7IHJldHVybiBhcmM0LmcoNCkgfCAwOyB9XG4gIHBybmcucXVpY2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIGFyYzQuZyg0KSAvIDB4MTAwMDAwMDAwOyB9XG4gIHBybmcuZG91YmxlID0gcHJuZztcblxuICAvLyBNaXggdGhlIHJhbmRvbW5lc3MgaW50byBhY2N1bXVsYXRlZCBlbnRyb3B5LlxuICBtaXhrZXkodG9zdHJpbmcoYXJjNC5TKSwgcG9vbCk7XG5cbiAgLy8gQ2FsbGluZyBjb252ZW50aW9uOiB3aGF0IHRvIHJldHVybiBhcyBhIGZ1bmN0aW9uIG9mIHBybmcsIHNlZWQsIGlzX21hdGguXG4gIHJldHVybiAob3B0aW9ucy5wYXNzIHx8IGNhbGxiYWNrIHx8XG4gICAgICBmdW5jdGlvbihwcm5nLCBzZWVkLCBpc19tYXRoX2NhbGwsIHN0YXRlKSB7XG4gICAgICAgIGlmIChzdGF0ZSkge1xuICAgICAgICAgIC8vIExvYWQgdGhlIGFyYzQgc3RhdGUgZnJvbSB0aGUgZ2l2ZW4gc3RhdGUgaWYgaXQgaGFzIGFuIFMgYXJyYXkuXG4gICAgICAgICAgaWYgKHN0YXRlLlMpIHsgY29weShzdGF0ZSwgYXJjNCk7IH1cbiAgICAgICAgICAvLyBPbmx5IHByb3ZpZGUgdGhlIC5zdGF0ZSBtZXRob2QgaWYgcmVxdWVzdGVkIHZpYSBvcHRpb25zLnN0YXRlLlxuICAgICAgICAgIHBybmcuc3RhdGUgPSBmdW5jdGlvbigpIHsgcmV0dXJuIGNvcHkoYXJjNCwge30pOyB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJZiBjYWxsZWQgYXMgYSBtZXRob2Qgb2YgTWF0aCAoTWF0aC5zZWVkcmFuZG9tKCkpLCBtdXRhdGVcbiAgICAgICAgLy8gTWF0aC5yYW5kb20gYmVjYXVzZSB0aGF0IGlzIGhvdyBzZWVkcmFuZG9tLmpzIGhhcyB3b3JrZWQgc2luY2UgdjEuMC5cbiAgICAgICAgaWYgKGlzX21hdGhfY2FsbCkgeyBtYXRoW3JuZ25hbWVdID0gcHJuZzsgcmV0dXJuIHNlZWQ7IH1cblxuICAgICAgICAvLyBPdGhlcndpc2UsIGl0IGlzIGEgbmV3ZXIgY2FsbGluZyBjb252ZW50aW9uLCBzbyByZXR1cm4gdGhlXG4gICAgICAgIC8vIHBybmcgZGlyZWN0bHkuXG4gICAgICAgIGVsc2UgcmV0dXJuIHBybmc7XG4gICAgICB9KShcbiAgcHJuZyxcbiAgc2hvcnRzZWVkLFxuICAnZ2xvYmFsJyBpbiBvcHRpb25zID8gb3B0aW9ucy5nbG9iYWwgOiAodGhpcyA9PSBtYXRoKSxcbiAgb3B0aW9ucy5zdGF0ZSk7XG59XG5cbi8vXG4vLyBBUkM0XG4vL1xuLy8gQW4gQVJDNCBpbXBsZW1lbnRhdGlvbi4gIFRoZSBjb25zdHJ1Y3RvciB0YWtlcyBhIGtleSBpbiB0aGUgZm9ybSBvZlxuLy8gYW4gYXJyYXkgb2YgYXQgbW9zdCAod2lkdGgpIGludGVnZXJzIHRoYXQgc2hvdWxkIGJlIDAgPD0geCA8ICh3aWR0aCkuXG4vL1xuLy8gVGhlIGcoY291bnQpIG1ldGhvZCByZXR1cm5zIGEgcHNldWRvcmFuZG9tIGludGVnZXIgdGhhdCBjb25jYXRlbmF0ZXNcbi8vIHRoZSBuZXh0IChjb3VudCkgb3V0cHV0cyBmcm9tIEFSQzQuICBJdHMgcmV0dXJuIHZhbHVlIGlzIGEgbnVtYmVyIHhcbi8vIHRoYXQgaXMgaW4gdGhlIHJhbmdlIDAgPD0geCA8ICh3aWR0aCBeIGNvdW50KS5cbi8vXG5mdW5jdGlvbiBBUkM0KGtleSkge1xuICB2YXIgdCwga2V5bGVuID0ga2V5Lmxlbmd0aCxcbiAgICAgIG1lID0gdGhpcywgaSA9IDAsIGogPSBtZS5pID0gbWUuaiA9IDAsIHMgPSBtZS5TID0gW107XG5cbiAgLy8gVGhlIGVtcHR5IGtleSBbXSBpcyB0cmVhdGVkIGFzIFswXS5cbiAgaWYgKCFrZXlsZW4pIHsga2V5ID0gW2tleWxlbisrXTsgfVxuXG4gIC8vIFNldCB1cCBTIHVzaW5nIHRoZSBzdGFuZGFyZCBrZXkgc2NoZWR1bGluZyBhbGdvcml0aG0uXG4gIHdoaWxlIChpIDwgd2lkdGgpIHtcbiAgICBzW2ldID0gaSsrO1xuICB9XG4gIGZvciAoaSA9IDA7IGkgPCB3aWR0aDsgaSsrKSB7XG4gICAgc1tpXSA9IHNbaiA9IG1hc2sgJiAoaiArIGtleVtpICUga2V5bGVuXSArICh0ID0gc1tpXSkpXTtcbiAgICBzW2pdID0gdDtcbiAgfVxuXG4gIC8vIFRoZSBcImdcIiBtZXRob2QgcmV0dXJucyB0aGUgbmV4dCAoY291bnQpIG91dHB1dHMgYXMgb25lIG51bWJlci5cbiAgKG1lLmcgPSBmdW5jdGlvbihjb3VudCkge1xuICAgIC8vIFVzaW5nIGluc3RhbmNlIG1lbWJlcnMgaW5zdGVhZCBvZiBjbG9zdXJlIHN0YXRlIG5lYXJseSBkb3VibGVzIHNwZWVkLlxuICAgIHZhciB0LCByID0gMCxcbiAgICAgICAgaSA9IG1lLmksIGogPSBtZS5qLCBzID0gbWUuUztcbiAgICB3aGlsZSAoY291bnQtLSkge1xuICAgICAgdCA9IHNbaSA9IG1hc2sgJiAoaSArIDEpXTtcbiAgICAgIHIgPSByICogd2lkdGggKyBzW21hc2sgJiAoKHNbaV0gPSBzW2ogPSBtYXNrICYgKGogKyB0KV0pICsgKHNbal0gPSB0KSldO1xuICAgIH1cbiAgICBtZS5pID0gaTsgbWUuaiA9IGo7XG4gICAgcmV0dXJuIHI7XG4gICAgLy8gRm9yIHJvYnVzdCB1bnByZWRpY3RhYmlsaXR5LCB0aGUgZnVuY3Rpb24gY2FsbCBiZWxvdyBhdXRvbWF0aWNhbGx5XG4gICAgLy8gZGlzY2FyZHMgYW4gaW5pdGlhbCBiYXRjaCBvZiB2YWx1ZXMuICBUaGlzIGlzIGNhbGxlZCBSQzQtZHJvcFsyNTZdLlxuICAgIC8vIFNlZSBodHRwOi8vZ29vZ2xlLmNvbS9zZWFyY2g/cT1yc2ErZmx1aHJlcityZXNwb25zZSZidG5JXG4gIH0pKHdpZHRoKTtcbn1cblxuLy9cbi8vIGNvcHkoKVxuLy8gQ29waWVzIGludGVybmFsIHN0YXRlIG9mIEFSQzQgdG8gb3IgZnJvbSBhIHBsYWluIG9iamVjdC5cbi8vXG5mdW5jdGlvbiBjb3B5KGYsIHQpIHtcbiAgdC5pID0gZi5pO1xuICB0LmogPSBmLmo7XG4gIHQuUyA9IGYuUy5zbGljZSgpO1xuICByZXR1cm4gdDtcbn07XG5cbi8vXG4vLyBmbGF0dGVuKClcbi8vIENvbnZlcnRzIGFuIG9iamVjdCB0cmVlIHRvIG5lc3RlZCBhcnJheXMgb2Ygc3RyaW5ncy5cbi8vXG5mdW5jdGlvbiBmbGF0dGVuKG9iaiwgZGVwdGgpIHtcbiAgdmFyIHJlc3VsdCA9IFtdLCB0eXAgPSAodHlwZW9mIG9iaiksIHByb3A7XG4gIGlmIChkZXB0aCAmJiB0eXAgPT0gJ29iamVjdCcpIHtcbiAgICBmb3IgKHByb3AgaW4gb2JqKSB7XG4gICAgICB0cnkgeyByZXN1bHQucHVzaChmbGF0dGVuKG9ialtwcm9wXSwgZGVwdGggLSAxKSk7IH0gY2F0Y2ggKGUpIHt9XG4gICAgfVxuICB9XG4gIHJldHVybiAocmVzdWx0Lmxlbmd0aCA/IHJlc3VsdCA6IHR5cCA9PSAnc3RyaW5nJyA/IG9iaiA6IG9iaiArICdcXDAnKTtcbn1cblxuLy9cbi8vIG1peGtleSgpXG4vLyBNaXhlcyBhIHN0cmluZyBzZWVkIGludG8gYSBrZXkgdGhhdCBpcyBhbiBhcnJheSBvZiBpbnRlZ2VycywgYW5kXG4vLyByZXR1cm5zIGEgc2hvcnRlbmVkIHN0cmluZyBzZWVkIHRoYXQgaXMgZXF1aXZhbGVudCB0byB0aGUgcmVzdWx0IGtleS5cbi8vXG5mdW5jdGlvbiBtaXhrZXkoc2VlZCwga2V5KSB7XG4gIHZhciBzdHJpbmdzZWVkID0gc2VlZCArICcnLCBzbWVhciwgaiA9IDA7XG4gIHdoaWxlIChqIDwgc3RyaW5nc2VlZC5sZW5ndGgpIHtcbiAgICBrZXlbbWFzayAmIGpdID1cbiAgICAgIG1hc2sgJiAoKHNtZWFyIF49IGtleVttYXNrICYgal0gKiAxOSkgKyBzdHJpbmdzZWVkLmNoYXJDb2RlQXQoaisrKSk7XG4gIH1cbiAgcmV0dXJuIHRvc3RyaW5nKGtleSk7XG59XG5cbi8vXG4vLyBhdXRvc2VlZCgpXG4vLyBSZXR1cm5zIGFuIG9iamVjdCBmb3IgYXV0b3NlZWRpbmcsIHVzaW5nIHdpbmRvdy5jcnlwdG8gYW5kIE5vZGUgY3J5cHRvXG4vLyBtb2R1bGUgaWYgYXZhaWxhYmxlLlxuLy9cbmZ1bmN0aW9uIGF1dG9zZWVkKCkge1xuICB0cnkge1xuICAgIHZhciBvdXQ7XG4gICAgaWYgKG5vZGVjcnlwdG8gJiYgKG91dCA9IG5vZGVjcnlwdG8ucmFuZG9tQnl0ZXMpKSB7XG4gICAgICAvLyBUaGUgdXNlIG9mICdvdXQnIHRvIHJlbWVtYmVyIHJhbmRvbUJ5dGVzIG1ha2VzIHRpZ2h0IG1pbmlmaWVkIGNvZGUuXG4gICAgICBvdXQgPSBvdXQod2lkdGgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvdXQgPSBuZXcgVWludDhBcnJheSh3aWR0aCk7XG4gICAgICAoZ2xvYmFsLmNyeXB0byB8fCBnbG9iYWwubXNDcnlwdG8pLmdldFJhbmRvbVZhbHVlcyhvdXQpO1xuICAgIH1cbiAgICByZXR1cm4gdG9zdHJpbmcob3V0KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHZhciBicm93c2VyID0gZ2xvYmFsLm5hdmlnYXRvcixcbiAgICAgICAgcGx1Z2lucyA9IGJyb3dzZXIgJiYgYnJvd3Nlci5wbHVnaW5zO1xuICAgIHJldHVybiBbK25ldyBEYXRlLCBnbG9iYWwsIHBsdWdpbnMsIGdsb2JhbC5zY3JlZW4sIHRvc3RyaW5nKHBvb2wpXTtcbiAgfVxufVxuXG4vL1xuLy8gdG9zdHJpbmcoKVxuLy8gQ29udmVydHMgYW4gYXJyYXkgb2YgY2hhcmNvZGVzIHRvIGEgc3RyaW5nXG4vL1xuZnVuY3Rpb24gdG9zdHJpbmcoYSkge1xuICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseSgwLCBhKTtcbn1cblxuLy9cbi8vIFdoZW4gc2VlZHJhbmRvbS5qcyBpcyBsb2FkZWQsIHdlIGltbWVkaWF0ZWx5IG1peCBhIGZldyBiaXRzXG4vLyBmcm9tIHRoZSBidWlsdC1pbiBSTkcgaW50byB0aGUgZW50cm9weSBwb29sLiAgQmVjYXVzZSB3ZSBkb1xuLy8gbm90IHdhbnQgdG8gaW50ZXJmZXJlIHdpdGggZGV0ZXJtaW5pc3RpYyBQUk5HIHN0YXRlIGxhdGVyLFxuLy8gc2VlZHJhbmRvbSB3aWxsIG5vdCBjYWxsIG1hdGgucmFuZG9tIG9uIGl0cyBvd24gYWdhaW4gYWZ0ZXJcbi8vIGluaXRpYWxpemF0aW9uLlxuLy9cbm1peGtleShtYXRoLnJhbmRvbSgpLCBwb29sKTtcblxuLy9cbi8vIE5vZGVqcyBhbmQgQU1EIHN1cHBvcnQ6IGV4cG9ydCB0aGUgaW1wbGVtZW50YXRpb24gYXMgYSBtb2R1bGUgdXNpbmdcbi8vIGVpdGhlciBjb252ZW50aW9uLlxuLy9cbmlmICgodHlwZW9mIG1vZHVsZSkgPT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBzZWVkcmFuZG9tO1xuICAvLyBXaGVuIGluIG5vZGUuanMsIHRyeSB1c2luZyBjcnlwdG8gcGFja2FnZSBmb3IgYXV0b3NlZWRpbmcuXG4gIHRyeSB7XG4gICAgbm9kZWNyeXB0byA9IHJlcXVpcmUoJ2NyeXB0bycpO1xuICB9IGNhdGNoIChleCkge31cbn0gZWxzZSBpZiAoKHR5cGVvZiBkZWZpbmUpID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICBkZWZpbmUoZnVuY3Rpb24oKSB7IHJldHVybiBzZWVkcmFuZG9tOyB9KTtcbn0gZWxzZSB7XG4gIC8vIFdoZW4gaW5jbHVkZWQgYXMgYSBwbGFpbiBzY3JpcHQsIHNldCB1cCBNYXRoLnNlZWRyYW5kb20gZ2xvYmFsLlxuICBtYXRoWydzZWVkJyArIHJuZ25hbWVdID0gc2VlZHJhbmRvbTtcbn1cblxuXG4vLyBFbmQgYW5vbnltb3VzIHNjb3BlLCBhbmQgcGFzcyBpbml0aWFsIHZhbHVlcy5cbn0pKFxuICAvLyBnbG9iYWw6IGBzZWxmYCBpbiBicm93c2VycyAoaW5jbHVkaW5nIHN0cmljdCBtb2RlIGFuZCB3ZWIgd29ya2VycyksXG4gIC8vIG90aGVyd2lzZSBgdGhpc2AgaW4gTm9kZSBhbmQgb3RoZXIgZW52aXJvbm1lbnRzXG4gICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcpID8gc2VsZiA6IHRoaXMsXG4gIFtdLCAgICAgLy8gcG9vbDogZW50cm9weSBwb29sIHN0YXJ0cyBlbXB0eVxuICBNYXRoICAgIC8vIG1hdGg6IHBhY2thZ2UgY29udGFpbmluZyByYW5kb20sIHBvdywgYW5kIHNlZWRyYW5kb21cbik7XG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfb3dMaXRlID0gcmVxdWlyZSgnb3ctbGl0ZScpO1xuXG52YXIgX293TGl0ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9vd0xpdGUpO1xuXG52YXIgX3JuZyA9IHJlcXVpcmUoJy4uL3JuZycpO1xuXG52YXIgX3JuZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9ybmcpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBSTkdGdW5jdGlvbiA9IGZ1bmN0aW9uIChfUk5HKSB7XG4gIF9pbmhlcml0cyhSTkdGdW5jdGlvbiwgX1JORyk7XG5cbiAgZnVuY3Rpb24gUk5HRnVuY3Rpb24odGh1bmssIG9wdHMpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUk5HRnVuY3Rpb24pO1xuXG4gICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKFJOR0Z1bmN0aW9uLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoUk5HRnVuY3Rpb24pKS5jYWxsKHRoaXMpKTtcblxuICAgIF90aGlzLnNlZWQodGh1bmssIG9wdHMpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhSTkdGdW5jdGlvbiwgW3tcbiAgICBrZXk6ICduZXh0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9ybmcoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdzZWVkJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2VlZCh0aHVuaykge1xuICAgICAgKDAsIF9vd0xpdGUyLmRlZmF1bHQpKHRodW5rLCBfb3dMaXRlMi5kZWZhdWx0LmZ1bmN0aW9uKTtcbiAgICAgIHRoaXMuX3JuZyA9IHRodW5rO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2Nsb25lJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY2xvbmUoKSB7XG4gICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgb3B0cyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICBvcHRzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbmV3IChGdW5jdGlvbi5wcm90b3R5cGUuYmluZC5hcHBseShSTkdGdW5jdGlvbiwgW251bGxdLmNvbmNhdChbdGhpcy5fcm5nXSwgb3B0cykpKSgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ25hbWUnLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuICdmdW5jdGlvbic7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFJOR0Z1bmN0aW9uO1xufShfcm5nMi5kZWZhdWx0KTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gUk5HRnVuY3Rpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mdW5jdGlvbi5qcy5tYXAiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfb3dMaXRlID0gcmVxdWlyZSgnb3ctbGl0ZScpO1xuXG52YXIgX293TGl0ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9vd0xpdGUpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5leHBvcnRzLmRlZmF1bHQgPSBmdW5jdGlvbiAocmFuZG9tLCBtaW4sIG1heCkge1xuICBpZiAobWF4ID09PSB1bmRlZmluZWQpIHtcbiAgICBtYXggPSBtaW4gPT09IHVuZGVmaW5lZCA/IDEgOiBtaW47XG4gICAgbWluID0gMDtcbiAgfVxuXG4gICgwLCBfb3dMaXRlMi5kZWZhdWx0KShtaW4sIF9vd0xpdGUyLmRlZmF1bHQubnVtYmVyKTtcbiAgKDAsIF9vd0xpdGUyLmRlZmF1bHQpKG1heCwgX293TGl0ZTIuZGVmYXVsdC5udW1iZXIpO1xuXG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHJhbmRvbS5uZXh0KCkgKiAobWF4IC0gbWluKSArIG1pbjtcbiAgfTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD11bmlmb3JtLmpzLm1hcCIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9vd0xpdGUgPSByZXF1aXJlKCdvdy1saXRlJyk7XG5cbnZhciBfb3dMaXRlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX293TGl0ZSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGZ1bmN0aW9uIChyYW5kb20sIG1pbiwgbWF4KSB7XG4gIGlmIChtYXggPT09IHVuZGVmaW5lZCkge1xuICAgIG1heCA9IG1pbiA9PT0gdW5kZWZpbmVkID8gMSA6IG1pbjtcbiAgICBtaW4gPSAwO1xuICB9XG5cbiAgKDAsIF9vd0xpdGUyLmRlZmF1bHQpKG1pbiwgX293TGl0ZTIuZGVmYXVsdC5udW1iZXIuaW50ZWdlcik7XG4gICgwLCBfb3dMaXRlMi5kZWZhdWx0KShtYXgsIF9vd0xpdGUyLmRlZmF1bHQubnVtYmVyLmludGVnZXIpO1xuXG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHJhbmRvbS5uZXh0KCkgKiAobWF4IC0gbWluICsgMSkgKyBtaW4gfCAwO1xuICB9O1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVuaWZvcm0taW50LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBmdW5jdGlvbiAocmFuZG9tKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHJhbmRvbS5uZXh0KCkgPj0gMC41O1xuICB9O1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVuaWZvcm0tYm9vbGVhbi5qcy5tYXAiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfb3dMaXRlID0gcmVxdWlyZSgnb3ctbGl0ZScpO1xuXG52YXIgX293TGl0ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9vd0xpdGUpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5leHBvcnRzLmRlZmF1bHQgPSBmdW5jdGlvbiAocmFuZG9tKSB7XG4gIHZhciBtdSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMDtcbiAgdmFyIHNpZ21hID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiAxO1xuXG4gICgwLCBfb3dMaXRlMi5kZWZhdWx0KShtdSwgX293TGl0ZTIuZGVmYXVsdC5udW1iZXIpO1xuICAoMCwgX293TGl0ZTIuZGVmYXVsdCkoc2lnbWEsIF9vd0xpdGUyLmRlZmF1bHQubnVtYmVyKTtcblxuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHZhciB4ID0gdm9pZCAwLFxuICAgICAgICB5ID0gdm9pZCAwLFxuICAgICAgICByID0gdm9pZCAwO1xuXG4gICAgZG8ge1xuICAgICAgeCA9IHJhbmRvbS5uZXh0KCkgKiAyIC0gMTtcbiAgICAgIHkgPSByYW5kb20ubmV4dCgpICogMiAtIDE7XG4gICAgICByID0geCAqIHggKyB5ICogeTtcbiAgICB9IHdoaWxlICghciB8fCByID4gMSk7XG5cbiAgICByZXR1cm4gbXUgKyBzaWdtYSAqIHkgKiBNYXRoLnNxcnQoLTIgKiBNYXRoLmxvZyhyKSAvIHIpO1xuICB9O1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW5vcm1hbC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKHJhbmRvbSkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBhcmdzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHZhciBub3JtYWwgPSByYW5kb20ubm9ybWFsLmFwcGx5KHJhbmRvbSwgYXJncyk7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gTWF0aC5leHAobm9ybWFsKCkpO1xuICB9O1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxvZy1ub3JtYWwuanMubWFwIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX293TGl0ZSA9IHJlcXVpcmUoJ293LWxpdGUnKTtcblxudmFyIF9vd0xpdGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfb3dMaXRlKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKHJhbmRvbSkge1xuICB2YXIgcCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMC41O1xuXG4gICgwLCBfb3dMaXRlMi5kZWZhdWx0KShwLCBfb3dMaXRlMi5kZWZhdWx0Lm51bWJlci5ndGUoMCkubHQoMSkpO1xuXG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHJhbmRvbS5uZXh0KCkgKyBwIHwgMDtcbiAgfTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1iZXJub3VsbGkuanMubWFwIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX293TGl0ZSA9IHJlcXVpcmUoJ293LWxpdGUnKTtcblxudmFyIF9vd0xpdGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfb3dMaXRlKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKHJhbmRvbSkge1xuICB2YXIgbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMTtcbiAgdmFyIHAgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IDAuNTtcblxuICAoMCwgX293TGl0ZTIuZGVmYXVsdCkobiwgX293TGl0ZTIuZGVmYXVsdC5udW1iZXIucG9zaXRpdmUuaW50ZWdlcik7XG4gICgwLCBfb3dMaXRlMi5kZWZhdWx0KShwLCBfb3dMaXRlMi5kZWZhdWx0Lm51bWJlci5ndGUoMCkubHRlKDEpKTtcblxuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgeCA9IDA7XG5cbiAgICB3aGlsZSAoaSsrIDwgbikge1xuICAgICAgeCArPSByYW5kb20ubmV4dCgpIDwgcDtcbiAgICB9XG5cbiAgICByZXR1cm4geDtcbiAgfTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1iaW5vbWlhbC5qcy5tYXAiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfb3dMaXRlID0gcmVxdWlyZSgnb3ctbGl0ZScpO1xuXG52YXIgX293TGl0ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9vd0xpdGUpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5leHBvcnRzLmRlZmF1bHQgPSBmdW5jdGlvbiAocmFuZG9tKSB7XG4gIHZhciBwID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAwLjU7XG5cbiAgKDAsIF9vd0xpdGUyLmRlZmF1bHQpKHAsIF9vd0xpdGUyLmRlZmF1bHQubnVtYmVyLmd0KDApLmx0ZSgxKSk7XG4gIHZhciBpbnZMb2dQID0gMS4wIC8gTWF0aC5sb2coMS4wIC0gcCk7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gMSArIE1hdGgubG9nKHJhbmRvbS5uZXh0KCkpICogaW52TG9nUCB8IDA7XG4gIH07XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2VvbWV0cmljLmpzLm1hcCIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9vd0xpdGUgPSByZXF1aXJlKCdvdy1saXRlJyk7XG5cbnZhciBfb3dMaXRlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX293TGl0ZSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBsb2dGYWN0b3JpYWxUYWJsZSA9IFswLjAsIDAuMCwgMC42OTMxNDcxODA1NTk5NDUyOSwgMS43OTE3NTk0NjkyMjgwNTUwLCAzLjE3ODA1MzgzMDM0Nzk0NTgsIDQuNzg3NDkxNzQyNzgyMDQ1OCwgNi41NzkyNTEyMTIwMTAxMDEyLCA4LjUyNTE2MTM2MTA2NTQxNDcsIDEwLjYwNDYwMjkwMjc0NTI1MSwgMTIuODAxODI3NDgwMDgxNDY5XTtcblxudmFyIGxvZ0ZhY3RvcmlhbCA9IGZ1bmN0aW9uIGxvZ0ZhY3RvcmlhbChrKSB7XG4gIHJldHVybiBsb2dGYWN0b3JpYWxUYWJsZVtrXTtcbn07XG5cbnZhciBsb2dTcXJ0MlBJID0gMC45MTg5Mzg1MzMyMDQ2NzI2NztcblxuZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKHJhbmRvbSkge1xuICB2YXIgbGFtYmRhID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAxO1xuXG4gICgwLCBfb3dMaXRlMi5kZWZhdWx0KShsYW1iZGEsIF9vd0xpdGUyLmRlZmF1bHQubnVtYmVyLnBvc2l0aXZlKTtcblxuICBpZiAobGFtYmRhIDwgMTApIHtcbiAgICAvLyBpbnZlcnNpb24gbWV0aG9kXG4gICAgdmFyIGV4cE1lYW4gPSBNYXRoLmV4cCgtbGFtYmRhKTtcblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgcCA9IGV4cE1lYW47XG4gICAgICB2YXIgeCA9IDA7XG4gICAgICB2YXIgdSA9IHJhbmRvbS5uZXh0KCk7XG5cbiAgICAgIHdoaWxlICh1ID4gcCkge1xuICAgICAgICB1ID0gdSAtIHA7XG4gICAgICAgIHAgPSBsYW1iZGEgKiBwIC8gKyt4O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4geDtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIC8vIGdlbmVyYXRpdmUgbWV0aG9kXG4gICAgdmFyIHNtdSA9IE1hdGguc3FydChsYW1iZGEpO1xuICAgIHZhciBiID0gMC45MzEgKyAyLjUzICogc211O1xuICAgIHZhciBhID0gLTAuMDU5ICsgMC4wMjQ4MyAqIGI7XG4gICAgdmFyIGludkFscGhhID0gMS4xMjM5ICsgMS4xMzI4IC8gKGIgLSAzLjQpO1xuICAgIHZhciB2UiA9IDAuOTI3NyAtIDMuNjIyNCAvIChiIC0gMik7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgdmFyIHUgPSB2b2lkIDA7XG4gICAgICAgIHZhciB2ID0gcmFuZG9tLm5leHQoKTtcblxuICAgICAgICBpZiAodiA8PSAwLjg2ICogdlIpIHtcbiAgICAgICAgICB1ID0gdiAvIHZSIC0gMC40MztcbiAgICAgICAgICByZXR1cm4gTWF0aC5mbG9vcigoMiAqIGEgLyAoMC41IC0gTWF0aC5hYnModSkpICsgYikgKiB1ICsgbGFtYmRhICsgMC40NDUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHYgPj0gdlIpIHtcbiAgICAgICAgICB1ID0gcmFuZG9tLm5leHQoKSAtIDAuNTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB1ID0gdiAvIHZSIC0gMC45MztcbiAgICAgICAgICB1ID0gKHUgPCAwID8gLTAuNSA6IDAuNSkgLSB1O1xuICAgICAgICAgIHYgPSByYW5kb20ubmV4dCgpICogdlI7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdXMgPSAwLjUgLSBNYXRoLmFicyh1KTtcbiAgICAgICAgaWYgKHVzIDwgMC4wMTMgJiYgdiA+IHVzKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgayA9IE1hdGguZmxvb3IoKDIgKiBhIC8gdXMgKyBiKSAqIHUgKyBsYW1iZGEgKyAwLjQ0NSkgfCAwO1xuICAgICAgICB2ID0gdiAqIGludkFscGhhIC8gKGEgLyAodXMgKiB1cykgKyBiKTtcblxuICAgICAgICBpZiAoayA+PSAxMCkge1xuICAgICAgICAgIHZhciB0ID0gKGsgKyAwLjUpICogTWF0aC5sb2cobGFtYmRhIC8gaykgLSBsYW1iZGEgLSBsb2dTcXJ0MlBJICsgayAtICgxIC8gMTIuMCAtICgxIC8gMzYwLjAgLSAxIC8gKDEyNjAuMCAqIGsgKiBrKSkgLyAoayAqIGspKSAvIGs7XG5cbiAgICAgICAgICBpZiAoTWF0aC5sb2codiAqIHNtdSkgPD0gdCkge1xuICAgICAgICAgICAgcmV0dXJuIGs7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGsgPj0gMCkge1xuICAgICAgICAgIGlmIChNYXRoLmxvZyh2KSA8PSBrICogTWF0aC5sb2cobGFtYmRhKSAtIGxhbWJkYSAtIGxvZ0ZhY3RvcmlhbChrKSkge1xuICAgICAgICAgICAgcmV0dXJuIGs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBvaXNzb24uanMubWFwIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX293TGl0ZSA9IHJlcXVpcmUoJ293LWxpdGUnKTtcblxudmFyIF9vd0xpdGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfb3dMaXRlKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKHJhbmRvbSkge1xuICB2YXIgbGFtYmRhID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAxO1xuXG4gICgwLCBfb3dMaXRlMi5kZWZhdWx0KShsYW1iZGEsIF9vd0xpdGUyLmRlZmF1bHQubnVtYmVyLnBvc2l0aXZlKTtcblxuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAtTWF0aC5sb2coMSAtIHJhbmRvbS5uZXh0KCkpIC8gbGFtYmRhO1xuICB9O1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWV4cG9uZW50aWFsLmpzLm1hcCIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9vd0xpdGUgPSByZXF1aXJlKCdvdy1saXRlJyk7XG5cbnZhciBfb3dMaXRlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX293TGl0ZSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGZ1bmN0aW9uIChyYW5kb20pIHtcbiAgdmFyIG4gPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDE7XG5cbiAgKDAsIF9vd0xpdGUyLmRlZmF1bHQpKG4sIF9vd0xpdGUyLmRlZmF1bHQubnVtYmVyLmludGVnZXIuZ3RlKDApKTtcblxuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHZhciBzdW0gPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBzdW0gKz0gcmFuZG9tLm5leHQoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3VtO1xuICB9O1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlyd2luLWhhbGwuanMubWFwIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX293TGl0ZSA9IHJlcXVpcmUoJ293LWxpdGUnKTtcblxudmFyIF9vd0xpdGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfb3dMaXRlKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKHJhbmRvbSkge1xuICB2YXIgbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMTtcblxuICAoMCwgX293TGl0ZTIuZGVmYXVsdCkobiwgX293TGl0ZTIuZGVmYXVsdC5udW1iZXIuaW50ZWdlci5wb3NpdGl2ZSk7XG4gIHZhciBpcndpbkhhbGwgPSByYW5kb20uaXJ3aW5IYWxsKG4pO1xuXG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGlyd2luSGFsbCgpIC8gbjtcbiAgfTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1iYXRlcy5qcy5tYXAiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfb3dMaXRlID0gcmVxdWlyZSgnb3ctbGl0ZScpO1xuXG52YXIgX293TGl0ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9vd0xpdGUpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5leHBvcnRzLmRlZmF1bHQgPSBmdW5jdGlvbiAocmFuZG9tKSB7XG4gIHZhciBhbHBoYSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMTtcblxuICAoMCwgX293TGl0ZTIuZGVmYXVsdCkoYWxwaGEsIF9vd0xpdGUyLmRlZmF1bHQubnVtYmVyLmd0ZSgwKSk7XG4gIHZhciBpbnZBbHBoYSA9IDEuMCAvIGFscGhhO1xuXG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIDEuMCAvIE1hdGgucG93KDEuMCAtIHJhbmRvbS5uZXh0KCksIGludkFscGhhKTtcbiAgfTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYXJldG8uanMubWFwIiwiZnVuY3Rpb24gbm9vcCgpIHsgfVxuY29uc3QgaWRlbnRpdHkgPSB4ID0+IHg7XG5mdW5jdGlvbiBhc3NpZ24odGFyLCBzcmMpIHtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgZm9yIChjb25zdCBrIGluIHNyYylcbiAgICAgICAgdGFyW2tdID0gc3JjW2tdO1xuICAgIHJldHVybiB0YXI7XG59XG5mdW5jdGlvbiBpc19wcm9taXNlKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIHZhbHVlLnRoZW4gPT09ICdmdW5jdGlvbic7XG59XG5mdW5jdGlvbiBhZGRfbG9jYXRpb24oZWxlbWVudCwgZmlsZSwgbGluZSwgY29sdW1uLCBjaGFyKSB7XG4gICAgZWxlbWVudC5fX3N2ZWx0ZV9tZXRhID0ge1xuICAgICAgICBsb2M6IHsgZmlsZSwgbGluZSwgY29sdW1uLCBjaGFyIH1cbiAgICB9O1xufVxuZnVuY3Rpb24gcnVuKGZuKSB7XG4gICAgcmV0dXJuIGZuKCk7XG59XG5mdW5jdGlvbiBibGFua19vYmplY3QoKSB7XG4gICAgcmV0dXJuIE9iamVjdC5jcmVhdGUobnVsbCk7XG59XG5mdW5jdGlvbiBydW5fYWxsKGZucykge1xuICAgIGZucy5mb3JFYWNoKHJ1bik7XG59XG5mdW5jdGlvbiBpc19mdW5jdGlvbih0aGluZykge1xuICAgIHJldHVybiB0eXBlb2YgdGhpbmcgPT09ICdmdW5jdGlvbic7XG59XG5mdW5jdGlvbiBzYWZlX25vdF9lcXVhbChhLCBiKSB7XG4gICAgcmV0dXJuIGEgIT0gYSA/IGIgPT0gYiA6IGEgIT09IGIgfHwgKChhICYmIHR5cGVvZiBhID09PSAnb2JqZWN0JykgfHwgdHlwZW9mIGEgPT09ICdmdW5jdGlvbicpO1xufVxuZnVuY3Rpb24gbm90X2VxdWFsKGEsIGIpIHtcbiAgICByZXR1cm4gYSAhPSBhID8gYiA9PSBiIDogYSAhPT0gYjtcbn1cbmZ1bmN0aW9uIHZhbGlkYXRlX3N0b3JlKHN0b3JlLCBuYW1lKSB7XG4gICAgaWYgKCFzdG9yZSB8fCB0eXBlb2Ygc3RvcmUuc3Vic2NyaWJlICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgJyR7bmFtZX0nIGlzIG5vdCBhIHN0b3JlIHdpdGggYSAnc3Vic2NyaWJlJyBtZXRob2RgKTtcbiAgICB9XG59XG5mdW5jdGlvbiBzdWJzY3JpYmUoc3RvcmUsIGNhbGxiYWNrKSB7XG4gICAgY29uc3QgdW5zdWIgPSBzdG9yZS5zdWJzY3JpYmUoY2FsbGJhY2spO1xuICAgIHJldHVybiB1bnN1Yi51bnN1YnNjcmliZSA/ICgpID0+IHVuc3ViLnVuc3Vic2NyaWJlKCkgOiB1bnN1Yjtcbn1cbmZ1bmN0aW9uIGdldF9zdG9yZV92YWx1ZShzdG9yZSkge1xuICAgIGxldCB2YWx1ZTtcbiAgICBzdWJzY3JpYmUoc3RvcmUsIF8gPT4gdmFsdWUgPSBfKSgpO1xuICAgIHJldHVybiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIGNvbXBvbmVudF9zdWJzY3JpYmUoY29tcG9uZW50LCBzdG9yZSwgY2FsbGJhY2spIHtcbiAgICBjb21wb25lbnQuJCQub25fZGVzdHJveS5wdXNoKHN1YnNjcmliZShzdG9yZSwgY2FsbGJhY2spKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZV9zbG90KGRlZmluaXRpb24sIGN0eCwgJCRzY29wZSwgZm4pIHtcbiAgICBpZiAoZGVmaW5pdGlvbikge1xuICAgICAgICBjb25zdCBzbG90X2N0eCA9IGdldF9zbG90X2NvbnRleHQoZGVmaW5pdGlvbiwgY3R4LCAkJHNjb3BlLCBmbik7XG4gICAgICAgIHJldHVybiBkZWZpbml0aW9uWzBdKHNsb3RfY3R4KTtcbiAgICB9XG59XG5mdW5jdGlvbiBnZXRfc2xvdF9jb250ZXh0KGRlZmluaXRpb24sIGN0eCwgJCRzY29wZSwgZm4pIHtcbiAgICByZXR1cm4gZGVmaW5pdGlvblsxXSAmJiBmblxuICAgICAgICA/IGFzc2lnbigkJHNjb3BlLmN0eC5zbGljZSgpLCBkZWZpbml0aW9uWzFdKGZuKGN0eCkpKVxuICAgICAgICA6ICQkc2NvcGUuY3R4O1xufVxuZnVuY3Rpb24gZ2V0X3Nsb3RfY2hhbmdlcyhkZWZpbml0aW9uLCAkJHNjb3BlLCBkaXJ0eSwgZm4pIHtcbiAgICBpZiAoZGVmaW5pdGlvblsyXSAmJiBmbikge1xuICAgICAgICBjb25zdCBsZXRzID0gZGVmaW5pdGlvblsyXShmbihkaXJ0eSkpO1xuICAgICAgICBpZiAodHlwZW9mICQkc2NvcGUuZGlydHkgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICBjb25zdCBtZXJnZWQgPSBbXTtcbiAgICAgICAgICAgIGNvbnN0IGxlbiA9IE1hdGgubWF4KCQkc2NvcGUuZGlydHkubGVuZ3RoLCBsZXRzLmxlbmd0aCk7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgICAgICAgICAgbWVyZ2VkW2ldID0gJCRzY29wZS5kaXJ0eVtpXSB8IGxldHNbaV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbWVyZ2VkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAkJHNjb3BlLmRpcnR5IHwgbGV0cztcbiAgICB9XG4gICAgcmV0dXJuICQkc2NvcGUuZGlydHk7XG59XG5mdW5jdGlvbiBleGNsdWRlX2ludGVybmFsX3Byb3BzKHByb3BzKSB7XG4gICAgY29uc3QgcmVzdWx0ID0ge307XG4gICAgZm9yIChjb25zdCBrIGluIHByb3BzKVxuICAgICAgICBpZiAoa1swXSAhPT0gJyQnKVxuICAgICAgICAgICAgcmVzdWx0W2tdID0gcHJvcHNba107XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIG9uY2UoZm4pIHtcbiAgICBsZXQgcmFuID0gZmFsc2U7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICguLi5hcmdzKSB7XG4gICAgICAgIGlmIChyYW4pXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHJhbiA9IHRydWU7XG4gICAgICAgIGZuLmNhbGwodGhpcywgLi4uYXJncyk7XG4gICAgfTtcbn1cbmZ1bmN0aW9uIG51bGxfdG9fZW1wdHkodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgPT0gbnVsbCA/ICcnIDogdmFsdWU7XG59XG5mdW5jdGlvbiBzZXRfc3RvcmVfdmFsdWUoc3RvcmUsIHJldCwgdmFsdWUgPSByZXQpIHtcbiAgICBzdG9yZS5zZXQodmFsdWUpO1xuICAgIHJldHVybiByZXQ7XG59XG5jb25zdCBoYXNfcHJvcCA9IChvYmosIHByb3ApID0+IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApO1xuZnVuY3Rpb24gYWN0aW9uX2Rlc3Ryb3llcihhY3Rpb25fcmVzdWx0KSB7XG4gICAgcmV0dXJuIGFjdGlvbl9yZXN1bHQgJiYgaXNfZnVuY3Rpb24oYWN0aW9uX3Jlc3VsdC5kZXN0cm95KSA/IGFjdGlvbl9yZXN1bHQuZGVzdHJveSA6IG5vb3A7XG59XG5cbmNvbnN0IGlzX2NsaWVudCA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnO1xubGV0IG5vdyA9IGlzX2NsaWVudFxuICAgID8gKCkgPT4gd2luZG93LnBlcmZvcm1hbmNlLm5vdygpXG4gICAgOiAoKSA9PiBEYXRlLm5vdygpO1xubGV0IHJhZiA9IGlzX2NsaWVudCA/IGNiID0+IHJlcXVlc3RBbmltYXRpb25GcmFtZShjYikgOiBub29wO1xuLy8gdXNlZCBpbnRlcm5hbGx5IGZvciB0ZXN0aW5nXG5mdW5jdGlvbiBzZXRfbm93KGZuKSB7XG4gICAgbm93ID0gZm47XG59XG5mdW5jdGlvbiBzZXRfcmFmKGZuKSB7XG4gICAgcmFmID0gZm47XG59XG5cbmNvbnN0IHRhc2tzID0gbmV3IFNldCgpO1xuZnVuY3Rpb24gcnVuX3Rhc2tzKG5vdykge1xuICAgIHRhc2tzLmZvckVhY2godGFzayA9PiB7XG4gICAgICAgIGlmICghdGFzay5jKG5vdykpIHtcbiAgICAgICAgICAgIHRhc2tzLmRlbGV0ZSh0YXNrKTtcbiAgICAgICAgICAgIHRhc2suZigpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgaWYgKHRhc2tzLnNpemUgIT09IDApXG4gICAgICAgIHJhZihydW5fdGFza3MpO1xufVxuLyoqXG4gKiBGb3IgdGVzdGluZyBwdXJwb3NlcyBvbmx5IVxuICovXG5mdW5jdGlvbiBjbGVhcl9sb29wcygpIHtcbiAgICB0YXNrcy5jbGVhcigpO1xufVxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IHRhc2sgdGhhdCBydW5zIG9uIGVhY2ggcmFmIGZyYW1lXG4gKiB1bnRpbCBpdCByZXR1cm5zIGEgZmFsc3kgdmFsdWUgb3IgaXMgYWJvcnRlZFxuICovXG5mdW5jdGlvbiBsb29wKGNhbGxiYWNrKSB7XG4gICAgbGV0IHRhc2s7XG4gICAgaWYgKHRhc2tzLnNpemUgPT09IDApXG4gICAgICAgIHJhZihydW5fdGFza3MpO1xuICAgIHJldHVybiB7XG4gICAgICAgIHByb21pc2U6IG5ldyBQcm9taXNlKGZ1bGZpbGwgPT4ge1xuICAgICAgICAgICAgdGFza3MuYWRkKHRhc2sgPSB7IGM6IGNhbGxiYWNrLCBmOiBmdWxmaWxsIH0pO1xuICAgICAgICB9KSxcbiAgICAgICAgYWJvcnQoKSB7XG4gICAgICAgICAgICB0YXNrcy5kZWxldGUodGFzayk7XG4gICAgICAgIH1cbiAgICB9O1xufVxuXG5mdW5jdGlvbiBhcHBlbmQodGFyZ2V0LCBub2RlKSB7XG4gICAgdGFyZ2V0LmFwcGVuZENoaWxkKG5vZGUpO1xufVxuZnVuY3Rpb24gaW5zZXJ0KHRhcmdldCwgbm9kZSwgYW5jaG9yKSB7XG4gICAgdGFyZ2V0Lmluc2VydEJlZm9yZShub2RlLCBhbmNob3IgfHwgbnVsbCk7XG59XG5mdW5jdGlvbiBkZXRhY2gobm9kZSkge1xuICAgIG5vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChub2RlKTtcbn1cbmZ1bmN0aW9uIGRlc3Ryb3lfZWFjaChpdGVyYXRpb25zLCBkZXRhY2hpbmcpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGl0ZXJhdGlvbnMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKGl0ZXJhdGlvbnNbaV0pXG4gICAgICAgICAgICBpdGVyYXRpb25zW2ldLmQoZGV0YWNoaW5nKTtcbiAgICB9XG59XG5mdW5jdGlvbiBlbGVtZW50KG5hbWUpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChuYW1lKTtcbn1cbmZ1bmN0aW9uIGVsZW1lbnRfaXMobmFtZSwgaXMpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChuYW1lLCB7IGlzIH0pO1xufVxuZnVuY3Rpb24gb2JqZWN0X3dpdGhvdXRfcHJvcGVydGllcyhvYmosIGV4Y2x1ZGUpIHtcbiAgICBjb25zdCB0YXJnZXQgPSB7fTtcbiAgICBmb3IgKGNvbnN0IGsgaW4gb2JqKSB7XG4gICAgICAgIGlmIChoYXNfcHJvcChvYmosIGspXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICAmJiBleGNsdWRlLmluZGV4T2YoaykgPT09IC0xKSB7XG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICB0YXJnZXRba10gPSBvYmpba107XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRhcmdldDtcbn1cbmZ1bmN0aW9uIHN2Z19lbGVtZW50KG5hbWUpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsIG5hbWUpO1xufVxuZnVuY3Rpb24gdGV4dChkYXRhKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGRhdGEpO1xufVxuZnVuY3Rpb24gc3BhY2UoKSB7XG4gICAgcmV0dXJuIHRleHQoJyAnKTtcbn1cbmZ1bmN0aW9uIGVtcHR5KCkge1xuICAgIHJldHVybiB0ZXh0KCcnKTtcbn1cbmZ1bmN0aW9uIGxpc3Rlbihub2RlLCBldmVudCwgaGFuZGxlciwgb3B0aW9ucykge1xuICAgIG5vZGUuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgaGFuZGxlciwgb3B0aW9ucyk7XG4gICAgcmV0dXJuICgpID0+IG5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgaGFuZGxlciwgb3B0aW9ucyk7XG59XG5mdW5jdGlvbiBwcmV2ZW50X2RlZmF1bHQoZm4pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgcmV0dXJuIGZuLmNhbGwodGhpcywgZXZlbnQpO1xuICAgIH07XG59XG5mdW5jdGlvbiBzdG9wX3Byb3BhZ2F0aW9uKGZuKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICByZXR1cm4gZm4uY2FsbCh0aGlzLCBldmVudCk7XG4gICAgfTtcbn1cbmZ1bmN0aW9uIHNlbGYoZm4pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgaWYgKGV2ZW50LnRhcmdldCA9PT0gdGhpcylcbiAgICAgICAgICAgIGZuLmNhbGwodGhpcywgZXZlbnQpO1xuICAgIH07XG59XG5mdW5jdGlvbiBhdHRyKG5vZGUsIGF0dHJpYnV0ZSwgdmFsdWUpIHtcbiAgICBpZiAodmFsdWUgPT0gbnVsbClcbiAgICAgICAgbm9kZS5yZW1vdmVBdHRyaWJ1dGUoYXR0cmlidXRlKTtcbiAgICBlbHNlIGlmIChub2RlLmdldEF0dHJpYnV0ZShhdHRyaWJ1dGUpICE9PSB2YWx1ZSlcbiAgICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoYXR0cmlidXRlLCB2YWx1ZSk7XG59XG5mdW5jdGlvbiBzZXRfYXR0cmlidXRlcyhub2RlLCBhdHRyaWJ1dGVzKSB7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGNvbnN0IGRlc2NyaXB0b3JzID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMobm9kZS5fX3Byb3RvX18pO1xuICAgIGZvciAoY29uc3Qga2V5IGluIGF0dHJpYnV0ZXMpIHtcbiAgICAgICAgaWYgKGF0dHJpYnV0ZXNba2V5XSA9PSBudWxsKSB7XG4gICAgICAgICAgICBub2RlLnJlbW92ZUF0dHJpYnV0ZShrZXkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGtleSA9PT0gJ3N0eWxlJykge1xuICAgICAgICAgICAgbm9kZS5zdHlsZS5jc3NUZXh0ID0gYXR0cmlidXRlc1trZXldO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGRlc2NyaXB0b3JzW2tleV0gJiYgZGVzY3JpcHRvcnNba2V5XS5zZXQpIHtcbiAgICAgICAgICAgIG5vZGVba2V5XSA9IGF0dHJpYnV0ZXNba2V5XTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGF0dHIobm9kZSwga2V5LCBhdHRyaWJ1dGVzW2tleV0pO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gc2V0X3N2Z19hdHRyaWJ1dGVzKG5vZGUsIGF0dHJpYnV0ZXMpIHtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBhdHRyaWJ1dGVzKSB7XG4gICAgICAgIGF0dHIobm9kZSwga2V5LCBhdHRyaWJ1dGVzW2tleV0pO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHNldF9jdXN0b21fZWxlbWVudF9kYXRhKG5vZGUsIHByb3AsIHZhbHVlKSB7XG4gICAgaWYgKHByb3AgaW4gbm9kZSkge1xuICAgICAgICBub2RlW3Byb3BdID0gdmFsdWU7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBhdHRyKG5vZGUsIHByb3AsIHZhbHVlKTtcbiAgICB9XG59XG5mdW5jdGlvbiB4bGlua19hdHRyKG5vZGUsIGF0dHJpYnV0ZSwgdmFsdWUpIHtcbiAgICBub2RlLnNldEF0dHJpYnV0ZU5TKCdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rJywgYXR0cmlidXRlLCB2YWx1ZSk7XG59XG5mdW5jdGlvbiBnZXRfYmluZGluZ19ncm91cF92YWx1ZShncm91cCkge1xuICAgIGNvbnN0IHZhbHVlID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBncm91cC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBpZiAoZ3JvdXBbaV0uY2hlY2tlZClcbiAgICAgICAgICAgIHZhbHVlLnB1c2goZ3JvdXBbaV0uX192YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIHRvX251bWJlcih2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gJycgPyB1bmRlZmluZWQgOiArdmFsdWU7XG59XG5mdW5jdGlvbiB0aW1lX3Jhbmdlc190b19hcnJheShyYW5nZXMpIHtcbiAgICBjb25zdCBhcnJheSA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmFuZ2VzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGFycmF5LnB1c2goeyBzdGFydDogcmFuZ2VzLnN0YXJ0KGkpLCBlbmQ6IHJhbmdlcy5lbmQoaSkgfSk7XG4gICAgfVxuICAgIHJldHVybiBhcnJheTtcbn1cbmZ1bmN0aW9uIGNoaWxkcmVuKGVsZW1lbnQpIHtcbiAgICByZXR1cm4gQXJyYXkuZnJvbShlbGVtZW50LmNoaWxkTm9kZXMpO1xufVxuZnVuY3Rpb24gY2xhaW1fZWxlbWVudChub2RlcywgbmFtZSwgYXR0cmlidXRlcywgc3ZnKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBub2Rlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBjb25zdCBub2RlID0gbm9kZXNbaV07XG4gICAgICAgIGlmIChub2RlLm5vZGVOYW1lID09PSBuYW1lKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IG5vZGUuYXR0cmlidXRlcy5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGF0dHJpYnV0ZSA9IG5vZGUuYXR0cmlidXRlc1tqXTtcbiAgICAgICAgICAgICAgICBpZiAoIWF0dHJpYnV0ZXNbYXR0cmlidXRlLm5hbWVdKVxuICAgICAgICAgICAgICAgICAgICBub2RlLnJlbW92ZUF0dHJpYnV0ZShhdHRyaWJ1dGUubmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbm9kZXMuc3BsaWNlKGksIDEpWzBdOyAvLyBUT0RPIHN0cmlwIHVud2FudGVkIGF0dHJpYnV0ZXNcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc3ZnID8gc3ZnX2VsZW1lbnQobmFtZSkgOiBlbGVtZW50KG5hbWUpO1xufVxuZnVuY3Rpb24gY2xhaW1fdGV4dChub2RlcywgZGF0YSkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbm9kZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgY29uc3Qgbm9kZSA9IG5vZGVzW2ldO1xuICAgICAgICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gMykge1xuICAgICAgICAgICAgbm9kZS5kYXRhID0gJycgKyBkYXRhO1xuICAgICAgICAgICAgcmV0dXJuIG5vZGVzLnNwbGljZShpLCAxKVswXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGV4dChkYXRhKTtcbn1cbmZ1bmN0aW9uIGNsYWltX3NwYWNlKG5vZGVzKSB7XG4gICAgcmV0dXJuIGNsYWltX3RleHQobm9kZXMsICcgJyk7XG59XG5mdW5jdGlvbiBzZXRfZGF0YSh0ZXh0LCBkYXRhKSB7XG4gICAgZGF0YSA9ICcnICsgZGF0YTtcbiAgICBpZiAodGV4dC5kYXRhICE9PSBkYXRhKVxuICAgICAgICB0ZXh0LmRhdGEgPSBkYXRhO1xufVxuZnVuY3Rpb24gc2V0X2lucHV0X3ZhbHVlKGlucHV0LCB2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSAhPSBudWxsIHx8IGlucHV0LnZhbHVlKSB7XG4gICAgICAgIGlucHV0LnZhbHVlID0gdmFsdWU7XG4gICAgfVxufVxuZnVuY3Rpb24gc2V0X2lucHV0X3R5cGUoaW5wdXQsIHR5cGUpIHtcbiAgICB0cnkge1xuICAgICAgICBpbnB1dC50eXBlID0gdHlwZTtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gZG8gbm90aGluZ1xuICAgIH1cbn1cbmZ1bmN0aW9uIHNldF9zdHlsZShub2RlLCBrZXksIHZhbHVlLCBpbXBvcnRhbnQpIHtcbiAgICBub2RlLnN0eWxlLnNldFByb3BlcnR5KGtleSwgdmFsdWUsIGltcG9ydGFudCA/ICdpbXBvcnRhbnQnIDogJycpO1xufVxuZnVuY3Rpb24gc2VsZWN0X29wdGlvbihzZWxlY3QsIHZhbHVlKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZWxlY3Qub3B0aW9ucy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBjb25zdCBvcHRpb24gPSBzZWxlY3Qub3B0aW9uc1tpXTtcbiAgICAgICAgaWYgKG9wdGlvbi5fX3ZhbHVlID09PSB2YWx1ZSkge1xuICAgICAgICAgICAgb3B0aW9uLnNlbGVjdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIHNlbGVjdF9vcHRpb25zKHNlbGVjdCwgdmFsdWUpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNlbGVjdC5vcHRpb25zLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbiA9IHNlbGVjdC5vcHRpb25zW2ldO1xuICAgICAgICBvcHRpb24uc2VsZWN0ZWQgPSB+dmFsdWUuaW5kZXhPZihvcHRpb24uX192YWx1ZSk7XG4gICAgfVxufVxuZnVuY3Rpb24gc2VsZWN0X3ZhbHVlKHNlbGVjdCkge1xuICAgIGNvbnN0IHNlbGVjdGVkX29wdGlvbiA9IHNlbGVjdC5xdWVyeVNlbGVjdG9yKCc6Y2hlY2tlZCcpIHx8IHNlbGVjdC5vcHRpb25zWzBdO1xuICAgIHJldHVybiBzZWxlY3RlZF9vcHRpb24gJiYgc2VsZWN0ZWRfb3B0aW9uLl9fdmFsdWU7XG59XG5mdW5jdGlvbiBzZWxlY3RfbXVsdGlwbGVfdmFsdWUoc2VsZWN0KSB7XG4gICAgcmV0dXJuIFtdLm1hcC5jYWxsKHNlbGVjdC5xdWVyeVNlbGVjdG9yQWxsKCc6Y2hlY2tlZCcpLCBvcHRpb24gPT4gb3B0aW9uLl9fdmFsdWUpO1xufVxuZnVuY3Rpb24gYWRkX3Jlc2l6ZV9saXN0ZW5lcihlbGVtZW50LCBmbikge1xuICAgIGlmIChnZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpLnBvc2l0aW9uID09PSAnc3RhdGljJykge1xuICAgICAgICBlbGVtZW50LnN0eWxlLnBvc2l0aW9uID0gJ3JlbGF0aXZlJztcbiAgICB9XG4gICAgY29uc3Qgb2JqZWN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnb2JqZWN0Jyk7XG4gICAgb2JqZWN0LnNldEF0dHJpYnV0ZSgnc3R5bGUnLCAnZGlzcGxheTogYmxvY2s7IHBvc2l0aW9uOiBhYnNvbHV0ZTsgdG9wOiAwOyBsZWZ0OiAwOyBoZWlnaHQ6IDEwMCU7IHdpZHRoOiAxMDAlOyBvdmVyZmxvdzogaGlkZGVuOyBwb2ludGVyLWV2ZW50czogbm9uZTsgei1pbmRleDogLTE7Jyk7XG4gICAgb2JqZWN0LnNldEF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nLCAndHJ1ZScpO1xuICAgIG9iamVjdC50eXBlID0gJ3RleHQvaHRtbCc7XG4gICAgb2JqZWN0LnRhYkluZGV4ID0gLTE7XG4gICAgbGV0IHdpbjtcbiAgICBvYmplY3Qub25sb2FkID0gKCkgPT4ge1xuICAgICAgICB3aW4gPSBvYmplY3QuY29udGVudERvY3VtZW50LmRlZmF1bHRWaWV3O1xuICAgICAgICB3aW4uYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgZm4pO1xuICAgIH07XG4gICAgaWYgKC9UcmlkZW50Ly50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpKSB7XG4gICAgICAgIGVsZW1lbnQuYXBwZW5kQ2hpbGQob2JqZWN0KTtcbiAgICAgICAgb2JqZWN0LmRhdGEgPSAnYWJvdXQ6YmxhbmsnO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgb2JqZWN0LmRhdGEgPSAnYWJvdXQ6YmxhbmsnO1xuICAgICAgICBlbGVtZW50LmFwcGVuZENoaWxkKG9iamVjdCk7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIGNhbmNlbDogKCkgPT4ge1xuICAgICAgICAgICAgd2luICYmIHdpbi5yZW1vdmVFdmVudExpc3RlbmVyICYmIHdpbi5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCBmbik7XG4gICAgICAgICAgICBlbGVtZW50LnJlbW92ZUNoaWxkKG9iamVjdCk7XG4gICAgICAgIH1cbiAgICB9O1xufVxuZnVuY3Rpb24gdG9nZ2xlX2NsYXNzKGVsZW1lbnQsIG5hbWUsIHRvZ2dsZSkge1xuICAgIGVsZW1lbnQuY2xhc3NMaXN0W3RvZ2dsZSA/ICdhZGQnIDogJ3JlbW92ZSddKG5hbWUpO1xufVxuZnVuY3Rpb24gY3VzdG9tX2V2ZW50KHR5cGUsIGRldGFpbCkge1xuICAgIGNvbnN0IGUgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnQ3VzdG9tRXZlbnQnKTtcbiAgICBlLmluaXRDdXN0b21FdmVudCh0eXBlLCBmYWxzZSwgZmFsc2UsIGRldGFpbCk7XG4gICAgcmV0dXJuIGU7XG59XG5mdW5jdGlvbiBxdWVyeV9zZWxlY3Rvcl9hbGwoc2VsZWN0b3IsIHBhcmVudCA9IGRvY3VtZW50LmJvZHkpIHtcbiAgICByZXR1cm4gQXJyYXkuZnJvbShwYXJlbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvcikpO1xufVxuY2xhc3MgSHRtbFRhZyB7XG4gICAgY29uc3RydWN0b3IoaHRtbCwgYW5jaG9yID0gbnVsbCkge1xuICAgICAgICB0aGlzLmUgPSBlbGVtZW50KCdkaXYnKTtcbiAgICAgICAgdGhpcy5hID0gYW5jaG9yO1xuICAgICAgICB0aGlzLnUoaHRtbCk7XG4gICAgfVxuICAgIG0odGFyZ2V0LCBhbmNob3IgPSBudWxsKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5uLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICBpbnNlcnQodGFyZ2V0LCB0aGlzLm5baV0sIGFuY2hvcik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy50ID0gdGFyZ2V0O1xuICAgIH1cbiAgICB1KGh0bWwpIHtcbiAgICAgICAgdGhpcy5lLmlubmVySFRNTCA9IGh0bWw7XG4gICAgICAgIHRoaXMubiA9IEFycmF5LmZyb20odGhpcy5lLmNoaWxkTm9kZXMpO1xuICAgIH1cbiAgICBwKGh0bWwpIHtcbiAgICAgICAgdGhpcy5kKCk7XG4gICAgICAgIHRoaXMudShodG1sKTtcbiAgICAgICAgdGhpcy5tKHRoaXMudCwgdGhpcy5hKTtcbiAgICB9XG4gICAgZCgpIHtcbiAgICAgICAgdGhpcy5uLmZvckVhY2goZGV0YWNoKTtcbiAgICB9XG59XG5cbmxldCBzdHlsZXNoZWV0O1xubGV0IGFjdGl2ZSA9IDA7XG5sZXQgY3VycmVudF9ydWxlcyA9IHt9O1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL2Rhcmtza3lhcHAvc3RyaW5nLWhhc2gvYmxvYi9tYXN0ZXIvaW5kZXguanNcbmZ1bmN0aW9uIGhhc2goc3RyKSB7XG4gICAgbGV0IGhhc2ggPSA1MzgxO1xuICAgIGxldCBpID0gc3RyLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKVxuICAgICAgICBoYXNoID0gKChoYXNoIDw8IDUpIC0gaGFzaCkgXiBzdHIuY2hhckNvZGVBdChpKTtcbiAgICByZXR1cm4gaGFzaCA+Pj4gMDtcbn1cbmZ1bmN0aW9uIGNyZWF0ZV9ydWxlKG5vZGUsIGEsIGIsIGR1cmF0aW9uLCBkZWxheSwgZWFzZSwgZm4sIHVpZCA9IDApIHtcbiAgICBjb25zdCBzdGVwID0gMTYuNjY2IC8gZHVyYXRpb247XG4gICAgbGV0IGtleWZyYW1lcyA9ICd7XFxuJztcbiAgICBmb3IgKGxldCBwID0gMDsgcCA8PSAxOyBwICs9IHN0ZXApIHtcbiAgICAgICAgY29uc3QgdCA9IGEgKyAoYiAtIGEpICogZWFzZShwKTtcbiAgICAgICAga2V5ZnJhbWVzICs9IHAgKiAxMDAgKyBgJXske2ZuKHQsIDEgLSB0KX19XFxuYDtcbiAgICB9XG4gICAgY29uc3QgcnVsZSA9IGtleWZyYW1lcyArIGAxMDAlIHske2ZuKGIsIDEgLSBiKX19XFxufWA7XG4gICAgY29uc3QgbmFtZSA9IGBfX3N2ZWx0ZV8ke2hhc2gocnVsZSl9XyR7dWlkfWA7XG4gICAgaWYgKCFjdXJyZW50X3J1bGVzW25hbWVdKSB7XG4gICAgICAgIGlmICghc3R5bGVzaGVldCkge1xuICAgICAgICAgICAgY29uc3Qgc3R5bGUgPSBlbGVtZW50KCdzdHlsZScpO1xuICAgICAgICAgICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzdHlsZSk7XG4gICAgICAgICAgICBzdHlsZXNoZWV0ID0gc3R5bGUuc2hlZXQ7XG4gICAgICAgIH1cbiAgICAgICAgY3VycmVudF9ydWxlc1tuYW1lXSA9IHRydWU7XG4gICAgICAgIHN0eWxlc2hlZXQuaW5zZXJ0UnVsZShgQGtleWZyYW1lcyAke25hbWV9ICR7cnVsZX1gLCBzdHlsZXNoZWV0LmNzc1J1bGVzLmxlbmd0aCk7XG4gICAgfVxuICAgIGNvbnN0IGFuaW1hdGlvbiA9IG5vZGUuc3R5bGUuYW5pbWF0aW9uIHx8ICcnO1xuICAgIG5vZGUuc3R5bGUuYW5pbWF0aW9uID0gYCR7YW5pbWF0aW9uID8gYCR7YW5pbWF0aW9ufSwgYCA6IGBgfSR7bmFtZX0gJHtkdXJhdGlvbn1tcyBsaW5lYXIgJHtkZWxheX1tcyAxIGJvdGhgO1xuICAgIGFjdGl2ZSArPSAxO1xuICAgIHJldHVybiBuYW1lO1xufVxuZnVuY3Rpb24gZGVsZXRlX3J1bGUobm9kZSwgbmFtZSkge1xuICAgIG5vZGUuc3R5bGUuYW5pbWF0aW9uID0gKG5vZGUuc3R5bGUuYW5pbWF0aW9uIHx8ICcnKVxuICAgICAgICAuc3BsaXQoJywgJylcbiAgICAgICAgLmZpbHRlcihuYW1lXG4gICAgICAgID8gYW5pbSA9PiBhbmltLmluZGV4T2YobmFtZSkgPCAwIC8vIHJlbW92ZSBzcGVjaWZpYyBhbmltYXRpb25cbiAgICAgICAgOiBhbmltID0+IGFuaW0uaW5kZXhPZignX19zdmVsdGUnKSA9PT0gLTEgLy8gcmVtb3ZlIGFsbCBTdmVsdGUgYW5pbWF0aW9uc1xuICAgIClcbiAgICAgICAgLmpvaW4oJywgJyk7XG4gICAgaWYgKG5hbWUgJiYgIS0tYWN0aXZlKVxuICAgICAgICBjbGVhcl9ydWxlcygpO1xufVxuZnVuY3Rpb24gY2xlYXJfcnVsZXMoKSB7XG4gICAgcmFmKCgpID0+IHtcbiAgICAgICAgaWYgKGFjdGl2ZSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgbGV0IGkgPSBzdHlsZXNoZWV0LmNzc1J1bGVzLmxlbmd0aDtcbiAgICAgICAgd2hpbGUgKGktLSlcbiAgICAgICAgICAgIHN0eWxlc2hlZXQuZGVsZXRlUnVsZShpKTtcbiAgICAgICAgY3VycmVudF9ydWxlcyA9IHt9O1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVfYW5pbWF0aW9uKG5vZGUsIGZyb20sIGZuLCBwYXJhbXMpIHtcbiAgICBpZiAoIWZyb20pXG4gICAgICAgIHJldHVybiBub29wO1xuICAgIGNvbnN0IHRvID0gbm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICBpZiAoZnJvbS5sZWZ0ID09PSB0by5sZWZ0ICYmIGZyb20ucmlnaHQgPT09IHRvLnJpZ2h0ICYmIGZyb20udG9wID09PSB0by50b3AgJiYgZnJvbS5ib3R0b20gPT09IHRvLmJvdHRvbSlcbiAgICAgICAgcmV0dXJuIG5vb3A7XG4gICAgY29uc3QgeyBkZWxheSA9IDAsIGR1cmF0aW9uID0gMzAwLCBlYXNpbmcgPSBpZGVudGl0eSwgXG4gICAgLy8gQHRzLWlnbm9yZSB0b2RvOiBzaG91bGQgdGhpcyBiZSBzZXBhcmF0ZWQgZnJvbSBkZXN0cnVjdHVyaW5nPyBPciBzdGFydC9lbmQgYWRkZWQgdG8gcHVibGljIGFwaSBhbmQgZG9jdW1lbnRhdGlvbj9cbiAgICBzdGFydDogc3RhcnRfdGltZSA9IG5vdygpICsgZGVsYXksIFxuICAgIC8vIEB0cy1pZ25vcmUgdG9kbzpcbiAgICBlbmQgPSBzdGFydF90aW1lICsgZHVyYXRpb24sIHRpY2sgPSBub29wLCBjc3MgfSA9IGZuKG5vZGUsIHsgZnJvbSwgdG8gfSwgcGFyYW1zKTtcbiAgICBsZXQgcnVubmluZyA9IHRydWU7XG4gICAgbGV0IHN0YXJ0ZWQgPSBmYWxzZTtcbiAgICBsZXQgbmFtZTtcbiAgICBmdW5jdGlvbiBzdGFydCgpIHtcbiAgICAgICAgaWYgKGNzcykge1xuICAgICAgICAgICAgbmFtZSA9IGNyZWF0ZV9ydWxlKG5vZGUsIDAsIDEsIGR1cmF0aW9uLCBkZWxheSwgZWFzaW5nLCBjc3MpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghZGVsYXkpIHtcbiAgICAgICAgICAgIHN0YXJ0ZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIHN0b3AoKSB7XG4gICAgICAgIGlmIChjc3MpXG4gICAgICAgICAgICBkZWxldGVfcnVsZShub2RlLCBuYW1lKTtcbiAgICAgICAgcnVubmluZyA9IGZhbHNlO1xuICAgIH1cbiAgICBsb29wKG5vdyA9PiB7XG4gICAgICAgIGlmICghc3RhcnRlZCAmJiBub3cgPj0gc3RhcnRfdGltZSkge1xuICAgICAgICAgICAgc3RhcnRlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN0YXJ0ZWQgJiYgbm93ID49IGVuZCkge1xuICAgICAgICAgICAgdGljaygxLCAwKTtcbiAgICAgICAgICAgIHN0b3AoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXJ1bm5pbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3RhcnRlZCkge1xuICAgICAgICAgICAgY29uc3QgcCA9IG5vdyAtIHN0YXJ0X3RpbWU7XG4gICAgICAgICAgICBjb25zdCB0ID0gMCArIDEgKiBlYXNpbmcocCAvIGR1cmF0aW9uKTtcbiAgICAgICAgICAgIHRpY2sodCwgMSAtIHQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH0pO1xuICAgIHN0YXJ0KCk7XG4gICAgdGljaygwLCAxKTtcbiAgICByZXR1cm4gc3RvcDtcbn1cbmZ1bmN0aW9uIGZpeF9wb3NpdGlvbihub2RlKSB7XG4gICAgY29uc3Qgc3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKG5vZGUpO1xuICAgIGlmIChzdHlsZS5wb3NpdGlvbiAhPT0gJ2Fic29sdXRlJyAmJiBzdHlsZS5wb3NpdGlvbiAhPT0gJ2ZpeGVkJykge1xuICAgICAgICBjb25zdCB7IHdpZHRoLCBoZWlnaHQgfSA9IHN0eWxlO1xuICAgICAgICBjb25zdCBhID0gbm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgbm9kZS5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG4gICAgICAgIG5vZGUuc3R5bGUud2lkdGggPSB3aWR0aDtcbiAgICAgICAgbm9kZS5zdHlsZS5oZWlnaHQgPSBoZWlnaHQ7XG4gICAgICAgIGFkZF90cmFuc2Zvcm0obm9kZSwgYSk7XG4gICAgfVxufVxuZnVuY3Rpb24gYWRkX3RyYW5zZm9ybShub2RlLCBhKSB7XG4gICAgY29uc3QgYiA9IG5vZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgaWYgKGEubGVmdCAhPT0gYi5sZWZ0IHx8IGEudG9wICE9PSBiLnRvcCkge1xuICAgICAgICBjb25zdCBzdHlsZSA9IGdldENvbXB1dGVkU3R5bGUobm9kZSk7XG4gICAgICAgIGNvbnN0IHRyYW5zZm9ybSA9IHN0eWxlLnRyYW5zZm9ybSA9PT0gJ25vbmUnID8gJycgOiBzdHlsZS50cmFuc2Zvcm07XG4gICAgICAgIG5vZGUuc3R5bGUudHJhbnNmb3JtID0gYCR7dHJhbnNmb3JtfSB0cmFuc2xhdGUoJHthLmxlZnQgLSBiLmxlZnR9cHgsICR7YS50b3AgLSBiLnRvcH1weClgO1xuICAgIH1cbn1cblxubGV0IGN1cnJlbnRfY29tcG9uZW50O1xuZnVuY3Rpb24gc2V0X2N1cnJlbnRfY29tcG9uZW50KGNvbXBvbmVudCkge1xuICAgIGN1cnJlbnRfY29tcG9uZW50ID0gY29tcG9uZW50O1xufVxuZnVuY3Rpb24gZ2V0X2N1cnJlbnRfY29tcG9uZW50KCkge1xuICAgIGlmICghY3VycmVudF9jb21wb25lbnQpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgRnVuY3Rpb24gY2FsbGVkIG91dHNpZGUgY29tcG9uZW50IGluaXRpYWxpemF0aW9uYCk7XG4gICAgcmV0dXJuIGN1cnJlbnRfY29tcG9uZW50O1xufVxuZnVuY3Rpb24gYmVmb3JlVXBkYXRlKGZuKSB7XG4gICAgZ2V0X2N1cnJlbnRfY29tcG9uZW50KCkuJCQuYmVmb3JlX3VwZGF0ZS5wdXNoKGZuKTtcbn1cbmZ1bmN0aW9uIG9uTW91bnQoZm4pIHtcbiAgICBnZXRfY3VycmVudF9jb21wb25lbnQoKS4kJC5vbl9tb3VudC5wdXNoKGZuKTtcbn1cbmZ1bmN0aW9uIGFmdGVyVXBkYXRlKGZuKSB7XG4gICAgZ2V0X2N1cnJlbnRfY29tcG9uZW50KCkuJCQuYWZ0ZXJfdXBkYXRlLnB1c2goZm4pO1xufVxuZnVuY3Rpb24gb25EZXN0cm95KGZuKSB7XG4gICAgZ2V0X2N1cnJlbnRfY29tcG9uZW50KCkuJCQub25fZGVzdHJveS5wdXNoKGZuKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUV2ZW50RGlzcGF0Y2hlcigpIHtcbiAgICBjb25zdCBjb21wb25lbnQgPSBnZXRfY3VycmVudF9jb21wb25lbnQoKTtcbiAgICByZXR1cm4gKHR5cGUsIGRldGFpbCkgPT4ge1xuICAgICAgICBjb25zdCBjYWxsYmFja3MgPSBjb21wb25lbnQuJCQuY2FsbGJhY2tzW3R5cGVdO1xuICAgICAgICBpZiAoY2FsbGJhY2tzKSB7XG4gICAgICAgICAgICAvLyBUT0RPIGFyZSB0aGVyZSBzaXR1YXRpb25zIHdoZXJlIGV2ZW50cyBjb3VsZCBiZSBkaXNwYXRjaGVkXG4gICAgICAgICAgICAvLyBpbiBhIHNlcnZlciAobm9uLURPTSkgZW52aXJvbm1lbnQ/XG4gICAgICAgICAgICBjb25zdCBldmVudCA9IGN1c3RvbV9ldmVudCh0eXBlLCBkZXRhaWwpO1xuICAgICAgICAgICAgY2FsbGJhY2tzLnNsaWNlKCkuZm9yRWFjaChmbiA9PiB7XG4gICAgICAgICAgICAgICAgZm4uY2FsbChjb21wb25lbnQsIGV2ZW50KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfTtcbn1cbmZ1bmN0aW9uIHNldENvbnRleHQoa2V5LCBjb250ZXh0KSB7XG4gICAgZ2V0X2N1cnJlbnRfY29tcG9uZW50KCkuJCQuY29udGV4dC5zZXQoa2V5LCBjb250ZXh0KTtcbn1cbmZ1bmN0aW9uIGdldENvbnRleHQoa2V5KSB7XG4gICAgcmV0dXJuIGdldF9jdXJyZW50X2NvbXBvbmVudCgpLiQkLmNvbnRleHQuZ2V0KGtleSk7XG59XG4vLyBUT0RPIGZpZ3VyZSBvdXQgaWYgd2Ugc3RpbGwgd2FudCB0byBzdXBwb3J0XG4vLyBzaG9ydGhhbmQgZXZlbnRzLCBvciBpZiB3ZSB3YW50IHRvIGltcGxlbWVudFxuLy8gYSByZWFsIGJ1YmJsaW5nIG1lY2hhbmlzbVxuZnVuY3Rpb24gYnViYmxlKGNvbXBvbmVudCwgZXZlbnQpIHtcbiAgICBjb25zdCBjYWxsYmFja3MgPSBjb21wb25lbnQuJCQuY2FsbGJhY2tzW2V2ZW50LnR5cGVdO1xuICAgIGlmIChjYWxsYmFja3MpIHtcbiAgICAgICAgY2FsbGJhY2tzLnNsaWNlKCkuZm9yRWFjaChmbiA9PiBmbihldmVudCkpO1xuICAgIH1cbn1cblxuY29uc3QgZGlydHlfY29tcG9uZW50cyA9IFtdO1xuY29uc3QgaW50cm9zID0geyBlbmFibGVkOiBmYWxzZSB9O1xuY29uc3QgYmluZGluZ19jYWxsYmFja3MgPSBbXTtcbmNvbnN0IHJlbmRlcl9jYWxsYmFja3MgPSBbXTtcbmNvbnN0IGZsdXNoX2NhbGxiYWNrcyA9IFtdO1xuY29uc3QgcmVzb2x2ZWRfcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSgpO1xubGV0IHVwZGF0ZV9zY2hlZHVsZWQgPSBmYWxzZTtcbmZ1bmN0aW9uIHNjaGVkdWxlX3VwZGF0ZSgpIHtcbiAgICBpZiAoIXVwZGF0ZV9zY2hlZHVsZWQpIHtcbiAgICAgICAgdXBkYXRlX3NjaGVkdWxlZCA9IHRydWU7XG4gICAgICAgIHJlc29sdmVkX3Byb21pc2UudGhlbihmbHVzaCk7XG4gICAgfVxufVxuZnVuY3Rpb24gdGljaygpIHtcbiAgICBzY2hlZHVsZV91cGRhdGUoKTtcbiAgICByZXR1cm4gcmVzb2x2ZWRfcHJvbWlzZTtcbn1cbmZ1bmN0aW9uIGFkZF9yZW5kZXJfY2FsbGJhY2soZm4pIHtcbiAgICByZW5kZXJfY2FsbGJhY2tzLnB1c2goZm4pO1xufVxuZnVuY3Rpb24gYWRkX2ZsdXNoX2NhbGxiYWNrKGZuKSB7XG4gICAgZmx1c2hfY2FsbGJhY2tzLnB1c2goZm4pO1xufVxuZnVuY3Rpb24gZmx1c2goKSB7XG4gICAgY29uc3Qgc2Vlbl9jYWxsYmFja3MgPSBuZXcgU2V0KCk7XG4gICAgZG8ge1xuICAgICAgICAvLyBmaXJzdCwgY2FsbCBiZWZvcmVVcGRhdGUgZnVuY3Rpb25zXG4gICAgICAgIC8vIGFuZCB1cGRhdGUgY29tcG9uZW50c1xuICAgICAgICB3aGlsZSAoZGlydHlfY29tcG9uZW50cy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNvbnN0IGNvbXBvbmVudCA9IGRpcnR5X2NvbXBvbmVudHMuc2hpZnQoKTtcbiAgICAgICAgICAgIHNldF9jdXJyZW50X2NvbXBvbmVudChjb21wb25lbnQpO1xuICAgICAgICAgICAgdXBkYXRlKGNvbXBvbmVudC4kJCk7XG4gICAgICAgIH1cbiAgICAgICAgd2hpbGUgKGJpbmRpbmdfY2FsbGJhY2tzLmxlbmd0aClcbiAgICAgICAgICAgIGJpbmRpbmdfY2FsbGJhY2tzLnBvcCgpKCk7XG4gICAgICAgIC8vIHRoZW4sIG9uY2UgY29tcG9uZW50cyBhcmUgdXBkYXRlZCwgY2FsbFxuICAgICAgICAvLyBhZnRlclVwZGF0ZSBmdW5jdGlvbnMuIFRoaXMgbWF5IGNhdXNlXG4gICAgICAgIC8vIHN1YnNlcXVlbnQgdXBkYXRlcy4uLlxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJlbmRlcl9jYWxsYmFja3MubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgIGNvbnN0IGNhbGxiYWNrID0gcmVuZGVyX2NhbGxiYWNrc1tpXTtcbiAgICAgICAgICAgIGlmICghc2Vlbl9jYWxsYmFja3MuaGFzKGNhbGxiYWNrKSkge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICAgICAgLy8gLi4uc28gZ3VhcmQgYWdhaW5zdCBpbmZpbml0ZSBsb29wc1xuICAgICAgICAgICAgICAgIHNlZW5fY2FsbGJhY2tzLmFkZChjYWxsYmFjayk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmVuZGVyX2NhbGxiYWNrcy5sZW5ndGggPSAwO1xuICAgIH0gd2hpbGUgKGRpcnR5X2NvbXBvbmVudHMubGVuZ3RoKTtcbiAgICB3aGlsZSAoZmx1c2hfY2FsbGJhY2tzLmxlbmd0aCkge1xuICAgICAgICBmbHVzaF9jYWxsYmFja3MucG9wKCkoKTtcbiAgICB9XG4gICAgdXBkYXRlX3NjaGVkdWxlZCA9IGZhbHNlO1xufVxuZnVuY3Rpb24gdXBkYXRlKCQkKSB7XG4gICAgaWYgKCQkLmZyYWdtZW50ICE9PSBudWxsKSB7XG4gICAgICAgICQkLnVwZGF0ZSgpO1xuICAgICAgICBydW5fYWxsKCQkLmJlZm9yZV91cGRhdGUpO1xuICAgICAgICBjb25zdCBkaXJ0eSA9ICQkLmRpcnR5O1xuICAgICAgICAkJC5kaXJ0eSA9IFstMV07XG4gICAgICAgICQkLmZyYWdtZW50ICYmICQkLmZyYWdtZW50LnAoJCQuY3R4LCBkaXJ0eSk7XG4gICAgICAgICQkLmFmdGVyX3VwZGF0ZS5mb3JFYWNoKGFkZF9yZW5kZXJfY2FsbGJhY2spO1xuICAgIH1cbn1cblxubGV0IHByb21pc2U7XG5mdW5jdGlvbiB3YWl0KCkge1xuICAgIGlmICghcHJvbWlzZSkge1xuICAgICAgICBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgICAgIHByb21pc2UudGhlbigoKSA9PiB7XG4gICAgICAgICAgICBwcm9taXNlID0gbnVsbDtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBwcm9taXNlO1xufVxuZnVuY3Rpb24gZGlzcGF0Y2gobm9kZSwgZGlyZWN0aW9uLCBraW5kKSB7XG4gICAgbm9kZS5kaXNwYXRjaEV2ZW50KGN1c3RvbV9ldmVudChgJHtkaXJlY3Rpb24gPyAnaW50cm8nIDogJ291dHJvJ30ke2tpbmR9YCkpO1xufVxuY29uc3Qgb3V0cm9pbmcgPSBuZXcgU2V0KCk7XG5sZXQgb3V0cm9zO1xuZnVuY3Rpb24gZ3JvdXBfb3V0cm9zKCkge1xuICAgIG91dHJvcyA9IHtcbiAgICAgICAgcjogMCxcbiAgICAgICAgYzogW10sXG4gICAgICAgIHA6IG91dHJvcyAvLyBwYXJlbnQgZ3JvdXBcbiAgICB9O1xufVxuZnVuY3Rpb24gY2hlY2tfb3V0cm9zKCkge1xuICAgIGlmICghb3V0cm9zLnIpIHtcbiAgICAgICAgcnVuX2FsbChvdXRyb3MuYyk7XG4gICAgfVxuICAgIG91dHJvcyA9IG91dHJvcy5wO1xufVxuZnVuY3Rpb24gdHJhbnNpdGlvbl9pbihibG9jaywgbG9jYWwpIHtcbiAgICBpZiAoYmxvY2sgJiYgYmxvY2suaSkge1xuICAgICAgICBvdXRyb2luZy5kZWxldGUoYmxvY2spO1xuICAgICAgICBibG9jay5pKGxvY2FsKTtcbiAgICB9XG59XG5mdW5jdGlvbiB0cmFuc2l0aW9uX291dChibG9jaywgbG9jYWwsIGRldGFjaCwgY2FsbGJhY2spIHtcbiAgICBpZiAoYmxvY2sgJiYgYmxvY2subykge1xuICAgICAgICBpZiAob3V0cm9pbmcuaGFzKGJsb2NrKSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgb3V0cm9pbmcuYWRkKGJsb2NrKTtcbiAgICAgICAgb3V0cm9zLmMucHVzaCgoKSA9PiB7XG4gICAgICAgICAgICBvdXRyb2luZy5kZWxldGUoYmxvY2spO1xuICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGRldGFjaClcbiAgICAgICAgICAgICAgICAgICAgYmxvY2suZCgxKTtcbiAgICAgICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgYmxvY2subyhsb2NhbCk7XG4gICAgfVxufVxuY29uc3QgbnVsbF90cmFuc2l0aW9uID0geyBkdXJhdGlvbjogMCB9O1xuZnVuY3Rpb24gY3JlYXRlX2luX3RyYW5zaXRpb24obm9kZSwgZm4sIHBhcmFtcykge1xuICAgIGxldCBjb25maWcgPSBmbihub2RlLCBwYXJhbXMpO1xuICAgIGxldCBydW5uaW5nID0gZmFsc2U7XG4gICAgbGV0IGFuaW1hdGlvbl9uYW1lO1xuICAgIGxldCB0YXNrO1xuICAgIGxldCB1aWQgPSAwO1xuICAgIGZ1bmN0aW9uIGNsZWFudXAoKSB7XG4gICAgICAgIGlmIChhbmltYXRpb25fbmFtZSlcbiAgICAgICAgICAgIGRlbGV0ZV9ydWxlKG5vZGUsIGFuaW1hdGlvbl9uYW1lKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZ28oKSB7XG4gICAgICAgIGNvbnN0IHsgZGVsYXkgPSAwLCBkdXJhdGlvbiA9IDMwMCwgZWFzaW5nID0gaWRlbnRpdHksIHRpY2sgPSBub29wLCBjc3MgfSA9IGNvbmZpZyB8fCBudWxsX3RyYW5zaXRpb247XG4gICAgICAgIGlmIChjc3MpXG4gICAgICAgICAgICBhbmltYXRpb25fbmFtZSA9IGNyZWF0ZV9ydWxlKG5vZGUsIDAsIDEsIGR1cmF0aW9uLCBkZWxheSwgZWFzaW5nLCBjc3MsIHVpZCsrKTtcbiAgICAgICAgdGljaygwLCAxKTtcbiAgICAgICAgY29uc3Qgc3RhcnRfdGltZSA9IG5vdygpICsgZGVsYXk7XG4gICAgICAgIGNvbnN0IGVuZF90aW1lID0gc3RhcnRfdGltZSArIGR1cmF0aW9uO1xuICAgICAgICBpZiAodGFzaylcbiAgICAgICAgICAgIHRhc2suYWJvcnQoKTtcbiAgICAgICAgcnVubmluZyA9IHRydWU7XG4gICAgICAgIGFkZF9yZW5kZXJfY2FsbGJhY2soKCkgPT4gZGlzcGF0Y2gobm9kZSwgdHJ1ZSwgJ3N0YXJ0JykpO1xuICAgICAgICB0YXNrID0gbG9vcChub3cgPT4ge1xuICAgICAgICAgICAgaWYgKHJ1bm5pbmcpIHtcbiAgICAgICAgICAgICAgICBpZiAobm93ID49IGVuZF90aW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIHRpY2soMSwgMCk7XG4gICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoKG5vZGUsIHRydWUsICdlbmQnKTtcbiAgICAgICAgICAgICAgICAgICAgY2xlYW51cCgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcnVubmluZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAobm93ID49IHN0YXJ0X3RpbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdCA9IGVhc2luZygobm93IC0gc3RhcnRfdGltZSkgLyBkdXJhdGlvbik7XG4gICAgICAgICAgICAgICAgICAgIHRpY2sodCwgMSAtIHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBydW5uaW5nO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgbGV0IHN0YXJ0ZWQgPSBmYWxzZTtcbiAgICByZXR1cm4ge1xuICAgICAgICBzdGFydCgpIHtcbiAgICAgICAgICAgIGlmIChzdGFydGVkKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIGRlbGV0ZV9ydWxlKG5vZGUpO1xuICAgICAgICAgICAgaWYgKGlzX2Z1bmN0aW9uKGNvbmZpZykpIHtcbiAgICAgICAgICAgICAgICBjb25maWcgPSBjb25maWcoKTtcbiAgICAgICAgICAgICAgICB3YWl0KCkudGhlbihnbyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBnbygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBpbnZhbGlkYXRlKCkge1xuICAgICAgICAgICAgc3RhcnRlZCA9IGZhbHNlO1xuICAgICAgICB9LFxuICAgICAgICBlbmQoKSB7XG4gICAgICAgICAgICBpZiAocnVubmluZykge1xuICAgICAgICAgICAgICAgIGNsZWFudXAoKTtcbiAgICAgICAgICAgICAgICBydW5uaW5nID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlX291dF90cmFuc2l0aW9uKG5vZGUsIGZuLCBwYXJhbXMpIHtcbiAgICBsZXQgY29uZmlnID0gZm4obm9kZSwgcGFyYW1zKTtcbiAgICBsZXQgcnVubmluZyA9IHRydWU7XG4gICAgbGV0IGFuaW1hdGlvbl9uYW1lO1xuICAgIGNvbnN0IGdyb3VwID0gb3V0cm9zO1xuICAgIGdyb3VwLnIgKz0gMTtcbiAgICBmdW5jdGlvbiBnbygpIHtcbiAgICAgICAgY29uc3QgeyBkZWxheSA9IDAsIGR1cmF0aW9uID0gMzAwLCBlYXNpbmcgPSBpZGVudGl0eSwgdGljayA9IG5vb3AsIGNzcyB9ID0gY29uZmlnIHx8IG51bGxfdHJhbnNpdGlvbjtcbiAgICAgICAgaWYgKGNzcylcbiAgICAgICAgICAgIGFuaW1hdGlvbl9uYW1lID0gY3JlYXRlX3J1bGUobm9kZSwgMSwgMCwgZHVyYXRpb24sIGRlbGF5LCBlYXNpbmcsIGNzcyk7XG4gICAgICAgIGNvbnN0IHN0YXJ0X3RpbWUgPSBub3coKSArIGRlbGF5O1xuICAgICAgICBjb25zdCBlbmRfdGltZSA9IHN0YXJ0X3RpbWUgKyBkdXJhdGlvbjtcbiAgICAgICAgYWRkX3JlbmRlcl9jYWxsYmFjaygoKSA9PiBkaXNwYXRjaChub2RlLCBmYWxzZSwgJ3N0YXJ0JykpO1xuICAgICAgICBsb29wKG5vdyA9PiB7XG4gICAgICAgICAgICBpZiAocnVubmluZykge1xuICAgICAgICAgICAgICAgIGlmIChub3cgPj0gZW5kX3RpbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGljaygwLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2gobm9kZSwgZmFsc2UsICdlbmQnKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEtLWdyb3VwLnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoaXMgd2lsbCByZXN1bHQgaW4gYGVuZCgpYCBiZWluZyBjYWxsZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBzbyB3ZSBkb24ndCBuZWVkIHRvIGNsZWFuIHVwIGhlcmVcbiAgICAgICAgICAgICAgICAgICAgICAgIHJ1bl9hbGwoZ3JvdXAuYyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAobm93ID49IHN0YXJ0X3RpbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdCA9IGVhc2luZygobm93IC0gc3RhcnRfdGltZSkgLyBkdXJhdGlvbik7XG4gICAgICAgICAgICAgICAgICAgIHRpY2soMSAtIHQsIHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBydW5uaW5nO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGlzX2Z1bmN0aW9uKGNvbmZpZykpIHtcbiAgICAgICAgd2FpdCgpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgY29uZmlnID0gY29uZmlnKCk7XG4gICAgICAgICAgICBnbygpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGdvKCk7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIGVuZChyZXNldCkge1xuICAgICAgICAgICAgaWYgKHJlc2V0ICYmIGNvbmZpZy50aWNrKSB7XG4gICAgICAgICAgICAgICAgY29uZmlnLnRpY2soMSwgMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocnVubmluZykge1xuICAgICAgICAgICAgICAgIGlmIChhbmltYXRpb25fbmFtZSlcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlX3J1bGUobm9kZSwgYW5pbWF0aW9uX25hbWUpO1xuICAgICAgICAgICAgICAgIHJ1bm5pbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG59XG5mdW5jdGlvbiBjcmVhdGVfYmlkaXJlY3Rpb25hbF90cmFuc2l0aW9uKG5vZGUsIGZuLCBwYXJhbXMsIGludHJvKSB7XG4gICAgbGV0IGNvbmZpZyA9IGZuKG5vZGUsIHBhcmFtcyk7XG4gICAgbGV0IHQgPSBpbnRybyA/IDAgOiAxO1xuICAgIGxldCBydW5uaW5nX3Byb2dyYW0gPSBudWxsO1xuICAgIGxldCBwZW5kaW5nX3Byb2dyYW0gPSBudWxsO1xuICAgIGxldCBhbmltYXRpb25fbmFtZSA9IG51bGw7XG4gICAgZnVuY3Rpb24gY2xlYXJfYW5pbWF0aW9uKCkge1xuICAgICAgICBpZiAoYW5pbWF0aW9uX25hbWUpXG4gICAgICAgICAgICBkZWxldGVfcnVsZShub2RlLCBhbmltYXRpb25fbmFtZSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGluaXQocHJvZ3JhbSwgZHVyYXRpb24pIHtcbiAgICAgICAgY29uc3QgZCA9IHByb2dyYW0uYiAtIHQ7XG4gICAgICAgIGR1cmF0aW9uICo9IE1hdGguYWJzKGQpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYTogdCxcbiAgICAgICAgICAgIGI6IHByb2dyYW0uYixcbiAgICAgICAgICAgIGQsXG4gICAgICAgICAgICBkdXJhdGlvbixcbiAgICAgICAgICAgIHN0YXJ0OiBwcm9ncmFtLnN0YXJ0LFxuICAgICAgICAgICAgZW5kOiBwcm9ncmFtLnN0YXJ0ICsgZHVyYXRpb24sXG4gICAgICAgICAgICBncm91cDogcHJvZ3JhbS5ncm91cFxuICAgICAgICB9O1xuICAgIH1cbiAgICBmdW5jdGlvbiBnbyhiKSB7XG4gICAgICAgIGNvbnN0IHsgZGVsYXkgPSAwLCBkdXJhdGlvbiA9IDMwMCwgZWFzaW5nID0gaWRlbnRpdHksIHRpY2sgPSBub29wLCBjc3MgfSA9IGNvbmZpZyB8fCBudWxsX3RyYW5zaXRpb247XG4gICAgICAgIGNvbnN0IHByb2dyYW0gPSB7XG4gICAgICAgICAgICBzdGFydDogbm93KCkgKyBkZWxheSxcbiAgICAgICAgICAgIGJcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKCFiKSB7XG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlIHRvZG86IGltcHJvdmUgdHlwaW5nc1xuICAgICAgICAgICAgcHJvZ3JhbS5ncm91cCA9IG91dHJvcztcbiAgICAgICAgICAgIG91dHJvcy5yICs9IDE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJ1bm5pbmdfcHJvZ3JhbSkge1xuICAgICAgICAgICAgcGVuZGluZ19wcm9ncmFtID0gcHJvZ3JhbTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIGlmIHRoaXMgaXMgYW4gaW50cm8sIGFuZCB0aGVyZSdzIGEgZGVsYXksIHdlIG5lZWQgdG8gZG9cbiAgICAgICAgICAgIC8vIGFuIGluaXRpYWwgdGljayBhbmQvb3IgYXBwbHkgQ1NTIGFuaW1hdGlvbiBpbW1lZGlhdGVseVxuICAgICAgICAgICAgaWYgKGNzcykge1xuICAgICAgICAgICAgICAgIGNsZWFyX2FuaW1hdGlvbigpO1xuICAgICAgICAgICAgICAgIGFuaW1hdGlvbl9uYW1lID0gY3JlYXRlX3J1bGUobm9kZSwgdCwgYiwgZHVyYXRpb24sIGRlbGF5LCBlYXNpbmcsIGNzcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYilcbiAgICAgICAgICAgICAgICB0aWNrKDAsIDEpO1xuICAgICAgICAgICAgcnVubmluZ19wcm9ncmFtID0gaW5pdChwcm9ncmFtLCBkdXJhdGlvbik7XG4gICAgICAgICAgICBhZGRfcmVuZGVyX2NhbGxiYWNrKCgpID0+IGRpc3BhdGNoKG5vZGUsIGIsICdzdGFydCcpKTtcbiAgICAgICAgICAgIGxvb3Aobm93ID0+IHtcbiAgICAgICAgICAgICAgICBpZiAocGVuZGluZ19wcm9ncmFtICYmIG5vdyA+IHBlbmRpbmdfcHJvZ3JhbS5zdGFydCkge1xuICAgICAgICAgICAgICAgICAgICBydW5uaW5nX3Byb2dyYW0gPSBpbml0KHBlbmRpbmdfcHJvZ3JhbSwgZHVyYXRpb24pO1xuICAgICAgICAgICAgICAgICAgICBwZW5kaW5nX3Byb2dyYW0gPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaChub2RlLCBydW5uaW5nX3Byb2dyYW0uYiwgJ3N0YXJ0Jyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFyX2FuaW1hdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uX25hbWUgPSBjcmVhdGVfcnVsZShub2RlLCB0LCBydW5uaW5nX3Byb2dyYW0uYiwgcnVubmluZ19wcm9ncmFtLmR1cmF0aW9uLCAwLCBlYXNpbmcsIGNvbmZpZy5jc3MpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChydW5uaW5nX3Byb2dyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5vdyA+PSBydW5uaW5nX3Byb2dyYW0uZW5kKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aWNrKHQgPSBydW5uaW5nX3Byb2dyYW0uYiwgMSAtIHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2gobm9kZSwgcnVubmluZ19wcm9ncmFtLmIsICdlbmQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcGVuZGluZ19wcm9ncmFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2UncmUgZG9uZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChydW5uaW5nX3Byb2dyYW0uYikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpbnRybyDigJQgd2UgY2FuIHRpZHkgdXAgaW1tZWRpYXRlbHlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJfYW5pbWF0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBvdXRybyDigJQgbmVlZHMgdG8gYmUgY29vcmRpbmF0ZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEtLXJ1bm5pbmdfcHJvZ3JhbS5ncm91cC5yKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcnVuX2FsbChydW5uaW5nX3Byb2dyYW0uZ3JvdXAuYyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcnVubmluZ19wcm9ncmFtID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChub3cgPj0gcnVubmluZ19wcm9ncmFtLnN0YXJ0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwID0gbm93IC0gcnVubmluZ19wcm9ncmFtLnN0YXJ0O1xuICAgICAgICAgICAgICAgICAgICAgICAgdCA9IHJ1bm5pbmdfcHJvZ3JhbS5hICsgcnVubmluZ19wcm9ncmFtLmQgKiBlYXNpbmcocCAvIHJ1bm5pbmdfcHJvZ3JhbS5kdXJhdGlvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aWNrKHQsIDEgLSB0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gISEocnVubmluZ19wcm9ncmFtIHx8IHBlbmRpbmdfcHJvZ3JhbSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBydW4oYikge1xuICAgICAgICAgICAgaWYgKGlzX2Z1bmN0aW9uKGNvbmZpZykpIHtcbiAgICAgICAgICAgICAgICB3YWl0KCkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgICAgICAgICAgY29uZmlnID0gY29uZmlnKCk7XG4gICAgICAgICAgICAgICAgICAgIGdvKGIpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZ28oYik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGVuZCgpIHtcbiAgICAgICAgICAgIGNsZWFyX2FuaW1hdGlvbigpO1xuICAgICAgICAgICAgcnVubmluZ19wcm9ncmFtID0gcGVuZGluZ19wcm9ncmFtID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH07XG59XG5cbmZ1bmN0aW9uIGhhbmRsZV9wcm9taXNlKHByb21pc2UsIGluZm8pIHtcbiAgICBjb25zdCB0b2tlbiA9IGluZm8udG9rZW4gPSB7fTtcbiAgICBmdW5jdGlvbiB1cGRhdGUodHlwZSwgaW5kZXgsIGtleSwgdmFsdWUpIHtcbiAgICAgICAgaWYgKGluZm8udG9rZW4gIT09IHRva2VuKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBpbmZvLnJlc29sdmVkID0gdmFsdWU7XG4gICAgICAgIGxldCBjaGlsZF9jdHggPSBpbmZvLmN0eDtcbiAgICAgICAgaWYgKGtleSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjaGlsZF9jdHggPSBjaGlsZF9jdHguc2xpY2UoKTtcbiAgICAgICAgICAgIGNoaWxkX2N0eFtrZXldID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYmxvY2sgPSB0eXBlICYmIChpbmZvLmN1cnJlbnQgPSB0eXBlKShjaGlsZF9jdHgpO1xuICAgICAgICBsZXQgbmVlZHNfZmx1c2ggPSBmYWxzZTtcbiAgICAgICAgaWYgKGluZm8uYmxvY2spIHtcbiAgICAgICAgICAgIGlmIChpbmZvLmJsb2Nrcykge1xuICAgICAgICAgICAgICAgIGluZm8uYmxvY2tzLmZvckVhY2goKGJsb2NrLCBpKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpICE9PSBpbmRleCAmJiBibG9jaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ3JvdXBfb3V0cm9zKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uX291dChibG9jaywgMSwgMSwgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZm8uYmxvY2tzW2ldID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tfb3V0cm9zKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGluZm8uYmxvY2suZCgxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJsb2NrLmMoKTtcbiAgICAgICAgICAgIHRyYW5zaXRpb25faW4oYmxvY2ssIDEpO1xuICAgICAgICAgICAgYmxvY2subShpbmZvLm1vdW50KCksIGluZm8uYW5jaG9yKTtcbiAgICAgICAgICAgIG5lZWRzX2ZsdXNoID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpbmZvLmJsb2NrID0gYmxvY2s7XG4gICAgICAgIGlmIChpbmZvLmJsb2NrcylcbiAgICAgICAgICAgIGluZm8uYmxvY2tzW2luZGV4XSA9IGJsb2NrO1xuICAgICAgICBpZiAobmVlZHNfZmx1c2gpIHtcbiAgICAgICAgICAgIGZsdXNoKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzX3Byb21pc2UocHJvbWlzZSkpIHtcbiAgICAgICAgY29uc3QgY3VycmVudF9jb21wb25lbnQgPSBnZXRfY3VycmVudF9jb21wb25lbnQoKTtcbiAgICAgICAgcHJvbWlzZS50aGVuKHZhbHVlID0+IHtcbiAgICAgICAgICAgIHNldF9jdXJyZW50X2NvbXBvbmVudChjdXJyZW50X2NvbXBvbmVudCk7XG4gICAgICAgICAgICB1cGRhdGUoaW5mby50aGVuLCAxLCBpbmZvLnZhbHVlLCB2YWx1ZSk7XG4gICAgICAgICAgICBzZXRfY3VycmVudF9jb21wb25lbnQobnVsbCk7XG4gICAgICAgIH0sIGVycm9yID0+IHtcbiAgICAgICAgICAgIHNldF9jdXJyZW50X2NvbXBvbmVudChjdXJyZW50X2NvbXBvbmVudCk7XG4gICAgICAgICAgICB1cGRhdGUoaW5mby5jYXRjaCwgMiwgaW5mby5lcnJvciwgZXJyb3IpO1xuICAgICAgICAgICAgc2V0X2N1cnJlbnRfY29tcG9uZW50KG51bGwpO1xuICAgICAgICB9KTtcbiAgICAgICAgLy8gaWYgd2UgcHJldmlvdXNseSBoYWQgYSB0aGVuL2NhdGNoIGJsb2NrLCBkZXN0cm95IGl0XG4gICAgICAgIGlmIChpbmZvLmN1cnJlbnQgIT09IGluZm8ucGVuZGluZykge1xuICAgICAgICAgICAgdXBkYXRlKGluZm8ucGVuZGluZywgMCk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgaWYgKGluZm8uY3VycmVudCAhPT0gaW5mby50aGVuKSB7XG4gICAgICAgICAgICB1cGRhdGUoaW5mby50aGVuLCAxLCBpbmZvLnZhbHVlLCBwcm9taXNlKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGluZm8ucmVzb2x2ZWQgPSBwcm9taXNlO1xuICAgIH1cbn1cblxuY29uc3QgZ2xvYmFscyA9ICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IGdsb2JhbCk7XG5cbmZ1bmN0aW9uIGRlc3Ryb3lfYmxvY2soYmxvY2ssIGxvb2t1cCkge1xuICAgIGJsb2NrLmQoMSk7XG4gICAgbG9va3VwLmRlbGV0ZShibG9jay5rZXkpO1xufVxuZnVuY3Rpb24gb3V0cm9fYW5kX2Rlc3Ryb3lfYmxvY2soYmxvY2ssIGxvb2t1cCkge1xuICAgIHRyYW5zaXRpb25fb3V0KGJsb2NrLCAxLCAxLCAoKSA9PiB7XG4gICAgICAgIGxvb2t1cC5kZWxldGUoYmxvY2sua2V5KTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGZpeF9hbmRfZGVzdHJveV9ibG9jayhibG9jaywgbG9va3VwKSB7XG4gICAgYmxvY2suZigpO1xuICAgIGRlc3Ryb3lfYmxvY2soYmxvY2ssIGxvb2t1cCk7XG59XG5mdW5jdGlvbiBmaXhfYW5kX291dHJvX2FuZF9kZXN0cm95X2Jsb2NrKGJsb2NrLCBsb29rdXApIHtcbiAgICBibG9jay5mKCk7XG4gICAgb3V0cm9fYW5kX2Rlc3Ryb3lfYmxvY2soYmxvY2ssIGxvb2t1cCk7XG59XG5mdW5jdGlvbiB1cGRhdGVfa2V5ZWRfZWFjaChvbGRfYmxvY2tzLCBkaXJ0eSwgZ2V0X2tleSwgZHluYW1pYywgY3R4LCBsaXN0LCBsb29rdXAsIG5vZGUsIGRlc3Ryb3ksIGNyZWF0ZV9lYWNoX2Jsb2NrLCBuZXh0LCBnZXRfY29udGV4dCkge1xuICAgIGxldCBvID0gb2xkX2Jsb2Nrcy5sZW5ndGg7XG4gICAgbGV0IG4gPSBsaXN0Lmxlbmd0aDtcbiAgICBsZXQgaSA9IG87XG4gICAgY29uc3Qgb2xkX2luZGV4ZXMgPSB7fTtcbiAgICB3aGlsZSAoaS0tKVxuICAgICAgICBvbGRfaW5kZXhlc1tvbGRfYmxvY2tzW2ldLmtleV0gPSBpO1xuICAgIGNvbnN0IG5ld19ibG9ja3MgPSBbXTtcbiAgICBjb25zdCBuZXdfbG9va3VwID0gbmV3IE1hcCgpO1xuICAgIGNvbnN0IGRlbHRhcyA9IG5ldyBNYXAoKTtcbiAgICBpID0gbjtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgIGNvbnN0IGNoaWxkX2N0eCA9IGdldF9jb250ZXh0KGN0eCwgbGlzdCwgaSk7XG4gICAgICAgIGNvbnN0IGtleSA9IGdldF9rZXkoY2hpbGRfY3R4KTtcbiAgICAgICAgbGV0IGJsb2NrID0gbG9va3VwLmdldChrZXkpO1xuICAgICAgICBpZiAoIWJsb2NrKSB7XG4gICAgICAgICAgICBibG9jayA9IGNyZWF0ZV9lYWNoX2Jsb2NrKGtleSwgY2hpbGRfY3R4KTtcbiAgICAgICAgICAgIGJsb2NrLmMoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChkeW5hbWljKSB7XG4gICAgICAgICAgICBibG9jay5wKGNoaWxkX2N0eCwgZGlydHkpO1xuICAgICAgICB9XG4gICAgICAgIG5ld19sb29rdXAuc2V0KGtleSwgbmV3X2Jsb2Nrc1tpXSA9IGJsb2NrKTtcbiAgICAgICAgaWYgKGtleSBpbiBvbGRfaW5kZXhlcylcbiAgICAgICAgICAgIGRlbHRhcy5zZXQoa2V5LCBNYXRoLmFicyhpIC0gb2xkX2luZGV4ZXNba2V5XSkpO1xuICAgIH1cbiAgICBjb25zdCB3aWxsX21vdmUgPSBuZXcgU2V0KCk7XG4gICAgY29uc3QgZGlkX21vdmUgPSBuZXcgU2V0KCk7XG4gICAgZnVuY3Rpb24gaW5zZXJ0KGJsb2NrKSB7XG4gICAgICAgIHRyYW5zaXRpb25faW4oYmxvY2ssIDEpO1xuICAgICAgICBibG9jay5tKG5vZGUsIG5leHQpO1xuICAgICAgICBsb29rdXAuc2V0KGJsb2NrLmtleSwgYmxvY2spO1xuICAgICAgICBuZXh0ID0gYmxvY2suZmlyc3Q7XG4gICAgICAgIG4tLTtcbiAgICB9XG4gICAgd2hpbGUgKG8gJiYgbikge1xuICAgICAgICBjb25zdCBuZXdfYmxvY2sgPSBuZXdfYmxvY2tzW24gLSAxXTtcbiAgICAgICAgY29uc3Qgb2xkX2Jsb2NrID0gb2xkX2Jsb2Nrc1tvIC0gMV07XG4gICAgICAgIGNvbnN0IG5ld19rZXkgPSBuZXdfYmxvY2sua2V5O1xuICAgICAgICBjb25zdCBvbGRfa2V5ID0gb2xkX2Jsb2NrLmtleTtcbiAgICAgICAgaWYgKG5ld19ibG9jayA9PT0gb2xkX2Jsb2NrKSB7XG4gICAgICAgICAgICAvLyBkbyBub3RoaW5nXG4gICAgICAgICAgICBuZXh0ID0gbmV3X2Jsb2NrLmZpcnN0O1xuICAgICAgICAgICAgby0tO1xuICAgICAgICAgICAgbi0tO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCFuZXdfbG9va3VwLmhhcyhvbGRfa2V5KSkge1xuICAgICAgICAgICAgLy8gcmVtb3ZlIG9sZCBibG9ja1xuICAgICAgICAgICAgZGVzdHJveShvbGRfYmxvY2ssIGxvb2t1cCk7XG4gICAgICAgICAgICBvLS07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIWxvb2t1cC5oYXMobmV3X2tleSkgfHwgd2lsbF9tb3ZlLmhhcyhuZXdfa2V5KSkge1xuICAgICAgICAgICAgaW5zZXJ0KG5ld19ibG9jayk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZGlkX21vdmUuaGFzKG9sZF9rZXkpKSB7XG4gICAgICAgICAgICBvLS07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZGVsdGFzLmdldChuZXdfa2V5KSA+IGRlbHRhcy5nZXQob2xkX2tleSkpIHtcbiAgICAgICAgICAgIGRpZF9tb3ZlLmFkZChuZXdfa2V5KTtcbiAgICAgICAgICAgIGluc2VydChuZXdfYmxvY2spO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgd2lsbF9tb3ZlLmFkZChvbGRfa2V5KTtcbiAgICAgICAgICAgIG8tLTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB3aGlsZSAoby0tKSB7XG4gICAgICAgIGNvbnN0IG9sZF9ibG9jayA9IG9sZF9ibG9ja3Nbb107XG4gICAgICAgIGlmICghbmV3X2xvb2t1cC5oYXMob2xkX2Jsb2NrLmtleSkpXG4gICAgICAgICAgICBkZXN0cm95KG9sZF9ibG9jaywgbG9va3VwKTtcbiAgICB9XG4gICAgd2hpbGUgKG4pXG4gICAgICAgIGluc2VydChuZXdfYmxvY2tzW24gLSAxXSk7XG4gICAgcmV0dXJuIG5ld19ibG9ja3M7XG59XG5mdW5jdGlvbiBtZWFzdXJlKGJsb2Nrcykge1xuICAgIGNvbnN0IHJlY3RzID0ge307XG4gICAgbGV0IGkgPSBibG9ja3MubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pXG4gICAgICAgIHJlY3RzW2Jsb2Nrc1tpXS5rZXldID0gYmxvY2tzW2ldLm5vZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgcmV0dXJuIHJlY3RzO1xufVxuXG5mdW5jdGlvbiBnZXRfc3ByZWFkX3VwZGF0ZShsZXZlbHMsIHVwZGF0ZXMpIHtcbiAgICBjb25zdCB1cGRhdGUgPSB7fTtcbiAgICBjb25zdCB0b19udWxsX291dCA9IHt9O1xuICAgIGNvbnN0IGFjY291bnRlZF9mb3IgPSB7ICQkc2NvcGU6IDEgfTtcbiAgICBsZXQgaSA9IGxldmVscy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgICBjb25zdCBvID0gbGV2ZWxzW2ldO1xuICAgICAgICBjb25zdCBuID0gdXBkYXRlc1tpXTtcbiAgICAgICAgaWYgKG4pIHtcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIG8pIHtcbiAgICAgICAgICAgICAgICBpZiAoIShrZXkgaW4gbikpXG4gICAgICAgICAgICAgICAgICAgIHRvX251bGxfb3V0W2tleV0gPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gbikge1xuICAgICAgICAgICAgICAgIGlmICghYWNjb3VudGVkX2ZvcltrZXldKSB7XG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZVtrZXldID0gbltrZXldO1xuICAgICAgICAgICAgICAgICAgICBhY2NvdW50ZWRfZm9yW2tleV0gPSAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldmVsc1tpXSA9IG47XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBvKSB7XG4gICAgICAgICAgICAgICAgYWNjb3VudGVkX2ZvcltrZXldID0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBmb3IgKGNvbnN0IGtleSBpbiB0b19udWxsX291dCkge1xuICAgICAgICBpZiAoIShrZXkgaW4gdXBkYXRlKSlcbiAgICAgICAgICAgIHVwZGF0ZVtrZXldID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICByZXR1cm4gdXBkYXRlO1xufVxuZnVuY3Rpb24gZ2V0X3NwcmVhZF9vYmplY3Qoc3ByZWFkX3Byb3BzKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBzcHJlYWRfcHJvcHMgPT09ICdvYmplY3QnICYmIHNwcmVhZF9wcm9wcyAhPT0gbnVsbCA/IHNwcmVhZF9wcm9wcyA6IHt9O1xufVxuXG4vLyBzb3VyY2U6IGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2luZGljZXMuaHRtbFxuY29uc3QgYm9vbGVhbl9hdHRyaWJ1dGVzID0gbmV3IFNldChbXG4gICAgJ2FsbG93ZnVsbHNjcmVlbicsXG4gICAgJ2FsbG93cGF5bWVudHJlcXVlc3QnLFxuICAgICdhc3luYycsXG4gICAgJ2F1dG9mb2N1cycsXG4gICAgJ2F1dG9wbGF5JyxcbiAgICAnY2hlY2tlZCcsXG4gICAgJ2NvbnRyb2xzJyxcbiAgICAnZGVmYXVsdCcsXG4gICAgJ2RlZmVyJyxcbiAgICAnZGlzYWJsZWQnLFxuICAgICdmb3Jtbm92YWxpZGF0ZScsXG4gICAgJ2hpZGRlbicsXG4gICAgJ2lzbWFwJyxcbiAgICAnbG9vcCcsXG4gICAgJ211bHRpcGxlJyxcbiAgICAnbXV0ZWQnLFxuICAgICdub21vZHVsZScsXG4gICAgJ25vdmFsaWRhdGUnLFxuICAgICdvcGVuJyxcbiAgICAncGxheXNpbmxpbmUnLFxuICAgICdyZWFkb25seScsXG4gICAgJ3JlcXVpcmVkJyxcbiAgICAncmV2ZXJzZWQnLFxuICAgICdzZWxlY3RlZCdcbl0pO1xuXG5jb25zdCBpbnZhbGlkX2F0dHJpYnV0ZV9uYW1lX2NoYXJhY3RlciA9IC9bXFxzJ1wiPi89XFx1e0ZERDB9LVxcdXtGREVGfVxcdXtGRkZFfVxcdXtGRkZGfVxcdXsxRkZGRX1cXHV7MUZGRkZ9XFx1ezJGRkZFfVxcdXsyRkZGRn1cXHV7M0ZGRkV9XFx1ezNGRkZGfVxcdXs0RkZGRX1cXHV7NEZGRkZ9XFx1ezVGRkZFfVxcdXs1RkZGRn1cXHV7NkZGRkV9XFx1ezZGRkZGfVxcdXs3RkZGRX1cXHV7N0ZGRkZ9XFx1ezhGRkZFfVxcdXs4RkZGRn1cXHV7OUZGRkV9XFx1ezlGRkZGfVxcdXtBRkZGRX1cXHV7QUZGRkZ9XFx1e0JGRkZFfVxcdXtCRkZGRn1cXHV7Q0ZGRkV9XFx1e0NGRkZGfVxcdXtERkZGRX1cXHV7REZGRkZ9XFx1e0VGRkZFfVxcdXtFRkZGRn1cXHV7RkZGRkV9XFx1e0ZGRkZGfVxcdXsxMEZGRkV9XFx1ezEwRkZGRn1dL3U7XG4vLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zeW50YXguaHRtbCNhdHRyaWJ1dGVzLTJcbi8vIGh0dHBzOi8vaW5mcmEuc3BlYy53aGF0d2cub3JnLyNub25jaGFyYWN0ZXJcbmZ1bmN0aW9uIHNwcmVhZChhcmdzLCBjbGFzc2VzX3RvX2FkZCkge1xuICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSBPYmplY3QuYXNzaWduKHt9LCAuLi5hcmdzKTtcbiAgICBpZiAoY2xhc3Nlc190b19hZGQpIHtcbiAgICAgICAgaWYgKGF0dHJpYnV0ZXMuY2xhc3MgPT0gbnVsbCkge1xuICAgICAgICAgICAgYXR0cmlidXRlcy5jbGFzcyA9IGNsYXNzZXNfdG9fYWRkO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgYXR0cmlidXRlcy5jbGFzcyArPSAnICcgKyBjbGFzc2VzX3RvX2FkZDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBsZXQgc3RyID0gJyc7XG4gICAgT2JqZWN0LmtleXMoYXR0cmlidXRlcykuZm9yRWFjaChuYW1lID0+IHtcbiAgICAgICAgaWYgKGludmFsaWRfYXR0cmlidXRlX25hbWVfY2hhcmFjdGVyLnRlc3QobmFtZSkpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGNvbnN0IHZhbHVlID0gYXR0cmlidXRlc1tuYW1lXTtcbiAgICAgICAgaWYgKHZhbHVlID09PSB0cnVlKVxuICAgICAgICAgICAgc3RyICs9IFwiIFwiICsgbmFtZTtcbiAgICAgICAgZWxzZSBpZiAoYm9vbGVhbl9hdHRyaWJ1dGVzLmhhcyhuYW1lLnRvTG93ZXJDYXNlKCkpKSB7XG4gICAgICAgICAgICBpZiAodmFsdWUpXG4gICAgICAgICAgICAgICAgc3RyICs9IFwiIFwiICsgbmFtZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgICAgICAgICBzdHIgKz0gYCAke25hbWV9PVwiJHtTdHJpbmcodmFsdWUpLnJlcGxhY2UoL1wiL2csICcmIzM0OycpLnJlcGxhY2UoLycvZywgJyYjMzk7Jyl9XCJgO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHN0cjtcbn1cbmNvbnN0IGVzY2FwZWQgPSB7XG4gICAgJ1wiJzogJyZxdW90OycsXG4gICAgXCInXCI6ICcmIzM5OycsXG4gICAgJyYnOiAnJmFtcDsnLFxuICAgICc8JzogJyZsdDsnLFxuICAgICc+JzogJyZndDsnXG59O1xuZnVuY3Rpb24gZXNjYXBlKGh0bWwpIHtcbiAgICByZXR1cm4gU3RyaW5nKGh0bWwpLnJlcGxhY2UoL1tcIicmPD5dL2csIG1hdGNoID0+IGVzY2FwZWRbbWF0Y2hdKTtcbn1cbmZ1bmN0aW9uIGVhY2goaXRlbXMsIGZuKSB7XG4gICAgbGV0IHN0ciA9ICcnO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaXRlbXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgc3RyICs9IGZuKGl0ZW1zW2ldLCBpKTtcbiAgICB9XG4gICAgcmV0dXJuIHN0cjtcbn1cbmNvbnN0IG1pc3NpbmdfY29tcG9uZW50ID0ge1xuICAgICQkcmVuZGVyOiAoKSA9PiAnJ1xufTtcbmZ1bmN0aW9uIHZhbGlkYXRlX2NvbXBvbmVudChjb21wb25lbnQsIG5hbWUpIHtcbiAgICBpZiAoIWNvbXBvbmVudCB8fCAhY29tcG9uZW50LiQkcmVuZGVyKSB7XG4gICAgICAgIGlmIChuYW1lID09PSAnc3ZlbHRlOmNvbXBvbmVudCcpXG4gICAgICAgICAgICBuYW1lICs9ICcgdGhpcz17Li4ufSc7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgPCR7bmFtZX0+IGlzIG5vdCBhIHZhbGlkIFNTUiBjb21wb25lbnQuIFlvdSBtYXkgbmVlZCB0byByZXZpZXcgeW91ciBidWlsZCBjb25maWcgdG8gZW5zdXJlIHRoYXQgZGVwZW5kZW5jaWVzIGFyZSBjb21waWxlZCwgcmF0aGVyIHRoYW4gaW1wb3J0ZWQgYXMgcHJlLWNvbXBpbGVkIG1vZHVsZXNgKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbXBvbmVudDtcbn1cbmZ1bmN0aW9uIGRlYnVnKGZpbGUsIGxpbmUsIGNvbHVtbiwgdmFsdWVzKSB7XG4gICAgY29uc29sZS5sb2coYHtAZGVidWd9ICR7ZmlsZSA/IGZpbGUgKyAnICcgOiAnJ30oJHtsaW5lfToke2NvbHVtbn0pYCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc29sZVxuICAgIGNvbnNvbGUubG9nKHZhbHVlcyk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc29sZVxuICAgIHJldHVybiAnJztcbn1cbmxldCBvbl9kZXN0cm95O1xuZnVuY3Rpb24gY3JlYXRlX3Nzcl9jb21wb25lbnQoZm4pIHtcbiAgICBmdW5jdGlvbiAkJHJlbmRlcihyZXN1bHQsIHByb3BzLCBiaW5kaW5ncywgc2xvdHMpIHtcbiAgICAgICAgY29uc3QgcGFyZW50X2NvbXBvbmVudCA9IGN1cnJlbnRfY29tcG9uZW50O1xuICAgICAgICBjb25zdCAkJCA9IHtcbiAgICAgICAgICAgIG9uX2Rlc3Ryb3ksXG4gICAgICAgICAgICBjb250ZXh0OiBuZXcgTWFwKHBhcmVudF9jb21wb25lbnQgPyBwYXJlbnRfY29tcG9uZW50LiQkLmNvbnRleHQgOiBbXSksXG4gICAgICAgICAgICAvLyB0aGVzZSB3aWxsIGJlIGltbWVkaWF0ZWx5IGRpc2NhcmRlZFxuICAgICAgICAgICAgb25fbW91bnQ6IFtdLFxuICAgICAgICAgICAgYmVmb3JlX3VwZGF0ZTogW10sXG4gICAgICAgICAgICBhZnRlcl91cGRhdGU6IFtdLFxuICAgICAgICAgICAgY2FsbGJhY2tzOiBibGFua19vYmplY3QoKVxuICAgICAgICB9O1xuICAgICAgICBzZXRfY3VycmVudF9jb21wb25lbnQoeyAkJCB9KTtcbiAgICAgICAgY29uc3QgaHRtbCA9IGZuKHJlc3VsdCwgcHJvcHMsIGJpbmRpbmdzLCBzbG90cyk7XG4gICAgICAgIHNldF9jdXJyZW50X2NvbXBvbmVudChwYXJlbnRfY29tcG9uZW50KTtcbiAgICAgICAgcmV0dXJuIGh0bWw7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHJlbmRlcjogKHByb3BzID0ge30sIG9wdGlvbnMgPSB7fSkgPT4ge1xuICAgICAgICAgICAgb25fZGVzdHJveSA9IFtdO1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0geyB0aXRsZTogJycsIGhlYWQ6ICcnLCBjc3M6IG5ldyBTZXQoKSB9O1xuICAgICAgICAgICAgY29uc3QgaHRtbCA9ICQkcmVuZGVyKHJlc3VsdCwgcHJvcHMsIHt9LCBvcHRpb25zKTtcbiAgICAgICAgICAgIHJ1bl9hbGwob25fZGVzdHJveSk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGh0bWwsXG4gICAgICAgICAgICAgICAgY3NzOiB7XG4gICAgICAgICAgICAgICAgICAgIGNvZGU6IEFycmF5LmZyb20ocmVzdWx0LmNzcykubWFwKGNzcyA9PiBjc3MuY29kZSkuam9pbignXFxuJyksXG4gICAgICAgICAgICAgICAgICAgIG1hcDogbnVsbCAvLyBUT0RPXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBoZWFkOiByZXN1bHQudGl0bGUgKyByZXN1bHQuaGVhZFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgJCRyZW5kZXJcbiAgICB9O1xufVxuZnVuY3Rpb24gYWRkX2F0dHJpYnV0ZShuYW1lLCB2YWx1ZSwgYm9vbGVhbikge1xuICAgIGlmICh2YWx1ZSA9PSBudWxsIHx8IChib29sZWFuICYmICF2YWx1ZSkpXG4gICAgICAgIHJldHVybiAnJztcbiAgICByZXR1cm4gYCAke25hbWV9JHt2YWx1ZSA9PT0gdHJ1ZSA/ICcnIDogYD0ke3R5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgPyBKU09OLnN0cmluZ2lmeShlc2NhcGUodmFsdWUpKSA6IGBcIiR7dmFsdWV9XCJgfWB9YDtcbn1cbmZ1bmN0aW9uIGFkZF9jbGFzc2VzKGNsYXNzZXMpIHtcbiAgICByZXR1cm4gY2xhc3NlcyA/IGAgY2xhc3M9XCIke2NsYXNzZXN9XCJgIDogYGA7XG59XG5cbmZ1bmN0aW9uIGJpbmQoY29tcG9uZW50LCBuYW1lLCBjYWxsYmFjaykge1xuICAgIGNvbnN0IGluZGV4ID0gY29tcG9uZW50LiQkLnByb3BzW25hbWVdO1xuICAgIGlmIChpbmRleCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbXBvbmVudC4kJC5ib3VuZFtpbmRleF0gPSBjYWxsYmFjaztcbiAgICAgICAgY2FsbGJhY2soY29tcG9uZW50LiQkLmN0eFtpbmRleF0pO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGNyZWF0ZV9jb21wb25lbnQoYmxvY2spIHtcbiAgICBibG9jayAmJiBibG9jay5jKCk7XG59XG5mdW5jdGlvbiBjbGFpbV9jb21wb25lbnQoYmxvY2ssIHBhcmVudF9ub2Rlcykge1xuICAgIGJsb2NrICYmIGJsb2NrLmwocGFyZW50X25vZGVzKTtcbn1cbmZ1bmN0aW9uIG1vdW50X2NvbXBvbmVudChjb21wb25lbnQsIHRhcmdldCwgYW5jaG9yKSB7XG4gICAgY29uc3QgeyBmcmFnbWVudCwgb25fbW91bnQsIG9uX2Rlc3Ryb3ksIGFmdGVyX3VwZGF0ZSB9ID0gY29tcG9uZW50LiQkO1xuICAgIGZyYWdtZW50ICYmIGZyYWdtZW50Lm0odGFyZ2V0LCBhbmNob3IpO1xuICAgIC8vIG9uTW91bnQgaGFwcGVucyBiZWZvcmUgdGhlIGluaXRpYWwgYWZ0ZXJVcGRhdGVcbiAgICBhZGRfcmVuZGVyX2NhbGxiYWNrKCgpID0+IHtcbiAgICAgICAgY29uc3QgbmV3X29uX2Rlc3Ryb3kgPSBvbl9tb3VudC5tYXAocnVuKS5maWx0ZXIoaXNfZnVuY3Rpb24pO1xuICAgICAgICBpZiAob25fZGVzdHJveSkge1xuICAgICAgICAgICAgb25fZGVzdHJveS5wdXNoKC4uLm5ld19vbl9kZXN0cm95KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIEVkZ2UgY2FzZSAtIGNvbXBvbmVudCB3YXMgZGVzdHJveWVkIGltbWVkaWF0ZWx5LFxuICAgICAgICAgICAgLy8gbW9zdCBsaWtlbHkgYXMgYSByZXN1bHQgb2YgYSBiaW5kaW5nIGluaXRpYWxpc2luZ1xuICAgICAgICAgICAgcnVuX2FsbChuZXdfb25fZGVzdHJveSk7XG4gICAgICAgIH1cbiAgICAgICAgY29tcG9uZW50LiQkLm9uX21vdW50ID0gW107XG4gICAgfSk7XG4gICAgYWZ0ZXJfdXBkYXRlLmZvckVhY2goYWRkX3JlbmRlcl9jYWxsYmFjayk7XG59XG5mdW5jdGlvbiBkZXN0cm95X2NvbXBvbmVudChjb21wb25lbnQsIGRldGFjaGluZykge1xuICAgIGNvbnN0ICQkID0gY29tcG9uZW50LiQkO1xuICAgIGlmICgkJC5mcmFnbWVudCAhPT0gbnVsbCkge1xuICAgICAgICBydW5fYWxsKCQkLm9uX2Rlc3Ryb3kpO1xuICAgICAgICAkJC5mcmFnbWVudCAmJiAkJC5mcmFnbWVudC5kKGRldGFjaGluZyk7XG4gICAgICAgIC8vIFRPRE8gbnVsbCBvdXQgb3RoZXIgcmVmcywgaW5jbHVkaW5nIGNvbXBvbmVudC4kJCAoYnV0IG5lZWQgdG9cbiAgICAgICAgLy8gcHJlc2VydmUgZmluYWwgc3RhdGU/KVxuICAgICAgICAkJC5vbl9kZXN0cm95ID0gJCQuZnJhZ21lbnQgPSBudWxsO1xuICAgICAgICAkJC5jdHggPSBbXTtcbiAgICB9XG59XG5mdW5jdGlvbiBtYWtlX2RpcnR5KGNvbXBvbmVudCwgaSkge1xuICAgIGlmIChjb21wb25lbnQuJCQuZGlydHlbMF0gPT09IC0xKSB7XG4gICAgICAgIGRpcnR5X2NvbXBvbmVudHMucHVzaChjb21wb25lbnQpO1xuICAgICAgICBzY2hlZHVsZV91cGRhdGUoKTtcbiAgICAgICAgY29tcG9uZW50LiQkLmRpcnR5LmZpbGwoMCk7XG4gICAgfVxuICAgIGNvbXBvbmVudC4kJC5kaXJ0eVsoaSAvIDMxKSB8IDBdIHw9ICgxIDw8IChpICUgMzEpKTtcbn1cbmZ1bmN0aW9uIGluaXQoY29tcG9uZW50LCBvcHRpb25zLCBpbnN0YW5jZSwgY3JlYXRlX2ZyYWdtZW50LCBub3RfZXF1YWwsIHByb3BzLCBkaXJ0eSA9IFstMV0pIHtcbiAgICBjb25zdCBwYXJlbnRfY29tcG9uZW50ID0gY3VycmVudF9jb21wb25lbnQ7XG4gICAgc2V0X2N1cnJlbnRfY29tcG9uZW50KGNvbXBvbmVudCk7XG4gICAgY29uc3QgcHJvcF92YWx1ZXMgPSBvcHRpb25zLnByb3BzIHx8IHt9O1xuICAgIGNvbnN0ICQkID0gY29tcG9uZW50LiQkID0ge1xuICAgICAgICBmcmFnbWVudDogbnVsbCxcbiAgICAgICAgY3R4OiBudWxsLFxuICAgICAgICAvLyBzdGF0ZVxuICAgICAgICBwcm9wcyxcbiAgICAgICAgdXBkYXRlOiBub29wLFxuICAgICAgICBub3RfZXF1YWwsXG4gICAgICAgIGJvdW5kOiBibGFua19vYmplY3QoKSxcbiAgICAgICAgLy8gbGlmZWN5Y2xlXG4gICAgICAgIG9uX21vdW50OiBbXSxcbiAgICAgICAgb25fZGVzdHJveTogW10sXG4gICAgICAgIGJlZm9yZV91cGRhdGU6IFtdLFxuICAgICAgICBhZnRlcl91cGRhdGU6IFtdLFxuICAgICAgICBjb250ZXh0OiBuZXcgTWFwKHBhcmVudF9jb21wb25lbnQgPyBwYXJlbnRfY29tcG9uZW50LiQkLmNvbnRleHQgOiBbXSksXG4gICAgICAgIC8vIGV2ZXJ5dGhpbmcgZWxzZVxuICAgICAgICBjYWxsYmFja3M6IGJsYW5rX29iamVjdCgpLFxuICAgICAgICBkaXJ0eVxuICAgIH07XG4gICAgbGV0IHJlYWR5ID0gZmFsc2U7XG4gICAgJCQuY3R4ID0gaW5zdGFuY2VcbiAgICAgICAgPyBpbnN0YW5jZShjb21wb25lbnQsIHByb3BfdmFsdWVzLCAoaSwgcmV0LCAuLi5yZXN0KSA9PiB7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHJlc3QubGVuZ3RoID8gcmVzdFswXSA6IHJldDtcbiAgICAgICAgICAgIGlmICgkJC5jdHggJiYgbm90X2VxdWFsKCQkLmN0eFtpXSwgJCQuY3R4W2ldID0gdmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgaWYgKCQkLmJvdW5kW2ldKVxuICAgICAgICAgICAgICAgICAgICAkJC5ib3VuZFtpXSh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgaWYgKHJlYWR5KVxuICAgICAgICAgICAgICAgICAgICBtYWtlX2RpcnR5KGNvbXBvbmVudCwgaSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgICB9KVxuICAgICAgICA6IFtdO1xuICAgICQkLnVwZGF0ZSgpO1xuICAgIHJlYWR5ID0gdHJ1ZTtcbiAgICBydW5fYWxsKCQkLmJlZm9yZV91cGRhdGUpO1xuICAgIC8vIGBmYWxzZWAgYXMgYSBzcGVjaWFsIGNhc2Ugb2Ygbm8gRE9NIGNvbXBvbmVudFxuICAgICQkLmZyYWdtZW50ID0gY3JlYXRlX2ZyYWdtZW50ID8gY3JlYXRlX2ZyYWdtZW50KCQkLmN0eCkgOiBmYWxzZTtcbiAgICBpZiAob3B0aW9ucy50YXJnZXQpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMuaHlkcmF0ZSkge1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1ub24tbnVsbC1hc3NlcnRpb25cbiAgICAgICAgICAgICQkLmZyYWdtZW50ICYmICQkLmZyYWdtZW50LmwoY2hpbGRyZW4ob3B0aW9ucy50YXJnZXQpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbm9uLW51bGwtYXNzZXJ0aW9uXG4gICAgICAgICAgICAkJC5mcmFnbWVudCAmJiAkJC5mcmFnbWVudC5jKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMuaW50cm8pXG4gICAgICAgICAgICB0cmFuc2l0aW9uX2luKGNvbXBvbmVudC4kJC5mcmFnbWVudCk7XG4gICAgICAgIG1vdW50X2NvbXBvbmVudChjb21wb25lbnQsIG9wdGlvbnMudGFyZ2V0LCBvcHRpb25zLmFuY2hvcik7XG4gICAgICAgIGZsdXNoKCk7XG4gICAgfVxuICAgIHNldF9jdXJyZW50X2NvbXBvbmVudChwYXJlbnRfY29tcG9uZW50KTtcbn1cbmxldCBTdmVsdGVFbGVtZW50O1xuaWYgKHR5cGVvZiBIVE1MRWxlbWVudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIFN2ZWx0ZUVsZW1lbnQgPSBjbGFzcyBleHRlbmRzIEhUTUxFbGVtZW50IHtcbiAgICAgICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgICAgICBzdXBlcigpO1xuICAgICAgICAgICAgdGhpcy5hdHRhY2hTaGFkb3coeyBtb2RlOiAnb3BlbicgfSk7XG4gICAgICAgIH1cbiAgICAgICAgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlIHRvZG86IGltcHJvdmUgdHlwaW5nc1xuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gdGhpcy4kJC5zbG90dGVkKSB7XG4gICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZSB0b2RvOiBpbXByb3ZlIHR5cGluZ3NcbiAgICAgICAgICAgICAgICB0aGlzLmFwcGVuZENoaWxkKHRoaXMuJCQuc2xvdHRlZFtrZXldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2soYXR0ciwgX29sZFZhbHVlLCBuZXdWYWx1ZSkge1xuICAgICAgICAgICAgdGhpc1thdHRyXSA9IG5ld1ZhbHVlO1xuICAgICAgICB9XG4gICAgICAgICRkZXN0cm95KCkge1xuICAgICAgICAgICAgZGVzdHJveV9jb21wb25lbnQodGhpcywgMSk7XG4gICAgICAgICAgICB0aGlzLiRkZXN0cm95ID0gbm9vcDtcbiAgICAgICAgfVxuICAgICAgICAkb24odHlwZSwgY2FsbGJhY2spIHtcbiAgICAgICAgICAgIC8vIFRPRE8gc2hvdWxkIHRoaXMgZGVsZWdhdGUgdG8gYWRkRXZlbnRMaXN0ZW5lcj9cbiAgICAgICAgICAgIGNvbnN0IGNhbGxiYWNrcyA9ICh0aGlzLiQkLmNhbGxiYWNrc1t0eXBlXSB8fCAodGhpcy4kJC5jYWxsYmFja3NbdHlwZV0gPSBbXSkpO1xuICAgICAgICAgICAgY2FsbGJhY2tzLnB1c2goY2FsbGJhY2spO1xuICAgICAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBpbmRleCA9IGNhbGxiYWNrcy5pbmRleE9mKGNhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICBpZiAoaW5kZXggIT09IC0xKVxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFja3Muc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgJHNldCgpIHtcbiAgICAgICAgICAgIC8vIG92ZXJyaWRkZW4gYnkgaW5zdGFuY2UsIGlmIGl0IGhhcyBwcm9wc1xuICAgICAgICB9XG4gICAgfTtcbn1cbmNsYXNzIFN2ZWx0ZUNvbXBvbmVudCB7XG4gICAgJGRlc3Ryb3koKSB7XG4gICAgICAgIGRlc3Ryb3lfY29tcG9uZW50KHRoaXMsIDEpO1xuICAgICAgICB0aGlzLiRkZXN0cm95ID0gbm9vcDtcbiAgICB9XG4gICAgJG9uKHR5cGUsIGNhbGxiYWNrKSB7XG4gICAgICAgIGNvbnN0IGNhbGxiYWNrcyA9ICh0aGlzLiQkLmNhbGxiYWNrc1t0eXBlXSB8fCAodGhpcy4kJC5jYWxsYmFja3NbdHlwZV0gPSBbXSkpO1xuICAgICAgICBjYWxsYmFja3MucHVzaChjYWxsYmFjayk7XG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBpbmRleCA9IGNhbGxiYWNrcy5pbmRleE9mKGNhbGxiYWNrKTtcbiAgICAgICAgICAgIGlmIChpbmRleCAhPT0gLTEpXG4gICAgICAgICAgICAgICAgY2FsbGJhY2tzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIH07XG4gICAgfVxuICAgICRzZXQoKSB7XG4gICAgICAgIC8vIG92ZXJyaWRkZW4gYnkgaW5zdGFuY2UsIGlmIGl0IGhhcyBwcm9wc1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZGlzcGF0Y2hfZGV2KHR5cGUsIGRldGFpbCkge1xuICAgIGRvY3VtZW50LmRpc3BhdGNoRXZlbnQoY3VzdG9tX2V2ZW50KHR5cGUsIE9iamVjdC5hc3NpZ24oeyB2ZXJzaW9uOiAnMy4xNy4xJyB9LCBkZXRhaWwpKSk7XG59XG5mdW5jdGlvbiBhcHBlbmRfZGV2KHRhcmdldCwgbm9kZSkge1xuICAgIGRpc3BhdGNoX2RldihcIlN2ZWx0ZURPTUluc2VydFwiLCB7IHRhcmdldCwgbm9kZSB9KTtcbiAgICBhcHBlbmQodGFyZ2V0LCBub2RlKTtcbn1cbmZ1bmN0aW9uIGluc2VydF9kZXYodGFyZ2V0LCBub2RlLCBhbmNob3IpIHtcbiAgICBkaXNwYXRjaF9kZXYoXCJTdmVsdGVET01JbnNlcnRcIiwgeyB0YXJnZXQsIG5vZGUsIGFuY2hvciB9KTtcbiAgICBpbnNlcnQodGFyZ2V0LCBub2RlLCBhbmNob3IpO1xufVxuZnVuY3Rpb24gZGV0YWNoX2Rldihub2RlKSB7XG4gICAgZGlzcGF0Y2hfZGV2KFwiU3ZlbHRlRE9NUmVtb3ZlXCIsIHsgbm9kZSB9KTtcbiAgICBkZXRhY2gobm9kZSk7XG59XG5mdW5jdGlvbiBkZXRhY2hfYmV0d2Vlbl9kZXYoYmVmb3JlLCBhZnRlcikge1xuICAgIHdoaWxlIChiZWZvcmUubmV4dFNpYmxpbmcgJiYgYmVmb3JlLm5leHRTaWJsaW5nICE9PSBhZnRlcikge1xuICAgICAgICBkZXRhY2hfZGV2KGJlZm9yZS5uZXh0U2libGluZyk7XG4gICAgfVxufVxuZnVuY3Rpb24gZGV0YWNoX2JlZm9yZV9kZXYoYWZ0ZXIpIHtcbiAgICB3aGlsZSAoYWZ0ZXIucHJldmlvdXNTaWJsaW5nKSB7XG4gICAgICAgIGRldGFjaF9kZXYoYWZ0ZXIucHJldmlvdXNTaWJsaW5nKTtcbiAgICB9XG59XG5mdW5jdGlvbiBkZXRhY2hfYWZ0ZXJfZGV2KGJlZm9yZSkge1xuICAgIHdoaWxlIChiZWZvcmUubmV4dFNpYmxpbmcpIHtcbiAgICAgICAgZGV0YWNoX2RldihiZWZvcmUubmV4dFNpYmxpbmcpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGxpc3Rlbl9kZXYobm9kZSwgZXZlbnQsIGhhbmRsZXIsIG9wdGlvbnMsIGhhc19wcmV2ZW50X2RlZmF1bHQsIGhhc19zdG9wX3Byb3BhZ2F0aW9uKSB7XG4gICAgY29uc3QgbW9kaWZpZXJzID0gb3B0aW9ucyA9PT0gdHJ1ZSA/IFtcImNhcHR1cmVcIl0gOiBvcHRpb25zID8gQXJyYXkuZnJvbShPYmplY3Qua2V5cyhvcHRpb25zKSkgOiBbXTtcbiAgICBpZiAoaGFzX3ByZXZlbnRfZGVmYXVsdClcbiAgICAgICAgbW9kaWZpZXJzLnB1c2goJ3ByZXZlbnREZWZhdWx0Jyk7XG4gICAgaWYgKGhhc19zdG9wX3Byb3BhZ2F0aW9uKVxuICAgICAgICBtb2RpZmllcnMucHVzaCgnc3RvcFByb3BhZ2F0aW9uJyk7XG4gICAgZGlzcGF0Y2hfZGV2KFwiU3ZlbHRlRE9NQWRkRXZlbnRMaXN0ZW5lclwiLCB7IG5vZGUsIGV2ZW50LCBoYW5kbGVyLCBtb2RpZmllcnMgfSk7XG4gICAgY29uc3QgZGlzcG9zZSA9IGxpc3Rlbihub2RlLCBldmVudCwgaGFuZGxlciwgb3B0aW9ucyk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgZGlzcGF0Y2hfZGV2KFwiU3ZlbHRlRE9NUmVtb3ZlRXZlbnRMaXN0ZW5lclwiLCB7IG5vZGUsIGV2ZW50LCBoYW5kbGVyLCBtb2RpZmllcnMgfSk7XG4gICAgICAgIGRpc3Bvc2UoKTtcbiAgICB9O1xufVxuZnVuY3Rpb24gYXR0cl9kZXYobm9kZSwgYXR0cmlidXRlLCB2YWx1ZSkge1xuICAgIGF0dHIobm9kZSwgYXR0cmlidXRlLCB2YWx1ZSk7XG4gICAgaWYgKHZhbHVlID09IG51bGwpXG4gICAgICAgIGRpc3BhdGNoX2RldihcIlN2ZWx0ZURPTVJlbW92ZUF0dHJpYnV0ZVwiLCB7IG5vZGUsIGF0dHJpYnV0ZSB9KTtcbiAgICBlbHNlXG4gICAgICAgIGRpc3BhdGNoX2RldihcIlN2ZWx0ZURPTVNldEF0dHJpYnV0ZVwiLCB7IG5vZGUsIGF0dHJpYnV0ZSwgdmFsdWUgfSk7XG59XG5mdW5jdGlvbiBwcm9wX2Rldihub2RlLCBwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgICBub2RlW3Byb3BlcnR5XSA9IHZhbHVlO1xuICAgIGRpc3BhdGNoX2RldihcIlN2ZWx0ZURPTVNldFByb3BlcnR5XCIsIHsgbm9kZSwgcHJvcGVydHksIHZhbHVlIH0pO1xufVxuZnVuY3Rpb24gZGF0YXNldF9kZXYobm9kZSwgcHJvcGVydHksIHZhbHVlKSB7XG4gICAgbm9kZS5kYXRhc2V0W3Byb3BlcnR5XSA9IHZhbHVlO1xuICAgIGRpc3BhdGNoX2RldihcIlN2ZWx0ZURPTVNldERhdGFzZXRcIiwgeyBub2RlLCBwcm9wZXJ0eSwgdmFsdWUgfSk7XG59XG5mdW5jdGlvbiBzZXRfZGF0YV9kZXYodGV4dCwgZGF0YSkge1xuICAgIGRhdGEgPSAnJyArIGRhdGE7XG4gICAgaWYgKHRleHQuZGF0YSA9PT0gZGF0YSlcbiAgICAgICAgcmV0dXJuO1xuICAgIGRpc3BhdGNoX2RldihcIlN2ZWx0ZURPTVNldERhdGFcIiwgeyBub2RlOiB0ZXh0LCBkYXRhIH0pO1xuICAgIHRleHQuZGF0YSA9IGRhdGE7XG59XG5jbGFzcyBTdmVsdGVDb21wb25lbnREZXYgZXh0ZW5kcyBTdmVsdGVDb21wb25lbnQge1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKCFvcHRpb25zIHx8ICghb3B0aW9ucy50YXJnZXQgJiYgIW9wdGlvbnMuJCRpbmxpbmUpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCd0YXJnZXQnIGlzIGEgcmVxdWlyZWQgb3B0aW9uYCk7XG4gICAgICAgIH1cbiAgICAgICAgc3VwZXIoKTtcbiAgICB9XG4gICAgJGRlc3Ryb3koKSB7XG4gICAgICAgIHN1cGVyLiRkZXN0cm95KCk7XG4gICAgICAgIHRoaXMuJGRlc3Ryb3kgPSAoKSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oYENvbXBvbmVudCB3YXMgYWxyZWFkeSBkZXN0cm95ZWRgKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlXG4gICAgICAgIH07XG4gICAgfVxufVxuZnVuY3Rpb24gbG9vcF9ndWFyZCh0aW1lb3V0KSB7XG4gICAgY29uc3Qgc3RhcnQgPSBEYXRlLm5vdygpO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIGlmIChEYXRlLm5vdygpIC0gc3RhcnQgPiB0aW1lb3V0KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEluZmluaXRlIGxvb3AgZGV0ZWN0ZWRgKTtcbiAgICAgICAgfVxuICAgIH07XG59XG5cbmV4cG9ydCB7IEh0bWxUYWcsIFN2ZWx0ZUNvbXBvbmVudCwgU3ZlbHRlQ29tcG9uZW50RGV2LCBTdmVsdGVFbGVtZW50LCBhY3Rpb25fZGVzdHJveWVyLCBhZGRfYXR0cmlidXRlLCBhZGRfY2xhc3NlcywgYWRkX2ZsdXNoX2NhbGxiYWNrLCBhZGRfbG9jYXRpb24sIGFkZF9yZW5kZXJfY2FsbGJhY2ssIGFkZF9yZXNpemVfbGlzdGVuZXIsIGFkZF90cmFuc2Zvcm0sIGFmdGVyVXBkYXRlLCBhcHBlbmQsIGFwcGVuZF9kZXYsIGFzc2lnbiwgYXR0ciwgYXR0cl9kZXYsIGJlZm9yZVVwZGF0ZSwgYmluZCwgYmluZGluZ19jYWxsYmFja3MsIGJsYW5rX29iamVjdCwgYnViYmxlLCBjaGVja19vdXRyb3MsIGNoaWxkcmVuLCBjbGFpbV9jb21wb25lbnQsIGNsYWltX2VsZW1lbnQsIGNsYWltX3NwYWNlLCBjbGFpbV90ZXh0LCBjbGVhcl9sb29wcywgY29tcG9uZW50X3N1YnNjcmliZSwgY3JlYXRlRXZlbnREaXNwYXRjaGVyLCBjcmVhdGVfYW5pbWF0aW9uLCBjcmVhdGVfYmlkaXJlY3Rpb25hbF90cmFuc2l0aW9uLCBjcmVhdGVfY29tcG9uZW50LCBjcmVhdGVfaW5fdHJhbnNpdGlvbiwgY3JlYXRlX291dF90cmFuc2l0aW9uLCBjcmVhdGVfc2xvdCwgY3JlYXRlX3Nzcl9jb21wb25lbnQsIGN1cnJlbnRfY29tcG9uZW50LCBjdXN0b21fZXZlbnQsIGRhdGFzZXRfZGV2LCBkZWJ1ZywgZGVzdHJveV9ibG9jaywgZGVzdHJveV9jb21wb25lbnQsIGRlc3Ryb3lfZWFjaCwgZGV0YWNoLCBkZXRhY2hfYWZ0ZXJfZGV2LCBkZXRhY2hfYmVmb3JlX2RldiwgZGV0YWNoX2JldHdlZW5fZGV2LCBkZXRhY2hfZGV2LCBkaXJ0eV9jb21wb25lbnRzLCBkaXNwYXRjaF9kZXYsIGVhY2gsIGVsZW1lbnQsIGVsZW1lbnRfaXMsIGVtcHR5LCBlc2NhcGUsIGVzY2FwZWQsIGV4Y2x1ZGVfaW50ZXJuYWxfcHJvcHMsIGZpeF9hbmRfZGVzdHJveV9ibG9jaywgZml4X2FuZF9vdXRyb19hbmRfZGVzdHJveV9ibG9jaywgZml4X3Bvc2l0aW9uLCBmbHVzaCwgZ2V0Q29udGV4dCwgZ2V0X2JpbmRpbmdfZ3JvdXBfdmFsdWUsIGdldF9jdXJyZW50X2NvbXBvbmVudCwgZ2V0X3Nsb3RfY2hhbmdlcywgZ2V0X3Nsb3RfY29udGV4dCwgZ2V0X3NwcmVhZF9vYmplY3QsIGdldF9zcHJlYWRfdXBkYXRlLCBnZXRfc3RvcmVfdmFsdWUsIGdsb2JhbHMsIGdyb3VwX291dHJvcywgaGFuZGxlX3Byb21pc2UsIGhhc19wcm9wLCBpZGVudGl0eSwgaW5pdCwgaW5zZXJ0LCBpbnNlcnRfZGV2LCBpbnRyb3MsIGludmFsaWRfYXR0cmlidXRlX25hbWVfY2hhcmFjdGVyLCBpc19jbGllbnQsIGlzX2Z1bmN0aW9uLCBpc19wcm9taXNlLCBsaXN0ZW4sIGxpc3Rlbl9kZXYsIGxvb3AsIGxvb3BfZ3VhcmQsIG1lYXN1cmUsIG1pc3NpbmdfY29tcG9uZW50LCBtb3VudF9jb21wb25lbnQsIG5vb3AsIG5vdF9lcXVhbCwgbm93LCBudWxsX3RvX2VtcHR5LCBvYmplY3Rfd2l0aG91dF9wcm9wZXJ0aWVzLCBvbkRlc3Ryb3ksIG9uTW91bnQsIG9uY2UsIG91dHJvX2FuZF9kZXN0cm95X2Jsb2NrLCBwcmV2ZW50X2RlZmF1bHQsIHByb3BfZGV2LCBxdWVyeV9zZWxlY3Rvcl9hbGwsIHJhZiwgcnVuLCBydW5fYWxsLCBzYWZlX25vdF9lcXVhbCwgc2NoZWR1bGVfdXBkYXRlLCBzZWxlY3RfbXVsdGlwbGVfdmFsdWUsIHNlbGVjdF9vcHRpb24sIHNlbGVjdF9vcHRpb25zLCBzZWxlY3RfdmFsdWUsIHNlbGYsIHNldENvbnRleHQsIHNldF9hdHRyaWJ1dGVzLCBzZXRfY3VycmVudF9jb21wb25lbnQsIHNldF9jdXN0b21fZWxlbWVudF9kYXRhLCBzZXRfZGF0YSwgc2V0X2RhdGFfZGV2LCBzZXRfaW5wdXRfdHlwZSwgc2V0X2lucHV0X3ZhbHVlLCBzZXRfbm93LCBzZXRfcmFmLCBzZXRfc3RvcmVfdmFsdWUsIHNldF9zdHlsZSwgc2V0X3N2Z19hdHRyaWJ1dGVzLCBzcGFjZSwgc3ByZWFkLCBzdG9wX3Byb3BhZ2F0aW9uLCBzdWJzY3JpYmUsIHN2Z19lbGVtZW50LCB0ZXh0LCB0aWNrLCB0aW1lX3Jhbmdlc190b19hcnJheSwgdG9fbnVtYmVyLCB0b2dnbGVfY2xhc3MsIHRyYW5zaXRpb25faW4sIHRyYW5zaXRpb25fb3V0LCB1cGRhdGVfa2V5ZWRfZWFjaCwgdmFsaWRhdGVfY29tcG9uZW50LCB2YWxpZGF0ZV9zdG9yZSwgeGxpbmtfYXR0ciB9O1xuIiwiaW1wb3J0IGlzQXJyYXkgZnJvbSAnaXMtYW55LWFycmF5JztcblxuLyoqXG4gKiBDb21wdXRlcyB0aGUgbWF4aW11bSBvZiB0aGUgZ2l2ZW4gdmFsdWVzXG4gKiBAcGFyYW0ge0FycmF5PG51bWJlcj59IGlucHV0XG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cblxuZnVuY3Rpb24gbWF4KGlucHV0KSB7XG4gIGlmICghaXNBcnJheShpbnB1dCkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnB1dCBtdXN0IGJlIGFuIGFycmF5Jyk7XG4gIH1cblxuICBpZiAoaW5wdXQubGVuZ3RoID09PSAwKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignaW5wdXQgbXVzdCBub3QgYmUgZW1wdHknKTtcbiAgfVxuXG4gIHZhciBtYXhWYWx1ZSA9IGlucHV0WzBdO1xuXG4gIGZvciAodmFyIGkgPSAxOyBpIDwgaW5wdXQubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoaW5wdXRbaV0gPiBtYXhWYWx1ZSkgbWF4VmFsdWUgPSBpbnB1dFtpXTtcbiAgfVxuXG4gIHJldHVybiBtYXhWYWx1ZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbWF4O1xuIiwiaW1wb3J0IGlzQXJyYXkgZnJvbSAnaXMtYW55LWFycmF5JztcblxuLyoqXG4gKiBDb21wdXRlcyB0aGUgbWluaW11bSBvZiB0aGUgZ2l2ZW4gdmFsdWVzXG4gKiBAcGFyYW0ge0FycmF5PG51bWJlcj59IGlucHV0XG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cblxuZnVuY3Rpb24gbWluKGlucHV0KSB7XG4gIGlmICghaXNBcnJheShpbnB1dCkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnB1dCBtdXN0IGJlIGFuIGFycmF5Jyk7XG4gIH1cblxuICBpZiAoaW5wdXQubGVuZ3RoID09PSAwKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignaW5wdXQgbXVzdCBub3QgYmUgZW1wdHknKTtcbiAgfVxuXG4gIHZhciBtaW5WYWx1ZSA9IGlucHV0WzBdO1xuXG4gIGZvciAodmFyIGkgPSAxOyBpIDwgaW5wdXQubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoaW5wdXRbaV0gPCBtaW5WYWx1ZSkgbWluVmFsdWUgPSBpbnB1dFtpXTtcbiAgfVxuXG4gIHJldHVybiBtaW5WYWx1ZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbWluO1xuIiwiaW1wb3J0IG1heCBmcm9tICdtbC1hcnJheS1tYXgnO1xuaW1wb3J0IG1pbiBmcm9tICdtbC1hcnJheS1taW4nO1xuaW1wb3J0IGlzQXJyYXkgZnJvbSAnaXMtYW55LWFycmF5JztcblxuZnVuY3Rpb24gcmVzY2FsZShpbnB1dCkge1xuICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG5cbiAgaWYgKCFpc0FycmF5KGlucHV0KSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2lucHV0IG11c3QgYmUgYW4gYXJyYXknKTtcbiAgfSBlbHNlIGlmIChpbnB1dC5sZW5ndGggPT09IDApIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnB1dCBtdXN0IG5vdCBiZSBlbXB0eScpO1xuICB9XG5cbiAgdmFyIG91dHB1dDtcblxuICBpZiAob3B0aW9ucy5vdXRwdXQgIT09IHVuZGVmaW5lZCkge1xuICAgIGlmICghaXNBcnJheShvcHRpb25zLm91dHB1dCkpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ291dHB1dCBvcHRpb24gbXVzdCBiZSBhbiBhcnJheSBpZiBzcGVjaWZpZWQnKTtcbiAgICB9XG5cbiAgICBvdXRwdXQgPSBvcHRpb25zLm91dHB1dDtcbiAgfSBlbHNlIHtcbiAgICBvdXRwdXQgPSBuZXcgQXJyYXkoaW5wdXQubGVuZ3RoKTtcbiAgfVxuXG4gIHZhciBjdXJyZW50TWluID0gbWluKGlucHV0KTtcbiAgdmFyIGN1cnJlbnRNYXggPSBtYXgoaW5wdXQpO1xuXG4gIGlmIChjdXJyZW50TWluID09PSBjdXJyZW50TWF4KSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ21pbmltdW0gYW5kIG1heGltdW0gaW5wdXQgdmFsdWVzIGFyZSBlcXVhbC4gQ2Fubm90IHJlc2NhbGUgYSBjb25zdGFudCBhcnJheScpO1xuICB9XG5cbiAgdmFyIF9vcHRpb25zJG1pbiA9IG9wdGlvbnMubWluLFxuICAgICAgbWluVmFsdWUgPSBfb3B0aW9ucyRtaW4gPT09IHZvaWQgMCA/IG9wdGlvbnMuYXV0b01pbk1heCA/IGN1cnJlbnRNaW4gOiAwIDogX29wdGlvbnMkbWluLFxuICAgICAgX29wdGlvbnMkbWF4ID0gb3B0aW9ucy5tYXgsXG4gICAgICBtYXhWYWx1ZSA9IF9vcHRpb25zJG1heCA9PT0gdm9pZCAwID8gb3B0aW9ucy5hdXRvTWluTWF4ID8gY3VycmVudE1heCA6IDEgOiBfb3B0aW9ucyRtYXg7XG5cbiAgaWYgKG1pblZhbHVlID49IG1heFZhbHVlKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ21pbiBvcHRpb24gbXVzdCBiZSBzbWFsbGVyIHRoYW4gbWF4IG9wdGlvbicpO1xuICB9XG5cbiAgdmFyIGZhY3RvciA9IChtYXhWYWx1ZSAtIG1pblZhbHVlKSAvIChjdXJyZW50TWF4IC0gY3VycmVudE1pbik7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBpbnB1dC5sZW5ndGg7IGkrKykge1xuICAgIG91dHB1dFtpXSA9IChpbnB1dFtpXSAtIGN1cnJlbnRNaW4pICogZmFjdG9yICsgbWluVmFsdWU7XG4gIH1cblxuICByZXR1cm4gb3V0cHV0O1xufVxuXG5leHBvcnQgZGVmYXVsdCByZXNjYWxlO1xuIiwiLyoqXG4gKiBAcHJpdmF0ZVxuICogQ2hlY2sgdGhhdCBhIHJvdyBpbmRleCBpcyBub3Qgb3V0IG9mIGJvdW5kc1xuICogQHBhcmFtIHtNYXRyaXh9IG1hdHJpeFxuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4XG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvdXRlcl1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrUm93SW5kZXgobWF0cml4LCBpbmRleCwgb3V0ZXIpIHtcbiAgbGV0IG1heCA9IG91dGVyID8gbWF0cml4LnJvd3MgOiBtYXRyaXgucm93cyAtIDE7XG4gIGlmIChpbmRleCA8IDAgfHwgaW5kZXggPiBtYXgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignUm93IGluZGV4IG91dCBvZiByYW5nZScpO1xuICB9XG59XG5cbi8qKlxuICogQHByaXZhdGVcbiAqIENoZWNrIHRoYXQgYSBjb2x1bW4gaW5kZXggaXMgbm90IG91dCBvZiBib3VuZHNcbiAqIEBwYXJhbSB7TWF0cml4fSBtYXRyaXhcbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleFxuICogQHBhcmFtIHtib29sZWFufSBbb3V0ZXJdXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjaGVja0NvbHVtbkluZGV4KG1hdHJpeCwgaW5kZXgsIG91dGVyKSB7XG4gIGxldCBtYXggPSBvdXRlciA/IG1hdHJpeC5jb2x1bW5zIDogbWF0cml4LmNvbHVtbnMgLSAxO1xuICBpZiAoaW5kZXggPCAwIHx8IGluZGV4ID4gbWF4KSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0NvbHVtbiBpbmRleCBvdXQgb2YgcmFuZ2UnKTtcbiAgfVxufVxuXG4vKipcbiAqIEBwcml2YXRlXG4gKiBDaGVjayB0aGF0IHRoZSBwcm92aWRlZCB2ZWN0b3IgaXMgYW4gYXJyYXkgd2l0aCB0aGUgcmlnaHQgbGVuZ3RoXG4gKiBAcGFyYW0ge01hdHJpeH0gbWF0cml4XG4gKiBAcGFyYW0ge0FycmF5fE1hdHJpeH0gdmVjdG9yXG4gKiBAcmV0dXJuIHtBcnJheX1cbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjaGVja1Jvd1ZlY3RvcihtYXRyaXgsIHZlY3Rvcikge1xuICBpZiAodmVjdG9yLnRvMURBcnJheSkge1xuICAgIHZlY3RvciA9IHZlY3Rvci50bzFEQXJyYXkoKTtcbiAgfVxuICBpZiAodmVjdG9yLmxlbmd0aCAhPT0gbWF0cml4LmNvbHVtbnMpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcbiAgICAgICd2ZWN0b3Igc2l6ZSBtdXN0IGJlIHRoZSBzYW1lIGFzIHRoZSBudW1iZXIgb2YgY29sdW1ucycsXG4gICAgKTtcbiAgfVxuICByZXR1cm4gdmVjdG9yO1xufVxuXG4vKipcbiAqIEBwcml2YXRlXG4gKiBDaGVjayB0aGF0IHRoZSBwcm92aWRlZCB2ZWN0b3IgaXMgYW4gYXJyYXkgd2l0aCB0aGUgcmlnaHQgbGVuZ3RoXG4gKiBAcGFyYW0ge01hdHJpeH0gbWF0cml4XG4gKiBAcGFyYW0ge0FycmF5fE1hdHJpeH0gdmVjdG9yXG4gKiBAcmV0dXJuIHtBcnJheX1cbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjaGVja0NvbHVtblZlY3RvcihtYXRyaXgsIHZlY3Rvcikge1xuICBpZiAodmVjdG9yLnRvMURBcnJheSkge1xuICAgIHZlY3RvciA9IHZlY3Rvci50bzFEQXJyYXkoKTtcbiAgfVxuICBpZiAodmVjdG9yLmxlbmd0aCAhPT0gbWF0cml4LnJvd3MpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcigndmVjdG9yIHNpemUgbXVzdCBiZSB0aGUgc2FtZSBhcyB0aGUgbnVtYmVyIG9mIHJvd3MnKTtcbiAgfVxuICByZXR1cm4gdmVjdG9yO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2hlY2tJbmRpY2VzKG1hdHJpeCwgcm93SW5kaWNlcywgY29sdW1uSW5kaWNlcykge1xuICByZXR1cm4ge1xuICAgIHJvdzogY2hlY2tSb3dJbmRpY2VzKG1hdHJpeCwgcm93SW5kaWNlcyksXG4gICAgY29sdW1uOiBjaGVja0NvbHVtbkluZGljZXMobWF0cml4LCBjb2x1bW5JbmRpY2VzKSxcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrUm93SW5kaWNlcyhtYXRyaXgsIHJvd0luZGljZXMpIHtcbiAgaWYgKHR5cGVvZiByb3dJbmRpY2VzICE9PSAnb2JqZWN0Jykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3VuZXhwZWN0ZWQgdHlwZSBmb3Igcm93IGluZGljZXMnKTtcbiAgfVxuXG4gIGxldCByb3dPdXQgPSByb3dJbmRpY2VzLnNvbWUoKHIpID0+IHtcbiAgICByZXR1cm4gciA8IDAgfHwgciA+PSBtYXRyaXgucm93cztcbiAgfSk7XG5cbiAgaWYgKHJvd091dCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdyb3cgaW5kaWNlcyBhcmUgb3V0IG9mIHJhbmdlJyk7XG4gIH1cblxuICBpZiAoIUFycmF5LmlzQXJyYXkocm93SW5kaWNlcykpIHJvd0luZGljZXMgPSBBcnJheS5mcm9tKHJvd0luZGljZXMpO1xuXG4gIHJldHVybiByb3dJbmRpY2VzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2hlY2tDb2x1bW5JbmRpY2VzKG1hdHJpeCwgY29sdW1uSW5kaWNlcykge1xuICBpZiAodHlwZW9mIGNvbHVtbkluZGljZXMgIT09ICdvYmplY3QnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcigndW5leHBlY3RlZCB0eXBlIGZvciBjb2x1bW4gaW5kaWNlcycpO1xuICB9XG5cbiAgbGV0IGNvbHVtbk91dCA9IGNvbHVtbkluZGljZXMuc29tZSgoYykgPT4ge1xuICAgIHJldHVybiBjIDwgMCB8fCBjID49IG1hdHJpeC5jb2x1bW5zO1xuICB9KTtcblxuICBpZiAoY29sdW1uT3V0KSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ2NvbHVtbiBpbmRpY2VzIGFyZSBvdXQgb2YgcmFuZ2UnKTtcbiAgfVxuICBpZiAoIUFycmF5LmlzQXJyYXkoY29sdW1uSW5kaWNlcykpIGNvbHVtbkluZGljZXMgPSBBcnJheS5mcm9tKGNvbHVtbkluZGljZXMpO1xuXG4gIHJldHVybiBjb2x1bW5JbmRpY2VzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2hlY2tSYW5nZShtYXRyaXgsIHN0YXJ0Um93LCBlbmRSb3csIHN0YXJ0Q29sdW1uLCBlbmRDb2x1bW4pIHtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggIT09IDUpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignZXhwZWN0ZWQgNCBhcmd1bWVudHMnKTtcbiAgfVxuICBjaGVja051bWJlcignc3RhcnRSb3cnLCBzdGFydFJvdyk7XG4gIGNoZWNrTnVtYmVyKCdlbmRSb3cnLCBlbmRSb3cpO1xuICBjaGVja051bWJlcignc3RhcnRDb2x1bW4nLCBzdGFydENvbHVtbik7XG4gIGNoZWNrTnVtYmVyKCdlbmRDb2x1bW4nLCBlbmRDb2x1bW4pO1xuICBpZiAoXG4gICAgc3RhcnRSb3cgPiBlbmRSb3cgfHxcbiAgICBzdGFydENvbHVtbiA+IGVuZENvbHVtbiB8fFxuICAgIHN0YXJ0Um93IDwgMCB8fFxuICAgIHN0YXJ0Um93ID49IG1hdHJpeC5yb3dzIHx8XG4gICAgZW5kUm93IDwgMCB8fFxuICAgIGVuZFJvdyA+PSBtYXRyaXgucm93cyB8fFxuICAgIHN0YXJ0Q29sdW1uIDwgMCB8fFxuICAgIHN0YXJ0Q29sdW1uID49IG1hdHJpeC5jb2x1bW5zIHx8XG4gICAgZW5kQ29sdW1uIDwgMCB8fFxuICAgIGVuZENvbHVtbiA+PSBtYXRyaXguY29sdW1uc1xuICApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignU3VibWF0cml4IGluZGljZXMgYXJlIG91dCBvZiByYW5nZScpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBuZXdBcnJheShsZW5ndGgsIHZhbHVlID0gMCkge1xuICBsZXQgYXJyYXkgPSBbXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgIGFycmF5LnB1c2godmFsdWUpO1xuICB9XG4gIHJldHVybiBhcnJheTtcbn1cblxuZnVuY3Rpb24gY2hlY2tOdW1iZXIobmFtZSwgdmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGAke25hbWV9IG11c3QgYmUgYSBudW1iZXJgKTtcbiAgfVxufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIGluc3BlY3RNYXRyaXgoKSB7XG4gIGNvbnN0IGluZGVudCA9ICcgJy5yZXBlYXQoMik7XG4gIGNvbnN0IGluZGVudERhdGEgPSAnICcucmVwZWF0KDQpO1xuICByZXR1cm4gYCR7dGhpcy5jb25zdHJ1Y3Rvci5uYW1lfSB7XG4ke2luZGVudH1bXG4ke2luZGVudERhdGF9JHtpbnNwZWN0RGF0YSh0aGlzLCBpbmRlbnREYXRhKX1cbiR7aW5kZW50fV1cbiR7aW5kZW50fXJvd3M6ICR7dGhpcy5yb3dzfVxuJHtpbmRlbnR9Y29sdW1uczogJHt0aGlzLmNvbHVtbnN9XG59YDtcbn1cblxuY29uc3QgbWF4Um93cyA9IDE1O1xuY29uc3QgbWF4Q29sdW1ucyA9IDEwO1xuY29uc3QgbWF4TnVtU2l6ZSA9IDg7XG5cbmZ1bmN0aW9uIGluc3BlY3REYXRhKG1hdHJpeCwgaW5kZW50KSB7XG4gIGNvbnN0IHsgcm93cywgY29sdW1ucyB9ID0gbWF0cml4O1xuICBjb25zdCBtYXhJID0gTWF0aC5taW4ocm93cywgbWF4Um93cyk7XG4gIGNvbnN0IG1heEogPSBNYXRoLm1pbihjb2x1bW5zLCBtYXhDb2x1bW5zKTtcbiAgY29uc3QgcmVzdWx0ID0gW107XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbWF4STsgaSsrKSB7XG4gICAgbGV0IGxpbmUgPSBbXTtcbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IG1heEo7IGorKykge1xuICAgICAgbGluZS5wdXNoKGZvcm1hdE51bWJlcihtYXRyaXguZ2V0KGksIGopKSk7XG4gICAgfVxuICAgIHJlc3VsdC5wdXNoKGAke2xpbmUuam9pbignICcpfWApO1xuICB9XG4gIGlmIChtYXhKICE9PSBjb2x1bW5zKSB7XG4gICAgcmVzdWx0W3Jlc3VsdC5sZW5ndGggLSAxXSArPSBgIC4uLiAke2NvbHVtbnMgLSBtYXhDb2x1bW5zfSBtb3JlIGNvbHVtbnNgO1xuICB9XG4gIGlmIChtYXhJICE9PSByb3dzKSB7XG4gICAgcmVzdWx0LnB1c2goYC4uLiAke3Jvd3MgLSBtYXhSb3dzfSBtb3JlIHJvd3NgKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0LmpvaW4oYFxcbiR7aW5kZW50fWApO1xufVxuXG5mdW5jdGlvbiBmb3JtYXROdW1iZXIobnVtKSB7XG4gIGNvbnN0IG51bVN0ciA9IFN0cmluZyhudW0pO1xuICBpZiAobnVtU3RyLmxlbmd0aCA8PSBtYXhOdW1TaXplKSB7XG4gICAgcmV0dXJuIG51bVN0ci5wYWRFbmQobWF4TnVtU2l6ZSwgJyAnKTtcbiAgfVxuICBjb25zdCBwcmVjaXNlID0gbnVtLnRvUHJlY2lzaW9uKG1heE51bVNpemUgLSAyKTtcbiAgaWYgKHByZWNpc2UubGVuZ3RoIDw9IG1heE51bVNpemUpIHtcbiAgICByZXR1cm4gcHJlY2lzZTtcbiAgfVxuICBjb25zdCBleHBvbmVudGlhbCA9IG51bS50b0V4cG9uZW50aWFsKG1heE51bVNpemUgLSAyKTtcbiAgY29uc3QgZUluZGV4ID0gZXhwb25lbnRpYWwuaW5kZXhPZignZScpO1xuICBjb25zdCBlID0gZXhwb25lbnRpYWwuc3Vic3RyaW5nKGVJbmRleCk7XG4gIHJldHVybiBleHBvbmVudGlhbC5zdWJzdHJpbmcoMCwgbWF4TnVtU2l6ZSAtIGUubGVuZ3RoKSArIGU7XG59XG4iLCJpbXBvcnQgcmVzY2FsZSBmcm9tICdtbC1hcnJheS1yZXNjYWxlJztcblxuaW1wb3J0IHtcbiAgY2hlY2tSb3dWZWN0b3IsXG4gIGNoZWNrUm93SW5kZXgsXG4gIGNoZWNrQ29sdW1uSW5kZXgsXG4gIGNoZWNrQ29sdW1uVmVjdG9yLFxuICBjaGVja1JhbmdlLFxuICBjaGVja0luZGljZXMsXG59IGZyb20gJy4vdXRpbCc7XG5pbXBvcnQge1xuICBzdW1CeVJvdyxcbiAgc3VtQnlDb2x1bW4sXG4gIHN1bUFsbCxcbiAgcHJvZHVjdEJ5Um93LFxuICBwcm9kdWN0QnlDb2x1bW4sXG4gIHByb2R1Y3RBbGwsXG4gIHZhcmlhbmNlQnlSb3csXG4gIHZhcmlhbmNlQnlDb2x1bW4sXG4gIHZhcmlhbmNlQWxsLFxuICBjZW50ZXJCeVJvdyxcbiAgY2VudGVyQnlDb2x1bW4sXG4gIGNlbnRlckFsbCxcbiAgc2NhbGVCeVJvdyxcbiAgc2NhbGVCeUNvbHVtbixcbiAgc2NhbGVBbGwsXG4gIGdldFNjYWxlQnlSb3csXG4gIGdldFNjYWxlQnlDb2x1bW4sXG4gIGdldFNjYWxlQWxsLFxufSBmcm9tICcuL3N0YXQnO1xuaW1wb3J0IHsgaW5zcGVjdE1hdHJpeCB9IGZyb20gJy4vaW5zcGVjdCc7XG5pbXBvcnQgeyBpbnN0YWxsTWF0aE9wZXJhdGlvbnMgfSBmcm9tICcuL21hdGhPcGVyYXRpb25zJztcblxuZXhwb3J0IGNsYXNzIEFic3RyYWN0TWF0cml4IHtcbiAgc3RhdGljIGZyb20xREFycmF5KG5ld1Jvd3MsIG5ld0NvbHVtbnMsIG5ld0RhdGEpIHtcbiAgICBsZXQgbGVuZ3RoID0gbmV3Um93cyAqIG5ld0NvbHVtbnM7XG4gICAgaWYgKGxlbmd0aCAhPT0gbmV3RGF0YS5sZW5ndGgpIHtcbiAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdkYXRhIGxlbmd0aCBkb2VzIG5vdCBtYXRjaCBnaXZlbiBkaW1lbnNpb25zJyk7XG4gICAgfVxuICAgIGxldCBuZXdNYXRyaXggPSBuZXcgTWF0cml4KG5ld1Jvd3MsIG5ld0NvbHVtbnMpO1xuICAgIGZvciAobGV0IHJvdyA9IDA7IHJvdyA8IG5ld1Jvd3M7IHJvdysrKSB7XG4gICAgICBmb3IgKGxldCBjb2x1bW4gPSAwOyBjb2x1bW4gPCBuZXdDb2x1bW5zOyBjb2x1bW4rKykge1xuICAgICAgICBuZXdNYXRyaXguc2V0KHJvdywgY29sdW1uLCBuZXdEYXRhW3JvdyAqIG5ld0NvbHVtbnMgKyBjb2x1bW5dKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5ld01hdHJpeDtcbiAgfVxuXG4gIHN0YXRpYyByb3dWZWN0b3IobmV3RGF0YSkge1xuICAgIGxldCB2ZWN0b3IgPSBuZXcgTWF0cml4KDEsIG5ld0RhdGEubGVuZ3RoKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5ld0RhdGEubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZlY3Rvci5zZXQoMCwgaSwgbmV3RGF0YVtpXSk7XG4gICAgfVxuICAgIHJldHVybiB2ZWN0b3I7XG4gIH1cblxuICBzdGF0aWMgY29sdW1uVmVjdG9yKG5ld0RhdGEpIHtcbiAgICBsZXQgdmVjdG9yID0gbmV3IE1hdHJpeChuZXdEYXRhLmxlbmd0aCwgMSk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuZXdEYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2ZWN0b3Iuc2V0KGksIDAsIG5ld0RhdGFbaV0pO1xuICAgIH1cbiAgICByZXR1cm4gdmVjdG9yO1xuICB9XG5cbiAgc3RhdGljIHplcm9zKHJvd3MsIGNvbHVtbnMpIHtcbiAgICByZXR1cm4gbmV3IE1hdHJpeChyb3dzLCBjb2x1bW5zKTtcbiAgfVxuXG4gIHN0YXRpYyBvbmVzKHJvd3MsIGNvbHVtbnMpIHtcbiAgICByZXR1cm4gbmV3IE1hdHJpeChyb3dzLCBjb2x1bW5zKS5maWxsKDEpO1xuICB9XG5cbiAgc3RhdGljIHJhbmQocm93cywgY29sdW1ucywgb3B0aW9ucyA9IHt9KSB7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zICE9PSAnb2JqZWN0Jykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignb3B0aW9ucyBtdXN0IGJlIGFuIG9iamVjdCcpO1xuICAgIH1cbiAgICBjb25zdCB7IHJhbmRvbSA9IE1hdGgucmFuZG9tIH0gPSBvcHRpb25zO1xuICAgIGxldCBtYXRyaXggPSBuZXcgTWF0cml4KHJvd3MsIGNvbHVtbnMpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcm93czsgaSsrKSB7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGNvbHVtbnM7IGorKykge1xuICAgICAgICBtYXRyaXguc2V0KGksIGosIHJhbmRvbSgpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG1hdHJpeDtcbiAgfVxuXG4gIHN0YXRpYyByYW5kSW50KHJvd3MsIGNvbHVtbnMsIG9wdGlvbnMgPSB7fSkge1xuICAgIGlmICh0eXBlb2Ygb3B0aW9ucyAhPT0gJ29iamVjdCcpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ29wdGlvbnMgbXVzdCBiZSBhbiBvYmplY3QnKTtcbiAgICB9XG4gICAgY29uc3QgeyBtaW4gPSAwLCBtYXggPSAxMDAwLCByYW5kb20gPSBNYXRoLnJhbmRvbSB9ID0gb3B0aW9ucztcbiAgICBpZiAoIU51bWJlci5pc0ludGVnZXIobWluKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignbWluIG11c3QgYmUgYW4gaW50ZWdlcicpO1xuICAgIGlmICghTnVtYmVyLmlzSW50ZWdlcihtYXgpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdtYXggbXVzdCBiZSBhbiBpbnRlZ2VyJyk7XG4gICAgaWYgKG1pbiA+PSBtYXgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdtaW4gbXVzdCBiZSBzbWFsbGVyIHRoYW4gbWF4Jyk7XG4gICAgbGV0IGludGVydmFsID0gbWF4IC0gbWluO1xuICAgIGxldCBtYXRyaXggPSBuZXcgTWF0cml4KHJvd3MsIGNvbHVtbnMpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcm93czsgaSsrKSB7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGNvbHVtbnM7IGorKykge1xuICAgICAgICBsZXQgdmFsdWUgPSBtaW4gKyBNYXRoLnJvdW5kKHJhbmRvbSgpICogaW50ZXJ2YWwpO1xuICAgICAgICBtYXRyaXguc2V0KGksIGosIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG1hdHJpeDtcbiAgfVxuXG4gIHN0YXRpYyBleWUocm93cywgY29sdW1ucywgdmFsdWUpIHtcbiAgICBpZiAoY29sdW1ucyA9PT0gdW5kZWZpbmVkKSBjb2x1bW5zID0gcm93cztcbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkgdmFsdWUgPSAxO1xuICAgIGxldCBtaW4gPSBNYXRoLm1pbihyb3dzLCBjb2x1bW5zKTtcbiAgICBsZXQgbWF0cml4ID0gdGhpcy56ZXJvcyhyb3dzLCBjb2x1bW5zKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1pbjsgaSsrKSB7XG4gICAgICBtYXRyaXguc2V0KGksIGksIHZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIG1hdHJpeDtcbiAgfVxuXG4gIHN0YXRpYyBkaWFnKGRhdGEsIHJvd3MsIGNvbHVtbnMpIHtcbiAgICBsZXQgbCA9IGRhdGEubGVuZ3RoO1xuICAgIGlmIChyb3dzID09PSB1bmRlZmluZWQpIHJvd3MgPSBsO1xuICAgIGlmIChjb2x1bW5zID09PSB1bmRlZmluZWQpIGNvbHVtbnMgPSByb3dzO1xuICAgIGxldCBtaW4gPSBNYXRoLm1pbihsLCByb3dzLCBjb2x1bW5zKTtcbiAgICBsZXQgbWF0cml4ID0gdGhpcy56ZXJvcyhyb3dzLCBjb2x1bW5zKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1pbjsgaSsrKSB7XG4gICAgICBtYXRyaXguc2V0KGksIGksIGRhdGFbaV0pO1xuICAgIH1cbiAgICByZXR1cm4gbWF0cml4O1xuICB9XG5cbiAgc3RhdGljIG1pbihtYXRyaXgxLCBtYXRyaXgyKSB7XG4gICAgbWF0cml4MSA9IHRoaXMuY2hlY2tNYXRyaXgobWF0cml4MSk7XG4gICAgbWF0cml4MiA9IHRoaXMuY2hlY2tNYXRyaXgobWF0cml4Mik7XG4gICAgbGV0IHJvd3MgPSBtYXRyaXgxLnJvd3M7XG4gICAgbGV0IGNvbHVtbnMgPSBtYXRyaXgxLmNvbHVtbnM7XG4gICAgbGV0IHJlc3VsdCA9IG5ldyBNYXRyaXgocm93cywgY29sdW1ucyk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCByb3dzOyBpKyspIHtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgY29sdW1uczsgaisrKSB7XG4gICAgICAgIHJlc3VsdC5zZXQoaSwgaiwgTWF0aC5taW4obWF0cml4MS5nZXQoaSwgaiksIG1hdHJpeDIuZ2V0KGksIGopKSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBzdGF0aWMgbWF4KG1hdHJpeDEsIG1hdHJpeDIpIHtcbiAgICBtYXRyaXgxID0gdGhpcy5jaGVja01hdHJpeChtYXRyaXgxKTtcbiAgICBtYXRyaXgyID0gdGhpcy5jaGVja01hdHJpeChtYXRyaXgyKTtcbiAgICBsZXQgcm93cyA9IG1hdHJpeDEucm93cztcbiAgICBsZXQgY29sdW1ucyA9IG1hdHJpeDEuY29sdW1ucztcbiAgICBsZXQgcmVzdWx0ID0gbmV3IHRoaXMocm93cywgY29sdW1ucyk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCByb3dzOyBpKyspIHtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgY29sdW1uczsgaisrKSB7XG4gICAgICAgIHJlc3VsdC5zZXQoaSwgaiwgTWF0aC5tYXgobWF0cml4MS5nZXQoaSwgaiksIG1hdHJpeDIuZ2V0KGksIGopKSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBzdGF0aWMgY2hlY2tNYXRyaXgodmFsdWUpIHtcbiAgICByZXR1cm4gQWJzdHJhY3RNYXRyaXguaXNNYXRyaXgodmFsdWUpID8gdmFsdWUgOiBuZXcgTWF0cml4KHZhbHVlKTtcbiAgfVxuXG4gIHN0YXRpYyBpc01hdHJpeCh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIHZhbHVlLmtsYXNzID09PSAnTWF0cml4JztcbiAgfVxuXG4gIGdldCBzaXplKCkge1xuICAgIHJldHVybiB0aGlzLnJvd3MgKiB0aGlzLmNvbHVtbnM7XG4gIH1cblxuICBhcHBseShjYWxsYmFjaykge1xuICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2NhbGxiYWNrIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuICAgIH1cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucm93czsgaSsrKSB7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMuY29sdW1uczsgaisrKSB7XG4gICAgICAgIGNhbGxiYWNrLmNhbGwodGhpcywgaSwgaik7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgdG8xREFycmF5KCkge1xuICAgIGxldCBhcnJheSA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5yb3dzOyBpKyspIHtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy5jb2x1bW5zOyBqKyspIHtcbiAgICAgICAgYXJyYXkucHVzaCh0aGlzLmdldChpLCBqKSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhcnJheTtcbiAgfVxuXG4gIHRvMkRBcnJheSgpIHtcbiAgICBsZXQgY29weSA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5yb3dzOyBpKyspIHtcbiAgICAgIGNvcHkucHVzaChbXSk7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMuY29sdW1uczsgaisrKSB7XG4gICAgICAgIGNvcHlbaV0ucHVzaCh0aGlzLmdldChpLCBqKSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjb3B5O1xuICB9XG5cbiAgdG9KU09OKCkge1xuICAgIHJldHVybiB0aGlzLnRvMkRBcnJheSgpO1xuICB9XG5cbiAgaXNSb3dWZWN0b3IoKSB7XG4gICAgcmV0dXJuIHRoaXMucm93cyA9PT0gMTtcbiAgfVxuXG4gIGlzQ29sdW1uVmVjdG9yKCkge1xuICAgIHJldHVybiB0aGlzLmNvbHVtbnMgPT09IDE7XG4gIH1cblxuICBpc1ZlY3RvcigpIHtcbiAgICByZXR1cm4gdGhpcy5yb3dzID09PSAxIHx8IHRoaXMuY29sdW1ucyA9PT0gMTtcbiAgfVxuXG4gIGlzU3F1YXJlKCkge1xuICAgIHJldHVybiB0aGlzLnJvd3MgPT09IHRoaXMuY29sdW1ucztcbiAgfVxuXG4gIGlzU3ltbWV0cmljKCkge1xuICAgIGlmICh0aGlzLmlzU3F1YXJlKCkpIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5yb3dzOyBpKyspIHtcbiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPD0gaTsgaisrKSB7XG4gICAgICAgICAgaWYgKHRoaXMuZ2V0KGksIGopICE9PSB0aGlzLmdldChqLCBpKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlzRWNoZWxvbkZvcm0oKSB7XG4gICAgbGV0IGkgPSAwO1xuICAgIGxldCBqID0gMDtcbiAgICBsZXQgcHJldmlvdXNDb2x1bW4gPSAtMTtcbiAgICBsZXQgaXNFY2hlbG9uRm9ybSA9IHRydWU7XG4gICAgbGV0IGNoZWNrZWQgPSBmYWxzZTtcbiAgICB3aGlsZSAoaSA8IHRoaXMucm93cyAmJiBpc0VjaGVsb25Gb3JtKSB7XG4gICAgICBqID0gMDtcbiAgICAgIGNoZWNrZWQgPSBmYWxzZTtcbiAgICAgIHdoaWxlIChqIDwgdGhpcy5jb2x1bW5zICYmIGNoZWNrZWQgPT09IGZhbHNlKSB7XG4gICAgICAgIGlmICh0aGlzLmdldChpLCBqKSA9PT0gMCkge1xuICAgICAgICAgIGorKztcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmdldChpLCBqKSA9PT0gMSAmJiBqID4gcHJldmlvdXNDb2x1bW4pIHtcbiAgICAgICAgICBjaGVja2VkID0gdHJ1ZTtcbiAgICAgICAgICBwcmV2aW91c0NvbHVtbiA9IGo7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXNFY2hlbG9uRm9ybSA9IGZhbHNlO1xuICAgICAgICAgIGNoZWNrZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpKys7XG4gICAgfVxuICAgIHJldHVybiBpc0VjaGVsb25Gb3JtO1xuICB9XG5cbiAgaXNSZWR1Y2VkRWNoZWxvbkZvcm0oKSB7XG4gICAgbGV0IGkgPSAwO1xuICAgIGxldCBqID0gMDtcbiAgICBsZXQgcHJldmlvdXNDb2x1bW4gPSAtMTtcbiAgICBsZXQgaXNSZWR1Y2VkRWNoZWxvbkZvcm0gPSB0cnVlO1xuICAgIGxldCBjaGVja2VkID0gZmFsc2U7XG4gICAgd2hpbGUgKGkgPCB0aGlzLnJvd3MgJiYgaXNSZWR1Y2VkRWNoZWxvbkZvcm0pIHtcbiAgICAgIGogPSAwO1xuICAgICAgY2hlY2tlZCA9IGZhbHNlO1xuICAgICAgd2hpbGUgKGogPCB0aGlzLmNvbHVtbnMgJiYgY2hlY2tlZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgaWYgKHRoaXMuZ2V0KGksIGopID09PSAwKSB7XG4gICAgICAgICAgaisrO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuZ2V0KGksIGopID09PSAxICYmIGogPiBwcmV2aW91c0NvbHVtbikge1xuICAgICAgICAgIGNoZWNrZWQgPSB0cnVlO1xuICAgICAgICAgIHByZXZpb3VzQ29sdW1uID0gajtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpc1JlZHVjZWRFY2hlbG9uRm9ybSA9IGZhbHNlO1xuICAgICAgICAgIGNoZWNrZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBmb3IgKGxldCBrID0gaiArIDE7IGsgPCB0aGlzLnJvd3M7IGsrKykge1xuICAgICAgICBpZiAodGhpcy5nZXQoaSwgaykgIT09IDApIHtcbiAgICAgICAgICBpc1JlZHVjZWRFY2hlbG9uRm9ybSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpKys7XG4gICAgfVxuICAgIHJldHVybiBpc1JlZHVjZWRFY2hlbG9uRm9ybTtcbiAgfVxuXG4gIGVjaGVsb25Gb3JtKCkge1xuICAgIGxldCByZXN1bHQgPSB0aGlzLmNsb25lKCk7XG4gICAgbGV0IGggPSAwO1xuICAgIGxldCBrID0gMDtcbiAgICB3aGlsZSAoaCA8IHJlc3VsdC5yb3dzICYmIGsgPCByZXN1bHQuY29sdW1ucykge1xuICAgICAgbGV0IGlNYXggPSBoO1xuICAgICAgZm9yIChsZXQgaSA9IGg7IGkgPCByZXN1bHQucm93czsgaSsrKSB7XG4gICAgICAgIGlmIChyZXN1bHQuZ2V0KGksIGspID4gcmVzdWx0LmdldChpTWF4LCBrKSkge1xuICAgICAgICAgIGlNYXggPSBpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAocmVzdWx0LmdldChpTWF4LCBrKSA9PT0gMCkge1xuICAgICAgICBrKys7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHQuc3dhcFJvd3MoaCwgaU1heCk7XG4gICAgICAgIGxldCB0bXAgPSByZXN1bHQuZ2V0KGgsIGspO1xuICAgICAgICBmb3IgKGxldCBqID0gazsgaiA8IHJlc3VsdC5jb2x1bW5zOyBqKyspIHtcbiAgICAgICAgICByZXN1bHQuc2V0KGgsIGosIHJlc3VsdC5nZXQoaCwgaikgLyB0bXApO1xuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGkgPSBoICsgMTsgaSA8IHJlc3VsdC5yb3dzOyBpKyspIHtcbiAgICAgICAgICBsZXQgZmFjdG9yID0gcmVzdWx0LmdldChpLCBrKSAvIHJlc3VsdC5nZXQoaCwgayk7XG4gICAgICAgICAgcmVzdWx0LnNldChpLCBrLCAwKTtcbiAgICAgICAgICBmb3IgKGxldCBqID0gayArIDE7IGogPCByZXN1bHQuY29sdW1uczsgaisrKSB7XG4gICAgICAgICAgICByZXN1bHQuc2V0KGksIGosIHJlc3VsdC5nZXQoaSwgaikgLSByZXN1bHQuZ2V0KGgsIGopICogZmFjdG9yKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaCsrO1xuICAgICAgICBrKys7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICByZWR1Y2VkRWNoZWxvbkZvcm0oKSB7XG4gICAgbGV0IHJlc3VsdCA9IHRoaXMuZWNoZWxvbkZvcm0oKTtcbiAgICBsZXQgbSA9IHJlc3VsdC5jb2x1bW5zO1xuICAgIGxldCBuID0gcmVzdWx0LnJvd3M7XG4gICAgbGV0IGggPSBuIC0gMTtcbiAgICB3aGlsZSAoaCA+PSAwKSB7XG4gICAgICBpZiAocmVzdWx0Lm1heFJvdyhoKSA9PT0gMCkge1xuICAgICAgICBoLS07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZXQgcCA9IDA7XG4gICAgICAgIGxldCBwaXZvdCA9IGZhbHNlO1xuICAgICAgICB3aGlsZSAocCA8IG4gJiYgcGl2b3QgPT09IGZhbHNlKSB7XG4gICAgICAgICAgaWYgKHJlc3VsdC5nZXQoaCwgcCkgPT09IDEpIHtcbiAgICAgICAgICAgIHBpdm90ID0gdHJ1ZTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcCsrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGg7IGkrKykge1xuICAgICAgICAgIGxldCBmYWN0b3IgPSByZXN1bHQuZ2V0KGksIHApO1xuICAgICAgICAgIGZvciAobGV0IGogPSBwOyBqIDwgbTsgaisrKSB7XG4gICAgICAgICAgICBsZXQgdG1wID0gcmVzdWx0LmdldChpLCBqKSAtIGZhY3RvciAqIHJlc3VsdC5nZXQoaCwgaik7XG4gICAgICAgICAgICByZXN1bHQuc2V0KGksIGosIHRtcCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGgtLTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIHNldCgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3NldCBtZXRob2QgaXMgdW5pbXBsZW1lbnRlZCcpO1xuICB9XG5cbiAgZ2V0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcignZ2V0IG1ldGhvZCBpcyB1bmltcGxlbWVudGVkJyk7XG4gIH1cblxuICByZXBlYXQob3B0aW9ucyA9IHt9KSB7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zICE9PSAnb2JqZWN0Jykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignb3B0aW9ucyBtdXN0IGJlIGFuIG9iamVjdCcpO1xuICAgIH1cbiAgICBjb25zdCB7IHJvd3MgPSAxLCBjb2x1bW5zID0gMSB9ID0gb3B0aW9ucztcbiAgICBpZiAoIU51bWJlci5pc0ludGVnZXIocm93cykgfHwgcm93cyA8PSAwKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdyb3dzIG11c3QgYmUgYSBwb3NpdGl2ZSBpbnRlZ2VyJyk7XG4gICAgfVxuICAgIGlmICghTnVtYmVyLmlzSW50ZWdlcihjb2x1bW5zKSB8fCBjb2x1bW5zIDw9IDApIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2NvbHVtbnMgbXVzdCBiZSBhIHBvc2l0aXZlIGludGVnZXInKTtcbiAgICB9XG4gICAgbGV0IG1hdHJpeCA9IG5ldyBNYXRyaXgodGhpcy5yb3dzICogcm93cywgdGhpcy5jb2x1bW5zICogY29sdW1ucyk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCByb3dzOyBpKyspIHtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgY29sdW1uczsgaisrKSB7XG4gICAgICAgIG1hdHJpeC5zZXRTdWJNYXRyaXgodGhpcywgdGhpcy5yb3dzICogaSwgdGhpcy5jb2x1bW5zICogaik7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBtYXRyaXg7XG4gIH1cblxuICBmaWxsKHZhbHVlKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnJvd3M7IGkrKykge1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB0aGlzLmNvbHVtbnM7IGorKykge1xuICAgICAgICB0aGlzLnNldChpLCBqLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgbmVnKCkge1xuICAgIHJldHVybiB0aGlzLm11bFMoLTEpO1xuICB9XG5cbiAgZ2V0Um93KGluZGV4KSB7XG4gICAgY2hlY2tSb3dJbmRleCh0aGlzLCBpbmRleCk7XG4gICAgbGV0IHJvdyA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5jb2x1bW5zOyBpKyspIHtcbiAgICAgIHJvdy5wdXNoKHRoaXMuZ2V0KGluZGV4LCBpKSk7XG4gICAgfVxuICAgIHJldHVybiByb3c7XG4gIH1cblxuICBnZXRSb3dWZWN0b3IoaW5kZXgpIHtcbiAgICByZXR1cm4gTWF0cml4LnJvd1ZlY3Rvcih0aGlzLmdldFJvdyhpbmRleCkpO1xuICB9XG5cbiAgc2V0Um93KGluZGV4LCBhcnJheSkge1xuICAgIGNoZWNrUm93SW5kZXgodGhpcywgaW5kZXgpO1xuICAgIGFycmF5ID0gY2hlY2tSb3dWZWN0b3IodGhpcywgYXJyYXkpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5jb2x1bW5zOyBpKyspIHtcbiAgICAgIHRoaXMuc2V0KGluZGV4LCBpLCBhcnJheVtpXSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgc3dhcFJvd3Mocm93MSwgcm93Mikge1xuICAgIGNoZWNrUm93SW5kZXgodGhpcywgcm93MSk7XG4gICAgY2hlY2tSb3dJbmRleCh0aGlzLCByb3cyKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuY29sdW1uczsgaSsrKSB7XG4gICAgICBsZXQgdGVtcCA9IHRoaXMuZ2V0KHJvdzEsIGkpO1xuICAgICAgdGhpcy5zZXQocm93MSwgaSwgdGhpcy5nZXQocm93MiwgaSkpO1xuICAgICAgdGhpcy5zZXQocm93MiwgaSwgdGVtcCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgZ2V0Q29sdW1uKGluZGV4KSB7XG4gICAgY2hlY2tDb2x1bW5JbmRleCh0aGlzLCBpbmRleCk7XG4gICAgbGV0IGNvbHVtbiA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5yb3dzOyBpKyspIHtcbiAgICAgIGNvbHVtbi5wdXNoKHRoaXMuZ2V0KGksIGluZGV4KSk7XG4gICAgfVxuICAgIHJldHVybiBjb2x1bW47XG4gIH1cblxuICBnZXRDb2x1bW5WZWN0b3IoaW5kZXgpIHtcbiAgICByZXR1cm4gTWF0cml4LmNvbHVtblZlY3Rvcih0aGlzLmdldENvbHVtbihpbmRleCkpO1xuICB9XG5cbiAgc2V0Q29sdW1uKGluZGV4LCBhcnJheSkge1xuICAgIGNoZWNrQ29sdW1uSW5kZXgodGhpcywgaW5kZXgpO1xuICAgIGFycmF5ID0gY2hlY2tDb2x1bW5WZWN0b3IodGhpcywgYXJyYXkpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5yb3dzOyBpKyspIHtcbiAgICAgIHRoaXMuc2V0KGksIGluZGV4LCBhcnJheVtpXSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgc3dhcENvbHVtbnMoY29sdW1uMSwgY29sdW1uMikge1xuICAgIGNoZWNrQ29sdW1uSW5kZXgodGhpcywgY29sdW1uMSk7XG4gICAgY2hlY2tDb2x1bW5JbmRleCh0aGlzLCBjb2x1bW4yKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucm93czsgaSsrKSB7XG4gICAgICBsZXQgdGVtcCA9IHRoaXMuZ2V0KGksIGNvbHVtbjEpO1xuICAgICAgdGhpcy5zZXQoaSwgY29sdW1uMSwgdGhpcy5nZXQoaSwgY29sdW1uMikpO1xuICAgICAgdGhpcy5zZXQoaSwgY29sdW1uMiwgdGVtcCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgYWRkUm93VmVjdG9yKHZlY3Rvcikge1xuICAgIHZlY3RvciA9IGNoZWNrUm93VmVjdG9yKHRoaXMsIHZlY3Rvcik7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnJvd3M7IGkrKykge1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB0aGlzLmNvbHVtbnM7IGorKykge1xuICAgICAgICB0aGlzLnNldChpLCBqLCB0aGlzLmdldChpLCBqKSArIHZlY3RvcltqXSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgc3ViUm93VmVjdG9yKHZlY3Rvcikge1xuICAgIHZlY3RvciA9IGNoZWNrUm93VmVjdG9yKHRoaXMsIHZlY3Rvcik7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnJvd3M7IGkrKykge1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB0aGlzLmNvbHVtbnM7IGorKykge1xuICAgICAgICB0aGlzLnNldChpLCBqLCB0aGlzLmdldChpLCBqKSAtIHZlY3RvcltqXSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgbXVsUm93VmVjdG9yKHZlY3Rvcikge1xuICAgIHZlY3RvciA9IGNoZWNrUm93VmVjdG9yKHRoaXMsIHZlY3Rvcik7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnJvd3M7IGkrKykge1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB0aGlzLmNvbHVtbnM7IGorKykge1xuICAgICAgICB0aGlzLnNldChpLCBqLCB0aGlzLmdldChpLCBqKSAqIHZlY3RvcltqXSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgZGl2Um93VmVjdG9yKHZlY3Rvcikge1xuICAgIHZlY3RvciA9IGNoZWNrUm93VmVjdG9yKHRoaXMsIHZlY3Rvcik7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnJvd3M7IGkrKykge1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB0aGlzLmNvbHVtbnM7IGorKykge1xuICAgICAgICB0aGlzLnNldChpLCBqLCB0aGlzLmdldChpLCBqKSAvIHZlY3RvcltqXSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgYWRkQ29sdW1uVmVjdG9yKHZlY3Rvcikge1xuICAgIHZlY3RvciA9IGNoZWNrQ29sdW1uVmVjdG9yKHRoaXMsIHZlY3Rvcik7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnJvd3M7IGkrKykge1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB0aGlzLmNvbHVtbnM7IGorKykge1xuICAgICAgICB0aGlzLnNldChpLCBqLCB0aGlzLmdldChpLCBqKSArIHZlY3RvcltpXSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgc3ViQ29sdW1uVmVjdG9yKHZlY3Rvcikge1xuICAgIHZlY3RvciA9IGNoZWNrQ29sdW1uVmVjdG9yKHRoaXMsIHZlY3Rvcik7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnJvd3M7IGkrKykge1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB0aGlzLmNvbHVtbnM7IGorKykge1xuICAgICAgICB0aGlzLnNldChpLCBqLCB0aGlzLmdldChpLCBqKSAtIHZlY3RvcltpXSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgbXVsQ29sdW1uVmVjdG9yKHZlY3Rvcikge1xuICAgIHZlY3RvciA9IGNoZWNrQ29sdW1uVmVjdG9yKHRoaXMsIHZlY3Rvcik7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnJvd3M7IGkrKykge1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB0aGlzLmNvbHVtbnM7IGorKykge1xuICAgICAgICB0aGlzLnNldChpLCBqLCB0aGlzLmdldChpLCBqKSAqIHZlY3RvcltpXSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgZGl2Q29sdW1uVmVjdG9yKHZlY3Rvcikge1xuICAgIHZlY3RvciA9IGNoZWNrQ29sdW1uVmVjdG9yKHRoaXMsIHZlY3Rvcik7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnJvd3M7IGkrKykge1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB0aGlzLmNvbHVtbnM7IGorKykge1xuICAgICAgICB0aGlzLnNldChpLCBqLCB0aGlzLmdldChpLCBqKSAvIHZlY3RvcltpXSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgbXVsUm93KGluZGV4LCB2YWx1ZSkge1xuICAgIGNoZWNrUm93SW5kZXgodGhpcywgaW5kZXgpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5jb2x1bW5zOyBpKyspIHtcbiAgICAgIHRoaXMuc2V0KGluZGV4LCBpLCB0aGlzLmdldChpbmRleCwgaSkgKiB2YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgbXVsQ29sdW1uKGluZGV4LCB2YWx1ZSkge1xuICAgIGNoZWNrQ29sdW1uSW5kZXgodGhpcywgaW5kZXgpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5yb3dzOyBpKyspIHtcbiAgICAgIHRoaXMuc2V0KGksIGluZGV4LCB0aGlzLmdldChpLCBpbmRleCkgKiB2YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgbWF4KCkge1xuICAgIGxldCB2ID0gdGhpcy5nZXQoMCwgMCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnJvd3M7IGkrKykge1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB0aGlzLmNvbHVtbnM7IGorKykge1xuICAgICAgICBpZiAodGhpcy5nZXQoaSwgaikgPiB2KSB7XG4gICAgICAgICAgdiA9IHRoaXMuZ2V0KGksIGopO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB2O1xuICB9XG5cbiAgbWF4SW5kZXgoKSB7XG4gICAgbGV0IHYgPSB0aGlzLmdldCgwLCAwKTtcbiAgICBsZXQgaWR4ID0gWzAsIDBdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5yb3dzOyBpKyspIHtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy5jb2x1bW5zOyBqKyspIHtcbiAgICAgICAgaWYgKHRoaXMuZ2V0KGksIGopID4gdikge1xuICAgICAgICAgIHYgPSB0aGlzLmdldChpLCBqKTtcbiAgICAgICAgICBpZHhbMF0gPSBpO1xuICAgICAgICAgIGlkeFsxXSA9IGo7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGlkeDtcbiAgfVxuXG4gIG1pbigpIHtcbiAgICBsZXQgdiA9IHRoaXMuZ2V0KDAsIDApO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5yb3dzOyBpKyspIHtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy5jb2x1bW5zOyBqKyspIHtcbiAgICAgICAgaWYgKHRoaXMuZ2V0KGksIGopIDwgdikge1xuICAgICAgICAgIHYgPSB0aGlzLmdldChpLCBqKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdjtcbiAgfVxuXG4gIG1pbkluZGV4KCkge1xuICAgIGxldCB2ID0gdGhpcy5nZXQoMCwgMCk7XG4gICAgbGV0IGlkeCA9IFswLCAwXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucm93czsgaSsrKSB7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMuY29sdW1uczsgaisrKSB7XG4gICAgICAgIGlmICh0aGlzLmdldChpLCBqKSA8IHYpIHtcbiAgICAgICAgICB2ID0gdGhpcy5nZXQoaSwgaik7XG4gICAgICAgICAgaWR4WzBdID0gaTtcbiAgICAgICAgICBpZHhbMV0gPSBqO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBpZHg7XG4gIH1cblxuICBtYXhSb3cocm93KSB7XG4gICAgY2hlY2tSb3dJbmRleCh0aGlzLCByb3cpO1xuICAgIGxldCB2ID0gdGhpcy5nZXQocm93LCAwKTtcbiAgICBmb3IgKGxldCBpID0gMTsgaSA8IHRoaXMuY29sdW1uczsgaSsrKSB7XG4gICAgICBpZiAodGhpcy5nZXQocm93LCBpKSA+IHYpIHtcbiAgICAgICAgdiA9IHRoaXMuZ2V0KHJvdywgaSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB2O1xuICB9XG5cbiAgbWF4Um93SW5kZXgocm93KSB7XG4gICAgY2hlY2tSb3dJbmRleCh0aGlzLCByb3cpO1xuICAgIGxldCB2ID0gdGhpcy5nZXQocm93LCAwKTtcbiAgICBsZXQgaWR4ID0gW3JvdywgMF07XG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPCB0aGlzLmNvbHVtbnM7IGkrKykge1xuICAgICAgaWYgKHRoaXMuZ2V0KHJvdywgaSkgPiB2KSB7XG4gICAgICAgIHYgPSB0aGlzLmdldChyb3csIGkpO1xuICAgICAgICBpZHhbMV0gPSBpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gaWR4O1xuICB9XG5cbiAgbWluUm93KHJvdykge1xuICAgIGNoZWNrUm93SW5kZXgodGhpcywgcm93KTtcbiAgICBsZXQgdiA9IHRoaXMuZ2V0KHJvdywgMCk7XG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPCB0aGlzLmNvbHVtbnM7IGkrKykge1xuICAgICAgaWYgKHRoaXMuZ2V0KHJvdywgaSkgPCB2KSB7XG4gICAgICAgIHYgPSB0aGlzLmdldChyb3csIGkpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdjtcbiAgfVxuXG4gIG1pblJvd0luZGV4KHJvdykge1xuICAgIGNoZWNrUm93SW5kZXgodGhpcywgcm93KTtcbiAgICBsZXQgdiA9IHRoaXMuZ2V0KHJvdywgMCk7XG4gICAgbGV0IGlkeCA9IFtyb3csIDBdO1xuICAgIGZvciAobGV0IGkgPSAxOyBpIDwgdGhpcy5jb2x1bW5zOyBpKyspIHtcbiAgICAgIGlmICh0aGlzLmdldChyb3csIGkpIDwgdikge1xuICAgICAgICB2ID0gdGhpcy5nZXQocm93LCBpKTtcbiAgICAgICAgaWR4WzFdID0gaTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGlkeDtcbiAgfVxuXG4gIG1heENvbHVtbihjb2x1bW4pIHtcbiAgICBjaGVja0NvbHVtbkluZGV4KHRoaXMsIGNvbHVtbik7XG4gICAgbGV0IHYgPSB0aGlzLmdldCgwLCBjb2x1bW4pO1xuICAgIGZvciAobGV0IGkgPSAxOyBpIDwgdGhpcy5yb3dzOyBpKyspIHtcbiAgICAgIGlmICh0aGlzLmdldChpLCBjb2x1bW4pID4gdikge1xuICAgICAgICB2ID0gdGhpcy5nZXQoaSwgY29sdW1uKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHY7XG4gIH1cblxuICBtYXhDb2x1bW5JbmRleChjb2x1bW4pIHtcbiAgICBjaGVja0NvbHVtbkluZGV4KHRoaXMsIGNvbHVtbik7XG4gICAgbGV0IHYgPSB0aGlzLmdldCgwLCBjb2x1bW4pO1xuICAgIGxldCBpZHggPSBbMCwgY29sdW1uXTtcbiAgICBmb3IgKGxldCBpID0gMTsgaSA8IHRoaXMucm93czsgaSsrKSB7XG4gICAgICBpZiAodGhpcy5nZXQoaSwgY29sdW1uKSA+IHYpIHtcbiAgICAgICAgdiA9IHRoaXMuZ2V0KGksIGNvbHVtbik7XG4gICAgICAgIGlkeFswXSA9IGk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBpZHg7XG4gIH1cblxuICBtaW5Db2x1bW4oY29sdW1uKSB7XG4gICAgY2hlY2tDb2x1bW5JbmRleCh0aGlzLCBjb2x1bW4pO1xuICAgIGxldCB2ID0gdGhpcy5nZXQoMCwgY29sdW1uKTtcbiAgICBmb3IgKGxldCBpID0gMTsgaSA8IHRoaXMucm93czsgaSsrKSB7XG4gICAgICBpZiAodGhpcy5nZXQoaSwgY29sdW1uKSA8IHYpIHtcbiAgICAgICAgdiA9IHRoaXMuZ2V0KGksIGNvbHVtbik7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB2O1xuICB9XG5cbiAgbWluQ29sdW1uSW5kZXgoY29sdW1uKSB7XG4gICAgY2hlY2tDb2x1bW5JbmRleCh0aGlzLCBjb2x1bW4pO1xuICAgIGxldCB2ID0gdGhpcy5nZXQoMCwgY29sdW1uKTtcbiAgICBsZXQgaWR4ID0gWzAsIGNvbHVtbl07XG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPCB0aGlzLnJvd3M7IGkrKykge1xuICAgICAgaWYgKHRoaXMuZ2V0KGksIGNvbHVtbikgPCB2KSB7XG4gICAgICAgIHYgPSB0aGlzLmdldChpLCBjb2x1bW4pO1xuICAgICAgICBpZHhbMF0gPSBpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gaWR4O1xuICB9XG5cbiAgZGlhZygpIHtcbiAgICBsZXQgbWluID0gTWF0aC5taW4odGhpcy5yb3dzLCB0aGlzLmNvbHVtbnMpO1xuICAgIGxldCBkaWFnID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtaW47IGkrKykge1xuICAgICAgZGlhZy5wdXNoKHRoaXMuZ2V0KGksIGkpKTtcbiAgICB9XG4gICAgcmV0dXJuIGRpYWc7XG4gIH1cblxuICBub3JtKHR5cGUgPSAnZnJvYmVuaXVzJykge1xuICAgIGxldCByZXN1bHQgPSAwO1xuICAgIGlmICh0eXBlID09PSAnbWF4Jykge1xuICAgICAgcmV0dXJuIHRoaXMubWF4KCk7XG4gICAgfSBlbHNlIGlmICh0eXBlID09PSAnZnJvYmVuaXVzJykge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnJvd3M7IGkrKykge1xuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMuY29sdW1uczsgaisrKSB7XG4gICAgICAgICAgcmVzdWx0ID0gcmVzdWx0ICsgdGhpcy5nZXQoaSwgaikgKiB0aGlzLmdldChpLCBqKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIE1hdGguc3FydChyZXN1bHQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihgdW5rbm93biBub3JtIHR5cGU6ICR7dHlwZX1gKTtcbiAgICB9XG4gIH1cblxuICBjdW11bGF0aXZlU3VtKCkge1xuICAgIGxldCBzdW0gPSAwO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5yb3dzOyBpKyspIHtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy5jb2x1bW5zOyBqKyspIHtcbiAgICAgICAgc3VtICs9IHRoaXMuZ2V0KGksIGopO1xuICAgICAgICB0aGlzLnNldChpLCBqLCBzdW0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGRvdCh2ZWN0b3IyKSB7XG4gICAgaWYgKEFic3RyYWN0TWF0cml4LmlzTWF0cml4KHZlY3RvcjIpKSB2ZWN0b3IyID0gdmVjdG9yMi50bzFEQXJyYXkoKTtcbiAgICBsZXQgdmVjdG9yMSA9IHRoaXMudG8xREFycmF5KCk7XG4gICAgaWYgKHZlY3RvcjEubGVuZ3RoICE9PSB2ZWN0b3IyLmxlbmd0aCkge1xuICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3ZlY3RvcnMgZG8gbm90IGhhdmUgdGhlIHNhbWUgc2l6ZScpO1xuICAgIH1cbiAgICBsZXQgZG90ID0gMDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZlY3RvcjEubGVuZ3RoOyBpKyspIHtcbiAgICAgIGRvdCArPSB2ZWN0b3IxW2ldICogdmVjdG9yMltpXTtcbiAgICB9XG4gICAgcmV0dXJuIGRvdDtcbiAgfVxuXG4gIG1tdWwob3RoZXIpIHtcbiAgICBvdGhlciA9IE1hdHJpeC5jaGVja01hdHJpeChvdGhlcik7XG5cbiAgICBsZXQgbSA9IHRoaXMucm93cztcbiAgICBsZXQgbiA9IHRoaXMuY29sdW1ucztcbiAgICBsZXQgcCA9IG90aGVyLmNvbHVtbnM7XG5cbiAgICBsZXQgcmVzdWx0ID0gbmV3IE1hdHJpeChtLCBwKTtcblxuICAgIGxldCBCY29saiA9IG5ldyBGbG9hdDY0QXJyYXkobik7XG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCBwOyBqKyspIHtcbiAgICAgIGZvciAobGV0IGsgPSAwOyBrIDwgbjsgaysrKSB7XG4gICAgICAgIEJjb2xqW2tdID0gb3RoZXIuZ2V0KGssIGopO1xuICAgICAgfVxuXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG07IGkrKykge1xuICAgICAgICBsZXQgcyA9IDA7XG4gICAgICAgIGZvciAobGV0IGsgPSAwOyBrIDwgbjsgaysrKSB7XG4gICAgICAgICAgcyArPSB0aGlzLmdldChpLCBrKSAqIEJjb2xqW2tdO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVzdWx0LnNldChpLCBqLCBzKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIHN0cmFzc2VuMngyKG90aGVyKSB7XG4gICAgb3RoZXIgPSBNYXRyaXguY2hlY2tNYXRyaXgob3RoZXIpO1xuICAgIGxldCByZXN1bHQgPSBuZXcgTWF0cml4KDIsIDIpO1xuICAgIGNvbnN0IGExMSA9IHRoaXMuZ2V0KDAsIDApO1xuICAgIGNvbnN0IGIxMSA9IG90aGVyLmdldCgwLCAwKTtcbiAgICBjb25zdCBhMTIgPSB0aGlzLmdldCgwLCAxKTtcbiAgICBjb25zdCBiMTIgPSBvdGhlci5nZXQoMCwgMSk7XG4gICAgY29uc3QgYTIxID0gdGhpcy5nZXQoMSwgMCk7XG4gICAgY29uc3QgYjIxID0gb3RoZXIuZ2V0KDEsIDApO1xuICAgIGNvbnN0IGEyMiA9IHRoaXMuZ2V0KDEsIDEpO1xuICAgIGNvbnN0IGIyMiA9IG90aGVyLmdldCgxLCAxKTtcblxuICAgIC8vIENvbXB1dGUgaW50ZXJtZWRpYXRlIHZhbHVlcy5cbiAgICBjb25zdCBtMSA9IChhMTEgKyBhMjIpICogKGIxMSArIGIyMik7XG4gICAgY29uc3QgbTIgPSAoYTIxICsgYTIyKSAqIGIxMTtcbiAgICBjb25zdCBtMyA9IGExMSAqIChiMTIgLSBiMjIpO1xuICAgIGNvbnN0IG00ID0gYTIyICogKGIyMSAtIGIxMSk7XG4gICAgY29uc3QgbTUgPSAoYTExICsgYTEyKSAqIGIyMjtcbiAgICBjb25zdCBtNiA9IChhMjEgLSBhMTEpICogKGIxMSArIGIxMik7XG4gICAgY29uc3QgbTcgPSAoYTEyIC0gYTIyKSAqIChiMjEgKyBiMjIpO1xuXG4gICAgLy8gQ29tYmluZSBpbnRlcm1lZGlhdGUgdmFsdWVzIGludG8gdGhlIG91dHB1dC5cbiAgICBjb25zdCBjMDAgPSBtMSArIG00IC0gbTUgKyBtNztcbiAgICBjb25zdCBjMDEgPSBtMyArIG01O1xuICAgIGNvbnN0IGMxMCA9IG0yICsgbTQ7XG4gICAgY29uc3QgYzExID0gbTEgLSBtMiArIG0zICsgbTY7XG5cbiAgICByZXN1bHQuc2V0KDAsIDAsIGMwMCk7XG4gICAgcmVzdWx0LnNldCgwLCAxLCBjMDEpO1xuICAgIHJlc3VsdC5zZXQoMSwgMCwgYzEwKTtcbiAgICByZXN1bHQuc2V0KDEsIDEsIGMxMSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIHN0cmFzc2VuM3gzKG90aGVyKSB7XG4gICAgb3RoZXIgPSBNYXRyaXguY2hlY2tNYXRyaXgob3RoZXIpO1xuICAgIGxldCByZXN1bHQgPSBuZXcgTWF0cml4KDMsIDMpO1xuXG4gICAgY29uc3QgYTAwID0gdGhpcy5nZXQoMCwgMCk7XG4gICAgY29uc3QgYTAxID0gdGhpcy5nZXQoMCwgMSk7XG4gICAgY29uc3QgYTAyID0gdGhpcy5nZXQoMCwgMik7XG4gICAgY29uc3QgYTEwID0gdGhpcy5nZXQoMSwgMCk7XG4gICAgY29uc3QgYTExID0gdGhpcy5nZXQoMSwgMSk7XG4gICAgY29uc3QgYTEyID0gdGhpcy5nZXQoMSwgMik7XG4gICAgY29uc3QgYTIwID0gdGhpcy5nZXQoMiwgMCk7XG4gICAgY29uc3QgYTIxID0gdGhpcy5nZXQoMiwgMSk7XG4gICAgY29uc3QgYTIyID0gdGhpcy5nZXQoMiwgMik7XG5cbiAgICBjb25zdCBiMDAgPSBvdGhlci5nZXQoMCwgMCk7XG4gICAgY29uc3QgYjAxID0gb3RoZXIuZ2V0KDAsIDEpO1xuICAgIGNvbnN0IGIwMiA9IG90aGVyLmdldCgwLCAyKTtcbiAgICBjb25zdCBiMTAgPSBvdGhlci5nZXQoMSwgMCk7XG4gICAgY29uc3QgYjExID0gb3RoZXIuZ2V0KDEsIDEpO1xuICAgIGNvbnN0IGIxMiA9IG90aGVyLmdldCgxLCAyKTtcbiAgICBjb25zdCBiMjAgPSBvdGhlci5nZXQoMiwgMCk7XG4gICAgY29uc3QgYjIxID0gb3RoZXIuZ2V0KDIsIDEpO1xuICAgIGNvbnN0IGIyMiA9IG90aGVyLmdldCgyLCAyKTtcblxuICAgIGNvbnN0IG0xID0gKGEwMCArIGEwMSArIGEwMiAtIGExMCAtIGExMSAtIGEyMSAtIGEyMikgKiBiMTE7XG4gICAgY29uc3QgbTIgPSAoYTAwIC0gYTEwKSAqICgtYjAxICsgYjExKTtcbiAgICBjb25zdCBtMyA9IGExMSAqICgtYjAwICsgYjAxICsgYjEwIC0gYjExIC0gYjEyIC0gYjIwICsgYjIyKTtcbiAgICBjb25zdCBtNCA9ICgtYTAwICsgYTEwICsgYTExKSAqIChiMDAgLSBiMDEgKyBiMTEpO1xuICAgIGNvbnN0IG01ID0gKGExMCArIGExMSkgKiAoLWIwMCArIGIwMSk7XG4gICAgY29uc3QgbTYgPSBhMDAgKiBiMDA7XG4gICAgY29uc3QgbTcgPSAoLWEwMCArIGEyMCArIGEyMSkgKiAoYjAwIC0gYjAyICsgYjEyKTtcbiAgICBjb25zdCBtOCA9ICgtYTAwICsgYTIwKSAqIChiMDIgLSBiMTIpO1xuICAgIGNvbnN0IG05ID0gKGEyMCArIGEyMSkgKiAoLWIwMCArIGIwMik7XG4gICAgY29uc3QgbTEwID0gKGEwMCArIGEwMSArIGEwMiAtIGExMSAtIGExMiAtIGEyMCAtIGEyMSkgKiBiMTI7XG4gICAgY29uc3QgbTExID0gYTIxICogKC1iMDAgKyBiMDIgKyBiMTAgLSBiMTEgLSBiMTIgLSBiMjAgKyBiMjEpO1xuICAgIGNvbnN0IG0xMiA9ICgtYTAyICsgYTIxICsgYTIyKSAqIChiMTEgKyBiMjAgLSBiMjEpO1xuICAgIGNvbnN0IG0xMyA9IChhMDIgLSBhMjIpICogKGIxMSAtIGIyMSk7XG4gICAgY29uc3QgbTE0ID0gYTAyICogYjIwO1xuICAgIGNvbnN0IG0xNSA9IChhMjEgKyBhMjIpICogKC1iMjAgKyBiMjEpO1xuICAgIGNvbnN0IG0xNiA9ICgtYTAyICsgYTExICsgYTEyKSAqIChiMTIgKyBiMjAgLSBiMjIpO1xuICAgIGNvbnN0IG0xNyA9IChhMDIgLSBhMTIpICogKGIxMiAtIGIyMik7XG4gICAgY29uc3QgbTE4ID0gKGExMSArIGExMikgKiAoLWIyMCArIGIyMik7XG4gICAgY29uc3QgbTE5ID0gYTAxICogYjEwO1xuICAgIGNvbnN0IG0yMCA9IGExMiAqIGIyMTtcbiAgICBjb25zdCBtMjEgPSBhMTAgKiBiMDI7XG4gICAgY29uc3QgbTIyID0gYTIwICogYjAxO1xuICAgIGNvbnN0IG0yMyA9IGEyMiAqIGIyMjtcblxuICAgIGNvbnN0IGMwMCA9IG02ICsgbTE0ICsgbTE5O1xuICAgIGNvbnN0IGMwMSA9IG0xICsgbTQgKyBtNSArIG02ICsgbTEyICsgbTE0ICsgbTE1O1xuICAgIGNvbnN0IGMwMiA9IG02ICsgbTcgKyBtOSArIG0xMCArIG0xNCArIG0xNiArIG0xODtcbiAgICBjb25zdCBjMTAgPSBtMiArIG0zICsgbTQgKyBtNiArIG0xNCArIG0xNiArIG0xNztcbiAgICBjb25zdCBjMTEgPSBtMiArIG00ICsgbTUgKyBtNiArIG0yMDtcbiAgICBjb25zdCBjMTIgPSBtMTQgKyBtMTYgKyBtMTcgKyBtMTggKyBtMjE7XG4gICAgY29uc3QgYzIwID0gbTYgKyBtNyArIG04ICsgbTExICsgbTEyICsgbTEzICsgbTE0O1xuICAgIGNvbnN0IGMyMSA9IG0xMiArIG0xMyArIG0xNCArIG0xNSArIG0yMjtcbiAgICBjb25zdCBjMjIgPSBtNiArIG03ICsgbTggKyBtOSArIG0yMztcblxuICAgIHJlc3VsdC5zZXQoMCwgMCwgYzAwKTtcbiAgICByZXN1bHQuc2V0KDAsIDEsIGMwMSk7XG4gICAgcmVzdWx0LnNldCgwLCAyLCBjMDIpO1xuICAgIHJlc3VsdC5zZXQoMSwgMCwgYzEwKTtcbiAgICByZXN1bHQuc2V0KDEsIDEsIGMxMSk7XG4gICAgcmVzdWx0LnNldCgxLCAyLCBjMTIpO1xuICAgIHJlc3VsdC5zZXQoMiwgMCwgYzIwKTtcbiAgICByZXN1bHQuc2V0KDIsIDEsIGMyMSk7XG4gICAgcmVzdWx0LnNldCgyLCAyLCBjMjIpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBtbXVsU3RyYXNzZW4oeSkge1xuICAgIHkgPSBNYXRyaXguY2hlY2tNYXRyaXgoeSk7XG4gICAgbGV0IHggPSB0aGlzLmNsb25lKCk7XG4gICAgbGV0IHIxID0geC5yb3dzO1xuICAgIGxldCBjMSA9IHguY29sdW1ucztcbiAgICBsZXQgcjIgPSB5LnJvd3M7XG4gICAgbGV0IGMyID0geS5jb2x1bW5zO1xuICAgIGlmIChjMSAhPT0gcjIpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgIGBNdWx0aXBseWluZyAke3IxfSB4ICR7YzF9IGFuZCAke3IyfSB4ICR7YzJ9IG1hdHJpeDogZGltZW5zaW9ucyBkbyBub3QgbWF0Y2guYCxcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLy8gUHV0IGEgbWF0cml4IGludG8gdGhlIHRvcCBsZWZ0IG9mIGEgbWF0cml4IG9mIHplcm9zLlxuICAgIC8vIGByb3dzYCBhbmQgYGNvbHNgIGFyZSB0aGUgZGltZW5zaW9ucyBvZiB0aGUgb3V0cHV0IG1hdHJpeC5cbiAgICBmdW5jdGlvbiBlbWJlZChtYXQsIHJvd3MsIGNvbHMpIHtcbiAgICAgIGxldCByID0gbWF0LnJvd3M7XG4gICAgICBsZXQgYyA9IG1hdC5jb2x1bW5zO1xuICAgICAgaWYgKHIgPT09IHJvd3MgJiYgYyA9PT0gY29scykge1xuICAgICAgICByZXR1cm4gbWF0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGV0IHJlc3VsdGF0ID0gQWJzdHJhY3RNYXRyaXguemVyb3Mocm93cywgY29scyk7XG4gICAgICAgIHJlc3VsdGF0ID0gcmVzdWx0YXQuc2V0U3ViTWF0cml4KG1hdCwgMCwgMCk7XG4gICAgICAgIHJldHVybiByZXN1bHRhdDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBNYWtlIHN1cmUgYm90aCBtYXRyaWNlcyBhcmUgdGhlIHNhbWUgc2l6ZS5cbiAgICAvLyBUaGlzIGlzIGV4Y2x1c2l2ZWx5IGZvciBzaW1wbGljaXR5OlxuICAgIC8vIHRoaXMgYWxnb3JpdGhtIGNhbiBiZSBpbXBsZW1lbnRlZCB3aXRoIG1hdHJpY2VzIG9mIGRpZmZlcmVudCBzaXplcy5cblxuICAgIGxldCByID0gTWF0aC5tYXgocjEsIHIyKTtcbiAgICBsZXQgYyA9IE1hdGgubWF4KGMxLCBjMik7XG4gICAgeCA9IGVtYmVkKHgsIHIsIGMpO1xuICAgIHkgPSBlbWJlZCh5LCByLCBjKTtcblxuICAgIC8vIE91ciByZWN1cnNpdmUgbXVsdGlwbGljYXRpb24gZnVuY3Rpb24uXG4gICAgZnVuY3Rpb24gYmxvY2tNdWx0KGEsIGIsIHJvd3MsIGNvbHMpIHtcbiAgICAgIC8vIEZvciBzbWFsbCBtYXRyaWNlcywgcmVzb3J0IHRvIG5haXZlIG11bHRpcGxpY2F0aW9uLlxuICAgICAgaWYgKHJvd3MgPD0gNTEyIHx8IGNvbHMgPD0gNTEyKSB7XG4gICAgICAgIHJldHVybiBhLm1tdWwoYik7IC8vIGEgaXMgZXF1aXZhbGVudCB0byB0aGlzXG4gICAgICB9XG5cbiAgICAgIC8vIEFwcGx5IGR5bmFtaWMgcGFkZGluZy5cbiAgICAgIGlmIChyb3dzICUgMiA9PT0gMSAmJiBjb2xzICUgMiA9PT0gMSkge1xuICAgICAgICBhID0gZW1iZWQoYSwgcm93cyArIDEsIGNvbHMgKyAxKTtcbiAgICAgICAgYiA9IGVtYmVkKGIsIHJvd3MgKyAxLCBjb2xzICsgMSk7XG4gICAgICB9IGVsc2UgaWYgKHJvd3MgJSAyID09PSAxKSB7XG4gICAgICAgIGEgPSBlbWJlZChhLCByb3dzICsgMSwgY29scyk7XG4gICAgICAgIGIgPSBlbWJlZChiLCByb3dzICsgMSwgY29scyk7XG4gICAgICB9IGVsc2UgaWYgKGNvbHMgJSAyID09PSAxKSB7XG4gICAgICAgIGEgPSBlbWJlZChhLCByb3dzLCBjb2xzICsgMSk7XG4gICAgICAgIGIgPSBlbWJlZChiLCByb3dzLCBjb2xzICsgMSk7XG4gICAgICB9XG5cbiAgICAgIGxldCBoYWxmUm93cyA9IHBhcnNlSW50KGEucm93cyAvIDIsIDEwKTtcbiAgICAgIGxldCBoYWxmQ29scyA9IHBhcnNlSW50KGEuY29sdW1ucyAvIDIsIDEwKTtcbiAgICAgIC8vIFN1YmRpdmlkZSBpbnB1dCBtYXRyaWNlcy5cbiAgICAgIGxldCBhMTEgPSBhLnN1Yk1hdHJpeCgwLCBoYWxmUm93cyAtIDEsIDAsIGhhbGZDb2xzIC0gMSk7XG4gICAgICBsZXQgYjExID0gYi5zdWJNYXRyaXgoMCwgaGFsZlJvd3MgLSAxLCAwLCBoYWxmQ29scyAtIDEpO1xuXG4gICAgICBsZXQgYTEyID0gYS5zdWJNYXRyaXgoMCwgaGFsZlJvd3MgLSAxLCBoYWxmQ29scywgYS5jb2x1bW5zIC0gMSk7XG4gICAgICBsZXQgYjEyID0gYi5zdWJNYXRyaXgoMCwgaGFsZlJvd3MgLSAxLCBoYWxmQ29scywgYi5jb2x1bW5zIC0gMSk7XG5cbiAgICAgIGxldCBhMjEgPSBhLnN1Yk1hdHJpeChoYWxmUm93cywgYS5yb3dzIC0gMSwgMCwgaGFsZkNvbHMgLSAxKTtcbiAgICAgIGxldCBiMjEgPSBiLnN1Yk1hdHJpeChoYWxmUm93cywgYi5yb3dzIC0gMSwgMCwgaGFsZkNvbHMgLSAxKTtcblxuICAgICAgbGV0IGEyMiA9IGEuc3ViTWF0cml4KGhhbGZSb3dzLCBhLnJvd3MgLSAxLCBoYWxmQ29scywgYS5jb2x1bW5zIC0gMSk7XG4gICAgICBsZXQgYjIyID0gYi5zdWJNYXRyaXgoaGFsZlJvd3MsIGIucm93cyAtIDEsIGhhbGZDb2xzLCBiLmNvbHVtbnMgLSAxKTtcblxuICAgICAgLy8gQ29tcHV0ZSBpbnRlcm1lZGlhdGUgdmFsdWVzLlxuICAgICAgbGV0IG0xID0gYmxvY2tNdWx0KFxuICAgICAgICBBYnN0cmFjdE1hdHJpeC5hZGQoYTExLCBhMjIpLFxuICAgICAgICBBYnN0cmFjdE1hdHJpeC5hZGQoYjExLCBiMjIpLFxuICAgICAgICBoYWxmUm93cyxcbiAgICAgICAgaGFsZkNvbHMsXG4gICAgICApO1xuICAgICAgbGV0IG0yID0gYmxvY2tNdWx0KEFic3RyYWN0TWF0cml4LmFkZChhMjEsIGEyMiksIGIxMSwgaGFsZlJvd3MsIGhhbGZDb2xzKTtcbiAgICAgIGxldCBtMyA9IGJsb2NrTXVsdChhMTEsIEFic3RyYWN0TWF0cml4LnN1YihiMTIsIGIyMiksIGhhbGZSb3dzLCBoYWxmQ29scyk7XG4gICAgICBsZXQgbTQgPSBibG9ja011bHQoYTIyLCBBYnN0cmFjdE1hdHJpeC5zdWIoYjIxLCBiMTEpLCBoYWxmUm93cywgaGFsZkNvbHMpO1xuICAgICAgbGV0IG01ID0gYmxvY2tNdWx0KEFic3RyYWN0TWF0cml4LmFkZChhMTEsIGExMiksIGIyMiwgaGFsZlJvd3MsIGhhbGZDb2xzKTtcbiAgICAgIGxldCBtNiA9IGJsb2NrTXVsdChcbiAgICAgICAgQWJzdHJhY3RNYXRyaXguc3ViKGEyMSwgYTExKSxcbiAgICAgICAgQWJzdHJhY3RNYXRyaXguYWRkKGIxMSwgYjEyKSxcbiAgICAgICAgaGFsZlJvd3MsXG4gICAgICAgIGhhbGZDb2xzLFxuICAgICAgKTtcbiAgICAgIGxldCBtNyA9IGJsb2NrTXVsdChcbiAgICAgICAgQWJzdHJhY3RNYXRyaXguc3ViKGExMiwgYTIyKSxcbiAgICAgICAgQWJzdHJhY3RNYXRyaXguYWRkKGIyMSwgYjIyKSxcbiAgICAgICAgaGFsZlJvd3MsXG4gICAgICAgIGhhbGZDb2xzLFxuICAgICAgKTtcblxuICAgICAgLy8gQ29tYmluZSBpbnRlcm1lZGlhdGUgdmFsdWVzIGludG8gdGhlIG91dHB1dC5cbiAgICAgIGxldCBjMTEgPSBBYnN0cmFjdE1hdHJpeC5hZGQobTEsIG00KTtcbiAgICAgIGMxMS5zdWIobTUpO1xuICAgICAgYzExLmFkZChtNyk7XG4gICAgICBsZXQgYzEyID0gQWJzdHJhY3RNYXRyaXguYWRkKG0zLCBtNSk7XG4gICAgICBsZXQgYzIxID0gQWJzdHJhY3RNYXRyaXguYWRkKG0yLCBtNCk7XG4gICAgICBsZXQgYzIyID0gQWJzdHJhY3RNYXRyaXguc3ViKG0xLCBtMik7XG4gICAgICBjMjIuYWRkKG0zKTtcbiAgICAgIGMyMi5hZGQobTYpO1xuXG4gICAgICAvLyBDcm9wIG91dHB1dCB0byB0aGUgZGVzaXJlZCBzaXplICh1bmRvIGR5bmFtaWMgcGFkZGluZykuXG4gICAgICBsZXQgcmVzdWx0YXQgPSBBYnN0cmFjdE1hdHJpeC56ZXJvcygyICogYzExLnJvd3MsIDIgKiBjMTEuY29sdW1ucyk7XG4gICAgICByZXN1bHRhdCA9IHJlc3VsdGF0LnNldFN1Yk1hdHJpeChjMTEsIDAsIDApO1xuICAgICAgcmVzdWx0YXQgPSByZXN1bHRhdC5zZXRTdWJNYXRyaXgoYzEyLCBjMTEucm93cywgMCk7XG4gICAgICByZXN1bHRhdCA9IHJlc3VsdGF0LnNldFN1Yk1hdHJpeChjMjEsIDAsIGMxMS5jb2x1bW5zKTtcbiAgICAgIHJlc3VsdGF0ID0gcmVzdWx0YXQuc2V0U3ViTWF0cml4KGMyMiwgYzExLnJvd3MsIGMxMS5jb2x1bW5zKTtcbiAgICAgIHJldHVybiByZXN1bHRhdC5zdWJNYXRyaXgoMCwgcm93cyAtIDEsIDAsIGNvbHMgLSAxKTtcbiAgICB9XG4gICAgcmV0dXJuIGJsb2NrTXVsdCh4LCB5LCByLCBjKTtcbiAgfVxuXG4gIHNjYWxlUm93cyhvcHRpb25zID0ge30pIHtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMgIT09ICdvYmplY3QnKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdvcHRpb25zIG11c3QgYmUgYW4gb2JqZWN0Jyk7XG4gICAgfVxuICAgIGNvbnN0IHsgbWluID0gMCwgbWF4ID0gMSB9ID0gb3B0aW9ucztcbiAgICBpZiAoIU51bWJlci5pc0Zpbml0ZShtaW4pKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdtaW4gbXVzdCBiZSBhIG51bWJlcicpO1xuICAgIGlmICghTnVtYmVyLmlzRmluaXRlKG1heCkpIHRocm93IG5ldyBUeXBlRXJyb3IoJ21heCBtdXN0IGJlIGEgbnVtYmVyJyk7XG4gICAgaWYgKG1pbiA+PSBtYXgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdtaW4gbXVzdCBiZSBzbWFsbGVyIHRoYW4gbWF4Jyk7XG4gICAgbGV0IG5ld01hdHJpeCA9IG5ldyBNYXRyaXgodGhpcy5yb3dzLCB0aGlzLmNvbHVtbnMpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5yb3dzOyBpKyspIHtcbiAgICAgIGNvbnN0IHJvdyA9IHRoaXMuZ2V0Um93KGkpO1xuICAgICAgcmVzY2FsZShyb3csIHsgbWluLCBtYXgsIG91dHB1dDogcm93IH0pO1xuICAgICAgbmV3TWF0cml4LnNldFJvdyhpLCByb3cpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3TWF0cml4O1xuICB9XG5cbiAgc2NhbGVDb2x1bW5zKG9wdGlvbnMgPSB7fSkge1xuICAgIGlmICh0eXBlb2Ygb3B0aW9ucyAhPT0gJ29iamVjdCcpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ29wdGlvbnMgbXVzdCBiZSBhbiBvYmplY3QnKTtcbiAgICB9XG4gICAgY29uc3QgeyBtaW4gPSAwLCBtYXggPSAxIH0gPSBvcHRpb25zO1xuICAgIGlmICghTnVtYmVyLmlzRmluaXRlKG1pbikpIHRocm93IG5ldyBUeXBlRXJyb3IoJ21pbiBtdXN0IGJlIGEgbnVtYmVyJyk7XG4gICAgaWYgKCFOdW1iZXIuaXNGaW5pdGUobWF4KSkgdGhyb3cgbmV3IFR5cGVFcnJvcignbWF4IG11c3QgYmUgYSBudW1iZXInKTtcbiAgICBpZiAobWluID49IG1heCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ21pbiBtdXN0IGJlIHNtYWxsZXIgdGhhbiBtYXgnKTtcbiAgICBsZXQgbmV3TWF0cml4ID0gbmV3IE1hdHJpeCh0aGlzLnJvd3MsIHRoaXMuY29sdW1ucyk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmNvbHVtbnM7IGkrKykge1xuICAgICAgY29uc3QgY29sdW1uID0gdGhpcy5nZXRDb2x1bW4oaSk7XG4gICAgICByZXNjYWxlKGNvbHVtbiwge1xuICAgICAgICBtaW46IG1pbixcbiAgICAgICAgbWF4OiBtYXgsXG4gICAgICAgIG91dHB1dDogY29sdW1uLFxuICAgICAgfSk7XG4gICAgICBuZXdNYXRyaXguc2V0Q29sdW1uKGksIGNvbHVtbik7XG4gICAgfVxuICAgIHJldHVybiBuZXdNYXRyaXg7XG4gIH1cblxuICBmbGlwUm93cygpIHtcbiAgICBjb25zdCBtaWRkbGUgPSBNYXRoLmNlaWwodGhpcy5jb2x1bW5zIC8gMik7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnJvd3M7IGkrKykge1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBtaWRkbGU7IGorKykge1xuICAgICAgICBsZXQgZmlyc3QgPSB0aGlzLmdldChpLCBqKTtcbiAgICAgICAgbGV0IGxhc3QgPSB0aGlzLmdldChpLCB0aGlzLmNvbHVtbnMgLSAxIC0gaik7XG4gICAgICAgIHRoaXMuc2V0KGksIGosIGxhc3QpO1xuICAgICAgICB0aGlzLnNldChpLCB0aGlzLmNvbHVtbnMgLSAxIC0gaiwgZmlyc3QpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGZsaXBDb2x1bW5zKCkge1xuICAgIGNvbnN0IG1pZGRsZSA9IE1hdGguY2VpbCh0aGlzLnJvd3MgLyAyKTtcbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMuY29sdW1uczsgaisrKSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1pZGRsZTsgaSsrKSB7XG4gICAgICAgIGxldCBmaXJzdCA9IHRoaXMuZ2V0KGksIGopO1xuICAgICAgICBsZXQgbGFzdCA9IHRoaXMuZ2V0KHRoaXMucm93cyAtIDEgLSBpLCBqKTtcbiAgICAgICAgdGhpcy5zZXQoaSwgaiwgbGFzdCk7XG4gICAgICAgIHRoaXMuc2V0KHRoaXMucm93cyAtIDEgLSBpLCBqLCBmaXJzdCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAga3JvbmVja2VyUHJvZHVjdChvdGhlcikge1xuICAgIG90aGVyID0gTWF0cml4LmNoZWNrTWF0cml4KG90aGVyKTtcblxuICAgIGxldCBtID0gdGhpcy5yb3dzO1xuICAgIGxldCBuID0gdGhpcy5jb2x1bW5zO1xuICAgIGxldCBwID0gb3RoZXIucm93cztcbiAgICBsZXQgcSA9IG90aGVyLmNvbHVtbnM7XG5cbiAgICBsZXQgcmVzdWx0ID0gbmV3IE1hdHJpeChtICogcCwgbiAqIHEpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbTsgaSsrKSB7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IG47IGorKykge1xuICAgICAgICBmb3IgKGxldCBrID0gMDsgayA8IHA7IGsrKykge1xuICAgICAgICAgIGZvciAobGV0IGwgPSAwOyBsIDwgcTsgbCsrKSB7XG4gICAgICAgICAgICByZXN1bHQuc2V0KHAgKiBpICsgaywgcSAqIGogKyBsLCB0aGlzLmdldChpLCBqKSAqIG90aGVyLmdldChrLCBsKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICB0cmFuc3Bvc2UoKSB7XG4gICAgbGV0IHJlc3VsdCA9IG5ldyBNYXRyaXgodGhpcy5jb2x1bW5zLCB0aGlzLnJvd3MpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5yb3dzOyBpKyspIHtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy5jb2x1bW5zOyBqKyspIHtcbiAgICAgICAgcmVzdWx0LnNldChqLCBpLCB0aGlzLmdldChpLCBqKSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBzb3J0Um93cyhjb21wYXJlRnVuY3Rpb24gPSBjb21wYXJlTnVtYmVycykge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5yb3dzOyBpKyspIHtcbiAgICAgIHRoaXMuc2V0Um93KGksIHRoaXMuZ2V0Um93KGkpLnNvcnQoY29tcGFyZUZ1bmN0aW9uKSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgc29ydENvbHVtbnMoY29tcGFyZUZ1bmN0aW9uID0gY29tcGFyZU51bWJlcnMpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuY29sdW1uczsgaSsrKSB7XG4gICAgICB0aGlzLnNldENvbHVtbihpLCB0aGlzLmdldENvbHVtbihpKS5zb3J0KGNvbXBhcmVGdW5jdGlvbikpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHN1Yk1hdHJpeChzdGFydFJvdywgZW5kUm93LCBzdGFydENvbHVtbiwgZW5kQ29sdW1uKSB7XG4gICAgY2hlY2tSYW5nZSh0aGlzLCBzdGFydFJvdywgZW5kUm93LCBzdGFydENvbHVtbiwgZW5kQ29sdW1uKTtcbiAgICBsZXQgbmV3TWF0cml4ID0gbmV3IE1hdHJpeChcbiAgICAgIGVuZFJvdyAtIHN0YXJ0Um93ICsgMSxcbiAgICAgIGVuZENvbHVtbiAtIHN0YXJ0Q29sdW1uICsgMSxcbiAgICApO1xuICAgIGZvciAobGV0IGkgPSBzdGFydFJvdzsgaSA8PSBlbmRSb3c7IGkrKykge1xuICAgICAgZm9yIChsZXQgaiA9IHN0YXJ0Q29sdW1uOyBqIDw9IGVuZENvbHVtbjsgaisrKSB7XG4gICAgICAgIG5ld01hdHJpeC5zZXQoaSAtIHN0YXJ0Um93LCBqIC0gc3RhcnRDb2x1bW4sIHRoaXMuZ2V0KGksIGopKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5ld01hdHJpeDtcbiAgfVxuXG4gIHN1Yk1hdHJpeFJvdyhpbmRpY2VzLCBzdGFydENvbHVtbiwgZW5kQ29sdW1uKSB7XG4gICAgaWYgKHN0YXJ0Q29sdW1uID09PSB1bmRlZmluZWQpIHN0YXJ0Q29sdW1uID0gMDtcbiAgICBpZiAoZW5kQ29sdW1uID09PSB1bmRlZmluZWQpIGVuZENvbHVtbiA9IHRoaXMuY29sdW1ucyAtIDE7XG4gICAgaWYgKFxuICAgICAgc3RhcnRDb2x1bW4gPiBlbmRDb2x1bW4gfHxcbiAgICAgIHN0YXJ0Q29sdW1uIDwgMCB8fFxuICAgICAgc3RhcnRDb2x1bW4gPj0gdGhpcy5jb2x1bW5zIHx8XG4gICAgICBlbmRDb2x1bW4gPCAwIHx8XG4gICAgICBlbmRDb2x1bW4gPj0gdGhpcy5jb2x1bW5zXG4gICAgKSB7XG4gICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQXJndW1lbnQgb3V0IG9mIHJhbmdlJyk7XG4gICAgfVxuXG4gICAgbGV0IG5ld01hdHJpeCA9IG5ldyBNYXRyaXgoaW5kaWNlcy5sZW5ndGgsIGVuZENvbHVtbiAtIHN0YXJ0Q29sdW1uICsgMSk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbmRpY2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBmb3IgKGxldCBqID0gc3RhcnRDb2x1bW47IGogPD0gZW5kQ29sdW1uOyBqKyspIHtcbiAgICAgICAgaWYgKGluZGljZXNbaV0gPCAwIHx8IGluZGljZXNbaV0gPj0gdGhpcy5yb3dzKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoYFJvdyBpbmRleCBvdXQgb2YgcmFuZ2U6ICR7aW5kaWNlc1tpXX1gKTtcbiAgICAgICAgfVxuICAgICAgICBuZXdNYXRyaXguc2V0KGksIGogLSBzdGFydENvbHVtbiwgdGhpcy5nZXQoaW5kaWNlc1tpXSwgaikpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbmV3TWF0cml4O1xuICB9XG5cbiAgc3ViTWF0cml4Q29sdW1uKGluZGljZXMsIHN0YXJ0Um93LCBlbmRSb3cpIHtcbiAgICBpZiAoc3RhcnRSb3cgPT09IHVuZGVmaW5lZCkgc3RhcnRSb3cgPSAwO1xuICAgIGlmIChlbmRSb3cgPT09IHVuZGVmaW5lZCkgZW5kUm93ID0gdGhpcy5yb3dzIC0gMTtcbiAgICBpZiAoXG4gICAgICBzdGFydFJvdyA+IGVuZFJvdyB8fFxuICAgICAgc3RhcnRSb3cgPCAwIHx8XG4gICAgICBzdGFydFJvdyA+PSB0aGlzLnJvd3MgfHxcbiAgICAgIGVuZFJvdyA8IDAgfHxcbiAgICAgIGVuZFJvdyA+PSB0aGlzLnJvd3NcbiAgICApIHtcbiAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdBcmd1bWVudCBvdXQgb2YgcmFuZ2UnKTtcbiAgICB9XG5cbiAgICBsZXQgbmV3TWF0cml4ID0gbmV3IE1hdHJpeChlbmRSb3cgLSBzdGFydFJvdyArIDEsIGluZGljZXMubGVuZ3RoKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGluZGljZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGZvciAobGV0IGogPSBzdGFydFJvdzsgaiA8PSBlbmRSb3c7IGorKykge1xuICAgICAgICBpZiAoaW5kaWNlc1tpXSA8IDAgfHwgaW5kaWNlc1tpXSA+PSB0aGlzLmNvbHVtbnMpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihgQ29sdW1uIGluZGV4IG91dCBvZiByYW5nZTogJHtpbmRpY2VzW2ldfWApO1xuICAgICAgICB9XG4gICAgICAgIG5ld01hdHJpeC5zZXQoaiAtIHN0YXJ0Um93LCBpLCB0aGlzLmdldChqLCBpbmRpY2VzW2ldKSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBuZXdNYXRyaXg7XG4gIH1cblxuICBzZXRTdWJNYXRyaXgobWF0cml4LCBzdGFydFJvdywgc3RhcnRDb2x1bW4pIHtcbiAgICBtYXRyaXggPSBNYXRyaXguY2hlY2tNYXRyaXgobWF0cml4KTtcbiAgICBsZXQgZW5kUm93ID0gc3RhcnRSb3cgKyBtYXRyaXgucm93cyAtIDE7XG4gICAgbGV0IGVuZENvbHVtbiA9IHN0YXJ0Q29sdW1uICsgbWF0cml4LmNvbHVtbnMgLSAxO1xuICAgIGNoZWNrUmFuZ2UodGhpcywgc3RhcnRSb3csIGVuZFJvdywgc3RhcnRDb2x1bW4sIGVuZENvbHVtbik7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtYXRyaXgucm93czsgaSsrKSB7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IG1hdHJpeC5jb2x1bW5zOyBqKyspIHtcbiAgICAgICAgdGhpcy5zZXQoc3RhcnRSb3cgKyBpLCBzdGFydENvbHVtbiArIGosIG1hdHJpeC5nZXQoaSwgaikpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHNlbGVjdGlvbihyb3dJbmRpY2VzLCBjb2x1bW5JbmRpY2VzKSB7XG4gICAgbGV0IGluZGljZXMgPSBjaGVja0luZGljZXModGhpcywgcm93SW5kaWNlcywgY29sdW1uSW5kaWNlcyk7XG4gICAgbGV0IG5ld01hdHJpeCA9IG5ldyBNYXRyaXgocm93SW5kaWNlcy5sZW5ndGgsIGNvbHVtbkluZGljZXMubGVuZ3RoKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGluZGljZXMucm93Lmxlbmd0aDsgaSsrKSB7XG4gICAgICBsZXQgcm93SW5kZXggPSBpbmRpY2VzLnJvd1tpXTtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgaW5kaWNlcy5jb2x1bW4ubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgbGV0IGNvbHVtbkluZGV4ID0gaW5kaWNlcy5jb2x1bW5bal07XG4gICAgICAgIG5ld01hdHJpeC5zZXQoaSwgaiwgdGhpcy5nZXQocm93SW5kZXgsIGNvbHVtbkluZGV4KSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBuZXdNYXRyaXg7XG4gIH1cblxuICB0cmFjZSgpIHtcbiAgICBsZXQgbWluID0gTWF0aC5taW4odGhpcy5yb3dzLCB0aGlzLmNvbHVtbnMpO1xuICAgIGxldCB0cmFjZSA9IDA7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtaW47IGkrKykge1xuICAgICAgdHJhY2UgKz0gdGhpcy5nZXQoaSwgaSk7XG4gICAgfVxuICAgIHJldHVybiB0cmFjZTtcbiAgfVxuXG4gIGNsb25lKCkge1xuICAgIGxldCBuZXdNYXRyaXggPSBuZXcgTWF0cml4KHRoaXMucm93cywgdGhpcy5jb2x1bW5zKTtcbiAgICBmb3IgKGxldCByb3cgPSAwOyByb3cgPCB0aGlzLnJvd3M7IHJvdysrKSB7XG4gICAgICBmb3IgKGxldCBjb2x1bW4gPSAwOyBjb2x1bW4gPCB0aGlzLmNvbHVtbnM7IGNvbHVtbisrKSB7XG4gICAgICAgIG5ld01hdHJpeC5zZXQocm93LCBjb2x1bW4sIHRoaXMuZ2V0KHJvdywgY29sdW1uKSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBuZXdNYXRyaXg7XG4gIH1cblxuICBzdW0oYnkpIHtcbiAgICBzd2l0Y2ggKGJ5KSB7XG4gICAgICBjYXNlICdyb3cnOlxuICAgICAgICByZXR1cm4gc3VtQnlSb3codGhpcyk7XG4gICAgICBjYXNlICdjb2x1bW4nOlxuICAgICAgICByZXR1cm4gc3VtQnlDb2x1bW4odGhpcyk7XG4gICAgICBjYXNlIHVuZGVmaW5lZDpcbiAgICAgICAgcmV0dXJuIHN1bUFsbCh0aGlzKTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgaW52YWxpZCBvcHRpb246ICR7Ynl9YCk7XG4gICAgfVxuICB9XG5cbiAgcHJvZHVjdChieSkge1xuICAgIHN3aXRjaCAoYnkpIHtcbiAgICAgIGNhc2UgJ3Jvdyc6XG4gICAgICAgIHJldHVybiBwcm9kdWN0QnlSb3codGhpcyk7XG4gICAgICBjYXNlICdjb2x1bW4nOlxuICAgICAgICByZXR1cm4gcHJvZHVjdEJ5Q29sdW1uKHRoaXMpO1xuICAgICAgY2FzZSB1bmRlZmluZWQ6XG4gICAgICAgIHJldHVybiBwcm9kdWN0QWxsKHRoaXMpO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBpbnZhbGlkIG9wdGlvbjogJHtieX1gKTtcbiAgICB9XG4gIH1cblxuICBtZWFuKGJ5KSB7XG4gICAgY29uc3Qgc3VtID0gdGhpcy5zdW0oYnkpO1xuICAgIHN3aXRjaCAoYnkpIHtcbiAgICAgIGNhc2UgJ3Jvdyc6IHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnJvd3M7IGkrKykge1xuICAgICAgICAgIHN1bVtpXSAvPSB0aGlzLmNvbHVtbnM7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN1bTtcbiAgICAgIH1cbiAgICAgIGNhc2UgJ2NvbHVtbic6IHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmNvbHVtbnM7IGkrKykge1xuICAgICAgICAgIHN1bVtpXSAvPSB0aGlzLnJvd3M7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN1bTtcbiAgICAgIH1cbiAgICAgIGNhc2UgdW5kZWZpbmVkOlxuICAgICAgICByZXR1cm4gc3VtIC8gdGhpcy5zaXplO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBpbnZhbGlkIG9wdGlvbjogJHtieX1gKTtcbiAgICB9XG4gIH1cblxuICB2YXJpYW5jZShieSwgb3B0aW9ucyA9IHt9KSB7XG4gICAgaWYgKHR5cGVvZiBieSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIG9wdGlvbnMgPSBieTtcbiAgICAgIGJ5ID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIG9wdGlvbnMgIT09ICdvYmplY3QnKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdvcHRpb25zIG11c3QgYmUgYW4gb2JqZWN0Jyk7XG4gICAgfVxuICAgIGNvbnN0IHsgdW5iaWFzZWQgPSB0cnVlLCBtZWFuID0gdGhpcy5tZWFuKGJ5KSB9ID0gb3B0aW9ucztcbiAgICBpZiAodHlwZW9mIHVuYmlhc2VkICE9PSAnYm9vbGVhbicpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3VuYmlhc2VkIG11c3QgYmUgYSBib29sZWFuJyk7XG4gICAgfVxuICAgIHN3aXRjaCAoYnkpIHtcbiAgICAgIGNhc2UgJ3Jvdyc6IHtcbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KG1lYW4pKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignbWVhbiBtdXN0IGJlIGFuIGFycmF5Jyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhcmlhbmNlQnlSb3codGhpcywgdW5iaWFzZWQsIG1lYW4pO1xuICAgICAgfVxuICAgICAgY2FzZSAnY29sdW1uJzoge1xuICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkobWVhbikpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdtZWFuIG11c3QgYmUgYW4gYXJyYXknKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFyaWFuY2VCeUNvbHVtbih0aGlzLCB1bmJpYXNlZCwgbWVhbik7XG4gICAgICB9XG4gICAgICBjYXNlIHVuZGVmaW5lZDoge1xuICAgICAgICBpZiAodHlwZW9mIG1lYW4gIT09ICdudW1iZXInKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignbWVhbiBtdXN0IGJlIGEgbnVtYmVyJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhcmlhbmNlQWxsKHRoaXMsIHVuYmlhc2VkLCBtZWFuKTtcbiAgICAgIH1cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgaW52YWxpZCBvcHRpb246ICR7Ynl9YCk7XG4gICAgfVxuICB9XG5cbiAgc3RhbmRhcmREZXZpYXRpb24oYnksIG9wdGlvbnMpIHtcbiAgICBpZiAodHlwZW9mIGJ5ID09PSAnb2JqZWN0Jykge1xuICAgICAgb3B0aW9ucyA9IGJ5O1xuICAgICAgYnkgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGNvbnN0IHZhcmlhbmNlID0gdGhpcy52YXJpYW5jZShieSwgb3B0aW9ucyk7XG4gICAgaWYgKGJ5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBNYXRoLnNxcnQodmFyaWFuY2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZhcmlhbmNlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhcmlhbmNlW2ldID0gTWF0aC5zcXJ0KHZhcmlhbmNlW2ldKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2YXJpYW5jZTtcbiAgICB9XG4gIH1cblxuICBjZW50ZXIoYnksIG9wdGlvbnMgPSB7fSkge1xuICAgIGlmICh0eXBlb2YgYnkgPT09ICdvYmplY3QnKSB7XG4gICAgICBvcHRpb25zID0gYnk7XG4gICAgICBieSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zICE9PSAnb2JqZWN0Jykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignb3B0aW9ucyBtdXN0IGJlIGFuIG9iamVjdCcpO1xuICAgIH1cbiAgICBjb25zdCB7IGNlbnRlciA9IHRoaXMubWVhbihieSkgfSA9IG9wdGlvbnM7XG4gICAgc3dpdGNoIChieSkge1xuICAgICAgY2FzZSAncm93Jzoge1xuICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoY2VudGVyKSkge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2NlbnRlciBtdXN0IGJlIGFuIGFycmF5Jyk7XG4gICAgICAgIH1cbiAgICAgICAgY2VudGVyQnlSb3codGhpcywgY2VudGVyKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgICBjYXNlICdjb2x1bW4nOiB7XG4gICAgICAgIGlmICghQXJyYXkuaXNBcnJheShjZW50ZXIpKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignY2VudGVyIG11c3QgYmUgYW4gYXJyYXknKTtcbiAgICAgICAgfVxuICAgICAgICBjZW50ZXJCeUNvbHVtbih0aGlzLCBjZW50ZXIpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIGNhc2UgdW5kZWZpbmVkOiB7XG4gICAgICAgIGlmICh0eXBlb2YgY2VudGVyICE9PSAnbnVtYmVyJykge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2NlbnRlciBtdXN0IGJlIGEgbnVtYmVyJyk7XG4gICAgICAgIH1cbiAgICAgICAgY2VudGVyQWxsKHRoaXMsIGNlbnRlcik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBpbnZhbGlkIG9wdGlvbjogJHtieX1gKTtcbiAgICB9XG4gIH1cblxuICBzY2FsZShieSwgb3B0aW9ucyA9IHt9KSB7XG4gICAgaWYgKHR5cGVvZiBieSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIG9wdGlvbnMgPSBieTtcbiAgICAgIGJ5ID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIG9wdGlvbnMgIT09ICdvYmplY3QnKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdvcHRpb25zIG11c3QgYmUgYW4gb2JqZWN0Jyk7XG4gICAgfVxuICAgIGxldCBzY2FsZSA9IG9wdGlvbnMuc2NhbGU7XG4gICAgc3dpdGNoIChieSkge1xuICAgICAgY2FzZSAncm93Jzoge1xuICAgICAgICBpZiAoc2NhbGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHNjYWxlID0gZ2V0U2NhbGVCeVJvdyh0aGlzKTtcbiAgICAgICAgfSBlbHNlIGlmICghQXJyYXkuaXNBcnJheShzY2FsZSkpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdzY2FsZSBtdXN0IGJlIGFuIGFycmF5Jyk7XG4gICAgICAgIH1cbiAgICAgICAgc2NhbGVCeVJvdyh0aGlzLCBzY2FsZSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgY2FzZSAnY29sdW1uJzoge1xuICAgICAgICBpZiAoc2NhbGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHNjYWxlID0gZ2V0U2NhbGVCeUNvbHVtbih0aGlzKTtcbiAgICAgICAgfSBlbHNlIGlmICghQXJyYXkuaXNBcnJheShzY2FsZSkpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdzY2FsZSBtdXN0IGJlIGFuIGFycmF5Jyk7XG4gICAgICAgIH1cbiAgICAgICAgc2NhbGVCeUNvbHVtbih0aGlzLCBzY2FsZSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgY2FzZSB1bmRlZmluZWQ6IHtcbiAgICAgICAgaWYgKHNjYWxlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBzY2FsZSA9IGdldFNjYWxlQWxsKHRoaXMpO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBzY2FsZSAhPT0gJ251bWJlcicpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdzY2FsZSBtdXN0IGJlIGEgbnVtYmVyJyk7XG4gICAgICAgIH1cbiAgICAgICAgc2NhbGVBbGwodGhpcywgc2NhbGUpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgaW52YWxpZCBvcHRpb246ICR7Ynl9YCk7XG4gICAgfVxuICB9XG59XG5cbkFic3RyYWN0TWF0cml4LnByb3RvdHlwZS5rbGFzcyA9ICdNYXRyaXgnO1xuaWYgKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnKSB7XG4gIEFic3RyYWN0TWF0cml4LnByb3RvdHlwZVtcbiAgICBTeW1ib2wuZm9yKCdub2RlanMudXRpbC5pbnNwZWN0LmN1c3RvbScpXG4gIF0gPSBpbnNwZWN0TWF0cml4O1xufVxuXG5mdW5jdGlvbiBjb21wYXJlTnVtYmVycyhhLCBiKSB7XG4gIHJldHVybiBhIC0gYjtcbn1cblxuLy8gU3lub255bXNcbkFic3RyYWN0TWF0cml4LnJhbmRvbSA9IEFic3RyYWN0TWF0cml4LnJhbmQ7XG5BYnN0cmFjdE1hdHJpeC5yYW5kb21JbnQgPSBBYnN0cmFjdE1hdHJpeC5yYW5kSW50O1xuQWJzdHJhY3RNYXRyaXguZGlhZ29uYWwgPSBBYnN0cmFjdE1hdHJpeC5kaWFnO1xuQWJzdHJhY3RNYXRyaXgucHJvdG90eXBlLmRpYWdvbmFsID0gQWJzdHJhY3RNYXRyaXgucHJvdG90eXBlLmRpYWc7XG5BYnN0cmFjdE1hdHJpeC5pZGVudGl0eSA9IEFic3RyYWN0TWF0cml4LmV5ZTtcbkFic3RyYWN0TWF0cml4LnByb3RvdHlwZS5uZWdhdGUgPSBBYnN0cmFjdE1hdHJpeC5wcm90b3R5cGUubmVnO1xuQWJzdHJhY3RNYXRyaXgucHJvdG90eXBlLnRlbnNvclByb2R1Y3QgPVxuICBBYnN0cmFjdE1hdHJpeC5wcm90b3R5cGUua3JvbmVja2VyUHJvZHVjdDtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTWF0cml4IGV4dGVuZHMgQWJzdHJhY3RNYXRyaXgge1xuICBjb25zdHJ1Y3RvcihuUm93cywgbkNvbHVtbnMpIHtcbiAgICBzdXBlcigpO1xuICAgIGlmIChNYXRyaXguaXNNYXRyaXgoblJvd3MpKSB7XG4gICAgICByZXR1cm4gblJvd3MuY2xvbmUoKTtcbiAgICB9IGVsc2UgaWYgKE51bWJlci5pc0ludGVnZXIoblJvd3MpICYmIG5Sb3dzID4gMCkge1xuICAgICAgLy8gQ3JlYXRlIGFuIGVtcHR5IG1hdHJpeFxuICAgICAgdGhpcy5kYXRhID0gW107XG4gICAgICBpZiAoTnVtYmVyLmlzSW50ZWdlcihuQ29sdW1ucykgJiYgbkNvbHVtbnMgPiAwKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgblJvd3M7IGkrKykge1xuICAgICAgICAgIHRoaXMuZGF0YS5wdXNoKG5ldyBGbG9hdDY0QXJyYXkobkNvbHVtbnMpKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignbkNvbHVtbnMgbXVzdCBiZSBhIHBvc2l0aXZlIGludGVnZXInKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoblJvd3MpKSB7XG4gICAgICAvLyBDb3B5IHRoZSB2YWx1ZXMgZnJvbSB0aGUgMkQgYXJyYXlcbiAgICAgIGNvbnN0IGFycmF5RGF0YSA9IG5Sb3dzO1xuICAgICAgblJvd3MgPSBhcnJheURhdGEubGVuZ3RoO1xuICAgICAgbkNvbHVtbnMgPSBhcnJheURhdGFbMF0ubGVuZ3RoO1xuICAgICAgaWYgKHR5cGVvZiBuQ29sdW1ucyAhPT0gJ251bWJlcicgfHwgbkNvbHVtbnMgPT09IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICAgICAnRGF0YSBtdXN0IGJlIGEgMkQgYXJyYXkgd2l0aCBhdCBsZWFzdCBvbmUgZWxlbWVudCcsXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICB0aGlzLmRhdGEgPSBbXTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgblJvd3M7IGkrKykge1xuICAgICAgICBpZiAoYXJyYXlEYXRhW2ldLmxlbmd0aCAhPT0gbkNvbHVtbnMpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5jb25zaXN0ZW50IGFycmF5IGRpbWVuc2lvbnMnKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRhdGEucHVzaChGbG9hdDY0QXJyYXkuZnJvbShhcnJheURhdGFbaV0pKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICAgJ0ZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBwb3NpdGl2ZSBudW1iZXIgb3IgYW4gYXJyYXknLFxuICAgICAgKTtcbiAgICB9XG4gICAgdGhpcy5yb3dzID0gblJvd3M7XG4gICAgdGhpcy5jb2x1bW5zID0gbkNvbHVtbnM7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBzZXQocm93SW5kZXgsIGNvbHVtbkluZGV4LCB2YWx1ZSkge1xuICAgIHRoaXMuZGF0YVtyb3dJbmRleF1bY29sdW1uSW5kZXhdID0gdmFsdWU7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBnZXQocm93SW5kZXgsIGNvbHVtbkluZGV4KSB7XG4gICAgcmV0dXJuIHRoaXMuZGF0YVtyb3dJbmRleF1bY29sdW1uSW5kZXhdO1xuICB9XG5cbiAgcmVtb3ZlUm93KGluZGV4KSB7XG4gICAgY2hlY2tSb3dJbmRleCh0aGlzLCBpbmRleCk7XG4gICAgaWYgKHRoaXMucm93cyA9PT0gMSkge1xuICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0EgbWF0cml4IGNhbm5vdCBoYXZlIGxlc3MgdGhhbiBvbmUgcm93Jyk7XG4gICAgfVxuICAgIHRoaXMuZGF0YS5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIHRoaXMucm93cyAtPSAxO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgYWRkUm93KGluZGV4LCBhcnJheSkge1xuICAgIGlmIChhcnJheSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBhcnJheSA9IGluZGV4O1xuICAgICAgaW5kZXggPSB0aGlzLnJvd3M7XG4gICAgfVxuICAgIGNoZWNrUm93SW5kZXgodGhpcywgaW5kZXgsIHRydWUpO1xuICAgIGFycmF5ID0gRmxvYXQ2NEFycmF5LmZyb20oY2hlY2tSb3dWZWN0b3IodGhpcywgYXJyYXksIHRydWUpKTtcbiAgICB0aGlzLmRhdGEuc3BsaWNlKGluZGV4LCAwLCBhcnJheSk7XG4gICAgdGhpcy5yb3dzICs9IDE7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICByZW1vdmVDb2x1bW4oaW5kZXgpIHtcbiAgICBjaGVja0NvbHVtbkluZGV4KHRoaXMsIGluZGV4KTtcbiAgICBpZiAodGhpcy5jb2x1bW5zID09PSAxKSB7XG4gICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQSBtYXRyaXggY2Fubm90IGhhdmUgbGVzcyB0aGFuIG9uZSBjb2x1bW4nKTtcbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnJvd3M7IGkrKykge1xuICAgICAgY29uc3QgbmV3Um93ID0gbmV3IEZsb2F0NjRBcnJheSh0aGlzLmNvbHVtbnMgLSAxKTtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgaW5kZXg7IGorKykge1xuICAgICAgICBuZXdSb3dbal0gPSB0aGlzLmRhdGFbaV1bal07XG4gICAgICB9XG4gICAgICBmb3IgKGxldCBqID0gaW5kZXggKyAxOyBqIDwgdGhpcy5jb2x1bW5zOyBqKyspIHtcbiAgICAgICAgbmV3Um93W2ogLSAxXSA9IHRoaXMuZGF0YVtpXVtqXTtcbiAgICAgIH1cbiAgICAgIHRoaXMuZGF0YVtpXSA9IG5ld1JvdztcbiAgICB9XG4gICAgdGhpcy5jb2x1bW5zIC09IDE7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBhZGRDb2x1bW4oaW5kZXgsIGFycmF5KSB7XG4gICAgaWYgKHR5cGVvZiBhcnJheSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGFycmF5ID0gaW5kZXg7XG4gICAgICBpbmRleCA9IHRoaXMuY29sdW1ucztcbiAgICB9XG4gICAgY2hlY2tDb2x1bW5JbmRleCh0aGlzLCBpbmRleCwgdHJ1ZSk7XG4gICAgYXJyYXkgPSBjaGVja0NvbHVtblZlY3Rvcih0aGlzLCBhcnJheSk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnJvd3M7IGkrKykge1xuICAgICAgY29uc3QgbmV3Um93ID0gbmV3IEZsb2F0NjRBcnJheSh0aGlzLmNvbHVtbnMgKyAxKTtcbiAgICAgIGxldCBqID0gMDtcbiAgICAgIGZvciAoOyBqIDwgaW5kZXg7IGorKykge1xuICAgICAgICBuZXdSb3dbal0gPSB0aGlzLmRhdGFbaV1bal07XG4gICAgICB9XG4gICAgICBuZXdSb3dbaisrXSA9IGFycmF5W2ldO1xuICAgICAgZm9yICg7IGogPCB0aGlzLmNvbHVtbnMgKyAxOyBqKyspIHtcbiAgICAgICAgbmV3Um93W2pdID0gdGhpcy5kYXRhW2ldW2ogLSAxXTtcbiAgICAgIH1cbiAgICAgIHRoaXMuZGF0YVtpXSA9IG5ld1JvdztcbiAgICB9XG4gICAgdGhpcy5jb2x1bW5zICs9IDE7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbn1cblxuaW5zdGFsbE1hdGhPcGVyYXRpb25zKEFic3RyYWN0TWF0cml4LCBNYXRyaXgpO1xuIiwiaW1wb3J0IHsgbmV3QXJyYXkgfSBmcm9tICcuL3V0aWwnO1xuXG5leHBvcnQgZnVuY3Rpb24gc3VtQnlSb3cobWF0cml4KSB7XG4gIGxldCBzdW0gPSBuZXdBcnJheShtYXRyaXgucm93cyk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbWF0cml4LnJvd3M7ICsraSkge1xuICAgIGZvciAobGV0IGogPSAwOyBqIDwgbWF0cml4LmNvbHVtbnM7ICsraikge1xuICAgICAgc3VtW2ldICs9IG1hdHJpeC5nZXQoaSwgaik7XG4gICAgfVxuICB9XG4gIHJldHVybiBzdW07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzdW1CeUNvbHVtbihtYXRyaXgpIHtcbiAgbGV0IHN1bSA9IG5ld0FycmF5KG1hdHJpeC5jb2x1bW5zKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBtYXRyaXgucm93czsgKytpKSB7XG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCBtYXRyaXguY29sdW1uczsgKytqKSB7XG4gICAgICBzdW1bal0gKz0gbWF0cml4LmdldChpLCBqKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHN1bTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN1bUFsbChtYXRyaXgpIHtcbiAgbGV0IHYgPSAwO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IG1hdHJpeC5yb3dzOyBpKyspIHtcbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IG1hdHJpeC5jb2x1bW5zOyBqKyspIHtcbiAgICAgIHYgKz0gbWF0cml4LmdldChpLCBqKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHY7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwcm9kdWN0QnlSb3cobWF0cml4KSB7XG4gIGxldCBzdW0gPSBuZXdBcnJheShtYXRyaXgucm93cywgMSk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbWF0cml4LnJvd3M7ICsraSkge1xuICAgIGZvciAobGV0IGogPSAwOyBqIDwgbWF0cml4LmNvbHVtbnM7ICsraikge1xuICAgICAgc3VtW2ldICo9IG1hdHJpeC5nZXQoaSwgaik7XG4gICAgfVxuICB9XG4gIHJldHVybiBzdW07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwcm9kdWN0QnlDb2x1bW4obWF0cml4KSB7XG4gIGxldCBzdW0gPSBuZXdBcnJheShtYXRyaXguY29sdW1ucywgMSk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbWF0cml4LnJvd3M7ICsraSkge1xuICAgIGZvciAobGV0IGogPSAwOyBqIDwgbWF0cml4LmNvbHVtbnM7ICsraikge1xuICAgICAgc3VtW2pdICo9IG1hdHJpeC5nZXQoaSwgaik7XG4gICAgfVxuICB9XG4gIHJldHVybiBzdW07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwcm9kdWN0QWxsKG1hdHJpeCkge1xuICBsZXQgdiA9IDE7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbWF0cml4LnJvd3M7IGkrKykge1xuICAgIGZvciAobGV0IGogPSAwOyBqIDwgbWF0cml4LmNvbHVtbnM7IGorKykge1xuICAgICAgdiAqPSBtYXRyaXguZ2V0KGksIGopO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHZhcmlhbmNlQnlSb3cobWF0cml4LCB1bmJpYXNlZCwgbWVhbikge1xuICBjb25zdCByb3dzID0gbWF0cml4LnJvd3M7XG4gIGNvbnN0IGNvbHMgPSBtYXRyaXguY29sdW1ucztcbiAgY29uc3QgdmFyaWFuY2UgPSBbXTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHJvd3M7IGkrKykge1xuICAgIGxldCBzdW0xID0gMDtcbiAgICBsZXQgc3VtMiA9IDA7XG4gICAgbGV0IHggPSAwO1xuICAgIGZvciAobGV0IGogPSAwOyBqIDwgY29sczsgaisrKSB7XG4gICAgICB4ID0gbWF0cml4LmdldChpLCBqKSAtIG1lYW5baV07XG4gICAgICBzdW0xICs9IHg7XG4gICAgICBzdW0yICs9IHggKiB4O1xuICAgIH1cbiAgICBpZiAodW5iaWFzZWQpIHtcbiAgICAgIHZhcmlhbmNlLnB1c2goKHN1bTIgLSAoc3VtMSAqIHN1bTEpIC8gY29scykgLyAoY29scyAtIDEpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyaWFuY2UucHVzaCgoc3VtMiAtIChzdW0xICogc3VtMSkgLyBjb2xzKSAvIGNvbHMpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdmFyaWFuY2U7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB2YXJpYW5jZUJ5Q29sdW1uKG1hdHJpeCwgdW5iaWFzZWQsIG1lYW4pIHtcbiAgY29uc3Qgcm93cyA9IG1hdHJpeC5yb3dzO1xuICBjb25zdCBjb2xzID0gbWF0cml4LmNvbHVtbnM7XG4gIGNvbnN0IHZhcmlhbmNlID0gW107XG5cbiAgZm9yIChsZXQgaiA9IDA7IGogPCBjb2xzOyBqKyspIHtcbiAgICBsZXQgc3VtMSA9IDA7XG4gICAgbGV0IHN1bTIgPSAwO1xuICAgIGxldCB4ID0gMDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJvd3M7IGkrKykge1xuICAgICAgeCA9IG1hdHJpeC5nZXQoaSwgaikgLSBtZWFuW2pdO1xuICAgICAgc3VtMSArPSB4O1xuICAgICAgc3VtMiArPSB4ICogeDtcbiAgICB9XG4gICAgaWYgKHVuYmlhc2VkKSB7XG4gICAgICB2YXJpYW5jZS5wdXNoKChzdW0yIC0gKHN1bTEgKiBzdW0xKSAvIHJvd3MpIC8gKHJvd3MgLSAxKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhcmlhbmNlLnB1c2goKHN1bTIgLSAoc3VtMSAqIHN1bTEpIC8gcm93cykgLyByb3dzKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHZhcmlhbmNlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdmFyaWFuY2VBbGwobWF0cml4LCB1bmJpYXNlZCwgbWVhbikge1xuICBjb25zdCByb3dzID0gbWF0cml4LnJvd3M7XG4gIGNvbnN0IGNvbHMgPSBtYXRyaXguY29sdW1ucztcbiAgY29uc3Qgc2l6ZSA9IHJvd3MgKiBjb2xzO1xuXG4gIGxldCBzdW0xID0gMDtcbiAgbGV0IHN1bTIgPSAwO1xuICBsZXQgeCA9IDA7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcm93czsgaSsrKSB7XG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCBjb2xzOyBqKyspIHtcbiAgICAgIHggPSBtYXRyaXguZ2V0KGksIGopIC0gbWVhbjtcbiAgICAgIHN1bTEgKz0geDtcbiAgICAgIHN1bTIgKz0geCAqIHg7XG4gICAgfVxuICB9XG4gIGlmICh1bmJpYXNlZCkge1xuICAgIHJldHVybiAoc3VtMiAtIChzdW0xICogc3VtMSkgLyBzaXplKSAvIChzaXplIC0gMSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIChzdW0yIC0gKHN1bTEgKiBzdW0xKSAvIHNpemUpIC8gc2l6ZTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gY2VudGVyQnlSb3cobWF0cml4LCBtZWFuKSB7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbWF0cml4LnJvd3M7IGkrKykge1xuICAgIGZvciAobGV0IGogPSAwOyBqIDwgbWF0cml4LmNvbHVtbnM7IGorKykge1xuICAgICAgbWF0cml4LnNldChpLCBqLCBtYXRyaXguZ2V0KGksIGopIC0gbWVhbltpXSk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjZW50ZXJCeUNvbHVtbihtYXRyaXgsIG1lYW4pIHtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBtYXRyaXgucm93czsgaSsrKSB7XG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCBtYXRyaXguY29sdW1uczsgaisrKSB7XG4gICAgICBtYXRyaXguc2V0KGksIGosIG1hdHJpeC5nZXQoaSwgaikgLSBtZWFuW2pdKTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNlbnRlckFsbChtYXRyaXgsIG1lYW4pIHtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBtYXRyaXgucm93czsgaSsrKSB7XG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCBtYXRyaXguY29sdW1uczsgaisrKSB7XG4gICAgICBtYXRyaXguc2V0KGksIGosIG1hdHJpeC5nZXQoaSwgaikgLSBtZWFuKTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFNjYWxlQnlSb3cobWF0cml4KSB7XG4gIGNvbnN0IHNjYWxlID0gW107XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbWF0cml4LnJvd3M7IGkrKykge1xuICAgIGxldCBzdW0gPSAwO1xuICAgIGZvciAobGV0IGogPSAwOyBqIDwgbWF0cml4LmNvbHVtbnM7IGorKykge1xuICAgICAgc3VtICs9IE1hdGgucG93KG1hdHJpeC5nZXQoaSwgaiksIDIpIC8gKG1hdHJpeC5jb2x1bW5zIC0gMSk7XG4gICAgfVxuICAgIHNjYWxlLnB1c2goTWF0aC5zcXJ0KHN1bSkpO1xuICB9XG4gIHJldHVybiBzY2FsZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNjYWxlQnlSb3cobWF0cml4LCBzY2FsZSkge1xuICBmb3IgKGxldCBpID0gMDsgaSA8IG1hdHJpeC5yb3dzOyBpKyspIHtcbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IG1hdHJpeC5jb2x1bW5zOyBqKyspIHtcbiAgICAgIG1hdHJpeC5zZXQoaSwgaiwgbWF0cml4LmdldChpLCBqKSAvIHNjYWxlW2ldKTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFNjYWxlQnlDb2x1bW4obWF0cml4KSB7XG4gIGNvbnN0IHNjYWxlID0gW107XG4gIGZvciAobGV0IGogPSAwOyBqIDwgbWF0cml4LmNvbHVtbnM7IGorKykge1xuICAgIGxldCBzdW0gPSAwO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbWF0cml4LnJvd3M7IGkrKykge1xuICAgICAgc3VtICs9IE1hdGgucG93KG1hdHJpeC5nZXQoaSwgaiksIDIpIC8gKG1hdHJpeC5yb3dzIC0gMSk7XG4gICAgfVxuICAgIHNjYWxlLnB1c2goTWF0aC5zcXJ0KHN1bSkpO1xuICB9XG4gIHJldHVybiBzY2FsZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNjYWxlQnlDb2x1bW4obWF0cml4LCBzY2FsZSkge1xuICBmb3IgKGxldCBpID0gMDsgaSA8IG1hdHJpeC5yb3dzOyBpKyspIHtcbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IG1hdHJpeC5jb2x1bW5zOyBqKyspIHtcbiAgICAgIG1hdHJpeC5zZXQoaSwgaiwgbWF0cml4LmdldChpLCBqKSAvIHNjYWxlW2pdKTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFNjYWxlQWxsKG1hdHJpeCkge1xuICBjb25zdCBkaXZpZGVyID0gbWF0cml4LnNpemUgLSAxO1xuICBsZXQgc3VtID0gMDtcbiAgZm9yIChsZXQgaiA9IDA7IGogPCBtYXRyaXguY29sdW1uczsgaisrKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtYXRyaXgucm93czsgaSsrKSB7XG4gICAgICBzdW0gKz0gTWF0aC5wb3cobWF0cml4LmdldChpLCBqKSwgMikgLyBkaXZpZGVyO1xuICAgIH1cbiAgfVxuICByZXR1cm4gTWF0aC5zcXJ0KHN1bSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzY2FsZUFsbChtYXRyaXgsIHNjYWxlKSB7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbWF0cml4LnJvd3M7IGkrKykge1xuICAgIGZvciAobGV0IGogPSAwOyBqIDwgbWF0cml4LmNvbHVtbnM7IGorKykge1xuICAgICAgbWF0cml4LnNldChpLCBqLCBtYXRyaXguZ2V0KGksIGopIC8gc2NhbGUpO1xuICAgIH1cbiAgfVxufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIGluc3RhbGxNYXRoT3BlcmF0aW9ucyhBYnN0cmFjdE1hdHJpeCwgTWF0cml4KSB7XG4gIEFic3RyYWN0TWF0cml4LnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBhZGQodmFsdWUpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykgcmV0dXJuIHRoaXMuYWRkUyh2YWx1ZSk7XG4gICAgcmV0dXJuIHRoaXMuYWRkTSh2YWx1ZSk7XG4gIH07XG5cbiAgQWJzdHJhY3RNYXRyaXgucHJvdG90eXBlLmFkZFMgPSBmdW5jdGlvbiBhZGRTKHZhbHVlKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnJvd3M7IGkrKykge1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB0aGlzLmNvbHVtbnM7IGorKykge1xuICAgICAgICB0aGlzLnNldChpLCBqLCB0aGlzLmdldChpLCBqKSArIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgQWJzdHJhY3RNYXRyaXgucHJvdG90eXBlLmFkZE0gPSBmdW5jdGlvbiBhZGRNKG1hdHJpeCkge1xuICAgIG1hdHJpeCA9IE1hdHJpeC5jaGVja01hdHJpeChtYXRyaXgpO1xuICAgIGlmICh0aGlzLnJvd3MgIT09IG1hdHJpeC5yb3dzIHx8XG4gICAgICB0aGlzLmNvbHVtbnMgIT09IG1hdHJpeC5jb2x1bW5zKSB7XG4gICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignTWF0cmljZXMgZGltZW5zaW9ucyBtdXN0IGJlIGVxdWFsJyk7XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5yb3dzOyBpKyspIHtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy5jb2x1bW5zOyBqKyspIHtcbiAgICAgICAgdGhpcy5zZXQoaSwgaiwgdGhpcy5nZXQoaSwgaikgKyBtYXRyaXguZ2V0KGksIGopKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgQWJzdHJhY3RNYXRyaXguYWRkID0gZnVuY3Rpb24gYWRkKG1hdHJpeCwgdmFsdWUpIHtcbiAgICBjb25zdCBuZXdNYXRyaXggPSBuZXcgTWF0cml4KG1hdHJpeCk7XG4gICAgcmV0dXJuIG5ld01hdHJpeC5hZGQodmFsdWUpO1xuICB9O1xuXG4gIEFic3RyYWN0TWF0cml4LnByb3RvdHlwZS5zdWIgPSBmdW5jdGlvbiBzdWIodmFsdWUpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykgcmV0dXJuIHRoaXMuc3ViUyh2YWx1ZSk7XG4gICAgcmV0dXJuIHRoaXMuc3ViTSh2YWx1ZSk7XG4gIH07XG5cbiAgQWJzdHJhY3RNYXRyaXgucHJvdG90eXBlLnN1YlMgPSBmdW5jdGlvbiBzdWJTKHZhbHVlKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnJvd3M7IGkrKykge1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB0aGlzLmNvbHVtbnM7IGorKykge1xuICAgICAgICB0aGlzLnNldChpLCBqLCB0aGlzLmdldChpLCBqKSAtIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgQWJzdHJhY3RNYXRyaXgucHJvdG90eXBlLnN1Yk0gPSBmdW5jdGlvbiBzdWJNKG1hdHJpeCkge1xuICAgIG1hdHJpeCA9IE1hdHJpeC5jaGVja01hdHJpeChtYXRyaXgpO1xuICAgIGlmICh0aGlzLnJvd3MgIT09IG1hdHJpeC5yb3dzIHx8XG4gICAgICB0aGlzLmNvbHVtbnMgIT09IG1hdHJpeC5jb2x1bW5zKSB7XG4gICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignTWF0cmljZXMgZGltZW5zaW9ucyBtdXN0IGJlIGVxdWFsJyk7XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5yb3dzOyBpKyspIHtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy5jb2x1bW5zOyBqKyspIHtcbiAgICAgICAgdGhpcy5zZXQoaSwgaiwgdGhpcy5nZXQoaSwgaikgLSBtYXRyaXguZ2V0KGksIGopKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgQWJzdHJhY3RNYXRyaXguc3ViID0gZnVuY3Rpb24gc3ViKG1hdHJpeCwgdmFsdWUpIHtcbiAgICBjb25zdCBuZXdNYXRyaXggPSBuZXcgTWF0cml4KG1hdHJpeCk7XG4gICAgcmV0dXJuIG5ld01hdHJpeC5zdWIodmFsdWUpO1xuICB9O1xuICBBYnN0cmFjdE1hdHJpeC5wcm90b3R5cGUuc3VidHJhY3QgPSBBYnN0cmFjdE1hdHJpeC5wcm90b3R5cGUuc3ViO1xuICBBYnN0cmFjdE1hdHJpeC5wcm90b3R5cGUuc3VidHJhY3RTID0gQWJzdHJhY3RNYXRyaXgucHJvdG90eXBlLnN1YlM7XG4gIEFic3RyYWN0TWF0cml4LnByb3RvdHlwZS5zdWJ0cmFjdE0gPSBBYnN0cmFjdE1hdHJpeC5wcm90b3R5cGUuc3ViTTtcbiAgQWJzdHJhY3RNYXRyaXguc3VidHJhY3QgPSBBYnN0cmFjdE1hdHJpeC5zdWI7XG5cbiAgQWJzdHJhY3RNYXRyaXgucHJvdG90eXBlLm11bCA9IGZ1bmN0aW9uIG11bCh2YWx1ZSkge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSByZXR1cm4gdGhpcy5tdWxTKHZhbHVlKTtcbiAgICByZXR1cm4gdGhpcy5tdWxNKHZhbHVlKTtcbiAgfTtcblxuICBBYnN0cmFjdE1hdHJpeC5wcm90b3R5cGUubXVsUyA9IGZ1bmN0aW9uIG11bFModmFsdWUpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucm93czsgaSsrKSB7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMuY29sdW1uczsgaisrKSB7XG4gICAgICAgIHRoaXMuc2V0KGksIGosIHRoaXMuZ2V0KGksIGopICogdmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBBYnN0cmFjdE1hdHJpeC5wcm90b3R5cGUubXVsTSA9IGZ1bmN0aW9uIG11bE0obWF0cml4KSB7XG4gICAgbWF0cml4ID0gTWF0cml4LmNoZWNrTWF0cml4KG1hdHJpeCk7XG4gICAgaWYgKHRoaXMucm93cyAhPT0gbWF0cml4LnJvd3MgfHxcbiAgICAgIHRoaXMuY29sdW1ucyAhPT0gbWF0cml4LmNvbHVtbnMpIHtcbiAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdNYXRyaWNlcyBkaW1lbnNpb25zIG11c3QgYmUgZXF1YWwnKTtcbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnJvd3M7IGkrKykge1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB0aGlzLmNvbHVtbnM7IGorKykge1xuICAgICAgICB0aGlzLnNldChpLCBqLCB0aGlzLmdldChpLCBqKSAqIG1hdHJpeC5nZXQoaSwgaikpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBBYnN0cmFjdE1hdHJpeC5tdWwgPSBmdW5jdGlvbiBtdWwobWF0cml4LCB2YWx1ZSkge1xuICAgIGNvbnN0IG5ld01hdHJpeCA9IG5ldyBNYXRyaXgobWF0cml4KTtcbiAgICByZXR1cm4gbmV3TWF0cml4Lm11bCh2YWx1ZSk7XG4gIH07XG4gIEFic3RyYWN0TWF0cml4LnByb3RvdHlwZS5tdWx0aXBseSA9IEFic3RyYWN0TWF0cml4LnByb3RvdHlwZS5tdWw7XG4gIEFic3RyYWN0TWF0cml4LnByb3RvdHlwZS5tdWx0aXBseVMgPSBBYnN0cmFjdE1hdHJpeC5wcm90b3R5cGUubXVsUztcbiAgQWJzdHJhY3RNYXRyaXgucHJvdG90eXBlLm11bHRpcGx5TSA9IEFic3RyYWN0TWF0cml4LnByb3RvdHlwZS5tdWxNO1xuICBBYnN0cmFjdE1hdHJpeC5tdWx0aXBseSA9IEFic3RyYWN0TWF0cml4Lm11bDtcblxuICBBYnN0cmFjdE1hdHJpeC5wcm90b3R5cGUuZGl2ID0gZnVuY3Rpb24gZGl2KHZhbHVlKSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHJldHVybiB0aGlzLmRpdlModmFsdWUpO1xuICAgIHJldHVybiB0aGlzLmRpdk0odmFsdWUpO1xuICB9O1xuXG4gIEFic3RyYWN0TWF0cml4LnByb3RvdHlwZS5kaXZTID0gZnVuY3Rpb24gZGl2Uyh2YWx1ZSkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5yb3dzOyBpKyspIHtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy5jb2x1bW5zOyBqKyspIHtcbiAgICAgICAgdGhpcy5zZXQoaSwgaiwgdGhpcy5nZXQoaSwgaikgLyB2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEFic3RyYWN0TWF0cml4LnByb3RvdHlwZS5kaXZNID0gZnVuY3Rpb24gZGl2TShtYXRyaXgpIHtcbiAgICBtYXRyaXggPSBNYXRyaXguY2hlY2tNYXRyaXgobWF0cml4KTtcbiAgICBpZiAodGhpcy5yb3dzICE9PSBtYXRyaXgucm93cyB8fFxuICAgICAgdGhpcy5jb2x1bW5zICE9PSBtYXRyaXguY29sdW1ucykge1xuICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ01hdHJpY2VzIGRpbWVuc2lvbnMgbXVzdCBiZSBlcXVhbCcpO1xuICAgIH1cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucm93czsgaSsrKSB7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMuY29sdW1uczsgaisrKSB7XG4gICAgICAgIHRoaXMuc2V0KGksIGosIHRoaXMuZ2V0KGksIGopIC8gbWF0cml4LmdldChpLCBqKSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEFic3RyYWN0TWF0cml4LmRpdiA9IGZ1bmN0aW9uIGRpdihtYXRyaXgsIHZhbHVlKSB7XG4gICAgY29uc3QgbmV3TWF0cml4ID0gbmV3IE1hdHJpeChtYXRyaXgpO1xuICAgIHJldHVybiBuZXdNYXRyaXguZGl2KHZhbHVlKTtcbiAgfTtcbiAgQWJzdHJhY3RNYXRyaXgucHJvdG90eXBlLmRpdmlkZSA9IEFic3RyYWN0TWF0cml4LnByb3RvdHlwZS5kaXY7XG4gIEFic3RyYWN0TWF0cml4LnByb3RvdHlwZS5kaXZpZGVTID0gQWJzdHJhY3RNYXRyaXgucHJvdG90eXBlLmRpdlM7XG4gIEFic3RyYWN0TWF0cml4LnByb3RvdHlwZS5kaXZpZGVNID0gQWJzdHJhY3RNYXRyaXgucHJvdG90eXBlLmRpdk07XG4gIEFic3RyYWN0TWF0cml4LmRpdmlkZSA9IEFic3RyYWN0TWF0cml4LmRpdjtcblxuICBBYnN0cmFjdE1hdHJpeC5wcm90b3R5cGUubW9kID0gZnVuY3Rpb24gbW9kKHZhbHVlKSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHJldHVybiB0aGlzLm1vZFModmFsdWUpO1xuICAgIHJldHVybiB0aGlzLm1vZE0odmFsdWUpO1xuICB9O1xuXG4gIEFic3RyYWN0TWF0cml4LnByb3RvdHlwZS5tb2RTID0gZnVuY3Rpb24gbW9kUyh2YWx1ZSkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5yb3dzOyBpKyspIHtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy5jb2x1bW5zOyBqKyspIHtcbiAgICAgICAgdGhpcy5zZXQoaSwgaiwgdGhpcy5nZXQoaSwgaikgJSB2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEFic3RyYWN0TWF0cml4LnByb3RvdHlwZS5tb2RNID0gZnVuY3Rpb24gbW9kTShtYXRyaXgpIHtcbiAgICBtYXRyaXggPSBNYXRyaXguY2hlY2tNYXRyaXgobWF0cml4KTtcbiAgICBpZiAodGhpcy5yb3dzICE9PSBtYXRyaXgucm93cyB8fFxuICAgICAgdGhpcy5jb2x1bW5zICE9PSBtYXRyaXguY29sdW1ucykge1xuICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ01hdHJpY2VzIGRpbWVuc2lvbnMgbXVzdCBiZSBlcXVhbCcpO1xuICAgIH1cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucm93czsgaSsrKSB7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMuY29sdW1uczsgaisrKSB7XG4gICAgICAgIHRoaXMuc2V0KGksIGosIHRoaXMuZ2V0KGksIGopICUgbWF0cml4LmdldChpLCBqKSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEFic3RyYWN0TWF0cml4Lm1vZCA9IGZ1bmN0aW9uIG1vZChtYXRyaXgsIHZhbHVlKSB7XG4gICAgY29uc3QgbmV3TWF0cml4ID0gbmV3IE1hdHJpeChtYXRyaXgpO1xuICAgIHJldHVybiBuZXdNYXRyaXgubW9kKHZhbHVlKTtcbiAgfTtcbiAgQWJzdHJhY3RNYXRyaXgucHJvdG90eXBlLm1vZHVsdXMgPSBBYnN0cmFjdE1hdHJpeC5wcm90b3R5cGUubW9kO1xuICBBYnN0cmFjdE1hdHJpeC5wcm90b3R5cGUubW9kdWx1c1MgPSBBYnN0cmFjdE1hdHJpeC5wcm90b3R5cGUubW9kUztcbiAgQWJzdHJhY3RNYXRyaXgucHJvdG90eXBlLm1vZHVsdXNNID0gQWJzdHJhY3RNYXRyaXgucHJvdG90eXBlLm1vZE07XG4gIEFic3RyYWN0TWF0cml4Lm1vZHVsdXMgPSBBYnN0cmFjdE1hdHJpeC5tb2Q7XG5cbiAgQWJzdHJhY3RNYXRyaXgucHJvdG90eXBlLmFuZCA9IGZ1bmN0aW9uIGFuZCh2YWx1ZSkge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSByZXR1cm4gdGhpcy5hbmRTKHZhbHVlKTtcbiAgICByZXR1cm4gdGhpcy5hbmRNKHZhbHVlKTtcbiAgfTtcblxuICBBYnN0cmFjdE1hdHJpeC5wcm90b3R5cGUuYW5kUyA9IGZ1bmN0aW9uIGFuZFModmFsdWUpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucm93czsgaSsrKSB7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMuY29sdW1uczsgaisrKSB7XG4gICAgICAgIHRoaXMuc2V0KGksIGosIHRoaXMuZ2V0KGksIGopICYgdmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBBYnN0cmFjdE1hdHJpeC5wcm90b3R5cGUuYW5kTSA9IGZ1bmN0aW9uIGFuZE0obWF0cml4KSB7XG4gICAgbWF0cml4ID0gTWF0cml4LmNoZWNrTWF0cml4KG1hdHJpeCk7XG4gICAgaWYgKHRoaXMucm93cyAhPT0gbWF0cml4LnJvd3MgfHxcbiAgICAgIHRoaXMuY29sdW1ucyAhPT0gbWF0cml4LmNvbHVtbnMpIHtcbiAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdNYXRyaWNlcyBkaW1lbnNpb25zIG11c3QgYmUgZXF1YWwnKTtcbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnJvd3M7IGkrKykge1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB0aGlzLmNvbHVtbnM7IGorKykge1xuICAgICAgICB0aGlzLnNldChpLCBqLCB0aGlzLmdldChpLCBqKSAmIG1hdHJpeC5nZXQoaSwgaikpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBBYnN0cmFjdE1hdHJpeC5hbmQgPSBmdW5jdGlvbiBhbmQobWF0cml4LCB2YWx1ZSkge1xuICAgIGNvbnN0IG5ld01hdHJpeCA9IG5ldyBNYXRyaXgobWF0cml4KTtcbiAgICByZXR1cm4gbmV3TWF0cml4LmFuZCh2YWx1ZSk7XG4gIH07XG5cbiAgQWJzdHJhY3RNYXRyaXgucHJvdG90eXBlLm9yID0gZnVuY3Rpb24gb3IodmFsdWUpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykgcmV0dXJuIHRoaXMub3JTKHZhbHVlKTtcbiAgICByZXR1cm4gdGhpcy5vck0odmFsdWUpO1xuICB9O1xuXG4gIEFic3RyYWN0TWF0cml4LnByb3RvdHlwZS5vclMgPSBmdW5jdGlvbiBvclModmFsdWUpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucm93czsgaSsrKSB7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMuY29sdW1uczsgaisrKSB7XG4gICAgICAgIHRoaXMuc2V0KGksIGosIHRoaXMuZ2V0KGksIGopIHwgdmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBBYnN0cmFjdE1hdHJpeC5wcm90b3R5cGUub3JNID0gZnVuY3Rpb24gb3JNKG1hdHJpeCkge1xuICAgIG1hdHJpeCA9IE1hdHJpeC5jaGVja01hdHJpeChtYXRyaXgpO1xuICAgIGlmICh0aGlzLnJvd3MgIT09IG1hdHJpeC5yb3dzIHx8XG4gICAgICB0aGlzLmNvbHVtbnMgIT09IG1hdHJpeC5jb2x1bW5zKSB7XG4gICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignTWF0cmljZXMgZGltZW5zaW9ucyBtdXN0IGJlIGVxdWFsJyk7XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5yb3dzOyBpKyspIHtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy5jb2x1bW5zOyBqKyspIHtcbiAgICAgICAgdGhpcy5zZXQoaSwgaiwgdGhpcy5nZXQoaSwgaikgfCBtYXRyaXguZ2V0KGksIGopKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgQWJzdHJhY3RNYXRyaXgub3IgPSBmdW5jdGlvbiBvcihtYXRyaXgsIHZhbHVlKSB7XG4gICAgY29uc3QgbmV3TWF0cml4ID0gbmV3IE1hdHJpeChtYXRyaXgpO1xuICAgIHJldHVybiBuZXdNYXRyaXgub3IodmFsdWUpO1xuICB9O1xuXG4gIEFic3RyYWN0TWF0cml4LnByb3RvdHlwZS54b3IgPSBmdW5jdGlvbiB4b3IodmFsdWUpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykgcmV0dXJuIHRoaXMueG9yUyh2YWx1ZSk7XG4gICAgcmV0dXJuIHRoaXMueG9yTSh2YWx1ZSk7XG4gIH07XG5cbiAgQWJzdHJhY3RNYXRyaXgucHJvdG90eXBlLnhvclMgPSBmdW5jdGlvbiB4b3JTKHZhbHVlKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnJvd3M7IGkrKykge1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB0aGlzLmNvbHVtbnM7IGorKykge1xuICAgICAgICB0aGlzLnNldChpLCBqLCB0aGlzLmdldChpLCBqKSBeIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgQWJzdHJhY3RNYXRyaXgucHJvdG90eXBlLnhvck0gPSBmdW5jdGlvbiB4b3JNKG1hdHJpeCkge1xuICAgIG1hdHJpeCA9IE1hdHJpeC5jaGVja01hdHJpeChtYXRyaXgpO1xuICAgIGlmICh0aGlzLnJvd3MgIT09IG1hdHJpeC5yb3dzIHx8XG4gICAgICB0aGlzLmNvbHVtbnMgIT09IG1hdHJpeC5jb2x1bW5zKSB7XG4gICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignTWF0cmljZXMgZGltZW5zaW9ucyBtdXN0IGJlIGVxdWFsJyk7XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5yb3dzOyBpKyspIHtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy5jb2x1bW5zOyBqKyspIHtcbiAgICAgICAgdGhpcy5zZXQoaSwgaiwgdGhpcy5nZXQoaSwgaikgXiBtYXRyaXguZ2V0KGksIGopKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgQWJzdHJhY3RNYXRyaXgueG9yID0gZnVuY3Rpb24geG9yKG1hdHJpeCwgdmFsdWUpIHtcbiAgICBjb25zdCBuZXdNYXRyaXggPSBuZXcgTWF0cml4KG1hdHJpeCk7XG4gICAgcmV0dXJuIG5ld01hdHJpeC54b3IodmFsdWUpO1xuICB9O1xuXG4gIEFic3RyYWN0TWF0cml4LnByb3RvdHlwZS5sZWZ0U2hpZnQgPSBmdW5jdGlvbiBsZWZ0U2hpZnQodmFsdWUpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykgcmV0dXJuIHRoaXMubGVmdFNoaWZ0Uyh2YWx1ZSk7XG4gICAgcmV0dXJuIHRoaXMubGVmdFNoaWZ0TSh2YWx1ZSk7XG4gIH07XG5cbiAgQWJzdHJhY3RNYXRyaXgucHJvdG90eXBlLmxlZnRTaGlmdFMgPSBmdW5jdGlvbiBsZWZ0U2hpZnRTKHZhbHVlKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnJvd3M7IGkrKykge1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB0aGlzLmNvbHVtbnM7IGorKykge1xuICAgICAgICB0aGlzLnNldChpLCBqLCB0aGlzLmdldChpLCBqKSA8PCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEFic3RyYWN0TWF0cml4LnByb3RvdHlwZS5sZWZ0U2hpZnRNID0gZnVuY3Rpb24gbGVmdFNoaWZ0TShtYXRyaXgpIHtcbiAgICBtYXRyaXggPSBNYXRyaXguY2hlY2tNYXRyaXgobWF0cml4KTtcbiAgICBpZiAodGhpcy5yb3dzICE9PSBtYXRyaXgucm93cyB8fFxuICAgICAgdGhpcy5jb2x1bW5zICE9PSBtYXRyaXguY29sdW1ucykge1xuICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ01hdHJpY2VzIGRpbWVuc2lvbnMgbXVzdCBiZSBlcXVhbCcpO1xuICAgIH1cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucm93czsgaSsrKSB7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMuY29sdW1uczsgaisrKSB7XG4gICAgICAgIHRoaXMuc2V0KGksIGosIHRoaXMuZ2V0KGksIGopIDw8IG1hdHJpeC5nZXQoaSwgaikpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBBYnN0cmFjdE1hdHJpeC5sZWZ0U2hpZnQgPSBmdW5jdGlvbiBsZWZ0U2hpZnQobWF0cml4LCB2YWx1ZSkge1xuICAgIGNvbnN0IG5ld01hdHJpeCA9IG5ldyBNYXRyaXgobWF0cml4KTtcbiAgICByZXR1cm4gbmV3TWF0cml4LmxlZnRTaGlmdCh2YWx1ZSk7XG4gIH07XG5cbiAgQWJzdHJhY3RNYXRyaXgucHJvdG90eXBlLnNpZ25Qcm9wYWdhdGluZ1JpZ2h0U2hpZnQgPSBmdW5jdGlvbiBzaWduUHJvcGFnYXRpbmdSaWdodFNoaWZ0KHZhbHVlKSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHJldHVybiB0aGlzLnNpZ25Qcm9wYWdhdGluZ1JpZ2h0U2hpZnRTKHZhbHVlKTtcbiAgICByZXR1cm4gdGhpcy5zaWduUHJvcGFnYXRpbmdSaWdodFNoaWZ0TSh2YWx1ZSk7XG4gIH07XG5cbiAgQWJzdHJhY3RNYXRyaXgucHJvdG90eXBlLnNpZ25Qcm9wYWdhdGluZ1JpZ2h0U2hpZnRTID0gZnVuY3Rpb24gc2lnblByb3BhZ2F0aW5nUmlnaHRTaGlmdFModmFsdWUpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucm93czsgaSsrKSB7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMuY29sdW1uczsgaisrKSB7XG4gICAgICAgIHRoaXMuc2V0KGksIGosIHRoaXMuZ2V0KGksIGopID4+IHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgQWJzdHJhY3RNYXRyaXgucHJvdG90eXBlLnNpZ25Qcm9wYWdhdGluZ1JpZ2h0U2hpZnRNID0gZnVuY3Rpb24gc2lnblByb3BhZ2F0aW5nUmlnaHRTaGlmdE0obWF0cml4KSB7XG4gICAgbWF0cml4ID0gTWF0cml4LmNoZWNrTWF0cml4KG1hdHJpeCk7XG4gICAgaWYgKHRoaXMucm93cyAhPT0gbWF0cml4LnJvd3MgfHxcbiAgICAgIHRoaXMuY29sdW1ucyAhPT0gbWF0cml4LmNvbHVtbnMpIHtcbiAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdNYXRyaWNlcyBkaW1lbnNpb25zIG11c3QgYmUgZXF1YWwnKTtcbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnJvd3M7IGkrKykge1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB0aGlzLmNvbHVtbnM7IGorKykge1xuICAgICAgICB0aGlzLnNldChpLCBqLCB0aGlzLmdldChpLCBqKSA+PiBtYXRyaXguZ2V0KGksIGopKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgQWJzdHJhY3RNYXRyaXguc2lnblByb3BhZ2F0aW5nUmlnaHRTaGlmdCA9IGZ1bmN0aW9uIHNpZ25Qcm9wYWdhdGluZ1JpZ2h0U2hpZnQobWF0cml4LCB2YWx1ZSkge1xuICAgIGNvbnN0IG5ld01hdHJpeCA9IG5ldyBNYXRyaXgobWF0cml4KTtcbiAgICByZXR1cm4gbmV3TWF0cml4LnNpZ25Qcm9wYWdhdGluZ1JpZ2h0U2hpZnQodmFsdWUpO1xuICB9O1xuXG4gIEFic3RyYWN0TWF0cml4LnByb3RvdHlwZS5yaWdodFNoaWZ0ID0gZnVuY3Rpb24gcmlnaHRTaGlmdCh2YWx1ZSkge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSByZXR1cm4gdGhpcy5yaWdodFNoaWZ0Uyh2YWx1ZSk7XG4gICAgcmV0dXJuIHRoaXMucmlnaHRTaGlmdE0odmFsdWUpO1xuICB9O1xuXG4gIEFic3RyYWN0TWF0cml4LnByb3RvdHlwZS5yaWdodFNoaWZ0UyA9IGZ1bmN0aW9uIHJpZ2h0U2hpZnRTKHZhbHVlKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnJvd3M7IGkrKykge1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB0aGlzLmNvbHVtbnM7IGorKykge1xuICAgICAgICB0aGlzLnNldChpLCBqLCB0aGlzLmdldChpLCBqKSA+Pj4gdmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBBYnN0cmFjdE1hdHJpeC5wcm90b3R5cGUucmlnaHRTaGlmdE0gPSBmdW5jdGlvbiByaWdodFNoaWZ0TShtYXRyaXgpIHtcbiAgICBtYXRyaXggPSBNYXRyaXguY2hlY2tNYXRyaXgobWF0cml4KTtcbiAgICBpZiAodGhpcy5yb3dzICE9PSBtYXRyaXgucm93cyB8fFxuICAgICAgdGhpcy5jb2x1bW5zICE9PSBtYXRyaXguY29sdW1ucykge1xuICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ01hdHJpY2VzIGRpbWVuc2lvbnMgbXVzdCBiZSBlcXVhbCcpO1xuICAgIH1cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucm93czsgaSsrKSB7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMuY29sdW1uczsgaisrKSB7XG4gICAgICAgIHRoaXMuc2V0KGksIGosIHRoaXMuZ2V0KGksIGopID4+PiBtYXRyaXguZ2V0KGksIGopKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgQWJzdHJhY3RNYXRyaXgucmlnaHRTaGlmdCA9IGZ1bmN0aW9uIHJpZ2h0U2hpZnQobWF0cml4LCB2YWx1ZSkge1xuICAgIGNvbnN0IG5ld01hdHJpeCA9IG5ldyBNYXRyaXgobWF0cml4KTtcbiAgICByZXR1cm4gbmV3TWF0cml4LnJpZ2h0U2hpZnQodmFsdWUpO1xuICB9O1xuICBBYnN0cmFjdE1hdHJpeC5wcm90b3R5cGUuemVyb0ZpbGxSaWdodFNoaWZ0ID0gQWJzdHJhY3RNYXRyaXgucHJvdG90eXBlLnJpZ2h0U2hpZnQ7XG4gIEFic3RyYWN0TWF0cml4LnByb3RvdHlwZS56ZXJvRmlsbFJpZ2h0U2hpZnRTID0gQWJzdHJhY3RNYXRyaXgucHJvdG90eXBlLnJpZ2h0U2hpZnRTO1xuICBBYnN0cmFjdE1hdHJpeC5wcm90b3R5cGUuemVyb0ZpbGxSaWdodFNoaWZ0TSA9IEFic3RyYWN0TWF0cml4LnByb3RvdHlwZS5yaWdodFNoaWZ0TTtcbiAgQWJzdHJhY3RNYXRyaXguemVyb0ZpbGxSaWdodFNoaWZ0ID0gQWJzdHJhY3RNYXRyaXgucmlnaHRTaGlmdDtcblxuICBBYnN0cmFjdE1hdHJpeC5wcm90b3R5cGUubm90ID0gZnVuY3Rpb24gbm90KCkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5yb3dzOyBpKyspIHtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy5jb2x1bW5zOyBqKyspIHtcbiAgICAgICAgdGhpcy5zZXQoaSwgaiwgfih0aGlzLmdldChpLCBqKSkpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBBYnN0cmFjdE1hdHJpeC5ub3QgPSBmdW5jdGlvbiBub3QobWF0cml4KSB7XG4gICAgY29uc3QgbmV3TWF0cml4ID0gbmV3IE1hdHJpeChtYXRyaXgpO1xuICAgIHJldHVybiBuZXdNYXRyaXgubm90KCk7XG4gIH07XG5cbiAgQWJzdHJhY3RNYXRyaXgucHJvdG90eXBlLmFicyA9IGZ1bmN0aW9uIGFicygpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucm93czsgaSsrKSB7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMuY29sdW1uczsgaisrKSB7XG4gICAgICAgIHRoaXMuc2V0KGksIGosIE1hdGguYWJzKHRoaXMuZ2V0KGksIGopKSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEFic3RyYWN0TWF0cml4LmFicyA9IGZ1bmN0aW9uIGFicyhtYXRyaXgpIHtcbiAgICBjb25zdCBuZXdNYXRyaXggPSBuZXcgTWF0cml4KG1hdHJpeCk7XG4gICAgcmV0dXJuIG5ld01hdHJpeC5hYnMoKTtcbiAgfTtcblxuICBBYnN0cmFjdE1hdHJpeC5wcm90b3R5cGUuYWNvcyA9IGZ1bmN0aW9uIGFjb3MoKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnJvd3M7IGkrKykge1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB0aGlzLmNvbHVtbnM7IGorKykge1xuICAgICAgICB0aGlzLnNldChpLCBqLCBNYXRoLmFjb3ModGhpcy5nZXQoaSwgaikpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgQWJzdHJhY3RNYXRyaXguYWNvcyA9IGZ1bmN0aW9uIGFjb3MobWF0cml4KSB7XG4gICAgY29uc3QgbmV3TWF0cml4ID0gbmV3IE1hdHJpeChtYXRyaXgpO1xuICAgIHJldHVybiBuZXdNYXRyaXguYWNvcygpO1xuICB9O1xuXG4gIEFic3RyYWN0TWF0cml4LnByb3RvdHlwZS5hY29zaCA9IGZ1bmN0aW9uIGFjb3NoKCkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5yb3dzOyBpKyspIHtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy5jb2x1bW5zOyBqKyspIHtcbiAgICAgICAgdGhpcy5zZXQoaSwgaiwgTWF0aC5hY29zaCh0aGlzLmdldChpLCBqKSkpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBBYnN0cmFjdE1hdHJpeC5hY29zaCA9IGZ1bmN0aW9uIGFjb3NoKG1hdHJpeCkge1xuICAgIGNvbnN0IG5ld01hdHJpeCA9IG5ldyBNYXRyaXgobWF0cml4KTtcbiAgICByZXR1cm4gbmV3TWF0cml4LmFjb3NoKCk7XG4gIH07XG5cbiAgQWJzdHJhY3RNYXRyaXgucHJvdG90eXBlLmFzaW4gPSBmdW5jdGlvbiBhc2luKCkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5yb3dzOyBpKyspIHtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy5jb2x1bW5zOyBqKyspIHtcbiAgICAgICAgdGhpcy5zZXQoaSwgaiwgTWF0aC5hc2luKHRoaXMuZ2V0KGksIGopKSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEFic3RyYWN0TWF0cml4LmFzaW4gPSBmdW5jdGlvbiBhc2luKG1hdHJpeCkge1xuICAgIGNvbnN0IG5ld01hdHJpeCA9IG5ldyBNYXRyaXgobWF0cml4KTtcbiAgICByZXR1cm4gbmV3TWF0cml4LmFzaW4oKTtcbiAgfTtcblxuICBBYnN0cmFjdE1hdHJpeC5wcm90b3R5cGUuYXNpbmggPSBmdW5jdGlvbiBhc2luaCgpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucm93czsgaSsrKSB7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMuY29sdW1uczsgaisrKSB7XG4gICAgICAgIHRoaXMuc2V0KGksIGosIE1hdGguYXNpbmgodGhpcy5nZXQoaSwgaikpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgQWJzdHJhY3RNYXRyaXguYXNpbmggPSBmdW5jdGlvbiBhc2luaChtYXRyaXgpIHtcbiAgICBjb25zdCBuZXdNYXRyaXggPSBuZXcgTWF0cml4KG1hdHJpeCk7XG4gICAgcmV0dXJuIG5ld01hdHJpeC5hc2luaCgpO1xuICB9O1xuXG4gIEFic3RyYWN0TWF0cml4LnByb3RvdHlwZS5hdGFuID0gZnVuY3Rpb24gYXRhbigpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucm93czsgaSsrKSB7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMuY29sdW1uczsgaisrKSB7XG4gICAgICAgIHRoaXMuc2V0KGksIGosIE1hdGguYXRhbih0aGlzLmdldChpLCBqKSkpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBBYnN0cmFjdE1hdHJpeC5hdGFuID0gZnVuY3Rpb24gYXRhbihtYXRyaXgpIHtcbiAgICBjb25zdCBuZXdNYXRyaXggPSBuZXcgTWF0cml4KG1hdHJpeCk7XG4gICAgcmV0dXJuIG5ld01hdHJpeC5hdGFuKCk7XG4gIH07XG5cbiAgQWJzdHJhY3RNYXRyaXgucHJvdG90eXBlLmF0YW5oID0gZnVuY3Rpb24gYXRhbmgoKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnJvd3M7IGkrKykge1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB0aGlzLmNvbHVtbnM7IGorKykge1xuICAgICAgICB0aGlzLnNldChpLCBqLCBNYXRoLmF0YW5oKHRoaXMuZ2V0KGksIGopKSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEFic3RyYWN0TWF0cml4LmF0YW5oID0gZnVuY3Rpb24gYXRhbmgobWF0cml4KSB7XG4gICAgY29uc3QgbmV3TWF0cml4ID0gbmV3IE1hdHJpeChtYXRyaXgpO1xuICAgIHJldHVybiBuZXdNYXRyaXguYXRhbmgoKTtcbiAgfTtcblxuICBBYnN0cmFjdE1hdHJpeC5wcm90b3R5cGUuY2JydCA9IGZ1bmN0aW9uIGNicnQoKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnJvd3M7IGkrKykge1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB0aGlzLmNvbHVtbnM7IGorKykge1xuICAgICAgICB0aGlzLnNldChpLCBqLCBNYXRoLmNicnQodGhpcy5nZXQoaSwgaikpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgQWJzdHJhY3RNYXRyaXguY2JydCA9IGZ1bmN0aW9uIGNicnQobWF0cml4KSB7XG4gICAgY29uc3QgbmV3TWF0cml4ID0gbmV3IE1hdHJpeChtYXRyaXgpO1xuICAgIHJldHVybiBuZXdNYXRyaXguY2JydCgpO1xuICB9O1xuXG4gIEFic3RyYWN0TWF0cml4LnByb3RvdHlwZS5jZWlsID0gZnVuY3Rpb24gY2VpbCgpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucm93czsgaSsrKSB7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMuY29sdW1uczsgaisrKSB7XG4gICAgICAgIHRoaXMuc2V0KGksIGosIE1hdGguY2VpbCh0aGlzLmdldChpLCBqKSkpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBBYnN0cmFjdE1hdHJpeC5jZWlsID0gZnVuY3Rpb24gY2VpbChtYXRyaXgpIHtcbiAgICBjb25zdCBuZXdNYXRyaXggPSBuZXcgTWF0cml4KG1hdHJpeCk7XG4gICAgcmV0dXJuIG5ld01hdHJpeC5jZWlsKCk7XG4gIH07XG5cbiAgQWJzdHJhY3RNYXRyaXgucHJvdG90eXBlLmNsejMyID0gZnVuY3Rpb24gY2x6MzIoKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnJvd3M7IGkrKykge1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB0aGlzLmNvbHVtbnM7IGorKykge1xuICAgICAgICB0aGlzLnNldChpLCBqLCBNYXRoLmNsejMyKHRoaXMuZ2V0KGksIGopKSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEFic3RyYWN0TWF0cml4LmNsejMyID0gZnVuY3Rpb24gY2x6MzIobWF0cml4KSB7XG4gICAgY29uc3QgbmV3TWF0cml4ID0gbmV3IE1hdHJpeChtYXRyaXgpO1xuICAgIHJldHVybiBuZXdNYXRyaXguY2x6MzIoKTtcbiAgfTtcblxuICBBYnN0cmFjdE1hdHJpeC5wcm90b3R5cGUuY29zID0gZnVuY3Rpb24gY29zKCkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5yb3dzOyBpKyspIHtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy5jb2x1bW5zOyBqKyspIHtcbiAgICAgICAgdGhpcy5zZXQoaSwgaiwgTWF0aC5jb3ModGhpcy5nZXQoaSwgaikpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgQWJzdHJhY3RNYXRyaXguY29zID0gZnVuY3Rpb24gY29zKG1hdHJpeCkge1xuICAgIGNvbnN0IG5ld01hdHJpeCA9IG5ldyBNYXRyaXgobWF0cml4KTtcbiAgICByZXR1cm4gbmV3TWF0cml4LmNvcygpO1xuICB9O1xuXG4gIEFic3RyYWN0TWF0cml4LnByb3RvdHlwZS5jb3NoID0gZnVuY3Rpb24gY29zaCgpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucm93czsgaSsrKSB7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMuY29sdW1uczsgaisrKSB7XG4gICAgICAgIHRoaXMuc2V0KGksIGosIE1hdGguY29zaCh0aGlzLmdldChpLCBqKSkpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBBYnN0cmFjdE1hdHJpeC5jb3NoID0gZnVuY3Rpb24gY29zaChtYXRyaXgpIHtcbiAgICBjb25zdCBuZXdNYXRyaXggPSBuZXcgTWF0cml4KG1hdHJpeCk7XG4gICAgcmV0dXJuIG5ld01hdHJpeC5jb3NoKCk7XG4gIH07XG5cbiAgQWJzdHJhY3RNYXRyaXgucHJvdG90eXBlLmV4cCA9IGZ1bmN0aW9uIGV4cCgpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucm93czsgaSsrKSB7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMuY29sdW1uczsgaisrKSB7XG4gICAgICAgIHRoaXMuc2V0KGksIGosIE1hdGguZXhwKHRoaXMuZ2V0KGksIGopKSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEFic3RyYWN0TWF0cml4LmV4cCA9IGZ1bmN0aW9uIGV4cChtYXRyaXgpIHtcbiAgICBjb25zdCBuZXdNYXRyaXggPSBuZXcgTWF0cml4KG1hdHJpeCk7XG4gICAgcmV0dXJuIG5ld01hdHJpeC5leHAoKTtcbiAgfTtcblxuICBBYnN0cmFjdE1hdHJpeC5wcm90b3R5cGUuZXhwbTEgPSBmdW5jdGlvbiBleHBtMSgpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucm93czsgaSsrKSB7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMuY29sdW1uczsgaisrKSB7XG4gICAgICAgIHRoaXMuc2V0KGksIGosIE1hdGguZXhwbTEodGhpcy5nZXQoaSwgaikpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgQWJzdHJhY3RNYXRyaXguZXhwbTEgPSBmdW5jdGlvbiBleHBtMShtYXRyaXgpIHtcbiAgICBjb25zdCBuZXdNYXRyaXggPSBuZXcgTWF0cml4KG1hdHJpeCk7XG4gICAgcmV0dXJuIG5ld01hdHJpeC5leHBtMSgpO1xuICB9O1xuXG4gIEFic3RyYWN0TWF0cml4LnByb3RvdHlwZS5mbG9vciA9IGZ1bmN0aW9uIGZsb29yKCkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5yb3dzOyBpKyspIHtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy5jb2x1bW5zOyBqKyspIHtcbiAgICAgICAgdGhpcy5zZXQoaSwgaiwgTWF0aC5mbG9vcih0aGlzLmdldChpLCBqKSkpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBBYnN0cmFjdE1hdHJpeC5mbG9vciA9IGZ1bmN0aW9uIGZsb29yKG1hdHJpeCkge1xuICAgIGNvbnN0IG5ld01hdHJpeCA9IG5ldyBNYXRyaXgobWF0cml4KTtcbiAgICByZXR1cm4gbmV3TWF0cml4LmZsb29yKCk7XG4gIH07XG5cbiAgQWJzdHJhY3RNYXRyaXgucHJvdG90eXBlLmZyb3VuZCA9IGZ1bmN0aW9uIGZyb3VuZCgpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucm93czsgaSsrKSB7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMuY29sdW1uczsgaisrKSB7XG4gICAgICAgIHRoaXMuc2V0KGksIGosIE1hdGguZnJvdW5kKHRoaXMuZ2V0KGksIGopKSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEFic3RyYWN0TWF0cml4LmZyb3VuZCA9IGZ1bmN0aW9uIGZyb3VuZChtYXRyaXgpIHtcbiAgICBjb25zdCBuZXdNYXRyaXggPSBuZXcgTWF0cml4KG1hdHJpeCk7XG4gICAgcmV0dXJuIG5ld01hdHJpeC5mcm91bmQoKTtcbiAgfTtcblxuICBBYnN0cmFjdE1hdHJpeC5wcm90b3R5cGUubG9nID0gZnVuY3Rpb24gbG9nKCkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5yb3dzOyBpKyspIHtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy5jb2x1bW5zOyBqKyspIHtcbiAgICAgICAgdGhpcy5zZXQoaSwgaiwgTWF0aC5sb2codGhpcy5nZXQoaSwgaikpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgQWJzdHJhY3RNYXRyaXgubG9nID0gZnVuY3Rpb24gbG9nKG1hdHJpeCkge1xuICAgIGNvbnN0IG5ld01hdHJpeCA9IG5ldyBNYXRyaXgobWF0cml4KTtcbiAgICByZXR1cm4gbmV3TWF0cml4LmxvZygpO1xuICB9O1xuXG4gIEFic3RyYWN0TWF0cml4LnByb3RvdHlwZS5sb2cxcCA9IGZ1bmN0aW9uIGxvZzFwKCkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5yb3dzOyBpKyspIHtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy5jb2x1bW5zOyBqKyspIHtcbiAgICAgICAgdGhpcy5zZXQoaSwgaiwgTWF0aC5sb2cxcCh0aGlzLmdldChpLCBqKSkpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBBYnN0cmFjdE1hdHJpeC5sb2cxcCA9IGZ1bmN0aW9uIGxvZzFwKG1hdHJpeCkge1xuICAgIGNvbnN0IG5ld01hdHJpeCA9IG5ldyBNYXRyaXgobWF0cml4KTtcbiAgICByZXR1cm4gbmV3TWF0cml4LmxvZzFwKCk7XG4gIH07XG5cbiAgQWJzdHJhY3RNYXRyaXgucHJvdG90eXBlLmxvZzEwID0gZnVuY3Rpb24gbG9nMTAoKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnJvd3M7IGkrKykge1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB0aGlzLmNvbHVtbnM7IGorKykge1xuICAgICAgICB0aGlzLnNldChpLCBqLCBNYXRoLmxvZzEwKHRoaXMuZ2V0KGksIGopKSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEFic3RyYWN0TWF0cml4LmxvZzEwID0gZnVuY3Rpb24gbG9nMTAobWF0cml4KSB7XG4gICAgY29uc3QgbmV3TWF0cml4ID0gbmV3IE1hdHJpeChtYXRyaXgpO1xuICAgIHJldHVybiBuZXdNYXRyaXgubG9nMTAoKTtcbiAgfTtcblxuICBBYnN0cmFjdE1hdHJpeC5wcm90b3R5cGUubG9nMiA9IGZ1bmN0aW9uIGxvZzIoKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnJvd3M7IGkrKykge1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB0aGlzLmNvbHVtbnM7IGorKykge1xuICAgICAgICB0aGlzLnNldChpLCBqLCBNYXRoLmxvZzIodGhpcy5nZXQoaSwgaikpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgQWJzdHJhY3RNYXRyaXgubG9nMiA9IGZ1bmN0aW9uIGxvZzIobWF0cml4KSB7XG4gICAgY29uc3QgbmV3TWF0cml4ID0gbmV3IE1hdHJpeChtYXRyaXgpO1xuICAgIHJldHVybiBuZXdNYXRyaXgubG9nMigpO1xuICB9O1xuXG4gIEFic3RyYWN0TWF0cml4LnByb3RvdHlwZS5yb3VuZCA9IGZ1bmN0aW9uIHJvdW5kKCkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5yb3dzOyBpKyspIHtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy5jb2x1bW5zOyBqKyspIHtcbiAgICAgICAgdGhpcy5zZXQoaSwgaiwgTWF0aC5yb3VuZCh0aGlzLmdldChpLCBqKSkpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBBYnN0cmFjdE1hdHJpeC5yb3VuZCA9IGZ1bmN0aW9uIHJvdW5kKG1hdHJpeCkge1xuICAgIGNvbnN0IG5ld01hdHJpeCA9IG5ldyBNYXRyaXgobWF0cml4KTtcbiAgICByZXR1cm4gbmV3TWF0cml4LnJvdW5kKCk7XG4gIH07XG5cbiAgQWJzdHJhY3RNYXRyaXgucHJvdG90eXBlLnNpZ24gPSBmdW5jdGlvbiBzaWduKCkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5yb3dzOyBpKyspIHtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy5jb2x1bW5zOyBqKyspIHtcbiAgICAgICAgdGhpcy5zZXQoaSwgaiwgTWF0aC5zaWduKHRoaXMuZ2V0KGksIGopKSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEFic3RyYWN0TWF0cml4LnNpZ24gPSBmdW5jdGlvbiBzaWduKG1hdHJpeCkge1xuICAgIGNvbnN0IG5ld01hdHJpeCA9IG5ldyBNYXRyaXgobWF0cml4KTtcbiAgICByZXR1cm4gbmV3TWF0cml4LnNpZ24oKTtcbiAgfTtcblxuICBBYnN0cmFjdE1hdHJpeC5wcm90b3R5cGUuc2luID0gZnVuY3Rpb24gc2luKCkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5yb3dzOyBpKyspIHtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy5jb2x1bW5zOyBqKyspIHtcbiAgICAgICAgdGhpcy5zZXQoaSwgaiwgTWF0aC5zaW4odGhpcy5nZXQoaSwgaikpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgQWJzdHJhY3RNYXRyaXguc2luID0gZnVuY3Rpb24gc2luKG1hdHJpeCkge1xuICAgIGNvbnN0IG5ld01hdHJpeCA9IG5ldyBNYXRyaXgobWF0cml4KTtcbiAgICByZXR1cm4gbmV3TWF0cml4LnNpbigpO1xuICB9O1xuXG4gIEFic3RyYWN0TWF0cml4LnByb3RvdHlwZS5zaW5oID0gZnVuY3Rpb24gc2luaCgpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucm93czsgaSsrKSB7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMuY29sdW1uczsgaisrKSB7XG4gICAgICAgIHRoaXMuc2V0KGksIGosIE1hdGguc2luaCh0aGlzLmdldChpLCBqKSkpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBBYnN0cmFjdE1hdHJpeC5zaW5oID0gZnVuY3Rpb24gc2luaChtYXRyaXgpIHtcbiAgICBjb25zdCBuZXdNYXRyaXggPSBuZXcgTWF0cml4KG1hdHJpeCk7XG4gICAgcmV0dXJuIG5ld01hdHJpeC5zaW5oKCk7XG4gIH07XG5cbiAgQWJzdHJhY3RNYXRyaXgucHJvdG90eXBlLnNxcnQgPSBmdW5jdGlvbiBzcXJ0KCkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5yb3dzOyBpKyspIHtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy5jb2x1bW5zOyBqKyspIHtcbiAgICAgICAgdGhpcy5zZXQoaSwgaiwgTWF0aC5zcXJ0KHRoaXMuZ2V0KGksIGopKSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEFic3RyYWN0TWF0cml4LnNxcnQgPSBmdW5jdGlvbiBzcXJ0KG1hdHJpeCkge1xuICAgIGNvbnN0IG5ld01hdHJpeCA9IG5ldyBNYXRyaXgobWF0cml4KTtcbiAgICByZXR1cm4gbmV3TWF0cml4LnNxcnQoKTtcbiAgfTtcblxuICBBYnN0cmFjdE1hdHJpeC5wcm90b3R5cGUudGFuID0gZnVuY3Rpb24gdGFuKCkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5yb3dzOyBpKyspIHtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy5jb2x1bW5zOyBqKyspIHtcbiAgICAgICAgdGhpcy5zZXQoaSwgaiwgTWF0aC50YW4odGhpcy5nZXQoaSwgaikpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgQWJzdHJhY3RNYXRyaXgudGFuID0gZnVuY3Rpb24gdGFuKG1hdHJpeCkge1xuICAgIGNvbnN0IG5ld01hdHJpeCA9IG5ldyBNYXRyaXgobWF0cml4KTtcbiAgICByZXR1cm4gbmV3TWF0cml4LnRhbigpO1xuICB9O1xuXG4gIEFic3RyYWN0TWF0cml4LnByb3RvdHlwZS50YW5oID0gZnVuY3Rpb24gdGFuaCgpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucm93czsgaSsrKSB7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMuY29sdW1uczsgaisrKSB7XG4gICAgICAgIHRoaXMuc2V0KGksIGosIE1hdGgudGFuaCh0aGlzLmdldChpLCBqKSkpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBBYnN0cmFjdE1hdHJpeC50YW5oID0gZnVuY3Rpb24gdGFuaChtYXRyaXgpIHtcbiAgICBjb25zdCBuZXdNYXRyaXggPSBuZXcgTWF0cml4KG1hdHJpeCk7XG4gICAgcmV0dXJuIG5ld01hdHJpeC50YW5oKCk7XG4gIH07XG5cbiAgQWJzdHJhY3RNYXRyaXgucHJvdG90eXBlLnRydW5jID0gZnVuY3Rpb24gdHJ1bmMoKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnJvd3M7IGkrKykge1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB0aGlzLmNvbHVtbnM7IGorKykge1xuICAgICAgICB0aGlzLnNldChpLCBqLCBNYXRoLnRydW5jKHRoaXMuZ2V0KGksIGopKSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEFic3RyYWN0TWF0cml4LnRydW5jID0gZnVuY3Rpb24gdHJ1bmMobWF0cml4KSB7XG4gICAgY29uc3QgbmV3TWF0cml4ID0gbmV3IE1hdHJpeChtYXRyaXgpO1xuICAgIHJldHVybiBuZXdNYXRyaXgudHJ1bmMoKTtcbiAgfTtcblxuICBBYnN0cmFjdE1hdHJpeC5wb3cgPSBmdW5jdGlvbiBwb3cobWF0cml4LCBhcmcwKSB7XG4gICAgY29uc3QgbmV3TWF0cml4ID0gbmV3IE1hdHJpeChtYXRyaXgpO1xuICAgIHJldHVybiBuZXdNYXRyaXgucG93KGFyZzApO1xuICB9O1xuXG4gIEFic3RyYWN0TWF0cml4LnByb3RvdHlwZS5wb3cgPSBmdW5jdGlvbiBwb3codmFsdWUpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykgcmV0dXJuIHRoaXMucG93Uyh2YWx1ZSk7XG4gICAgcmV0dXJuIHRoaXMucG93TSh2YWx1ZSk7XG4gIH07XG5cbiAgQWJzdHJhY3RNYXRyaXgucHJvdG90eXBlLnBvd1MgPSBmdW5jdGlvbiBwb3dTKHZhbHVlKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnJvd3M7IGkrKykge1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB0aGlzLmNvbHVtbnM7IGorKykge1xuICAgICAgICB0aGlzLnNldChpLCBqLCBNYXRoLnBvdyh0aGlzLmdldChpLCBqKSwgdmFsdWUpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgQWJzdHJhY3RNYXRyaXgucHJvdG90eXBlLnBvd00gPSBmdW5jdGlvbiBwb3dNKG1hdHJpeCkge1xuICAgIG1hdHJpeCA9IE1hdHJpeC5jaGVja01hdHJpeChtYXRyaXgpO1xuICAgIGlmICh0aGlzLnJvd3MgIT09IG1hdHJpeC5yb3dzIHx8XG4gICAgICB0aGlzLmNvbHVtbnMgIT09IG1hdHJpeC5jb2x1bW5zKSB7XG4gICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignTWF0cmljZXMgZGltZW5zaW9ucyBtdXN0IGJlIGVxdWFsJyk7XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5yb3dzOyBpKyspIHtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy5jb2x1bW5zOyBqKyspIHtcbiAgICAgICAgdGhpcy5zZXQoaSwgaiwgTWF0aC5wb3codGhpcy5nZXQoaSwgaiksIG1hdHJpeC5nZXQoaSwgaikpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG59XG4iLCJpbXBvcnQgeyBBYnN0cmFjdE1hdHJpeCB9IGZyb20gJy4uL21hdHJpeCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFdyYXBwZXJNYXRyaXgyRCBleHRlbmRzIEFic3RyYWN0TWF0cml4IHtcbiAgY29uc3RydWN0b3IoZGF0YSkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICB0aGlzLnJvd3MgPSBkYXRhLmxlbmd0aDtcbiAgICB0aGlzLmNvbHVtbnMgPSBkYXRhWzBdLmxlbmd0aDtcbiAgfVxuXG4gIHNldChyb3dJbmRleCwgY29sdW1uSW5kZXgsIHZhbHVlKSB7XG4gICAgdGhpcy5kYXRhW3Jvd0luZGV4XVtjb2x1bW5JbmRleF0gPSB2YWx1ZTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGdldChyb3dJbmRleCwgY29sdW1uSW5kZXgpIHtcbiAgICByZXR1cm4gdGhpcy5kYXRhW3Jvd0luZGV4XVtjb2x1bW5JbmRleF07XG4gIH1cbn1cbiIsImltcG9ydCBNYXRyaXggZnJvbSAnLi4vbWF0cml4JztcbmltcG9ydCBXcmFwcGVyTWF0cml4MkQgZnJvbSAnLi4vd3JhcC9XcmFwcGVyTWF0cml4MkQnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMdURlY29tcG9zaXRpb24ge1xuICBjb25zdHJ1Y3RvcihtYXRyaXgpIHtcbiAgICBtYXRyaXggPSBXcmFwcGVyTWF0cml4MkQuY2hlY2tNYXRyaXgobWF0cml4KTtcblxuICAgIGxldCBsdSA9IG1hdHJpeC5jbG9uZSgpO1xuICAgIGxldCByb3dzID0gbHUucm93cztcbiAgICBsZXQgY29sdW1ucyA9IGx1LmNvbHVtbnM7XG4gICAgbGV0IHBpdm90VmVjdG9yID0gbmV3IEZsb2F0NjRBcnJheShyb3dzKTtcbiAgICBsZXQgcGl2b3RTaWduID0gMTtcbiAgICBsZXQgaSwgaiwgaywgcCwgcywgdCwgdjtcbiAgICBsZXQgTFVjb2xqLCBrbWF4O1xuXG4gICAgZm9yIChpID0gMDsgaSA8IHJvd3M7IGkrKykge1xuICAgICAgcGl2b3RWZWN0b3JbaV0gPSBpO1xuICAgIH1cblxuICAgIExVY29saiA9IG5ldyBGbG9hdDY0QXJyYXkocm93cyk7XG5cbiAgICBmb3IgKGogPSAwOyBqIDwgY29sdW1uczsgaisrKSB7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgcm93czsgaSsrKSB7XG4gICAgICAgIExVY29saltpXSA9IGx1LmdldChpLCBqKTtcbiAgICAgIH1cblxuICAgICAgZm9yIChpID0gMDsgaSA8IHJvd3M7IGkrKykge1xuICAgICAgICBrbWF4ID0gTWF0aC5taW4oaSwgaik7XG4gICAgICAgIHMgPSAwO1xuICAgICAgICBmb3IgKGsgPSAwOyBrIDwga21heDsgaysrKSB7XG4gICAgICAgICAgcyArPSBsdS5nZXQoaSwgaykgKiBMVWNvbGpba107XG4gICAgICAgIH1cbiAgICAgICAgTFVjb2xqW2ldIC09IHM7XG4gICAgICAgIGx1LnNldChpLCBqLCBMVWNvbGpbaV0pO1xuICAgICAgfVxuXG4gICAgICBwID0gajtcbiAgICAgIGZvciAoaSA9IGogKyAxOyBpIDwgcm93czsgaSsrKSB7XG4gICAgICAgIGlmIChNYXRoLmFicyhMVWNvbGpbaV0pID4gTWF0aC5hYnMoTFVjb2xqW3BdKSkge1xuICAgICAgICAgIHAgPSBpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChwICE9PSBqKSB7XG4gICAgICAgIGZvciAoayA9IDA7IGsgPCBjb2x1bW5zOyBrKyspIHtcbiAgICAgICAgICB0ID0gbHUuZ2V0KHAsIGspO1xuICAgICAgICAgIGx1LnNldChwLCBrLCBsdS5nZXQoaiwgaykpO1xuICAgICAgICAgIGx1LnNldChqLCBrLCB0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHYgPSBwaXZvdFZlY3RvcltwXTtcbiAgICAgICAgcGl2b3RWZWN0b3JbcF0gPSBwaXZvdFZlY3RvcltqXTtcbiAgICAgICAgcGl2b3RWZWN0b3Jbal0gPSB2O1xuXG4gICAgICAgIHBpdm90U2lnbiA9IC1waXZvdFNpZ247XG4gICAgICB9XG5cbiAgICAgIGlmIChqIDwgcm93cyAmJiBsdS5nZXQoaiwgaikgIT09IDApIHtcbiAgICAgICAgZm9yIChpID0gaiArIDE7IGkgPCByb3dzOyBpKyspIHtcbiAgICAgICAgICBsdS5zZXQoaSwgaiwgbHUuZ2V0KGksIGopIC8gbHUuZ2V0KGosIGopKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuTFUgPSBsdTtcbiAgICB0aGlzLnBpdm90VmVjdG9yID0gcGl2b3RWZWN0b3I7XG4gICAgdGhpcy5waXZvdFNpZ24gPSBwaXZvdFNpZ247XG4gIH1cblxuICBpc1Npbmd1bGFyKCkge1xuICAgIGxldCBkYXRhID0gdGhpcy5MVTtcbiAgICBsZXQgY29sID0gZGF0YS5jb2x1bW5zO1xuICAgIGZvciAobGV0IGogPSAwOyBqIDwgY29sOyBqKyspIHtcbiAgICAgIGlmIChkYXRhLmdldChqLCBqKSA9PT0gMCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc29sdmUodmFsdWUpIHtcbiAgICB2YWx1ZSA9IE1hdHJpeC5jaGVja01hdHJpeCh2YWx1ZSk7XG5cbiAgICBsZXQgbHUgPSB0aGlzLkxVO1xuICAgIGxldCByb3dzID0gbHUucm93cztcblxuICAgIGlmIChyb3dzICE9PSB2YWx1ZS5yb3dzKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgbWF0cml4IGRpbWVuc2lvbnMnKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuaXNTaW5ndWxhcigpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0xVIG1hdHJpeCBpcyBzaW5ndWxhcicpO1xuICAgIH1cblxuICAgIGxldCBjb3VudCA9IHZhbHVlLmNvbHVtbnM7XG4gICAgbGV0IFggPSB2YWx1ZS5zdWJNYXRyaXhSb3codGhpcy5waXZvdFZlY3RvciwgMCwgY291bnQgLSAxKTtcbiAgICBsZXQgY29sdW1ucyA9IGx1LmNvbHVtbnM7XG4gICAgbGV0IGksIGosIGs7XG5cbiAgICBmb3IgKGsgPSAwOyBrIDwgY29sdW1uczsgaysrKSB7XG4gICAgICBmb3IgKGkgPSBrICsgMTsgaSA8IGNvbHVtbnM7IGkrKykge1xuICAgICAgICBmb3IgKGogPSAwOyBqIDwgY291bnQ7IGorKykge1xuICAgICAgICAgIFguc2V0KGksIGosIFguZ2V0KGksIGopIC0gWC5nZXQoaywgaikgKiBsdS5nZXQoaSwgaykpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAoayA9IGNvbHVtbnMgLSAxOyBrID49IDA7IGstLSkge1xuICAgICAgZm9yIChqID0gMDsgaiA8IGNvdW50OyBqKyspIHtcbiAgICAgICAgWC5zZXQoaywgaiwgWC5nZXQoaywgaikgLyBsdS5nZXQoaywgaykpO1xuICAgICAgfVxuICAgICAgZm9yIChpID0gMDsgaSA8IGs7IGkrKykge1xuICAgICAgICBmb3IgKGogPSAwOyBqIDwgY291bnQ7IGorKykge1xuICAgICAgICAgIFguc2V0KGksIGosIFguZ2V0KGksIGopIC0gWC5nZXQoaywgaikgKiBsdS5nZXQoaSwgaykpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBYO1xuICB9XG5cbiAgZ2V0IGRldGVybWluYW50KCkge1xuICAgIGxldCBkYXRhID0gdGhpcy5MVTtcbiAgICBpZiAoIWRhdGEuaXNTcXVhcmUoKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdNYXRyaXggbXVzdCBiZSBzcXVhcmUnKTtcbiAgICB9XG4gICAgbGV0IGRldGVybWluYW50ID0gdGhpcy5waXZvdFNpZ247XG4gICAgbGV0IGNvbCA9IGRhdGEuY29sdW1ucztcbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IGNvbDsgaisrKSB7XG4gICAgICBkZXRlcm1pbmFudCAqPSBkYXRhLmdldChqLCBqKTtcbiAgICB9XG4gICAgcmV0dXJuIGRldGVybWluYW50O1xuICB9XG5cbiAgZ2V0IGxvd2VyVHJpYW5ndWxhck1hdHJpeCgpIHtcbiAgICBsZXQgZGF0YSA9IHRoaXMuTFU7XG4gICAgbGV0IHJvd3MgPSBkYXRhLnJvd3M7XG4gICAgbGV0IGNvbHVtbnMgPSBkYXRhLmNvbHVtbnM7XG4gICAgbGV0IFggPSBuZXcgTWF0cml4KHJvd3MsIGNvbHVtbnMpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcm93czsgaSsrKSB7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGNvbHVtbnM7IGorKykge1xuICAgICAgICBpZiAoaSA+IGopIHtcbiAgICAgICAgICBYLnNldChpLCBqLCBkYXRhLmdldChpLCBqKSk7XG4gICAgICAgIH0gZWxzZSBpZiAoaSA9PT0gaikge1xuICAgICAgICAgIFguc2V0KGksIGosIDEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIFguc2V0KGksIGosIDApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBYO1xuICB9XG5cbiAgZ2V0IHVwcGVyVHJpYW5ndWxhck1hdHJpeCgpIHtcbiAgICBsZXQgZGF0YSA9IHRoaXMuTFU7XG4gICAgbGV0IHJvd3MgPSBkYXRhLnJvd3M7XG4gICAgbGV0IGNvbHVtbnMgPSBkYXRhLmNvbHVtbnM7XG4gICAgbGV0IFggPSBuZXcgTWF0cml4KHJvd3MsIGNvbHVtbnMpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcm93czsgaSsrKSB7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGNvbHVtbnM7IGorKykge1xuICAgICAgICBpZiAoaSA8PSBqKSB7XG4gICAgICAgICAgWC5zZXQoaSwgaiwgZGF0YS5nZXQoaSwgaikpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIFguc2V0KGksIGosIDApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBYO1xuICB9XG5cbiAgZ2V0IHBpdm90UGVybXV0YXRpb25WZWN0b3IoKSB7XG4gICAgcmV0dXJuIEFycmF5LmZyb20odGhpcy5waXZvdFZlY3Rvcik7XG4gIH1cbn1cbiIsImV4cG9ydCBmdW5jdGlvbiBoeXBvdGVudXNlKGEsIGIpIHtcbiAgbGV0IHIgPSAwO1xuICBpZiAoTWF0aC5hYnMoYSkgPiBNYXRoLmFicyhiKSkge1xuICAgIHIgPSBiIC8gYTtcbiAgICByZXR1cm4gTWF0aC5hYnMoYSkgKiBNYXRoLnNxcnQoMSArIHIgKiByKTtcbiAgfVxuICBpZiAoYiAhPT0gMCkge1xuICAgIHIgPSBhIC8gYjtcbiAgICByZXR1cm4gTWF0aC5hYnMoYikgKiBNYXRoLnNxcnQoMSArIHIgKiByKTtcbiAgfVxuICByZXR1cm4gMDtcbn1cbiIsImltcG9ydCBNYXRyaXggZnJvbSAnLi4vbWF0cml4JztcbmltcG9ydCBXcmFwcGVyTWF0cml4MkQgZnJvbSAnLi4vd3JhcC9XcmFwcGVyTWF0cml4MkQnO1xuXG5pbXBvcnQgeyBoeXBvdGVudXNlIH0gZnJvbSAnLi91dGlsJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUXJEZWNvbXBvc2l0aW9uIHtcbiAgY29uc3RydWN0b3IodmFsdWUpIHtcbiAgICB2YWx1ZSA9IFdyYXBwZXJNYXRyaXgyRC5jaGVja01hdHJpeCh2YWx1ZSk7XG5cbiAgICBsZXQgcXIgPSB2YWx1ZS5jbG9uZSgpO1xuICAgIGxldCBtID0gdmFsdWUucm93cztcbiAgICBsZXQgbiA9IHZhbHVlLmNvbHVtbnM7XG4gICAgbGV0IHJkaWFnID0gbmV3IEZsb2F0NjRBcnJheShuKTtcbiAgICBsZXQgaSwgaiwgaywgcztcblxuICAgIGZvciAoayA9IDA7IGsgPCBuOyBrKyspIHtcbiAgICAgIGxldCBucm0gPSAwO1xuICAgICAgZm9yIChpID0gazsgaSA8IG07IGkrKykge1xuICAgICAgICBucm0gPSBoeXBvdGVudXNlKG5ybSwgcXIuZ2V0KGksIGspKTtcbiAgICAgIH1cbiAgICAgIGlmIChucm0gIT09IDApIHtcbiAgICAgICAgaWYgKHFyLmdldChrLCBrKSA8IDApIHtcbiAgICAgICAgICBucm0gPSAtbnJtO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoaSA9IGs7IGkgPCBtOyBpKyspIHtcbiAgICAgICAgICBxci5zZXQoaSwgaywgcXIuZ2V0KGksIGspIC8gbnJtKTtcbiAgICAgICAgfVxuICAgICAgICBxci5zZXQoaywgaywgcXIuZ2V0KGssIGspICsgMSk7XG4gICAgICAgIGZvciAoaiA9IGsgKyAxOyBqIDwgbjsgaisrKSB7XG4gICAgICAgICAgcyA9IDA7XG4gICAgICAgICAgZm9yIChpID0gazsgaSA8IG07IGkrKykge1xuICAgICAgICAgICAgcyArPSBxci5nZXQoaSwgaykgKiBxci5nZXQoaSwgaik7XG4gICAgICAgICAgfVxuICAgICAgICAgIHMgPSAtcyAvIHFyLmdldChrLCBrKTtcbiAgICAgICAgICBmb3IgKGkgPSBrOyBpIDwgbTsgaSsrKSB7XG4gICAgICAgICAgICBxci5zZXQoaSwgaiwgcXIuZ2V0KGksIGopICsgcyAqIHFyLmdldChpLCBrKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZGlhZ1trXSA9IC1ucm07XG4gICAgfVxuXG4gICAgdGhpcy5RUiA9IHFyO1xuICAgIHRoaXMuUmRpYWcgPSByZGlhZztcbiAgfVxuXG4gIHNvbHZlKHZhbHVlKSB7XG4gICAgdmFsdWUgPSBNYXRyaXguY2hlY2tNYXRyaXgodmFsdWUpO1xuXG4gICAgbGV0IHFyID0gdGhpcy5RUjtcbiAgICBsZXQgbSA9IHFyLnJvd3M7XG5cbiAgICBpZiAodmFsdWUucm93cyAhPT0gbSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdNYXRyaXggcm93IGRpbWVuc2lvbnMgbXVzdCBhZ3JlZScpO1xuICAgIH1cbiAgICBpZiAoIXRoaXMuaXNGdWxsUmFuaygpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ01hdHJpeCBpcyByYW5rIGRlZmljaWVudCcpO1xuICAgIH1cblxuICAgIGxldCBjb3VudCA9IHZhbHVlLmNvbHVtbnM7XG4gICAgbGV0IFggPSB2YWx1ZS5jbG9uZSgpO1xuICAgIGxldCBuID0gcXIuY29sdW1ucztcbiAgICBsZXQgaSwgaiwgaywgcztcblxuICAgIGZvciAoayA9IDA7IGsgPCBuOyBrKyspIHtcbiAgICAgIGZvciAoaiA9IDA7IGogPCBjb3VudDsgaisrKSB7XG4gICAgICAgIHMgPSAwO1xuICAgICAgICBmb3IgKGkgPSBrOyBpIDwgbTsgaSsrKSB7XG4gICAgICAgICAgcyArPSBxci5nZXQoaSwgaykgKiBYLmdldChpLCBqKTtcbiAgICAgICAgfVxuICAgICAgICBzID0gLXMgLyBxci5nZXQoaywgayk7XG4gICAgICAgIGZvciAoaSA9IGs7IGkgPCBtOyBpKyspIHtcbiAgICAgICAgICBYLnNldChpLCBqLCBYLmdldChpLCBqKSArIHMgKiBxci5nZXQoaSwgaykpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAoayA9IG4gLSAxOyBrID49IDA7IGstLSkge1xuICAgICAgZm9yIChqID0gMDsgaiA8IGNvdW50OyBqKyspIHtcbiAgICAgICAgWC5zZXQoaywgaiwgWC5nZXQoaywgaikgLyB0aGlzLlJkaWFnW2tdKTtcbiAgICAgIH1cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBrOyBpKyspIHtcbiAgICAgICAgZm9yIChqID0gMDsgaiA8IGNvdW50OyBqKyspIHtcbiAgICAgICAgICBYLnNldChpLCBqLCBYLmdldChpLCBqKSAtIFguZ2V0KGssIGopICogcXIuZ2V0KGksIGspKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBYLnN1Yk1hdHJpeCgwLCBuIC0gMSwgMCwgY291bnQgLSAxKTtcbiAgfVxuXG4gIGlzRnVsbFJhbmsoKSB7XG4gICAgbGV0IGNvbHVtbnMgPSB0aGlzLlFSLmNvbHVtbnM7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb2x1bW5zOyBpKyspIHtcbiAgICAgIGlmICh0aGlzLlJkaWFnW2ldID09PSAwKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBnZXQgdXBwZXJUcmlhbmd1bGFyTWF0cml4KCkge1xuICAgIGxldCBxciA9IHRoaXMuUVI7XG4gICAgbGV0IG4gPSBxci5jb2x1bW5zO1xuICAgIGxldCBYID0gbmV3IE1hdHJpeChuLCBuKTtcbiAgICBsZXQgaSwgajtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbjsgaSsrKSB7XG4gICAgICBmb3IgKGogPSAwOyBqIDwgbjsgaisrKSB7XG4gICAgICAgIGlmIChpIDwgaikge1xuICAgICAgICAgIFguc2V0KGksIGosIHFyLmdldChpLCBqKSk7XG4gICAgICAgIH0gZWxzZSBpZiAoaSA9PT0gaikge1xuICAgICAgICAgIFguc2V0KGksIGosIHRoaXMuUmRpYWdbaV0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIFguc2V0KGksIGosIDApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBYO1xuICB9XG5cbiAgZ2V0IG9ydGhvZ29uYWxNYXRyaXgoKSB7XG4gICAgbGV0IHFyID0gdGhpcy5RUjtcbiAgICBsZXQgcm93cyA9IHFyLnJvd3M7XG4gICAgbGV0IGNvbHVtbnMgPSBxci5jb2x1bW5zO1xuICAgIGxldCBYID0gbmV3IE1hdHJpeChyb3dzLCBjb2x1bW5zKTtcbiAgICBsZXQgaSwgaiwgaywgcztcblxuICAgIGZvciAoayA9IGNvbHVtbnMgLSAxOyBrID49IDA7IGstLSkge1xuICAgICAgZm9yIChpID0gMDsgaSA8IHJvd3M7IGkrKykge1xuICAgICAgICBYLnNldChpLCBrLCAwKTtcbiAgICAgIH1cbiAgICAgIFguc2V0KGssIGssIDEpO1xuICAgICAgZm9yIChqID0gazsgaiA8IGNvbHVtbnM7IGorKykge1xuICAgICAgICBpZiAocXIuZ2V0KGssIGspICE9PSAwKSB7XG4gICAgICAgICAgcyA9IDA7XG4gICAgICAgICAgZm9yIChpID0gazsgaSA8IHJvd3M7IGkrKykge1xuICAgICAgICAgICAgcyArPSBxci5nZXQoaSwgaykgKiBYLmdldChpLCBqKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBzID0gLXMgLyBxci5nZXQoaywgayk7XG5cbiAgICAgICAgICBmb3IgKGkgPSBrOyBpIDwgcm93czsgaSsrKSB7XG4gICAgICAgICAgICBYLnNldChpLCBqLCBYLmdldChpLCBqKSArIHMgKiBxci5nZXQoaSwgaykpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gWDtcbiAgfVxufVxuIiwiaW1wb3J0IE1hdHJpeCBmcm9tICcuLi9tYXRyaXgnO1xuaW1wb3J0IFdyYXBwZXJNYXRyaXgyRCBmcm9tICcuLi93cmFwL1dyYXBwZXJNYXRyaXgyRCc7XG5cbmltcG9ydCB7IGh5cG90ZW51c2UgfSBmcm9tICcuL3V0aWwnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTaW5ndWxhclZhbHVlRGVjb21wb3NpdGlvbiB7XG4gIGNvbnN0cnVjdG9yKHZhbHVlLCBvcHRpb25zID0ge30pIHtcbiAgICB2YWx1ZSA9IFdyYXBwZXJNYXRyaXgyRC5jaGVja01hdHJpeCh2YWx1ZSk7XG5cbiAgICBsZXQgbSA9IHZhbHVlLnJvd3M7XG4gICAgbGV0IG4gPSB2YWx1ZS5jb2x1bW5zO1xuXG4gICAgY29uc3Qge1xuICAgICAgY29tcHV0ZUxlZnRTaW5ndWxhclZlY3RvcnMgPSB0cnVlLFxuICAgICAgY29tcHV0ZVJpZ2h0U2luZ3VsYXJWZWN0b3JzID0gdHJ1ZSxcbiAgICAgIGF1dG9UcmFuc3Bvc2UgPSBmYWxzZSxcbiAgICB9ID0gb3B0aW9ucztcblxuICAgIGxldCB3YW50dSA9IEJvb2xlYW4oY29tcHV0ZUxlZnRTaW5ndWxhclZlY3RvcnMpO1xuICAgIGxldCB3YW50diA9IEJvb2xlYW4oY29tcHV0ZVJpZ2h0U2luZ3VsYXJWZWN0b3JzKTtcblxuICAgIGxldCBzd2FwcGVkID0gZmFsc2U7XG4gICAgbGV0IGE7XG4gICAgaWYgKG0gPCBuKSB7XG4gICAgICBpZiAoIWF1dG9UcmFuc3Bvc2UpIHtcbiAgICAgICAgYSA9IHZhbHVlLmNsb25lKCk7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICAnQ29tcHV0aW5nIFNWRCBvbiBhIG1hdHJpeCB3aXRoIG1vcmUgY29sdW1ucyB0aGFuIHJvd3MuIENvbnNpZGVyIGVuYWJsaW5nIGF1dG9UcmFuc3Bvc2UnLFxuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYSA9IHZhbHVlLnRyYW5zcG9zZSgpO1xuICAgICAgICBtID0gYS5yb3dzO1xuICAgICAgICBuID0gYS5jb2x1bW5zO1xuICAgICAgICBzd2FwcGVkID0gdHJ1ZTtcbiAgICAgICAgbGV0IGF1eCA9IHdhbnR1O1xuICAgICAgICB3YW50dSA9IHdhbnR2O1xuICAgICAgICB3YW50diA9IGF1eDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgYSA9IHZhbHVlLmNsb25lKCk7XG4gICAgfVxuXG4gICAgbGV0IG51ID0gTWF0aC5taW4obSwgbik7XG4gICAgbGV0IG5pID0gTWF0aC5taW4obSArIDEsIG4pO1xuICAgIGxldCBzID0gbmV3IEZsb2F0NjRBcnJheShuaSk7XG4gICAgbGV0IFUgPSBuZXcgTWF0cml4KG0sIG51KTtcbiAgICBsZXQgViA9IG5ldyBNYXRyaXgobiwgbik7XG5cbiAgICBsZXQgZSA9IG5ldyBGbG9hdDY0QXJyYXkobik7XG4gICAgbGV0IHdvcmsgPSBuZXcgRmxvYXQ2NEFycmF5KG0pO1xuXG4gICAgbGV0IHNpID0gbmV3IEZsb2F0NjRBcnJheShuaSk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuaTsgaSsrKSBzaVtpXSA9IGk7XG5cbiAgICBsZXQgbmN0ID0gTWF0aC5taW4obSAtIDEsIG4pO1xuICAgIGxldCBucnQgPSBNYXRoLm1heCgwLCBNYXRoLm1pbihuIC0gMiwgbSkpO1xuICAgIGxldCBtcmMgPSBNYXRoLm1heChuY3QsIG5ydCk7XG5cbiAgICBmb3IgKGxldCBrID0gMDsgayA8IG1yYzsgaysrKSB7XG4gICAgICBpZiAoayA8IG5jdCkge1xuICAgICAgICBzW2tdID0gMDtcbiAgICAgICAgZm9yIChsZXQgaSA9IGs7IGkgPCBtOyBpKyspIHtcbiAgICAgICAgICBzW2tdID0gaHlwb3RlbnVzZShzW2tdLCBhLmdldChpLCBrKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNba10gIT09IDApIHtcbiAgICAgICAgICBpZiAoYS5nZXQoaywgaykgPCAwKSB7XG4gICAgICAgICAgICBzW2tdID0gLXNba107XG4gICAgICAgICAgfVxuICAgICAgICAgIGZvciAobGV0IGkgPSBrOyBpIDwgbTsgaSsrKSB7XG4gICAgICAgICAgICBhLnNldChpLCBrLCBhLmdldChpLCBrKSAvIHNba10pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBhLnNldChrLCBrLCBhLmdldChrLCBrKSArIDEpO1xuICAgICAgICB9XG4gICAgICAgIHNba10gPSAtc1trXTtcbiAgICAgIH1cblxuICAgICAgZm9yIChsZXQgaiA9IGsgKyAxOyBqIDwgbjsgaisrKSB7XG4gICAgICAgIGlmIChrIDwgbmN0ICYmIHNba10gIT09IDApIHtcbiAgICAgICAgICBsZXQgdCA9IDA7XG4gICAgICAgICAgZm9yIChsZXQgaSA9IGs7IGkgPCBtOyBpKyspIHtcbiAgICAgICAgICAgIHQgKz0gYS5nZXQoaSwgaykgKiBhLmdldChpLCBqKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdCA9IC10IC8gYS5nZXQoaywgayk7XG4gICAgICAgICAgZm9yIChsZXQgaSA9IGs7IGkgPCBtOyBpKyspIHtcbiAgICAgICAgICAgIGEuc2V0KGksIGosIGEuZ2V0KGksIGopICsgdCAqIGEuZ2V0KGksIGspKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZVtqXSA9IGEuZ2V0KGssIGopO1xuICAgICAgfVxuXG4gICAgICBpZiAod2FudHUgJiYgayA8IG5jdCkge1xuICAgICAgICBmb3IgKGxldCBpID0gazsgaSA8IG07IGkrKykge1xuICAgICAgICAgIFUuc2V0KGksIGssIGEuZ2V0KGksIGspKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoayA8IG5ydCkge1xuICAgICAgICBlW2tdID0gMDtcbiAgICAgICAgZm9yIChsZXQgaSA9IGsgKyAxOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgICAgZVtrXSA9IGh5cG90ZW51c2UoZVtrXSwgZVtpXSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVba10gIT09IDApIHtcbiAgICAgICAgICBpZiAoZVtrICsgMV0gPCAwKSB7XG4gICAgICAgICAgICBlW2tdID0gMCAtIGVba107XG4gICAgICAgICAgfVxuICAgICAgICAgIGZvciAobGV0IGkgPSBrICsgMTsgaSA8IG47IGkrKykge1xuICAgICAgICAgICAgZVtpXSAvPSBlW2tdO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlW2sgKyAxXSArPSAxO1xuICAgICAgICB9XG4gICAgICAgIGVba10gPSAtZVtrXTtcbiAgICAgICAgaWYgKGsgKyAxIDwgbSAmJiBlW2tdICE9PSAwKSB7XG4gICAgICAgICAgZm9yIChsZXQgaSA9IGsgKyAxOyBpIDwgbTsgaSsrKSB7XG4gICAgICAgICAgICB3b3JrW2ldID0gMDtcbiAgICAgICAgICB9XG4gICAgICAgICAgZm9yIChsZXQgaSA9IGsgKyAxOyBpIDwgbTsgaSsrKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBqID0gayArIDE7IGogPCBuOyBqKyspIHtcbiAgICAgICAgICAgICAgd29ya1tpXSArPSBlW2pdICogYS5nZXQoaSwgaik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGZvciAobGV0IGogPSBrICsgMTsgaiA8IG47IGorKykge1xuICAgICAgICAgICAgbGV0IHQgPSAtZVtqXSAvIGVbayArIDFdO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IGsgKyAxOyBpIDwgbTsgaSsrKSB7XG4gICAgICAgICAgICAgIGEuc2V0KGksIGosIGEuZ2V0KGksIGopICsgdCAqIHdvcmtbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAod2FudHYpIHtcbiAgICAgICAgICBmb3IgKGxldCBpID0gayArIDE7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgIFYuc2V0KGksIGssIGVbaV0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGxldCBwID0gTWF0aC5taW4obiwgbSArIDEpO1xuICAgIGlmIChuY3QgPCBuKSB7XG4gICAgICBzW25jdF0gPSBhLmdldChuY3QsIG5jdCk7XG4gICAgfVxuICAgIGlmIChtIDwgcCkge1xuICAgICAgc1twIC0gMV0gPSAwO1xuICAgIH1cbiAgICBpZiAobnJ0ICsgMSA8IHApIHtcbiAgICAgIGVbbnJ0XSA9IGEuZ2V0KG5ydCwgcCAtIDEpO1xuICAgIH1cbiAgICBlW3AgLSAxXSA9IDA7XG5cbiAgICBpZiAod2FudHUpIHtcbiAgICAgIGZvciAobGV0IGogPSBuY3Q7IGogPCBudTsgaisrKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbTsgaSsrKSB7XG4gICAgICAgICAgVS5zZXQoaSwgaiwgMCk7XG4gICAgICAgIH1cbiAgICAgICAgVS5zZXQoaiwgaiwgMSk7XG4gICAgICB9XG4gICAgICBmb3IgKGxldCBrID0gbmN0IC0gMTsgayA+PSAwOyBrLS0pIHtcbiAgICAgICAgaWYgKHNba10gIT09IDApIHtcbiAgICAgICAgICBmb3IgKGxldCBqID0gayArIDE7IGogPCBudTsgaisrKSB7XG4gICAgICAgICAgICBsZXQgdCA9IDA7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gazsgaSA8IG07IGkrKykge1xuICAgICAgICAgICAgICB0ICs9IFUuZ2V0KGksIGspICogVS5nZXQoaSwgaik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0ID0gLXQgLyBVLmdldChrLCBrKTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSBrOyBpIDwgbTsgaSsrKSB7XG4gICAgICAgICAgICAgIFUuc2V0KGksIGosIFUuZ2V0KGksIGopICsgdCAqIFUuZ2V0KGksIGspKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgZm9yIChsZXQgaSA9IGs7IGkgPCBtOyBpKyspIHtcbiAgICAgICAgICAgIFUuc2V0KGksIGssIC1VLmdldChpLCBrKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIFUuc2V0KGssIGssIDEgKyBVLmdldChrLCBrKSk7XG4gICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBrIC0gMTsgaSsrKSB7XG4gICAgICAgICAgICBVLnNldChpLCBrLCAwKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtOyBpKyspIHtcbiAgICAgICAgICAgIFUuc2V0KGksIGssIDApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBVLnNldChrLCBrLCAxKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh3YW50dikge1xuICAgICAgZm9yIChsZXQgayA9IG4gLSAxOyBrID49IDA7IGstLSkge1xuICAgICAgICBpZiAoayA8IG5ydCAmJiBlW2tdICE9PSAwKSB7XG4gICAgICAgICAgZm9yIChsZXQgaiA9IGsgKyAxOyBqIDwgbjsgaisrKSB7XG4gICAgICAgICAgICBsZXQgdCA9IDA7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gayArIDE7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgICAgdCArPSBWLmdldChpLCBrKSAqIFYuZ2V0KGksIGopO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdCA9IC10IC8gVi5nZXQoayArIDEsIGspO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IGsgKyAxOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgICAgICAgIFYuc2V0KGksIGosIFYuZ2V0KGksIGopICsgdCAqIFYuZ2V0KGksIGspKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICBWLnNldChpLCBrLCAwKTtcbiAgICAgICAgfVxuICAgICAgICBWLnNldChrLCBrLCAxKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsZXQgcHAgPSBwIC0gMTtcbiAgICBsZXQgaXRlciA9IDA7XG4gICAgbGV0IGVwcyA9IE51bWJlci5FUFNJTE9OO1xuICAgIHdoaWxlIChwID4gMCkge1xuICAgICAgbGV0IGssIGthc2U7XG4gICAgICBmb3IgKGsgPSBwIC0gMjsgayA+PSAtMTsgay0tKSB7XG4gICAgICAgIGlmIChrID09PSAtMSkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGFscGhhID1cbiAgICAgICAgICBOdW1iZXIuTUlOX1ZBTFVFICsgZXBzICogTWF0aC5hYnMoc1trXSArIE1hdGguYWJzKHNbayArIDFdKSk7XG4gICAgICAgIGlmIChNYXRoLmFicyhlW2tdKSA8PSBhbHBoYSB8fCBOdW1iZXIuaXNOYU4oZVtrXSkpIHtcbiAgICAgICAgICBlW2tdID0gMDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGsgPT09IHAgLSAyKSB7XG4gICAgICAgIGthc2UgPSA0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGV0IGtzO1xuICAgICAgICBmb3IgKGtzID0gcCAtIDE7IGtzID49IGs7IGtzLS0pIHtcbiAgICAgICAgICBpZiAoa3MgPT09IGspIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBsZXQgdCA9XG4gICAgICAgICAgICAoa3MgIT09IHAgPyBNYXRoLmFicyhlW2tzXSkgOiAwKSArXG4gICAgICAgICAgICAoa3MgIT09IGsgKyAxID8gTWF0aC5hYnMoZVtrcyAtIDFdKSA6IDApO1xuICAgICAgICAgIGlmIChNYXRoLmFicyhzW2tzXSkgPD0gZXBzICogdCkge1xuICAgICAgICAgICAgc1trc10gPSAwO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChrcyA9PT0gaykge1xuICAgICAgICAgIGthc2UgPSAzO1xuICAgICAgICB9IGVsc2UgaWYgKGtzID09PSBwIC0gMSkge1xuICAgICAgICAgIGthc2UgPSAxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGthc2UgPSAyO1xuICAgICAgICAgIGsgPSBrcztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBrKys7XG5cbiAgICAgIHN3aXRjaCAoa2FzZSkge1xuICAgICAgICBjYXNlIDE6IHtcbiAgICAgICAgICBsZXQgZiA9IGVbcCAtIDJdO1xuICAgICAgICAgIGVbcCAtIDJdID0gMDtcbiAgICAgICAgICBmb3IgKGxldCBqID0gcCAtIDI7IGogPj0gazsgai0tKSB7XG4gICAgICAgICAgICBsZXQgdCA9IGh5cG90ZW51c2Uoc1tqXSwgZik7XG4gICAgICAgICAgICBsZXQgY3MgPSBzW2pdIC8gdDtcbiAgICAgICAgICAgIGxldCBzbiA9IGYgLyB0O1xuICAgICAgICAgICAgc1tqXSA9IHQ7XG4gICAgICAgICAgICBpZiAoaiAhPT0gaykge1xuICAgICAgICAgICAgICBmID0gLXNuICogZVtqIC0gMV07XG4gICAgICAgICAgICAgIGVbaiAtIDFdID0gY3MgKiBlW2ogLSAxXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh3YW50dikge1xuICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG47IGkrKykge1xuICAgICAgICAgICAgICAgIHQgPSBjcyAqIFYuZ2V0KGksIGopICsgc24gKiBWLmdldChpLCBwIC0gMSk7XG4gICAgICAgICAgICAgICAgVi5zZXQoaSwgcCAtIDEsIC1zbiAqIFYuZ2V0KGksIGopICsgY3MgKiBWLmdldChpLCBwIC0gMSkpO1xuICAgICAgICAgICAgICAgIFYuc2V0KGksIGosIHQpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgMjoge1xuICAgICAgICAgIGxldCBmID0gZVtrIC0gMV07XG4gICAgICAgICAgZVtrIC0gMV0gPSAwO1xuICAgICAgICAgIGZvciAobGV0IGogPSBrOyBqIDwgcDsgaisrKSB7XG4gICAgICAgICAgICBsZXQgdCA9IGh5cG90ZW51c2Uoc1tqXSwgZik7XG4gICAgICAgICAgICBsZXQgY3MgPSBzW2pdIC8gdDtcbiAgICAgICAgICAgIGxldCBzbiA9IGYgLyB0O1xuICAgICAgICAgICAgc1tqXSA9IHQ7XG4gICAgICAgICAgICBmID0gLXNuICogZVtqXTtcbiAgICAgICAgICAgIGVbal0gPSBjcyAqIGVbal07XG4gICAgICAgICAgICBpZiAod2FudHUpIHtcbiAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtOyBpKyspIHtcbiAgICAgICAgICAgICAgICB0ID0gY3MgKiBVLmdldChpLCBqKSArIHNuICogVS5nZXQoaSwgayAtIDEpO1xuICAgICAgICAgICAgICAgIFUuc2V0KGksIGsgLSAxLCAtc24gKiBVLmdldChpLCBqKSArIGNzICogVS5nZXQoaSwgayAtIDEpKTtcbiAgICAgICAgICAgICAgICBVLnNldChpLCBqLCB0KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIDM6IHtcbiAgICAgICAgICBjb25zdCBzY2FsZSA9IE1hdGgubWF4KFxuICAgICAgICAgICAgTWF0aC5hYnMoc1twIC0gMV0pLFxuICAgICAgICAgICAgTWF0aC5hYnMoc1twIC0gMl0pLFxuICAgICAgICAgICAgTWF0aC5hYnMoZVtwIC0gMl0pLFxuICAgICAgICAgICAgTWF0aC5hYnMoc1trXSksXG4gICAgICAgICAgICBNYXRoLmFicyhlW2tdKSxcbiAgICAgICAgICApO1xuICAgICAgICAgIGNvbnN0IHNwID0gc1twIC0gMV0gLyBzY2FsZTtcbiAgICAgICAgICBjb25zdCBzcG0xID0gc1twIC0gMl0gLyBzY2FsZTtcbiAgICAgICAgICBjb25zdCBlcG0xID0gZVtwIC0gMl0gLyBzY2FsZTtcbiAgICAgICAgICBjb25zdCBzayA9IHNba10gLyBzY2FsZTtcbiAgICAgICAgICBjb25zdCBlayA9IGVba10gLyBzY2FsZTtcbiAgICAgICAgICBjb25zdCBiID0gKChzcG0xICsgc3ApICogKHNwbTEgLSBzcCkgKyBlcG0xICogZXBtMSkgLyAyO1xuICAgICAgICAgIGNvbnN0IGMgPSBzcCAqIGVwbTEgKiAoc3AgKiBlcG0xKTtcbiAgICAgICAgICBsZXQgc2hpZnQgPSAwO1xuICAgICAgICAgIGlmIChiICE9PSAwIHx8IGMgIT09IDApIHtcbiAgICAgICAgICAgIGlmIChiIDwgMCkge1xuICAgICAgICAgICAgICBzaGlmdCA9IDAgLSBNYXRoLnNxcnQoYiAqIGIgKyBjKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHNoaWZ0ID0gTWF0aC5zcXJ0KGIgKiBiICsgYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzaGlmdCA9IGMgLyAoYiArIHNoaWZ0KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbGV0IGYgPSAoc2sgKyBzcCkgKiAoc2sgLSBzcCkgKyBzaGlmdDtcbiAgICAgICAgICBsZXQgZyA9IHNrICogZWs7XG4gICAgICAgICAgZm9yIChsZXQgaiA9IGs7IGogPCBwIC0gMTsgaisrKSB7XG4gICAgICAgICAgICBsZXQgdCA9IGh5cG90ZW51c2UoZiwgZyk7XG4gICAgICAgICAgICBpZiAodCA9PT0gMCkgdCA9IE51bWJlci5NSU5fVkFMVUU7XG4gICAgICAgICAgICBsZXQgY3MgPSBmIC8gdDtcbiAgICAgICAgICAgIGxldCBzbiA9IGcgLyB0O1xuICAgICAgICAgICAgaWYgKGogIT09IGspIHtcbiAgICAgICAgICAgICAgZVtqIC0gMV0gPSB0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZiA9IGNzICogc1tqXSArIHNuICogZVtqXTtcbiAgICAgICAgICAgIGVbal0gPSBjcyAqIGVbal0gLSBzbiAqIHNbal07XG4gICAgICAgICAgICBnID0gc24gKiBzW2ogKyAxXTtcbiAgICAgICAgICAgIHNbaiArIDFdID0gY3MgKiBzW2ogKyAxXTtcbiAgICAgICAgICAgIGlmICh3YW50dikge1xuICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG47IGkrKykge1xuICAgICAgICAgICAgICAgIHQgPSBjcyAqIFYuZ2V0KGksIGopICsgc24gKiBWLmdldChpLCBqICsgMSk7XG4gICAgICAgICAgICAgICAgVi5zZXQoaSwgaiArIDEsIC1zbiAqIFYuZ2V0KGksIGopICsgY3MgKiBWLmdldChpLCBqICsgMSkpO1xuICAgICAgICAgICAgICAgIFYuc2V0KGksIGosIHQpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0ID0gaHlwb3RlbnVzZShmLCBnKTtcbiAgICAgICAgICAgIGlmICh0ID09PSAwKSB0ID0gTnVtYmVyLk1JTl9WQUxVRTtcbiAgICAgICAgICAgIGNzID0gZiAvIHQ7XG4gICAgICAgICAgICBzbiA9IGcgLyB0O1xuICAgICAgICAgICAgc1tqXSA9IHQ7XG4gICAgICAgICAgICBmID0gY3MgKiBlW2pdICsgc24gKiBzW2ogKyAxXTtcbiAgICAgICAgICAgIHNbaiArIDFdID0gLXNuICogZVtqXSArIGNzICogc1tqICsgMV07XG4gICAgICAgICAgICBnID0gc24gKiBlW2ogKyAxXTtcbiAgICAgICAgICAgIGVbaiArIDFdID0gY3MgKiBlW2ogKyAxXTtcbiAgICAgICAgICAgIGlmICh3YW50dSAmJiBqIDwgbSAtIDEpIHtcbiAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtOyBpKyspIHtcbiAgICAgICAgICAgICAgICB0ID0gY3MgKiBVLmdldChpLCBqKSArIHNuICogVS5nZXQoaSwgaiArIDEpO1xuICAgICAgICAgICAgICAgIFUuc2V0KGksIGogKyAxLCAtc24gKiBVLmdldChpLCBqKSArIGNzICogVS5nZXQoaSwgaiArIDEpKTtcbiAgICAgICAgICAgICAgICBVLnNldChpLCBqLCB0KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBlW3AgLSAyXSA9IGY7XG4gICAgICAgICAgaXRlciA9IGl0ZXIgKyAxO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgNDoge1xuICAgICAgICAgIGlmIChzW2tdIDw9IDApIHtcbiAgICAgICAgICAgIHNba10gPSBzW2tdIDwgMCA/IC1zW2tdIDogMDtcbiAgICAgICAgICAgIGlmICh3YW50dikge1xuICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8PSBwcDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgVi5zZXQoaSwgaywgLVYuZ2V0KGksIGspKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICB3aGlsZSAoayA8IHBwKSB7XG4gICAgICAgICAgICBpZiAoc1trXSA+PSBzW2sgKyAxXSkge1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCB0ID0gc1trXTtcbiAgICAgICAgICAgIHNba10gPSBzW2sgKyAxXTtcbiAgICAgICAgICAgIHNbayArIDFdID0gdDtcbiAgICAgICAgICAgIGlmICh3YW50diAmJiBrIDwgbiAtIDEpIHtcbiAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgICAgICB0ID0gVi5nZXQoaSwgayArIDEpO1xuICAgICAgICAgICAgICAgIFYuc2V0KGksIGsgKyAxLCBWLmdldChpLCBrKSk7XG4gICAgICAgICAgICAgICAgVi5zZXQoaSwgaywgdCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh3YW50dSAmJiBrIDwgbSAtIDEpIHtcbiAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtOyBpKyspIHtcbiAgICAgICAgICAgICAgICB0ID0gVS5nZXQoaSwgayArIDEpO1xuICAgICAgICAgICAgICAgIFUuc2V0KGksIGsgKyAxLCBVLmdldChpLCBrKSk7XG4gICAgICAgICAgICAgICAgVS5zZXQoaSwgaywgdCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGsrKztcbiAgICAgICAgICB9XG4gICAgICAgICAgaXRlciA9IDA7XG4gICAgICAgICAgcC0tO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIC8vIG5vIGRlZmF1bHRcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoc3dhcHBlZCkge1xuICAgICAgbGV0IHRtcCA9IFY7XG4gICAgICBWID0gVTtcbiAgICAgIFUgPSB0bXA7XG4gICAgfVxuXG4gICAgdGhpcy5tID0gbTtcbiAgICB0aGlzLm4gPSBuO1xuICAgIHRoaXMucyA9IHM7XG4gICAgdGhpcy5VID0gVTtcbiAgICB0aGlzLlYgPSBWO1xuICB9XG5cbiAgc29sdmUodmFsdWUpIHtcbiAgICBsZXQgWSA9IHZhbHVlO1xuICAgIGxldCBlID0gdGhpcy50aHJlc2hvbGQ7XG4gICAgbGV0IHNjb2xzID0gdGhpcy5zLmxlbmd0aDtcbiAgICBsZXQgTHMgPSBNYXRyaXguemVyb3Moc2NvbHMsIHNjb2xzKTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2NvbHM7IGkrKykge1xuICAgICAgaWYgKE1hdGguYWJzKHRoaXMuc1tpXSkgPD0gZSkge1xuICAgICAgICBMcy5zZXQoaSwgaSwgMCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBMcy5zZXQoaSwgaSwgMSAvIHRoaXMuc1tpXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGV0IFUgPSB0aGlzLlU7XG4gICAgbGV0IFYgPSB0aGlzLnJpZ2h0U2luZ3VsYXJWZWN0b3JzO1xuXG4gICAgbGV0IFZMID0gVi5tbXVsKExzKTtcbiAgICBsZXQgdnJvd3MgPSBWLnJvd3M7XG4gICAgbGV0IHVyb3dzID0gVS5yb3dzO1xuICAgIGxldCBWTFUgPSBNYXRyaXguemVyb3ModnJvd3MsIHVyb3dzKTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdnJvd3M7IGkrKykge1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB1cm93czsgaisrKSB7XG4gICAgICAgIGxldCBzdW0gPSAwO1xuICAgICAgICBmb3IgKGxldCBrID0gMDsgayA8IHNjb2xzOyBrKyspIHtcbiAgICAgICAgICBzdW0gKz0gVkwuZ2V0KGksIGspICogVS5nZXQoaiwgayk7XG4gICAgICAgIH1cbiAgICAgICAgVkxVLnNldChpLCBqLCBzdW0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBWTFUubW11bChZKTtcbiAgfVxuXG4gIHNvbHZlRm9yRGlhZ29uYWwodmFsdWUpIHtcbiAgICByZXR1cm4gdGhpcy5zb2x2ZShNYXRyaXguZGlhZyh2YWx1ZSkpO1xuICB9XG5cbiAgaW52ZXJzZSgpIHtcbiAgICBsZXQgViA9IHRoaXMuVjtcbiAgICBsZXQgZSA9IHRoaXMudGhyZXNob2xkO1xuICAgIGxldCB2cm93cyA9IFYucm93cztcbiAgICBsZXQgdmNvbHMgPSBWLmNvbHVtbnM7XG4gICAgbGV0IFggPSBuZXcgTWF0cml4KHZyb3dzLCB0aGlzLnMubGVuZ3RoKTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdnJvd3M7IGkrKykge1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB2Y29sczsgaisrKSB7XG4gICAgICAgIGlmIChNYXRoLmFicyh0aGlzLnNbal0pID4gZSkge1xuICAgICAgICAgIFguc2V0KGksIGosIFYuZ2V0KGksIGopIC8gdGhpcy5zW2pdKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGxldCBVID0gdGhpcy5VO1xuXG4gICAgbGV0IHVyb3dzID0gVS5yb3dzO1xuICAgIGxldCB1Y29scyA9IFUuY29sdW1ucztcbiAgICBsZXQgWSA9IG5ldyBNYXRyaXgodnJvd3MsIHVyb3dzKTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdnJvd3M7IGkrKykge1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB1cm93czsgaisrKSB7XG4gICAgICAgIGxldCBzdW0gPSAwO1xuICAgICAgICBmb3IgKGxldCBrID0gMDsgayA8IHVjb2xzOyBrKyspIHtcbiAgICAgICAgICBzdW0gKz0gWC5nZXQoaSwgaykgKiBVLmdldChqLCBrKTtcbiAgICAgICAgfVxuICAgICAgICBZLnNldChpLCBqLCBzdW0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBZO1xuICB9XG5cbiAgZ2V0IGNvbmRpdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5zWzBdIC8gdGhpcy5zW01hdGgubWluKHRoaXMubSwgdGhpcy5uKSAtIDFdO1xuICB9XG5cbiAgZ2V0IG5vcm0yKCkge1xuICAgIHJldHVybiB0aGlzLnNbMF07XG4gIH1cblxuICBnZXQgcmFuaygpIHtcbiAgICBsZXQgdG9sID0gTWF0aC5tYXgodGhpcy5tLCB0aGlzLm4pICogdGhpcy5zWzBdICogTnVtYmVyLkVQU0lMT047XG4gICAgbGV0IHIgPSAwO1xuICAgIGxldCBzID0gdGhpcy5zO1xuICAgIGZvciAobGV0IGkgPSAwLCBpaSA9IHMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgaWYgKHNbaV0gPiB0b2wpIHtcbiAgICAgICAgcisrO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcjtcbiAgfVxuXG4gIGdldCBkaWFnb25hbCgpIHtcbiAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLnMpO1xuICB9XG5cbiAgZ2V0IHRocmVzaG9sZCgpIHtcbiAgICByZXR1cm4gKE51bWJlci5FUFNJTE9OIC8gMikgKiBNYXRoLm1heCh0aGlzLm0sIHRoaXMubikgKiB0aGlzLnNbMF07XG4gIH1cblxuICBnZXQgbGVmdFNpbmd1bGFyVmVjdG9ycygpIHtcbiAgICByZXR1cm4gdGhpcy5VO1xuICB9XG5cbiAgZ2V0IHJpZ2h0U2luZ3VsYXJWZWN0b3JzKCkge1xuICAgIHJldHVybiB0aGlzLlY7XG4gIH1cblxuICBnZXQgZGlhZ29uYWxNYXRyaXgoKSB7XG4gICAgcmV0dXJuIE1hdHJpeC5kaWFnKHRoaXMucyk7XG4gIH1cbn1cbiIsImltcG9ydCBMdURlY29tcG9zaXRpb24gZnJvbSAnLi9kYy9sdSc7XG5pbXBvcnQgUXJEZWNvbXBvc2l0aW9uIGZyb20gJy4vZGMvcXInO1xuaW1wb3J0IFNpbmd1bGFyVmFsdWVEZWNvbXBvc2l0aW9uIGZyb20gJy4vZGMvc3ZkJztcbmltcG9ydCBNYXRyaXggZnJvbSAnLi9tYXRyaXgnO1xuaW1wb3J0IFdyYXBwZXJNYXRyaXgyRCBmcm9tICcuL3dyYXAvV3JhcHBlck1hdHJpeDJEJztcblxuZXhwb3J0IGZ1bmN0aW9uIGludmVyc2UobWF0cml4LCB1c2VTVkQgPSBmYWxzZSkge1xuICBtYXRyaXggPSBXcmFwcGVyTWF0cml4MkQuY2hlY2tNYXRyaXgobWF0cml4KTtcbiAgaWYgKHVzZVNWRCkge1xuICAgIHJldHVybiBuZXcgU2luZ3VsYXJWYWx1ZURlY29tcG9zaXRpb24obWF0cml4KS5pbnZlcnNlKCk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHNvbHZlKG1hdHJpeCwgTWF0cml4LmV5ZShtYXRyaXgucm93cykpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzb2x2ZShsZWZ0SGFuZFNpZGUsIHJpZ2h0SGFuZFNpZGUsIHVzZVNWRCA9IGZhbHNlKSB7XG4gIGxlZnRIYW5kU2lkZSA9IFdyYXBwZXJNYXRyaXgyRC5jaGVja01hdHJpeChsZWZ0SGFuZFNpZGUpO1xuICByaWdodEhhbmRTaWRlID0gV3JhcHBlck1hdHJpeDJELmNoZWNrTWF0cml4KHJpZ2h0SGFuZFNpZGUpO1xuICBpZiAodXNlU1ZEKSB7XG4gICAgcmV0dXJuIG5ldyBTaW5ndWxhclZhbHVlRGVjb21wb3NpdGlvbihsZWZ0SGFuZFNpZGUpLnNvbHZlKHJpZ2h0SGFuZFNpZGUpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBsZWZ0SGFuZFNpZGUuaXNTcXVhcmUoKVxuICAgICAgPyBuZXcgTHVEZWNvbXBvc2l0aW9uKGxlZnRIYW5kU2lkZSkuc29sdmUocmlnaHRIYW5kU2lkZSlcbiAgICAgIDogbmV3IFFyRGVjb21wb3NpdGlvbihsZWZ0SGFuZFNpZGUpLnNvbHZlKHJpZ2h0SGFuZFNpZGUpO1xuICB9XG59XG4iLCJpbXBvcnQgTWF0cml4IGZyb20gJy4uL21hdHJpeCc7XG5pbXBvcnQgV3JhcHBlck1hdHJpeDJEIGZyb20gJy4uL3dyYXAvV3JhcHBlck1hdHJpeDJEJztcblxuaW1wb3J0IHsgaHlwb3RlbnVzZSB9IGZyb20gJy4vdXRpbCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEVpZ2VudmFsdWVEZWNvbXBvc2l0aW9uIHtcbiAgY29uc3RydWN0b3IobWF0cml4LCBvcHRpb25zID0ge30pIHtcbiAgICBjb25zdCB7IGFzc3VtZVN5bW1ldHJpYyA9IGZhbHNlIH0gPSBvcHRpb25zO1xuXG4gICAgbWF0cml4ID0gV3JhcHBlck1hdHJpeDJELmNoZWNrTWF0cml4KG1hdHJpeCk7XG4gICAgaWYgKCFtYXRyaXguaXNTcXVhcmUoKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdNYXRyaXggaXMgbm90IGEgc3F1YXJlIG1hdHJpeCcpO1xuICAgIH1cblxuICAgIGxldCBuID0gbWF0cml4LmNvbHVtbnM7XG4gICAgbGV0IFYgPSBuZXcgTWF0cml4KG4sIG4pO1xuICAgIGxldCBkID0gbmV3IEZsb2F0NjRBcnJheShuKTtcbiAgICBsZXQgZSA9IG5ldyBGbG9hdDY0QXJyYXkobik7XG4gICAgbGV0IHZhbHVlID0gbWF0cml4O1xuICAgIGxldCBpLCBqO1xuXG4gICAgbGV0IGlzU3ltbWV0cmljID0gZmFsc2U7XG4gICAgaWYgKGFzc3VtZVN5bW1ldHJpYykge1xuICAgICAgaXNTeW1tZXRyaWMgPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpc1N5bW1ldHJpYyA9IG1hdHJpeC5pc1N5bW1ldHJpYygpO1xuICAgIH1cblxuICAgIGlmIChpc1N5bW1ldHJpYykge1xuICAgICAgZm9yIChpID0gMDsgaSA8IG47IGkrKykge1xuICAgICAgICBmb3IgKGogPSAwOyBqIDwgbjsgaisrKSB7XG4gICAgICAgICAgVi5zZXQoaSwgaiwgdmFsdWUuZ2V0KGksIGopKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdHJlZDIobiwgZSwgZCwgVik7XG4gICAgICB0cWwyKG4sIGUsIGQsIFYpO1xuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgSCA9IG5ldyBNYXRyaXgobiwgbik7XG4gICAgICBsZXQgb3J0ID0gbmV3IEZsb2F0NjRBcnJheShuKTtcbiAgICAgIGZvciAoaiA9IDA7IGogPCBuOyBqKyspIHtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IG47IGkrKykge1xuICAgICAgICAgIEguc2V0KGksIGosIHZhbHVlLmdldChpLCBqKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIG9ydGhlcyhuLCBILCBvcnQsIFYpO1xuICAgICAgaHFyMihuLCBlLCBkLCBWLCBIKTtcbiAgICB9XG5cbiAgICB0aGlzLm4gPSBuO1xuICAgIHRoaXMuZSA9IGU7XG4gICAgdGhpcy5kID0gZDtcbiAgICB0aGlzLlYgPSBWO1xuICB9XG5cbiAgZ2V0IHJlYWxFaWdlbnZhbHVlcygpIHtcbiAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLmQpO1xuICB9XG5cbiAgZ2V0IGltYWdpbmFyeUVpZ2VudmFsdWVzKCkge1xuICAgIHJldHVybiBBcnJheS5mcm9tKHRoaXMuZSk7XG4gIH1cblxuICBnZXQgZWlnZW52ZWN0b3JNYXRyaXgoKSB7XG4gICAgcmV0dXJuIHRoaXMuVjtcbiAgfVxuXG4gIGdldCBkaWFnb25hbE1hdHJpeCgpIHtcbiAgICBsZXQgbiA9IHRoaXMubjtcbiAgICBsZXQgZSA9IHRoaXMuZTtcbiAgICBsZXQgZCA9IHRoaXMuZDtcbiAgICBsZXQgWCA9IG5ldyBNYXRyaXgobiwgbik7XG4gICAgbGV0IGksIGo7XG4gICAgZm9yIChpID0gMDsgaSA8IG47IGkrKykge1xuICAgICAgZm9yIChqID0gMDsgaiA8IG47IGorKykge1xuICAgICAgICBYLnNldChpLCBqLCAwKTtcbiAgICAgIH1cbiAgICAgIFguc2V0KGksIGksIGRbaV0pO1xuICAgICAgaWYgKGVbaV0gPiAwKSB7XG4gICAgICAgIFguc2V0KGksIGkgKyAxLCBlW2ldKTtcbiAgICAgIH0gZWxzZSBpZiAoZVtpXSA8IDApIHtcbiAgICAgICAgWC5zZXQoaSwgaSAtIDEsIGVbaV0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gWDtcbiAgfVxufVxuXG5mdW5jdGlvbiB0cmVkMihuLCBlLCBkLCBWKSB7XG4gIGxldCBmLCBnLCBoLCBpLCBqLCBrLCBoaCwgc2NhbGU7XG5cbiAgZm9yIChqID0gMDsgaiA8IG47IGorKykge1xuICAgIGRbal0gPSBWLmdldChuIC0gMSwgaik7XG4gIH1cblxuICBmb3IgKGkgPSBuIC0gMTsgaSA+IDA7IGktLSkge1xuICAgIHNjYWxlID0gMDtcbiAgICBoID0gMDtcbiAgICBmb3IgKGsgPSAwOyBrIDwgaTsgaysrKSB7XG4gICAgICBzY2FsZSA9IHNjYWxlICsgTWF0aC5hYnMoZFtrXSk7XG4gICAgfVxuXG4gICAgaWYgKHNjYWxlID09PSAwKSB7XG4gICAgICBlW2ldID0gZFtpIC0gMV07XG4gICAgICBmb3IgKGogPSAwOyBqIDwgaTsgaisrKSB7XG4gICAgICAgIGRbal0gPSBWLmdldChpIC0gMSwgaik7XG4gICAgICAgIFYuc2V0KGksIGosIDApO1xuICAgICAgICBWLnNldChqLCBpLCAwKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChrID0gMDsgayA8IGk7IGsrKykge1xuICAgICAgICBkW2tdIC89IHNjYWxlO1xuICAgICAgICBoICs9IGRba10gKiBkW2tdO1xuICAgICAgfVxuXG4gICAgICBmID0gZFtpIC0gMV07XG4gICAgICBnID0gTWF0aC5zcXJ0KGgpO1xuICAgICAgaWYgKGYgPiAwKSB7XG4gICAgICAgIGcgPSAtZztcbiAgICAgIH1cblxuICAgICAgZVtpXSA9IHNjYWxlICogZztcbiAgICAgIGggPSBoIC0gZiAqIGc7XG4gICAgICBkW2kgLSAxXSA9IGYgLSBnO1xuICAgICAgZm9yIChqID0gMDsgaiA8IGk7IGorKykge1xuICAgICAgICBlW2pdID0gMDtcbiAgICAgIH1cblxuICAgICAgZm9yIChqID0gMDsgaiA8IGk7IGorKykge1xuICAgICAgICBmID0gZFtqXTtcbiAgICAgICAgVi5zZXQoaiwgaSwgZik7XG4gICAgICAgIGcgPSBlW2pdICsgVi5nZXQoaiwgaikgKiBmO1xuICAgICAgICBmb3IgKGsgPSBqICsgMTsgayA8PSBpIC0gMTsgaysrKSB7XG4gICAgICAgICAgZyArPSBWLmdldChrLCBqKSAqIGRba107XG4gICAgICAgICAgZVtrXSArPSBWLmdldChrLCBqKSAqIGY7XG4gICAgICAgIH1cbiAgICAgICAgZVtqXSA9IGc7XG4gICAgICB9XG5cbiAgICAgIGYgPSAwO1xuICAgICAgZm9yIChqID0gMDsgaiA8IGk7IGorKykge1xuICAgICAgICBlW2pdIC89IGg7XG4gICAgICAgIGYgKz0gZVtqXSAqIGRbal07XG4gICAgICB9XG5cbiAgICAgIGhoID0gZiAvIChoICsgaCk7XG4gICAgICBmb3IgKGogPSAwOyBqIDwgaTsgaisrKSB7XG4gICAgICAgIGVbal0gLT0gaGggKiBkW2pdO1xuICAgICAgfVxuXG4gICAgICBmb3IgKGogPSAwOyBqIDwgaTsgaisrKSB7XG4gICAgICAgIGYgPSBkW2pdO1xuICAgICAgICBnID0gZVtqXTtcbiAgICAgICAgZm9yIChrID0gajsgayA8PSBpIC0gMTsgaysrKSB7XG4gICAgICAgICAgVi5zZXQoaywgaiwgVi5nZXQoaywgaikgLSAoZiAqIGVba10gKyBnICogZFtrXSkpO1xuICAgICAgICB9XG4gICAgICAgIGRbal0gPSBWLmdldChpIC0gMSwgaik7XG4gICAgICAgIFYuc2V0KGksIGosIDApO1xuICAgICAgfVxuICAgIH1cbiAgICBkW2ldID0gaDtcbiAgfVxuXG4gIGZvciAoaSA9IDA7IGkgPCBuIC0gMTsgaSsrKSB7XG4gICAgVi5zZXQobiAtIDEsIGksIFYuZ2V0KGksIGkpKTtcbiAgICBWLnNldChpLCBpLCAxKTtcbiAgICBoID0gZFtpICsgMV07XG4gICAgaWYgKGggIT09IDApIHtcbiAgICAgIGZvciAoayA9IDA7IGsgPD0gaTsgaysrKSB7XG4gICAgICAgIGRba10gPSBWLmdldChrLCBpICsgMSkgLyBoO1xuICAgICAgfVxuXG4gICAgICBmb3IgKGogPSAwOyBqIDw9IGk7IGorKykge1xuICAgICAgICBnID0gMDtcbiAgICAgICAgZm9yIChrID0gMDsgayA8PSBpOyBrKyspIHtcbiAgICAgICAgICBnICs9IFYuZ2V0KGssIGkgKyAxKSAqIFYuZ2V0KGssIGopO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoayA9IDA7IGsgPD0gaTsgaysrKSB7XG4gICAgICAgICAgVi5zZXQoaywgaiwgVi5nZXQoaywgaikgLSBnICogZFtrXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKGsgPSAwOyBrIDw9IGk7IGsrKykge1xuICAgICAgVi5zZXQoaywgaSArIDEsIDApO1xuICAgIH1cbiAgfVxuXG4gIGZvciAoaiA9IDA7IGogPCBuOyBqKyspIHtcbiAgICBkW2pdID0gVi5nZXQobiAtIDEsIGopO1xuICAgIFYuc2V0KG4gLSAxLCBqLCAwKTtcbiAgfVxuXG4gIFYuc2V0KG4gLSAxLCBuIC0gMSwgMSk7XG4gIGVbMF0gPSAwO1xufVxuXG5mdW5jdGlvbiB0cWwyKG4sIGUsIGQsIFYpIHtcbiAgbGV0IGcsIGgsIGksIGosIGssIGwsIG0sIHAsIHIsIGRsMSwgYywgYzIsIGMzLCBlbDEsIHMsIHMyLCBpdGVyO1xuXG4gIGZvciAoaSA9IDE7IGkgPCBuOyBpKyspIHtcbiAgICBlW2kgLSAxXSA9IGVbaV07XG4gIH1cblxuICBlW24gLSAxXSA9IDA7XG5cbiAgbGV0IGYgPSAwO1xuICBsZXQgdHN0MSA9IDA7XG4gIGxldCBlcHMgPSBOdW1iZXIuRVBTSUxPTjtcblxuICBmb3IgKGwgPSAwOyBsIDwgbjsgbCsrKSB7XG4gICAgdHN0MSA9IE1hdGgubWF4KHRzdDEsIE1hdGguYWJzKGRbbF0pICsgTWF0aC5hYnMoZVtsXSkpO1xuICAgIG0gPSBsO1xuICAgIHdoaWxlIChtIDwgbikge1xuICAgICAgaWYgKE1hdGguYWJzKGVbbV0pIDw9IGVwcyAqIHRzdDEpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBtKys7XG4gICAgfVxuXG4gICAgaWYgKG0gPiBsKSB7XG4gICAgICBpdGVyID0gMDtcbiAgICAgIGRvIHtcbiAgICAgICAgaXRlciA9IGl0ZXIgKyAxO1xuXG4gICAgICAgIGcgPSBkW2xdO1xuICAgICAgICBwID0gKGRbbCArIDFdIC0gZykgLyAoMiAqIGVbbF0pO1xuICAgICAgICByID0gaHlwb3RlbnVzZShwLCAxKTtcbiAgICAgICAgaWYgKHAgPCAwKSB7XG4gICAgICAgICAgciA9IC1yO1xuICAgICAgICB9XG5cbiAgICAgICAgZFtsXSA9IGVbbF0gLyAocCArIHIpO1xuICAgICAgICBkW2wgKyAxXSA9IGVbbF0gKiAocCArIHIpO1xuICAgICAgICBkbDEgPSBkW2wgKyAxXTtcbiAgICAgICAgaCA9IGcgLSBkW2xdO1xuICAgICAgICBmb3IgKGkgPSBsICsgMjsgaSA8IG47IGkrKykge1xuICAgICAgICAgIGRbaV0gLT0gaDtcbiAgICAgICAgfVxuXG4gICAgICAgIGYgPSBmICsgaDtcblxuICAgICAgICBwID0gZFttXTtcbiAgICAgICAgYyA9IDE7XG4gICAgICAgIGMyID0gYztcbiAgICAgICAgYzMgPSBjO1xuICAgICAgICBlbDEgPSBlW2wgKyAxXTtcbiAgICAgICAgcyA9IDA7XG4gICAgICAgIHMyID0gMDtcbiAgICAgICAgZm9yIChpID0gbSAtIDE7IGkgPj0gbDsgaS0tKSB7XG4gICAgICAgICAgYzMgPSBjMjtcbiAgICAgICAgICBjMiA9IGM7XG4gICAgICAgICAgczIgPSBzO1xuICAgICAgICAgIGcgPSBjICogZVtpXTtcbiAgICAgICAgICBoID0gYyAqIHA7XG4gICAgICAgICAgciA9IGh5cG90ZW51c2UocCwgZVtpXSk7XG4gICAgICAgICAgZVtpICsgMV0gPSBzICogcjtcbiAgICAgICAgICBzID0gZVtpXSAvIHI7XG4gICAgICAgICAgYyA9IHAgLyByO1xuICAgICAgICAgIHAgPSBjICogZFtpXSAtIHMgKiBnO1xuICAgICAgICAgIGRbaSArIDFdID0gaCArIHMgKiAoYyAqIGcgKyBzICogZFtpXSk7XG5cbiAgICAgICAgICBmb3IgKGsgPSAwOyBrIDwgbjsgaysrKSB7XG4gICAgICAgICAgICBoID0gVi5nZXQoaywgaSArIDEpO1xuICAgICAgICAgICAgVi5zZXQoaywgaSArIDEsIHMgKiBWLmdldChrLCBpKSArIGMgKiBoKTtcbiAgICAgICAgICAgIFYuc2V0KGssIGksIGMgKiBWLmdldChrLCBpKSAtIHMgKiBoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBwID0gKC1zICogczIgKiBjMyAqIGVsMSAqIGVbbF0pIC8gZGwxO1xuICAgICAgICBlW2xdID0gcyAqIHA7XG4gICAgICAgIGRbbF0gPSBjICogcDtcbiAgICAgIH0gd2hpbGUgKE1hdGguYWJzKGVbbF0pID4gZXBzICogdHN0MSk7XG4gICAgfVxuICAgIGRbbF0gPSBkW2xdICsgZjtcbiAgICBlW2xdID0gMDtcbiAgfVxuXG4gIGZvciAoaSA9IDA7IGkgPCBuIC0gMTsgaSsrKSB7XG4gICAgayA9IGk7XG4gICAgcCA9IGRbaV07XG4gICAgZm9yIChqID0gaSArIDE7IGogPCBuOyBqKyspIHtcbiAgICAgIGlmIChkW2pdIDwgcCkge1xuICAgICAgICBrID0gajtcbiAgICAgICAgcCA9IGRbal07XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGsgIT09IGkpIHtcbiAgICAgIGRba10gPSBkW2ldO1xuICAgICAgZFtpXSA9IHA7XG4gICAgICBmb3IgKGogPSAwOyBqIDwgbjsgaisrKSB7XG4gICAgICAgIHAgPSBWLmdldChqLCBpKTtcbiAgICAgICAgVi5zZXQoaiwgaSwgVi5nZXQoaiwgaykpO1xuICAgICAgICBWLnNldChqLCBrLCBwKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gb3J0aGVzKG4sIEgsIG9ydCwgVikge1xuICBsZXQgbG93ID0gMDtcbiAgbGV0IGhpZ2ggPSBuIC0gMTtcbiAgbGV0IGYsIGcsIGgsIGksIGosIG07XG4gIGxldCBzY2FsZTtcblxuICBmb3IgKG0gPSBsb3cgKyAxOyBtIDw9IGhpZ2ggLSAxOyBtKyspIHtcbiAgICBzY2FsZSA9IDA7XG4gICAgZm9yIChpID0gbTsgaSA8PSBoaWdoOyBpKyspIHtcbiAgICAgIHNjYWxlID0gc2NhbGUgKyBNYXRoLmFicyhILmdldChpLCBtIC0gMSkpO1xuICAgIH1cblxuICAgIGlmIChzY2FsZSAhPT0gMCkge1xuICAgICAgaCA9IDA7XG4gICAgICBmb3IgKGkgPSBoaWdoOyBpID49IG07IGktLSkge1xuICAgICAgICBvcnRbaV0gPSBILmdldChpLCBtIC0gMSkgLyBzY2FsZTtcbiAgICAgICAgaCArPSBvcnRbaV0gKiBvcnRbaV07XG4gICAgICB9XG5cbiAgICAgIGcgPSBNYXRoLnNxcnQoaCk7XG4gICAgICBpZiAob3J0W21dID4gMCkge1xuICAgICAgICBnID0gLWc7XG4gICAgICB9XG5cbiAgICAgIGggPSBoIC0gb3J0W21dICogZztcbiAgICAgIG9ydFttXSA9IG9ydFttXSAtIGc7XG5cbiAgICAgIGZvciAoaiA9IG07IGogPCBuOyBqKyspIHtcbiAgICAgICAgZiA9IDA7XG4gICAgICAgIGZvciAoaSA9IGhpZ2g7IGkgPj0gbTsgaS0tKSB7XG4gICAgICAgICAgZiArPSBvcnRbaV0gKiBILmdldChpLCBqKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGYgPSBmIC8gaDtcbiAgICAgICAgZm9yIChpID0gbTsgaSA8PSBoaWdoOyBpKyspIHtcbiAgICAgICAgICBILnNldChpLCBqLCBILmdldChpLCBqKSAtIGYgKiBvcnRbaV0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPD0gaGlnaDsgaSsrKSB7XG4gICAgICAgIGYgPSAwO1xuICAgICAgICBmb3IgKGogPSBoaWdoOyBqID49IG07IGotLSkge1xuICAgICAgICAgIGYgKz0gb3J0W2pdICogSC5nZXQoaSwgaik7XG4gICAgICAgIH1cblxuICAgICAgICBmID0gZiAvIGg7XG4gICAgICAgIGZvciAoaiA9IG07IGogPD0gaGlnaDsgaisrKSB7XG4gICAgICAgICAgSC5zZXQoaSwgaiwgSC5nZXQoaSwgaikgLSBmICogb3J0W2pdKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBvcnRbbV0gPSBzY2FsZSAqIG9ydFttXTtcbiAgICAgIEguc2V0KG0sIG0gLSAxLCBzY2FsZSAqIGcpO1xuICAgIH1cbiAgfVxuXG4gIGZvciAoaSA9IDA7IGkgPCBuOyBpKyspIHtcbiAgICBmb3IgKGogPSAwOyBqIDwgbjsgaisrKSB7XG4gICAgICBWLnNldChpLCBqLCBpID09PSBqID8gMSA6IDApO1xuICAgIH1cbiAgfVxuXG4gIGZvciAobSA9IGhpZ2ggLSAxOyBtID49IGxvdyArIDE7IG0tLSkge1xuICAgIGlmIChILmdldChtLCBtIC0gMSkgIT09IDApIHtcbiAgICAgIGZvciAoaSA9IG0gKyAxOyBpIDw9IGhpZ2g7IGkrKykge1xuICAgICAgICBvcnRbaV0gPSBILmdldChpLCBtIC0gMSk7XG4gICAgICB9XG5cbiAgICAgIGZvciAoaiA9IG07IGogPD0gaGlnaDsgaisrKSB7XG4gICAgICAgIGcgPSAwO1xuICAgICAgICBmb3IgKGkgPSBtOyBpIDw9IGhpZ2g7IGkrKykge1xuICAgICAgICAgIGcgKz0gb3J0W2ldICogVi5nZXQoaSwgaik7XG4gICAgICAgIH1cblxuICAgICAgICBnID0gZyAvIG9ydFttXSAvIEguZ2V0KG0sIG0gLSAxKTtcbiAgICAgICAgZm9yIChpID0gbTsgaSA8PSBoaWdoOyBpKyspIHtcbiAgICAgICAgICBWLnNldChpLCBqLCBWLmdldChpLCBqKSArIGcgKiBvcnRbaV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGhxcjIobm4sIGUsIGQsIFYsIEgpIHtcbiAgbGV0IG4gPSBubiAtIDE7XG4gIGxldCBsb3cgPSAwO1xuICBsZXQgaGlnaCA9IG5uIC0gMTtcbiAgbGV0IGVwcyA9IE51bWJlci5FUFNJTE9OO1xuICBsZXQgZXhzaGlmdCA9IDA7XG4gIGxldCBub3JtID0gMDtcbiAgbGV0IHAgPSAwO1xuICBsZXQgcSA9IDA7XG4gIGxldCByID0gMDtcbiAgbGV0IHMgPSAwO1xuICBsZXQgeiA9IDA7XG4gIGxldCBpdGVyID0gMDtcbiAgbGV0IGksIGosIGssIGwsIG0sIHQsIHcsIHgsIHk7XG4gIGxldCByYSwgc2EsIHZyLCB2aTtcbiAgbGV0IG5vdGxhc3QsIGNkaXZyZXM7XG5cbiAgZm9yIChpID0gMDsgaSA8IG5uOyBpKyspIHtcbiAgICBpZiAoaSA8IGxvdyB8fCBpID4gaGlnaCkge1xuICAgICAgZFtpXSA9IEguZ2V0KGksIGkpO1xuICAgICAgZVtpXSA9IDA7XG4gICAgfVxuXG4gICAgZm9yIChqID0gTWF0aC5tYXgoaSAtIDEsIDApOyBqIDwgbm47IGorKykge1xuICAgICAgbm9ybSA9IG5vcm0gKyBNYXRoLmFicyhILmdldChpLCBqKSk7XG4gICAgfVxuICB9XG5cbiAgd2hpbGUgKG4gPj0gbG93KSB7XG4gICAgbCA9IG47XG4gICAgd2hpbGUgKGwgPiBsb3cpIHtcbiAgICAgIHMgPSBNYXRoLmFicyhILmdldChsIC0gMSwgbCAtIDEpKSArIE1hdGguYWJzKEguZ2V0KGwsIGwpKTtcbiAgICAgIGlmIChzID09PSAwKSB7XG4gICAgICAgIHMgPSBub3JtO1xuICAgICAgfVxuICAgICAgaWYgKE1hdGguYWJzKEguZ2V0KGwsIGwgLSAxKSkgPCBlcHMgKiBzKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgbC0tO1xuICAgIH1cblxuICAgIGlmIChsID09PSBuKSB7XG4gICAgICBILnNldChuLCBuLCBILmdldChuLCBuKSArIGV4c2hpZnQpO1xuICAgICAgZFtuXSA9IEguZ2V0KG4sIG4pO1xuICAgICAgZVtuXSA9IDA7XG4gICAgICBuLS07XG4gICAgICBpdGVyID0gMDtcbiAgICB9IGVsc2UgaWYgKGwgPT09IG4gLSAxKSB7XG4gICAgICB3ID0gSC5nZXQobiwgbiAtIDEpICogSC5nZXQobiAtIDEsIG4pO1xuICAgICAgcCA9IChILmdldChuIC0gMSwgbiAtIDEpIC0gSC5nZXQobiwgbikpIC8gMjtcbiAgICAgIHEgPSBwICogcCArIHc7XG4gICAgICB6ID0gTWF0aC5zcXJ0KE1hdGguYWJzKHEpKTtcbiAgICAgIEguc2V0KG4sIG4sIEguZ2V0KG4sIG4pICsgZXhzaGlmdCk7XG4gICAgICBILnNldChuIC0gMSwgbiAtIDEsIEguZ2V0KG4gLSAxLCBuIC0gMSkgKyBleHNoaWZ0KTtcbiAgICAgIHggPSBILmdldChuLCBuKTtcblxuICAgICAgaWYgKHEgPj0gMCkge1xuICAgICAgICB6ID0gcCA+PSAwID8gcCArIHogOiBwIC0gejtcbiAgICAgICAgZFtuIC0gMV0gPSB4ICsgejtcbiAgICAgICAgZFtuXSA9IGRbbiAtIDFdO1xuICAgICAgICBpZiAoeiAhPT0gMCkge1xuICAgICAgICAgIGRbbl0gPSB4IC0gdyAvIHo7XG4gICAgICAgIH1cbiAgICAgICAgZVtuIC0gMV0gPSAwO1xuICAgICAgICBlW25dID0gMDtcbiAgICAgICAgeCA9IEguZ2V0KG4sIG4gLSAxKTtcbiAgICAgICAgcyA9IE1hdGguYWJzKHgpICsgTWF0aC5hYnMoeik7XG4gICAgICAgIHAgPSB4IC8gcztcbiAgICAgICAgcSA9IHogLyBzO1xuICAgICAgICByID0gTWF0aC5zcXJ0KHAgKiBwICsgcSAqIHEpO1xuICAgICAgICBwID0gcCAvIHI7XG4gICAgICAgIHEgPSBxIC8gcjtcblxuICAgICAgICBmb3IgKGogPSBuIC0gMTsgaiA8IG5uOyBqKyspIHtcbiAgICAgICAgICB6ID0gSC5nZXQobiAtIDEsIGopO1xuICAgICAgICAgIEguc2V0KG4gLSAxLCBqLCBxICogeiArIHAgKiBILmdldChuLCBqKSk7XG4gICAgICAgICAgSC5zZXQobiwgaiwgcSAqIEguZ2V0KG4sIGopIC0gcCAqIHopO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8PSBuOyBpKyspIHtcbiAgICAgICAgICB6ID0gSC5nZXQoaSwgbiAtIDEpO1xuICAgICAgICAgIEguc2V0KGksIG4gLSAxLCBxICogeiArIHAgKiBILmdldChpLCBuKSk7XG4gICAgICAgICAgSC5zZXQoaSwgbiwgcSAqIEguZ2V0KGksIG4pIC0gcCAqIHopO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChpID0gbG93OyBpIDw9IGhpZ2g7IGkrKykge1xuICAgICAgICAgIHogPSBWLmdldChpLCBuIC0gMSk7XG4gICAgICAgICAgVi5zZXQoaSwgbiAtIDEsIHEgKiB6ICsgcCAqIFYuZ2V0KGksIG4pKTtcbiAgICAgICAgICBWLnNldChpLCBuLCBxICogVi5nZXQoaSwgbikgLSBwICogeik7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRbbiAtIDFdID0geCArIHA7XG4gICAgICAgIGRbbl0gPSB4ICsgcDtcbiAgICAgICAgZVtuIC0gMV0gPSB6O1xuICAgICAgICBlW25dID0gLXo7XG4gICAgICB9XG5cbiAgICAgIG4gPSBuIC0gMjtcbiAgICAgIGl0ZXIgPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICB4ID0gSC5nZXQobiwgbik7XG4gICAgICB5ID0gMDtcbiAgICAgIHcgPSAwO1xuICAgICAgaWYgKGwgPCBuKSB7XG4gICAgICAgIHkgPSBILmdldChuIC0gMSwgbiAtIDEpO1xuICAgICAgICB3ID0gSC5nZXQobiwgbiAtIDEpICogSC5nZXQobiAtIDEsIG4pO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXRlciA9PT0gMTApIHtcbiAgICAgICAgZXhzaGlmdCArPSB4O1xuICAgICAgICBmb3IgKGkgPSBsb3c7IGkgPD0gbjsgaSsrKSB7XG4gICAgICAgICAgSC5zZXQoaSwgaSwgSC5nZXQoaSwgaSkgLSB4KTtcbiAgICAgICAgfVxuICAgICAgICBzID0gTWF0aC5hYnMoSC5nZXQobiwgbiAtIDEpKSArIE1hdGguYWJzKEguZ2V0KG4gLSAxLCBuIC0gMikpO1xuICAgICAgICB4ID0geSA9IDAuNzUgKiBzO1xuICAgICAgICB3ID0gLTAuNDM3NSAqIHMgKiBzO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXRlciA9PT0gMzApIHtcbiAgICAgICAgcyA9ICh5IC0geCkgLyAyO1xuICAgICAgICBzID0gcyAqIHMgKyB3O1xuICAgICAgICBpZiAocyA+IDApIHtcbiAgICAgICAgICBzID0gTWF0aC5zcXJ0KHMpO1xuICAgICAgICAgIGlmICh5IDwgeCkge1xuICAgICAgICAgICAgcyA9IC1zO1xuICAgICAgICAgIH1cbiAgICAgICAgICBzID0geCAtIHcgLyAoKHkgLSB4KSAvIDIgKyBzKTtcbiAgICAgICAgICBmb3IgKGkgPSBsb3c7IGkgPD0gbjsgaSsrKSB7XG4gICAgICAgICAgICBILnNldChpLCBpLCBILmdldChpLCBpKSAtIHMpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBleHNoaWZ0ICs9IHM7XG4gICAgICAgICAgeCA9IHkgPSB3ID0gMC45NjQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaXRlciA9IGl0ZXIgKyAxO1xuXG4gICAgICBtID0gbiAtIDI7XG4gICAgICB3aGlsZSAobSA+PSBsKSB7XG4gICAgICAgIHogPSBILmdldChtLCBtKTtcbiAgICAgICAgciA9IHggLSB6O1xuICAgICAgICBzID0geSAtIHo7XG4gICAgICAgIHAgPSAociAqIHMgLSB3KSAvIEguZ2V0KG0gKyAxLCBtKSArIEguZ2V0KG0sIG0gKyAxKTtcbiAgICAgICAgcSA9IEguZ2V0KG0gKyAxLCBtICsgMSkgLSB6IC0gciAtIHM7XG4gICAgICAgIHIgPSBILmdldChtICsgMiwgbSArIDEpO1xuICAgICAgICBzID0gTWF0aC5hYnMocCkgKyBNYXRoLmFicyhxKSArIE1hdGguYWJzKHIpO1xuICAgICAgICBwID0gcCAvIHM7XG4gICAgICAgIHEgPSBxIC8gcztcbiAgICAgICAgciA9IHIgLyBzO1xuICAgICAgICBpZiAobSA9PT0gbCkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChcbiAgICAgICAgICBNYXRoLmFicyhILmdldChtLCBtIC0gMSkpICogKE1hdGguYWJzKHEpICsgTWF0aC5hYnMocikpIDxcbiAgICAgICAgICBlcHMgKlxuICAgICAgICAgICAgKE1hdGguYWJzKHApICpcbiAgICAgICAgICAgICAgKE1hdGguYWJzKEguZ2V0KG0gLSAxLCBtIC0gMSkpICtcbiAgICAgICAgICAgICAgICBNYXRoLmFicyh6KSArXG4gICAgICAgICAgICAgICAgTWF0aC5hYnMoSC5nZXQobSArIDEsIG0gKyAxKSkpKVxuICAgICAgICApIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBtLS07XG4gICAgICB9XG5cbiAgICAgIGZvciAoaSA9IG0gKyAyOyBpIDw9IG47IGkrKykge1xuICAgICAgICBILnNldChpLCBpIC0gMiwgMCk7XG4gICAgICAgIGlmIChpID4gbSArIDIpIHtcbiAgICAgICAgICBILnNldChpLCBpIC0gMywgMCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZm9yIChrID0gbTsgayA8PSBuIC0gMTsgaysrKSB7XG4gICAgICAgIG5vdGxhc3QgPSBrICE9PSBuIC0gMTtcbiAgICAgICAgaWYgKGsgIT09IG0pIHtcbiAgICAgICAgICBwID0gSC5nZXQoaywgayAtIDEpO1xuICAgICAgICAgIHEgPSBILmdldChrICsgMSwgayAtIDEpO1xuICAgICAgICAgIHIgPSBub3RsYXN0ID8gSC5nZXQoayArIDIsIGsgLSAxKSA6IDA7XG4gICAgICAgICAgeCA9IE1hdGguYWJzKHApICsgTWF0aC5hYnMocSkgKyBNYXRoLmFicyhyKTtcbiAgICAgICAgICBpZiAoeCAhPT0gMCkge1xuICAgICAgICAgICAgcCA9IHAgLyB4O1xuICAgICAgICAgICAgcSA9IHEgLyB4O1xuICAgICAgICAgICAgciA9IHIgLyB4O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh4ID09PSAwKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBzID0gTWF0aC5zcXJ0KHAgKiBwICsgcSAqIHEgKyByICogcik7XG4gICAgICAgIGlmIChwIDwgMCkge1xuICAgICAgICAgIHMgPSAtcztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzICE9PSAwKSB7XG4gICAgICAgICAgaWYgKGsgIT09IG0pIHtcbiAgICAgICAgICAgIEguc2V0KGssIGsgLSAxLCAtcyAqIHgpO1xuICAgICAgICAgIH0gZWxzZSBpZiAobCAhPT0gbSkge1xuICAgICAgICAgICAgSC5zZXQoaywgayAtIDEsIC1ILmdldChrLCBrIC0gMSkpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHAgPSBwICsgcztcbiAgICAgICAgICB4ID0gcCAvIHM7XG4gICAgICAgICAgeSA9IHEgLyBzO1xuICAgICAgICAgIHogPSByIC8gcztcbiAgICAgICAgICBxID0gcSAvIHA7XG4gICAgICAgICAgciA9IHIgLyBwO1xuXG4gICAgICAgICAgZm9yIChqID0gazsgaiA8IG5uOyBqKyspIHtcbiAgICAgICAgICAgIHAgPSBILmdldChrLCBqKSArIHEgKiBILmdldChrICsgMSwgaik7XG4gICAgICAgICAgICBpZiAobm90bGFzdCkge1xuICAgICAgICAgICAgICBwID0gcCArIHIgKiBILmdldChrICsgMiwgaik7XG4gICAgICAgICAgICAgIEguc2V0KGsgKyAyLCBqLCBILmdldChrICsgMiwgaikgLSBwICogeik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIEguc2V0KGssIGosIEguZ2V0KGssIGopIC0gcCAqIHgpO1xuICAgICAgICAgICAgSC5zZXQoayArIDEsIGosIEguZ2V0KGsgKyAxLCBqKSAtIHAgKiB5KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBmb3IgKGkgPSAwOyBpIDw9IE1hdGgubWluKG4sIGsgKyAzKTsgaSsrKSB7XG4gICAgICAgICAgICBwID0geCAqIEguZ2V0KGksIGspICsgeSAqIEguZ2V0KGksIGsgKyAxKTtcbiAgICAgICAgICAgIGlmIChub3RsYXN0KSB7XG4gICAgICAgICAgICAgIHAgPSBwICsgeiAqIEguZ2V0KGksIGsgKyAyKTtcbiAgICAgICAgICAgICAgSC5zZXQoaSwgayArIDIsIEguZ2V0KGksIGsgKyAyKSAtIHAgKiByKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgSC5zZXQoaSwgaywgSC5nZXQoaSwgaykgLSBwKTtcbiAgICAgICAgICAgIEguc2V0KGksIGsgKyAxLCBILmdldChpLCBrICsgMSkgLSBwICogcSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZm9yIChpID0gbG93OyBpIDw9IGhpZ2g7IGkrKykge1xuICAgICAgICAgICAgcCA9IHggKiBWLmdldChpLCBrKSArIHkgKiBWLmdldChpLCBrICsgMSk7XG4gICAgICAgICAgICBpZiAobm90bGFzdCkge1xuICAgICAgICAgICAgICBwID0gcCArIHogKiBWLmdldChpLCBrICsgMik7XG4gICAgICAgICAgICAgIFYuc2V0KGksIGsgKyAyLCBWLmdldChpLCBrICsgMikgLSBwICogcik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIFYuc2V0KGksIGssIFYuZ2V0KGksIGspIC0gcCk7XG4gICAgICAgICAgICBWLnNldChpLCBrICsgMSwgVi5nZXQoaSwgayArIDEpIC0gcCAqIHEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmIChub3JtID09PSAwKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgZm9yIChuID0gbm4gLSAxOyBuID49IDA7IG4tLSkge1xuICAgIHAgPSBkW25dO1xuICAgIHEgPSBlW25dO1xuXG4gICAgaWYgKHEgPT09IDApIHtcbiAgICAgIGwgPSBuO1xuICAgICAgSC5zZXQobiwgbiwgMSk7XG4gICAgICBmb3IgKGkgPSBuIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgdyA9IEguZ2V0KGksIGkpIC0gcDtcbiAgICAgICAgciA9IDA7XG4gICAgICAgIGZvciAoaiA9IGw7IGogPD0gbjsgaisrKSB7XG4gICAgICAgICAgciA9IHIgKyBILmdldChpLCBqKSAqIEguZ2V0KGosIG4pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVbaV0gPCAwKSB7XG4gICAgICAgICAgeiA9IHc7XG4gICAgICAgICAgcyA9IHI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbCA9IGk7XG4gICAgICAgICAgaWYgKGVbaV0gPT09IDApIHtcbiAgICAgICAgICAgIEguc2V0KGksIG4sIHcgIT09IDAgPyAtciAvIHcgOiAtciAvIChlcHMgKiBub3JtKSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHggPSBILmdldChpLCBpICsgMSk7XG4gICAgICAgICAgICB5ID0gSC5nZXQoaSArIDEsIGkpO1xuICAgICAgICAgICAgcSA9IChkW2ldIC0gcCkgKiAoZFtpXSAtIHApICsgZVtpXSAqIGVbaV07XG4gICAgICAgICAgICB0ID0gKHggKiBzIC0geiAqIHIpIC8gcTtcbiAgICAgICAgICAgIEguc2V0KGksIG4sIHQpO1xuICAgICAgICAgICAgSC5zZXQoXG4gICAgICAgICAgICAgIGkgKyAxLFxuICAgICAgICAgICAgICBuLFxuICAgICAgICAgICAgICBNYXRoLmFicyh4KSA+IE1hdGguYWJzKHopID8gKC1yIC0gdyAqIHQpIC8geCA6ICgtcyAtIHkgKiB0KSAvIHosXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHQgPSBNYXRoLmFicyhILmdldChpLCBuKSk7XG4gICAgICAgICAgaWYgKGVwcyAqIHQgKiB0ID4gMSkge1xuICAgICAgICAgICAgZm9yIChqID0gaTsgaiA8PSBuOyBqKyspIHtcbiAgICAgICAgICAgICAgSC5zZXQoaiwgbiwgSC5nZXQoaiwgbikgLyB0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHEgPCAwKSB7XG4gICAgICBsID0gbiAtIDE7XG5cbiAgICAgIGlmIChNYXRoLmFicyhILmdldChuLCBuIC0gMSkpID4gTWF0aC5hYnMoSC5nZXQobiAtIDEsIG4pKSkge1xuICAgICAgICBILnNldChuIC0gMSwgbiAtIDEsIHEgLyBILmdldChuLCBuIC0gMSkpO1xuICAgICAgICBILnNldChuIC0gMSwgbiwgLShILmdldChuLCBuKSAtIHApIC8gSC5nZXQobiwgbiAtIDEpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNkaXZyZXMgPSBjZGl2KDAsIC1ILmdldChuIC0gMSwgbiksIEguZ2V0KG4gLSAxLCBuIC0gMSkgLSBwLCBxKTtcbiAgICAgICAgSC5zZXQobiAtIDEsIG4gLSAxLCBjZGl2cmVzWzBdKTtcbiAgICAgICAgSC5zZXQobiAtIDEsIG4sIGNkaXZyZXNbMV0pO1xuICAgICAgfVxuXG4gICAgICBILnNldChuLCBuIC0gMSwgMCk7XG4gICAgICBILnNldChuLCBuLCAxKTtcbiAgICAgIGZvciAoaSA9IG4gLSAyOyBpID49IDA7IGktLSkge1xuICAgICAgICByYSA9IDA7XG4gICAgICAgIHNhID0gMDtcbiAgICAgICAgZm9yIChqID0gbDsgaiA8PSBuOyBqKyspIHtcbiAgICAgICAgICByYSA9IHJhICsgSC5nZXQoaSwgaikgKiBILmdldChqLCBuIC0gMSk7XG4gICAgICAgICAgc2EgPSBzYSArIEguZ2V0KGksIGopICogSC5nZXQoaiwgbik7XG4gICAgICAgIH1cblxuICAgICAgICB3ID0gSC5nZXQoaSwgaSkgLSBwO1xuXG4gICAgICAgIGlmIChlW2ldIDwgMCkge1xuICAgICAgICAgIHogPSB3O1xuICAgICAgICAgIHIgPSByYTtcbiAgICAgICAgICBzID0gc2E7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbCA9IGk7XG4gICAgICAgICAgaWYgKGVbaV0gPT09IDApIHtcbiAgICAgICAgICAgIGNkaXZyZXMgPSBjZGl2KC1yYSwgLXNhLCB3LCBxKTtcbiAgICAgICAgICAgIEguc2V0KGksIG4gLSAxLCBjZGl2cmVzWzBdKTtcbiAgICAgICAgICAgIEguc2V0KGksIG4sIGNkaXZyZXNbMV0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB4ID0gSC5nZXQoaSwgaSArIDEpO1xuICAgICAgICAgICAgeSA9IEguZ2V0KGkgKyAxLCBpKTtcbiAgICAgICAgICAgIHZyID0gKGRbaV0gLSBwKSAqIChkW2ldIC0gcCkgKyBlW2ldICogZVtpXSAtIHEgKiBxO1xuICAgICAgICAgICAgdmkgPSAoZFtpXSAtIHApICogMiAqIHE7XG4gICAgICAgICAgICBpZiAodnIgPT09IDAgJiYgdmkgPT09IDApIHtcbiAgICAgICAgICAgICAgdnIgPVxuICAgICAgICAgICAgICAgIGVwcyAqXG4gICAgICAgICAgICAgICAgbm9ybSAqXG4gICAgICAgICAgICAgICAgKE1hdGguYWJzKHcpICtcbiAgICAgICAgICAgICAgICAgIE1hdGguYWJzKHEpICtcbiAgICAgICAgICAgICAgICAgIE1hdGguYWJzKHgpICtcbiAgICAgICAgICAgICAgICAgIE1hdGguYWJzKHkpICtcbiAgICAgICAgICAgICAgICAgIE1hdGguYWJzKHopKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNkaXZyZXMgPSBjZGl2KFxuICAgICAgICAgICAgICB4ICogciAtIHogKiByYSArIHEgKiBzYSxcbiAgICAgICAgICAgICAgeCAqIHMgLSB6ICogc2EgLSBxICogcmEsXG4gICAgICAgICAgICAgIHZyLFxuICAgICAgICAgICAgICB2aSxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBILnNldChpLCBuIC0gMSwgY2RpdnJlc1swXSk7XG4gICAgICAgICAgICBILnNldChpLCBuLCBjZGl2cmVzWzFdKTtcbiAgICAgICAgICAgIGlmIChNYXRoLmFicyh4KSA+IE1hdGguYWJzKHopICsgTWF0aC5hYnMocSkpIHtcbiAgICAgICAgICAgICAgSC5zZXQoXG4gICAgICAgICAgICAgICAgaSArIDEsXG4gICAgICAgICAgICAgICAgbiAtIDEsXG4gICAgICAgICAgICAgICAgKC1yYSAtIHcgKiBILmdldChpLCBuIC0gMSkgKyBxICogSC5nZXQoaSwgbikpIC8geCxcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgSC5zZXQoXG4gICAgICAgICAgICAgICAgaSArIDEsXG4gICAgICAgICAgICAgICAgbixcbiAgICAgICAgICAgICAgICAoLXNhIC0gdyAqIEguZ2V0KGksIG4pIC0gcSAqIEguZ2V0KGksIG4gLSAxKSkgLyB4LFxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgY2RpdnJlcyA9IGNkaXYoXG4gICAgICAgICAgICAgICAgLXIgLSB5ICogSC5nZXQoaSwgbiAtIDEpLFxuICAgICAgICAgICAgICAgIC1zIC0geSAqIEguZ2V0KGksIG4pLFxuICAgICAgICAgICAgICAgIHosXG4gICAgICAgICAgICAgICAgcSxcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgSC5zZXQoaSArIDEsIG4gLSAxLCBjZGl2cmVzWzBdKTtcbiAgICAgICAgICAgICAgSC5zZXQoaSArIDEsIG4sIGNkaXZyZXNbMV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHQgPSBNYXRoLm1heChNYXRoLmFicyhILmdldChpLCBuIC0gMSkpLCBNYXRoLmFicyhILmdldChpLCBuKSkpO1xuICAgICAgICAgIGlmIChlcHMgKiB0ICogdCA+IDEpIHtcbiAgICAgICAgICAgIGZvciAoaiA9IGk7IGogPD0gbjsgaisrKSB7XG4gICAgICAgICAgICAgIEguc2V0KGosIG4gLSAxLCBILmdldChqLCBuIC0gMSkgLyB0KTtcbiAgICAgICAgICAgICAgSC5zZXQoaiwgbiwgSC5nZXQoaiwgbikgLyB0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmb3IgKGkgPSAwOyBpIDwgbm47IGkrKykge1xuICAgIGlmIChpIDwgbG93IHx8IGkgPiBoaWdoKSB7XG4gICAgICBmb3IgKGogPSBpOyBqIDwgbm47IGorKykge1xuICAgICAgICBWLnNldChpLCBqLCBILmdldChpLCBqKSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZm9yIChqID0gbm4gLSAxOyBqID49IGxvdzsgai0tKSB7XG4gICAgZm9yIChpID0gbG93OyBpIDw9IGhpZ2g7IGkrKykge1xuICAgICAgeiA9IDA7XG4gICAgICBmb3IgKGsgPSBsb3c7IGsgPD0gTWF0aC5taW4oaiwgaGlnaCk7IGsrKykge1xuICAgICAgICB6ID0geiArIFYuZ2V0KGksIGspICogSC5nZXQoaywgaik7XG4gICAgICB9XG4gICAgICBWLnNldChpLCBqLCB6KTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY2Rpdih4ciwgeGksIHlyLCB5aSkge1xuICBsZXQgciwgZDtcbiAgaWYgKE1hdGguYWJzKHlyKSA+IE1hdGguYWJzKHlpKSkge1xuICAgIHIgPSB5aSAvIHlyO1xuICAgIGQgPSB5ciArIHIgKiB5aTtcbiAgICByZXR1cm4gWyh4ciArIHIgKiB4aSkgLyBkLCAoeGkgLSByICogeHIpIC8gZF07XG4gIH0gZWxzZSB7XG4gICAgciA9IHlyIC8geWk7XG4gICAgZCA9IHlpICsgciAqIHlyO1xuICAgIHJldHVybiBbKHIgKiB4ciArIHhpKSAvIGQsIChyICogeGkgLSB4cikgLyBkXTtcbiAgfVxufVxuIiwiaW1wb3J0ICogYXMgbSBmcm9tICdtbC1tYXRyaXgnO1xuXG5leHBvcnQgY2xhc3MgR2F1c3NpYW4ge1xuICAgIGNvbnN0cnVjdG9yKGV0YSwgbGFtKSB7XG4gICAgICAvLyBUT0RPOiBDb25zaWRlciBzYXZpbmcgdGhlIGRpbWVuc2lvblxuICAgICAgaWYgKChldGEgaW5zdGFuY2VvZiBtLk1hdHJpeCkgJiYgKGxhbSBpbnN0YW5jZW9mIG0uTWF0cml4KSkge1xuICAgICAgICB0aGlzLmV0YSA9IGV0YTtcbiAgICAgICAgdGhpcy5sYW0gPSBsYW07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmV0YSA9IG5ldyBtLk1hdHJpeChbZXRhXSkudHJhbnNwb3NlKCk7XG4gICAgICAgIHRoaXMubGFtID0gbmV3IG0uTWF0cml4KGxhbSk7XG4gICAgICB9XG4gICAgfVxuICBcbiAgICBnZXRDb3YoKSB7XG4gICAgICByZXR1cm4gbS5pbnZlcnNlKHRoaXMubGFtKTtcbiAgICB9XG4gIFxuICAgIGdldE1lYW4oKSB7XG4gICAgICBjb25zdCBjb3YgPSB0aGlzLmdldENvdigpO1xuICAgICAgcmV0dXJuIGNvdi5tbXVsKHRoaXMuZXRhKTtcbiAgICB9XG4gIFxuICAgIC8vIFRha2UgcHJvZHVjdCBvZiBnYXVzc2lhbiB3aXRoIG90aGVyIGdhdXNzaWFuXG4gICAgcHJvZHVjdChnYXVzc2lhbikge1xuICAgICAgdGhpcy5ldGEuYWRkKGdhdXNzaWFuLmV0YSk7XG4gICAgICB0aGlzLmxhbS5hZGQoZ2F1c3NpYW4ubGFtKTtcbiAgICB9XG4gIFxuICAgIGdldENvdkVsbGlwc2UoKSB7XG4gICAgICB2YXIgY292ID0gdGhpcy5nZXRDb3YoKTtcbiAgICAgIHZhciBlID0gbmV3IG0uRWlnZW52YWx1ZURlY29tcG9zaXRpb24oY292KTtcbiAgICAgIHZhciByZWFsID0gZS5yZWFsRWlnZW52YWx1ZXM7XG4gIFxuICAgICAgLy8gRWlnZW52ZWN0b3JzIGFyZSBhbHdheXMgb3J0aG9nb25hbFxuICAgICAgdmFyIHZlY3RvcnMgPSBlLmVpZ2VudmVjdG9yTWF0cml4O1xuICAgICAgdmFyIGFuZ2xlID0gTWF0aC5hdGFuKHZlY3RvcnMuZ2V0KDEsIDApIC8gdmVjdG9ycy5nZXQoMCwgMCkpXG4gICAgICByZXR1cm4gW3JlYWwsIGFuZ2xlXVxuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEVsbGlwc2UoY292KSB7XG4gIHZhciBlID0gbmV3IG0uRWlnZW52YWx1ZURlY29tcG9zaXRpb24oY292KTtcbiAgdmFyIHJlYWwgPSBlLnJlYWxFaWdlbnZhbHVlcztcblxuICAvLyBFaWdlbnZlY3RvcnMgYXJlIGFsd2F5cyBvcnRob2dvbmFsXG4gIHZhciB2ZWN0b3JzID0gZS5laWdlbnZlY3Rvck1hdHJpeDtcbiAgdmFyIGFuZ2xlID0gTWF0aC5hdGFuKHZlY3RvcnMuZ2V0KDEsIDApIC8gdmVjdG9ycy5nZXQoMCwgMCkpXG4gIHJldHVybiBbcmVhbCwgYW5nbGVdXG59XG4iLCJpbXBvcnQgeyBBYnN0cmFjdE1hdHJpeCB9IGZyb20gJy4uL21hdHJpeCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJhc2VWaWV3IGV4dGVuZHMgQWJzdHJhY3RNYXRyaXgge1xuICBjb25zdHJ1Y3RvcihtYXRyaXgsIHJvd3MsIGNvbHVtbnMpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMubWF0cml4ID0gbWF0cml4O1xuICAgIHRoaXMucm93cyA9IHJvd3M7XG4gICAgdGhpcy5jb2x1bW5zID0gY29sdW1ucztcbiAgfVxufVxuIiwiaW1wb3J0IHsgY2hlY2tSYW5nZSB9IGZyb20gJy4uL3V0aWwnO1xuXG5pbXBvcnQgQmFzZVZpZXcgZnJvbSAnLi9iYXNlJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTWF0cml4U3ViVmlldyBleHRlbmRzIEJhc2VWaWV3IHtcbiAgY29uc3RydWN0b3IobWF0cml4LCBzdGFydFJvdywgZW5kUm93LCBzdGFydENvbHVtbiwgZW5kQ29sdW1uKSB7XG4gICAgY2hlY2tSYW5nZShtYXRyaXgsIHN0YXJ0Um93LCBlbmRSb3csIHN0YXJ0Q29sdW1uLCBlbmRDb2x1bW4pO1xuICAgIHN1cGVyKG1hdHJpeCwgZW5kUm93IC0gc3RhcnRSb3cgKyAxLCBlbmRDb2x1bW4gLSBzdGFydENvbHVtbiArIDEpO1xuICAgIHRoaXMuc3RhcnRSb3cgPSBzdGFydFJvdztcbiAgICB0aGlzLnN0YXJ0Q29sdW1uID0gc3RhcnRDb2x1bW47XG4gIH1cblxuICBzZXQocm93SW5kZXgsIGNvbHVtbkluZGV4LCB2YWx1ZSkge1xuICAgIHRoaXMubWF0cml4LnNldChcbiAgICAgIHRoaXMuc3RhcnRSb3cgKyByb3dJbmRleCxcbiAgICAgIHRoaXMuc3RhcnRDb2x1bW4gKyBjb2x1bW5JbmRleCxcbiAgICAgIHZhbHVlLFxuICAgICk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBnZXQocm93SW5kZXgsIGNvbHVtbkluZGV4KSB7XG4gICAgcmV0dXJuIHRoaXMubWF0cml4LmdldChcbiAgICAgIHRoaXMuc3RhcnRSb3cgKyByb3dJbmRleCxcbiAgICAgIHRoaXMuc3RhcnRDb2x1bW4gKyBjb2x1bW5JbmRleCxcbiAgICApO1xuICB9XG59XG4iLCJpbXBvcnQgKiBhcyBtIGZyb20gJ21sLW1hdHJpeCc7XG5pbXBvcnQgKiBhcyBnYXVzcyBmcm9tICcuLi9nYXVzc2lhbic7XG5cbmV4cG9ydCBjbGFzcyBGYWN0b3JHcmFwaCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMucG9zZV9ub2RlcyA9IFtdO1xuICAgIHRoaXMubG1rX25vZGVzID0gW107XG5cbiAgICB0aGlzLmZhY3RvcnMgPSBbXTtcbiAgfVxuXG4gIHVwZGF0ZV9iZWxpZWZzKCkge1xuICAgIGZvcih2YXIgYz0wOyBjPHRoaXMucG9zZV9ub2Rlcy5sZW5ndGg7IGMrKykge1xuICAgICAgdGhpcy5wb3NlX25vZGVzW2NdLnVwZGF0ZV9iZWxpZWYoKTtcbiAgICB9XG4gICAgZm9yKHZhciBjPTA7IGM8dGhpcy5sbWtfbm9kZXMubGVuZ3RoOyBjKyspIHtcbiAgICAgIHRoaXMubG1rX25vZGVzW2NdLnVwZGF0ZV9iZWxpZWYoKTtcbiAgICB9XG4gXG4gIH1cblxuICBzZW5kX21lc3NhZ2VzKCkge1xuICAgIGZvcih2YXIgYz0wOyBjPHRoaXMuZmFjdG9ycy5sZW5ndGg7IGMrKykge1xuICAgICAgdGhpcy5mYWN0b3JzW2NdLnNlbmRfbWVzcygpO1xuICAgIH1cblxuICB9XG5cbiAgc3luY19pdGVyKCkge1xuICAgIHRoaXMuc2VuZF9tZXNzYWdlcygpO1xuICAgIHRoaXMudXBkYXRlX2JlbGllZnMoKTtcbiAgfVxuXG4gIGVuZXJneSgpIHtcbiAgICBsZXQgZW5lcmd5ID0gMC47XG4gICAgZm9yKHZhciBjPTA7IGM8dGhpcy5mYWN0b3JzLmxlbmd0aDsgYysrKSB7XG4gICAgICBlbmVyZ3kgKz0gdGhpcy5mYWN0b3JzW2NdLmVuZXJneSgpO1xuICAgIH1cbiAgfVxuXG4gIHJlbGluZWFyaXNlKCkge1xuICAgIGZvciAodmFyIGM9MDsgYzx0aGlzLmZhY3RvcnMubGVuZ3RoOyBjKyspIHtcbiAgICAgIHRoaXMuZmFjdG9yc1tjXS5jb21wdXRlX2ZhY3RvcigpO1xuICAgIH1cbiAgfVxuXG5cbiAgY29tcHV0ZU1BUChuX2xhbmRtYXJrcywgbG1rX2dyYXBoX2l4KSB7XG4gICAgdmFyIHRvdF9kb2ZzID0gMDtcbiAgICBmb3IodmFyIGM9MDsgYzx0aGlzLnBvc2Vfbm9kZXMubGVuZ3RoOyBjKyspIHtcbiAgICAgIHRvdF9kb2ZzICs9IHRoaXMucG9zZV9ub2Rlc1tjXS5kb2ZzO1xuICAgIH1cbiAgICBmb3IodmFyIGM9MDsgYzx0aGlzLmxta19ub2Rlcy5sZW5ndGg7IGMrKykge1xuICAgICAgdG90X2RvZnMgKz0gdGhpcy5sbWtfbm9kZXNbY10uZG9mcztcbiAgICB9XG5cbiAgICBjb25zdCBiaWdFdGEgPSBtLk1hdHJpeC56ZXJvcyh0b3RfZG9mcywgMSk7XG4gICAgY29uc3QgYmlnTGFtID0gbS5NYXRyaXguemVyb3ModG90X2RvZnMsIHRvdF9kb2ZzKTtcblxuICAgIC8vIEFkZCBwcmlvcnNcbiAgICB2YXIgbF9kb2ZzID0gMiAqIHRoaXMubG1rX25vZGVzLmxlbmd0aDtcbiAgICBmb3IodmFyIGM9MDsgYzx0aGlzLnBvc2Vfbm9kZXMubGVuZ3RoOyBjKyspIHtcbiAgICAgIG5ldyBtLk1hdHJpeFN1YlZpZXcoYmlnRXRhLCBsX2RvZnMrYyoyLCBsX2RvZnMrKGMrMSkqMi0xLCAwLCAwKS5hZGQodGhpcy5wb3NlX25vZGVzW2NdLnByaW9yLmV0YSk7XG4gICAgICBuZXcgbS5NYXRyaXhTdWJWaWV3KGJpZ0xhbSwgbF9kb2ZzK2MqMiwgbF9kb2ZzKyhjKzEpKjItMSwgbF9kb2ZzK2MqMiwgbF9kb2ZzKyhjKzEpKjItMSkuYWRkKHRoaXMucG9zZV9ub2Rlc1tjXS5wcmlvci5sYW0pO1xuICAgIH1cbiAgICBmb3IodmFyIGM9MDsgYzx0aGlzLmxta19ub2Rlcy5sZW5ndGg7IGMrKykge1xuICAgICAgbmV3IG0uTWF0cml4U3ViVmlldyhiaWdFdGEsIGMqMiwgKGMrMSkqMi0xLCAwLCAwKS5hZGQodGhpcy5sbWtfbm9kZXNbY10ucHJpb3IuZXRhKTtcbiAgICAgIG5ldyBtLk1hdHJpeFN1YlZpZXcoYmlnTGFtLCBjKjIsIChjKzEpKjItMSwgYyoyLCAoYysxKSoyLTEpLmFkZCh0aGlzLmxta19ub2Rlc1tjXS5wcmlvci5sYW0pO1xuICAgIH1cblxuICAgIC8vIEFkZCBmYWN0b3JzXG4gICAgZm9yKHZhciBjPTA7IGM8dGhpcy5mYWN0b3JzLmxlbmd0aDsgYysrKSB7XG4gICAgICBpZiAodGhpcy5mYWN0b3JzW2NdLmFkal92YXJfaWRzWzFdIDwgbl9sYW5kbWFya3MpIHtcbiAgICAgICAgY29uc3QgZl9wb3NlX2V0YSA9IG5ldyBtLk1hdHJpeFN1YlZpZXcodGhpcy5mYWN0b3JzW2NdLmZhY3Rvci5ldGEsIDAsIDEsIDAsIDApO1xuICAgICAgICBjb25zdCBmX2xta19ldGEgPSBuZXcgbS5NYXRyaXhTdWJWaWV3KHRoaXMuZmFjdG9yc1tjXS5mYWN0b3IuZXRhLCAyLCAzLCAwLCAwKTtcbiAgICAgICAgY29uc3QgZl9wb3NlX2xhbSA9IG5ldyBtLk1hdHJpeFN1YlZpZXcodGhpcy5mYWN0b3JzW2NdLmZhY3Rvci5sYW0sIDAsIDEsIDAsIDEpO1xuICAgICAgICBjb25zdCBmX2xta19sYW0gPSBuZXcgbS5NYXRyaXhTdWJWaWV3KHRoaXMuZmFjdG9yc1tjXS5mYWN0b3IubGFtLCAyLCAzLCAyLCAzKTtcbiAgICAgICAgY29uc3QgZl9wb3NlX2xta19sYW0gPSBuZXcgbS5NYXRyaXhTdWJWaWV3KHRoaXMuZmFjdG9yc1tjXS5mYWN0b3IubGFtLCAwLCAxLCAyLCAzKTtcbiAgICAgICAgY29uc3QgZl9sbWtfcG9zZV9sYW0gPSBuZXcgbS5NYXRyaXhTdWJWaWV3KHRoaXMuZmFjdG9yc1tjXS5mYWN0b3IubGFtLCAyLCAzLCAwLCAxKTtcblxuICAgICAgICB2YXIgY19pZCA9IHRoaXMubG1rX25vZGVzLmxlbmd0aCArIHRoaXMuZmFjdG9yc1tjXS5hZGpfdmFyX2lkc1swXSAtIG5fbGFuZG1hcmtzO1xuICAgICAgICB2YXIgbF9pZCA9IGxta19ncmFwaF9peFt0aGlzLmZhY3RvcnNbY10uYWRqX3Zhcl9pZHNbMV1dO1xuICAgICAgICBuZXcgbS5NYXRyaXhTdWJWaWV3KGJpZ0V0YSwgY19pZCoyLCAoY19pZCsxKSoyLTEsIDAsIDApLmFkZChmX3Bvc2VfZXRhKTtcbiAgICAgICAgbmV3IG0uTWF0cml4U3ViVmlldyhiaWdFdGEsIGxfaWQqMiwgKGxfaWQrMSkqMi0xLCAwLCAwKS5hZGQoZl9sbWtfZXRhKTtcbiAgICAgICAgbmV3IG0uTWF0cml4U3ViVmlldyhiaWdMYW0sIGNfaWQqMiwgKGNfaWQrMSkqMi0xLCBjX2lkKjIsIChjX2lkKzEpKjItMSkuYWRkKGZfcG9zZV9sYW0pO1xuICAgICAgICBuZXcgbS5NYXRyaXhTdWJWaWV3KGJpZ0xhbSwgbF9pZCoyLCAobF9pZCsxKSoyLTEsIGxfaWQqMiwgKGxfaWQrMSkqMi0xKS5hZGQoZl9sbWtfbGFtKTtcbiAgICAgICAgbmV3IG0uTWF0cml4U3ViVmlldyhiaWdMYW0sIGNfaWQqMiwgKGNfaWQrMSkqMi0xLCBsX2lkKjIsIChsX2lkKzEpKjItMSkuYWRkKGZfcG9zZV9sbWtfbGFtKTtcbiAgICAgICAgbmV3IG0uTWF0cml4U3ViVmlldyhiaWdMYW0sIGxfaWQqMiwgKGxfaWQrMSkqMi0xLCBjX2lkKjIsIChjX2lkKzEpKjItMSkuYWRkKGZfbG1rX3Bvc2VfbGFtKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IGZfcDFfZXRhID0gbmV3IG0uTWF0cml4KG5ldyBtLk1hdHJpeFN1YlZpZXcodGhpcy5mYWN0b3JzW2NdLmZhY3Rvci5ldGEsIDAsIDEsIDAsIDApKTtcbiAgICAgICAgY29uc3QgZl9wMl9ldGEgPSBuZXcgbS5NYXRyaXgobmV3IG0uTWF0cml4U3ViVmlldyh0aGlzLmZhY3RvcnNbY10uZmFjdG9yLmV0YSwgMiwgMywgMCwgMCkpO1xuICAgICAgICBjb25zdCBmX3AxX2xhbSA9IG5ldyBtLk1hdHJpeChuZXcgbS5NYXRyaXhTdWJWaWV3KHRoaXMuZmFjdG9yc1tjXS5mYWN0b3IubGFtLCAwLCAxLCAwLCAxKSk7XG4gICAgICAgIGNvbnN0IGZfcDJfbGFtID0gbmV3IG0uTWF0cml4KG5ldyBtLk1hdHJpeFN1YlZpZXcodGhpcy5mYWN0b3JzW2NdLmZhY3Rvci5sYW0sIDIsIDMsIDIsIDMpKTtcbiAgICAgICAgY29uc3QgZl9wMV9wMl9sYW0gPSBuZXcgbS5NYXRyaXgobmV3IG0uTWF0cml4U3ViVmlldyh0aGlzLmZhY3RvcnNbY10uZmFjdG9yLmxhbSwgMCwgMSwgMiwgMykpO1xuICAgICAgICBjb25zdCBmX3AyX3AxX2xhbSA9IG5ldyBtLk1hdHJpeChuZXcgbS5NYXRyaXhTdWJWaWV3KHRoaXMuZmFjdG9yc1tjXS5mYWN0b3IubGFtLCAyLCAzLCAwLCAxKSk7XG5cbiAgICAgICAgdmFyIGNfaWQxID0gdGhpcy5sbWtfbm9kZXMubGVuZ3RoICsgdGhpcy5mYWN0b3JzW2NdLmFkal92YXJfaWRzWzBdIC0gbl9sYW5kbWFya3M7XG4gICAgICAgIHZhciBjX2lkMiA9IHRoaXMubG1rX25vZGVzLmxlbmd0aCArIHRoaXMuZmFjdG9yc1tjXS5hZGpfdmFyX2lkc1sxXSAtIG5fbGFuZG1hcmtzO1xuICAgICAgICBuZXcgbS5NYXRyaXhTdWJWaWV3KGJpZ0V0YSwgY19pZDEqMiwgKGNfaWQxKzEpKjItMSwgMCwgMCkuYWRkKGZfcDFfZXRhKTtcbiAgICAgICAgbmV3IG0uTWF0cml4U3ViVmlldyhiaWdFdGEsIGNfaWQyKjIsIChjX2lkMisxKSoyLTEsIDAsIDApLmFkZChmX3AyX2V0YSk7XG4gICAgICAgIG5ldyBtLk1hdHJpeFN1YlZpZXcoYmlnTGFtLCBjX2lkMSoyLCAoY19pZDErMSkqMi0xLCBjX2lkMSoyLCAoY19pZDErMSkqMi0xKS5hZGQoZl9wMV9sYW0pO1xuICAgICAgICBuZXcgbS5NYXRyaXhTdWJWaWV3KGJpZ0xhbSwgY19pZDIqMiwgKGNfaWQyKzEpKjItMSwgY19pZDIqMiwgKGNfaWQyKzEpKjItMSkuYWRkKGZfcDJfbGFtKTtcbiAgICAgICAgbmV3IG0uTWF0cml4U3ViVmlldyhiaWdMYW0sIGNfaWQxKjIsIChjX2lkMSsxKSoyLTEsIGNfaWQyKjIsIChjX2lkMisxKSoyLTEpLmFkZChmX3AxX3AyX2xhbSk7XG4gICAgICAgIG5ldyBtLk1hdHJpeFN1YlZpZXcoYmlnTGFtLCBjX2lkMioyLCAoY19pZDIrMSkqMi0xLCBjX2lkMSoyLCAoY19pZDErMSkqMi0xKS5hZGQoZl9wMl9wMV9sYW0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IGJpZ0NvdiA9IG0uaW52ZXJzZShiaWdMYW0pO1xuICAgIGNvbnN0IG1lYW5zID0gYmlnQ292Lm1tdWwoYmlnRXRhKTtcbiAgICByZXR1cm4gW21lYW5zLCBiaWdDb3ZdO1xuICB9XG5cbiAgY29tcGFyZV90b19NQVAobl9sYW5kbWFya3MsIGxta19ncmFwaF9peCkge1xuICAgIHZhciBnYnBfbWVhbnMgPSBbXTtcbiAgICBmb3IodmFyIGM9MDsgYzx0aGlzLmxta19ub2Rlcy5sZW5ndGg7IGMrKykge1xuICAgICAgZ2JwX21lYW5zLnB1c2godGhpcy5sbWtfbm9kZXNbY10uYmVsaWVmLmdldE1lYW4oKS5nZXQoMCwwKSk7XG4gICAgICBnYnBfbWVhbnMucHVzaCh0aGlzLmxta19ub2Rlc1tjXS5iZWxpZWYuZ2V0TWVhbigpLmdldCgxLDApKTtcbiAgICB9XG4gICAgZm9yKHZhciBjPTA7IGM8dGhpcy5wb3NlX25vZGVzLmxlbmd0aDsgYysrKSB7XG4gICAgICBnYnBfbWVhbnMucHVzaCh0aGlzLnBvc2Vfbm9kZXNbY10uYmVsaWVmLmdldE1lYW4oKS5nZXQoMCwwKSk7XG4gICAgICBnYnBfbWVhbnMucHVzaCh0aGlzLnBvc2Vfbm9kZXNbY10uYmVsaWVmLmdldE1lYW4oKS5nZXQoMSwwKSk7XG4gICAgfVxuXG4gICAgY29uc3QgbWVhbnMgPSBuZXcgbS5NYXRyaXgoW2dicF9tZWFuc10pO1xuICAgIGNvbnN0IG1hcCA9IHRoaXMuY29tcHV0ZU1BUChuX2xhbmRtYXJrcywgbG1rX2dyYXBoX2l4KVswXTtcbiAgICB2YXIgYXZfZGlmZiA9IChtYXAuc3ViKG1lYW5zLnRyYW5zcG9zZSgpKSkubm9ybSgpO1xuICAgIHJldHVybiBhdl9kaWZmO1xuICB9XG5cbn1cblxuZXhwb3J0IGNsYXNzIFZhcmlhYmxlTm9kZSB7XG4gIGNvbnN0cnVjdG9yKGRvZnMsIHZhcl9pZCkge1xuICAgIHRoaXMuZG9mcyA9IGRvZnM7XG4gICAgdGhpcy52YXJfaWQgPSB2YXJfaWQ7XG4gICAgdGhpcy5iZWxpZWYgPSBuZXcgZ2F1c3MuR2F1c3NpYW4obS5NYXRyaXguemVyb3MoZG9mcywgMSksIG0uTWF0cml4Lnplcm9zKGRvZnMsIGRvZnMpKTtcbiAgICB0aGlzLnByaW9yID0gbmV3IGdhdXNzLkdhdXNzaWFuKG0uTWF0cml4Lnplcm9zKGRvZnMsIDEpLCBtLk1hdHJpeC56ZXJvcyhkb2ZzLCBkb2ZzKSk7XG5cbiAgICB0aGlzLmFkal9mYWN0b3JzID0gW107XG4gIH1cblxuICB1cGRhdGVfYmVsaWVmKCkge1xuICAgIHRoaXMuYmVsaWVmLmV0YSA9IHRoaXMucHJpb3IuZXRhLmNsb25lKCk7XG4gICAgdGhpcy5iZWxpZWYubGFtID0gdGhpcy5wcmlvci5sYW0uY2xvbmUoKTtcblxuICAgIC8vIFRha2UgcHJvZHVjdCBvZiBpbmNvbWluZyBtZXNzYWdlc1xuICAgIGZvcih2YXIgYz0wOyBjPHRoaXMuYWRqX2ZhY3RvcnMubGVuZ3RoOyBjKyspIHtcbiAgICAgIHZhciBpeCA9IHRoaXMuYWRqX2ZhY3RvcnNbY10uYWRqX3Zhcl9pZHMuaW5kZXhPZih0aGlzLnZhcl9pZCk7XG4gICAgICB0aGlzLmJlbGllZi5wcm9kdWN0KHRoaXMuYWRqX2ZhY3RvcnNbY10ubWVzc2FnZXNbaXhdKVxuICAgIH1cblxuICAgIC8vIFNlbmQgbmV3IGJlbGllZiB0byBhZGphY2VudCBmYWN0b3JzXG4gICAgZm9yKHZhciBjPTA7IGM8dGhpcy5hZGpfZmFjdG9ycy5sZW5ndGg7IGMrKykge1xuICAgICAgdmFyIGl4ID0gdGhpcy5hZGpfZmFjdG9yc1tjXS5hZGpfdmFyX2lkcy5pbmRleE9mKHRoaXMudmFyX2lkKTtcbiAgICAgIHRoaXMuYWRqX2ZhY3RvcnNbY10uYWRqX2JlbGllZnNbaXhdID0gdGhpcy5iZWxpZWY7XG4gICAgfVxuICB9XG59XG5cblxuZXhwb3J0IGNsYXNzIE5vbkxpbmVhckZhY3RvciB7XG4gIGNvbnN0cnVjdG9yKGRvZnMsIGFkal92YXJfaWRzLCBtZWFzRm4sIGphY0ZuKSB7XG4gICAgdGhpcy5kb2ZzID0gZG9mcztcbiAgICB0aGlzLmFkal92YXJfaWRzID0gYWRqX3Zhcl9pZHM7XG4gICAgdGhpcy5hZGpfYmVsaWVmcyA9IFtdO1xuICAgIHRoaXMuYWRqX3Zhcl9kb2ZzID0gW107XG5cbiAgICB0aGlzLm1lYXM7XG4gICAgdGhpcy5sYW1iZGE7XG4gICAgdGhpcy5mYWN0b3IgPSBuZXcgZ2F1c3MuR2F1c3NpYW4obS5NYXRyaXguemVyb3MoZG9mcywgMSksIG0uTWF0cml4Lnplcm9zKGRvZnMsIGRvZnMpKTtcbiAgICB0aGlzLmxpbnBvaW50O1xuXG4gICAgdGhpcy5qYWNGbiA9IGphY0ZuO1xuICAgIHRoaXMubWVhc0ZuID0gbWVhc0ZuO1xuXG4gICAgdGhpcy5tZXNzYWdlcyA9IFtdO1xuXG4gICAgdGhpcy5ldGFfZGFtcGluZyA9IDAuO1xuICB9XG5cbiAgY29tcHV0ZV9mYWN0b3IoKSB7XG4gICAgY29uc3QgY2FtX2Nvb3JkcyA9IHRoaXMuYWRqX2JlbGllZnNbMF0uZ2V0TWVhbigpO1xuICAgIGNvbnN0IGxta19jb29yZHMgPSB0aGlzLmFkal9iZWxpZWZzWzFdLmdldE1lYW4oKTtcbiAgICB0aGlzLmxpbnBvaW50ID0gbmV3IG0uTWF0cml4KFtbY2FtX2Nvb3Jkcy5nZXQoMCwwKV0sIFtjYW1fY29vcmRzLmdldCgxLDApXSwgW2xta19jb29yZHMuZ2V0KDAsMCldLCBbbG1rX2Nvb3Jkcy5nZXQoMSwwKV1dKTtcbiAgICBsZXQgamFjID0gdGhpcy5qYWNGbihjYW1fY29vcmRzLCBsbWtfY29vcmRzKTtcblxuICAgIGNvbnN0IG1lYXN1cmVtZW50ID0gdGhpcy5tZWFzRm4oY2FtX2Nvb3JkcywgbG1rX2Nvb3Jkcyk7XG4gICAgY29uc3QgYnJhY2tldCA9IGphYy5tbXVsKHRoaXMubGlucG9pbnQpLmFkZCh0aGlzLm1lYXMpLnN1YihtZWFzdXJlbWVudCk7XG4gICAgdGhpcy5mYWN0b3IuZXRhID0gKGphYy50cmFuc3Bvc2UoKS5tbXVsKHRoaXMubGFtYmRhKSkubW11bChicmFja2V0KTtcbiAgICB0aGlzLmZhY3Rvci5sYW0gPSAoamFjLnRyYW5zcG9zZSgpLm1tdWwodGhpcy5sYW1iZGEpKS5tbXVsKGphYyk7XG4gIH1cblxuICBlbmVyZ3koKSB7XG4gICAgdmFyIHJlcyA9IHRoaXMubWVhc19mbihjYW1fY29vcmRzLCBsbWtfY29vcmRzKS5zdWIodGhpcy5tZWFzKTtcbiAgICByZXR1cm4gMC41ICogcmVzLm1tdWwodGhpcy5sYW1iZGEpLm1tdWwocmVzKTtcbiAgfVxuXG4gIHNlbmRfbWVzcygpIHtcbiAgICB2YXIgc3RhcnRfZGltID0gMDtcbiAgICBcbiAgICBmb3IgKHZhciBpPTA7IGk8dGhpcy5hZGpfdmFyX2lkcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGV0YV9mYWN0b3IgPSB0aGlzLmZhY3Rvci5ldGEuY2xvbmUoKTtcbiAgICAgIHZhciBsYW1fZmFjdG9yID0gdGhpcy5mYWN0b3IubGFtLmNsb25lKCk7XG5cbiAgICAgIC8vIFRha2UgcHJvZHVjdCB3aXRoIGluY29taW5nIG1lc3NhZ2VzLCBnZW5lcmFsIGZvciBmYWN0b3IgY29ubmVjdGVkIHRvIGFyYml0cmFyeSBudW0gdmFyIG5vZGVzXG4gICAgICB2YXIgbWVzc19zdGFydF9kaW0gPSAwO1xuICAgICAgZm9yICh2YXIgaj0wOyBqPHRoaXMuYWRqX3Zhcl9pZHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgaWYgKCEoaSA9PSBqKSkge1xuICAgICAgICAgIGNvbnN0IGV0YV9wcm9kID0gbS5NYXRyaXguc3ViKHRoaXMuYWRqX2JlbGllZnNbal0uZXRhLCB0aGlzLm1lc3NhZ2VzW2pdLmV0YSk7XG4gICAgICAgICAgY29uc3QgbGFtX3Byb2QgPSBtLk1hdHJpeC5zdWIodGhpcy5hZGpfYmVsaWVmc1tqXS5sYW0sIHRoaXMubWVzc2FnZXNbal0ubGFtKTtcbiAgICAgICAgICBuZXcgbS5NYXRyaXhTdWJWaWV3KGV0YV9mYWN0b3IsIG1lc3Nfc3RhcnRfZGltLCBtZXNzX3N0YXJ0X2RpbSArIHRoaXMuYWRqX3Zhcl9kb2ZzW2pdIC0xLCAwLCAwKS5hZGQoZXRhX3Byb2QpO1xuICAgICAgICAgIG5ldyBtLk1hdHJpeFN1YlZpZXcobGFtX2ZhY3RvciwgbWVzc19zdGFydF9kaW0sIG1lc3Nfc3RhcnRfZGltICsgdGhpcy5hZGpfdmFyX2RvZnNbal0gLTEsIG1lc3Nfc3RhcnRfZGltLCBtZXNzX3N0YXJ0X2RpbSArIHRoaXMuYWRqX3Zhcl9kb2ZzW2pdIC0xKS5hZGQobGFtX3Byb2QpO1xuICAgICAgICB9XG4gICAgICAgIG1lc3Nfc3RhcnRfZGltICs9IHRoaXMuYWRqX3Zhcl9kb2ZzW2pdO1xuICAgICAgfVxuXG4gICAgICAvLyBGb3IgZmFjdG9yIGNvbm5lY3RpbmcgMiB2YXJpYWJsZSBub2Rlc1xuICAgICAgaWYgKGkgPT0gMCkge1xuICAgICAgICB2YXIgZW8gPSBuZXcgbS5NYXRyaXhTdWJWaWV3KGV0YV9mYWN0b3IsIDAsIDEsIDAsIDApO1xuICAgICAgICB2YXIgZW5vID0gbmV3IG0uTWF0cml4U3ViVmlldyhldGFfZmFjdG9yLCAyLCAzLCAwLCAwKTtcbiAgICAgICAgdmFyIGxvbyA9IG5ldyBtLk1hdHJpeFN1YlZpZXcobGFtX2ZhY3RvciwgMCwgMSwgMCwgMSk7XG4gICAgICAgIHZhciBsbm9ubyA9IG5ldyBtLk1hdHJpeFN1YlZpZXcobGFtX2ZhY3RvciwgMiwgMywgMiwgMyk7XG4gICAgICAgIHZhciBsbm9vID0gbmV3IG0uTWF0cml4U3ViVmlldyhsYW1fZmFjdG9yLCAyLCAzLCAwLCAxKTtcbiAgICAgICAgdmFyIGxvbm8gPSBuZXcgbS5NYXRyaXhTdWJWaWV3KGxhbV9mYWN0b3IsIDAsIDEsIDIsIDMpO1xuICAgICAgfSBlbHNlIGlmIChpID09IDEpIHtcbiAgICAgICAgdmFyIGVubyA9IG5ldyBtLk1hdHJpeFN1YlZpZXcoZXRhX2ZhY3RvciwgMCwgMSwgMCwgMCk7XG4gICAgICAgIHZhciBlbyA9IG5ldyBtLk1hdHJpeFN1YlZpZXcoZXRhX2ZhY3RvciwgMiwgMywgMCwgMCk7XG4gICAgICAgIHZhciBsbm9ubyA9IG5ldyBtLk1hdHJpeFN1YlZpZXcobGFtX2ZhY3RvciwgMCwgMSwgMCwgMSk7XG4gICAgICAgIHZhciBsb28gPSBuZXcgbS5NYXRyaXhTdWJWaWV3KGxhbV9mYWN0b3IsIDIsIDMsIDIsIDMpO1xuICAgICAgICB2YXIgbG9ubyA9IG5ldyBtLk1hdHJpeFN1YlZpZXcobGFtX2ZhY3RvciwgMiwgMywgMCwgMSk7XG4gICAgICAgIHZhciBsbm9vID0gbmV3IG0uTWF0cml4U3ViVmlldyhsYW1fZmFjdG9yLCAwLCAxLCAyLCAzKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgbWVzcyA9IG5ldyBnYXVzcy5HYXVzc2lhbihbWzBdLFswXV0sIFtbMCwwXSxbMCwwXV0pO1xuICAgICAgY29uc3QgYmxvY2sgPSBsb25vLm1tdWwobS5pbnZlcnNlKGxub25vKSk7XG4gICAgICBtZXNzLmV0YSA9IG5ldyBtLk1hdHJpeChlby5zdWIoYmxvY2subW11bChlbm8pKSk7XG4gICAgICBtZXNzLmV0YS5tdWwoMS10aGlzLmV0YV9kYW1waW5nKTtcbiAgICAgIG1lc3MuZXRhLmFkZCh0aGlzLm1lc3NhZ2VzW2ldLmV0YS5tdWwodGhpcy5ldGFfZGFtcGluZykpO1xuICAgICAgbWVzcy5sYW0gPSBuZXcgbS5NYXRyaXgobG9vLnN1YihibG9jay5tbXVsKGxub28pKSk7XG4gICAgICB0aGlzLm1lc3NhZ2VzW2ldID0gbWVzcztcbiAgICB9XG5cbiAgfVxufVxuXG5cblxuXG5leHBvcnQgY2xhc3MgTGluZWFyRmFjdG9yIHtcbiAgY29uc3RydWN0b3IoZG9mcywgYWRqX3Zhcl9pZHMpIHtcbiAgICB0aGlzLmRvZnMgPSBkb2ZzO1xuICAgIHRoaXMuYWRqX3Zhcl9pZHMgPSBhZGpfdmFyX2lkcztcbiAgICB0aGlzLmFkal9iZWxpZWZzID0gW107XG4gICAgdGhpcy5hZGpfdmFyX2RvZnMgPSBbXTtcblxuICAgIC8vIFRvIGNvbXB1dGUgZmFjdG9yIHdoZW4gZmFjdG9yIGlzIGNvbWJpbmF0aW9uIG9mIG1hbnkgZmFjdG9yIHR5cGVzIChlLmcuIG1lYXN1cmVtZW50IGFuZCBzbW9vdGhuZXNzKVxuICAgIHRoaXMuamFjcyA9IFtdO1xuICAgIHRoaXMubWVhcyA9IFtdO1xuICAgIHRoaXMubGFtYmRhcyA9IFtdO1xuICAgIHRoaXMuZmFjdG9yID0gbmV3IGdhdXNzLkdhdXNzaWFuKG0uTWF0cml4Lnplcm9zKGRvZnMsIDEpLCBtLk1hdHJpeC56ZXJvcyhkb2ZzLCBkb2ZzKSk7XG5cbiAgICB0aGlzLm1lc3NhZ2VzID0gW107XG5cbiAgICB0aGlzLmV0YV9kYW1waW5nID0gMC47XG4gIH1cblxuICBjb21wdXRlX2ZhY3RvcigpIHtcbiAgICB0aGlzLmZhY3Rvci5ldGEgPSBtLk1hdHJpeC56ZXJvcyh0aGlzLmRvZnMsIDEpO1xuICAgIHRoaXMuZmFjdG9yLmxhbSA9IG0uTWF0cml4Lnplcm9zKHRoaXMuZG9mcywgdGhpcy5kb2ZzKTtcbiAgICBmb3IgKHZhciBpPTA7IGk8dGhpcy5qYWNzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLmZhY3Rvci5ldGEuYWRkKHRoaXMuamFjc1tpXS50cmFuc3Bvc2UoKS5tbXVsKHRoaXMubWVhc1tpXSkubXVsKHRoaXMubGFtYmRhc1tpXSkpO1xuICAgICAgdGhpcy5mYWN0b3IubGFtLmFkZCh0aGlzLmphY3NbaV0udHJhbnNwb3NlKCkubW11bCh0aGlzLmphY3NbaV0pLm11bCh0aGlzLmxhbWJkYXNbaV0pKTtcbiAgICB9XG4gIH1cblxuICBlbmVyZ3koKSB7XG4gICAgY29uc3QgY2FtX2Nvb3JkcyA9IHRoaXMuYWRqX2JlbGllZnNbMF0uZ2V0TWVhbigpO1xuICAgIGNvbnN0IGxta19jb29yZHMgPSB0aGlzLmFkal9iZWxpZWZzWzFdLmdldE1lYW4oKTtcbiAgICBsaW5wb2ludCA9IG5ldyBtLk1hdHJpeChbW2NhbV9jb29yZHMuZ2V0KDAsMCldLCBbY2FtX2Nvb3Jkcy5nZXQoMSwwKV0sIFtsbWtfY29vcmRzLmdldCgwLDApXSwgW2xta19jb29yZHMuZ2V0KDEsMCldXSk7XG5cbiAgICB2YXIgcmVzID0gdGhpcy5qYWNzWzBdLm1tdWwobGlucG9pbnQpLnN1Yih0aGlzLm1lYXNbMF0pO1xuICAgIHJldHVybiAwLjUgKiByZXMubW11bCh0aGlzLmxhbWJkYXNbMF0pLm1tdWwocmVzKTtcbiAgfVxuXG4gIHNlbmRfbWVzcygpIHtcbiAgICB2YXIgc3RhcnRfZGltID0gMDtcbiAgICBcbiAgICBmb3IgKHZhciBpPTA7IGk8dGhpcy5hZGpfdmFyX2lkcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGV0YV9mYWN0b3IgPSB0aGlzLmZhY3Rvci5ldGEuY2xvbmUoKTtcbiAgICAgIHZhciBsYW1fZmFjdG9yID0gdGhpcy5mYWN0b3IubGFtLmNsb25lKCk7XG5cbiAgICAgIC8vIFRha2UgcHJvZHVjdCB3aXRoIGluY29taW5nIG1lc3NhZ2VzLCBnZW5lcmFsIGZvciBmYWN0b3IgY29ubmVjdGVkIHRvIGFyYml0cmFyeSBudW0gdmFyIG5vZGVzXG4gICAgICB2YXIgbWVzc19zdGFydF9kaW0gPSAwO1xuICAgICAgZm9yICh2YXIgaj0wOyBqPHRoaXMuYWRqX3Zhcl9pZHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgaWYgKCEoaSA9PSBqKSkge1xuICAgICAgICAgIGNvbnN0IGV0YV9wcm9kID0gbS5NYXRyaXguc3ViKHRoaXMuYWRqX2JlbGllZnNbal0uZXRhLCB0aGlzLm1lc3NhZ2VzW2pdLmV0YSk7XG4gICAgICAgICAgY29uc3QgbGFtX3Byb2QgPSBtLk1hdHJpeC5zdWIodGhpcy5hZGpfYmVsaWVmc1tqXS5sYW0sIHRoaXMubWVzc2FnZXNbal0ubGFtKTtcbiAgICAgICAgICBuZXcgbS5NYXRyaXhTdWJWaWV3KGV0YV9mYWN0b3IsIG1lc3Nfc3RhcnRfZGltLCBtZXNzX3N0YXJ0X2RpbSArIHRoaXMuYWRqX3Zhcl9kb2ZzW2pdIC0xLCAwLCAwKS5hZGQoZXRhX3Byb2QpO1xuICAgICAgICAgIG5ldyBtLk1hdHJpeFN1YlZpZXcobGFtX2ZhY3RvciwgbWVzc19zdGFydF9kaW0sIG1lc3Nfc3RhcnRfZGltICsgdGhpcy5hZGpfdmFyX2RvZnNbal0gLTEsIG1lc3Nfc3RhcnRfZGltLCBtZXNzX3N0YXJ0X2RpbSArIHRoaXMuYWRqX3Zhcl9kb2ZzW2pdIC0xKS5hZGQobGFtX3Byb2QpO1xuICAgICAgICB9XG4gICAgICAgIG1lc3Nfc3RhcnRfZGltICs9IHRoaXMuYWRqX3Zhcl9kb2ZzW2pdO1xuICAgICAgfVxuXG4gICAgICAvLyBGb3IgZmFjdG9yIGNvbm5lY3RpbmcgMiB2YXJpYWJsZSBub2Rlc1xuICAgICAgaWYgKGkgPT0gMCkge1xuICAgICAgICB2YXIgZW8gPSBuZXcgbS5NYXRyaXhTdWJWaWV3KGV0YV9mYWN0b3IsIDAsIDEsIDAsIDApO1xuICAgICAgICB2YXIgZW5vID0gbmV3IG0uTWF0cml4U3ViVmlldyhldGFfZmFjdG9yLCAyLCAzLCAwLCAwKTtcbiAgICAgICAgdmFyIGxvbyA9IG5ldyBtLk1hdHJpeFN1YlZpZXcobGFtX2ZhY3RvciwgMCwgMSwgMCwgMSk7XG4gICAgICAgIHZhciBsbm9ubyA9IG5ldyBtLk1hdHJpeFN1YlZpZXcobGFtX2ZhY3RvciwgMiwgMywgMiwgMyk7XG4gICAgICAgIHZhciBsbm9vID0gbmV3IG0uTWF0cml4U3ViVmlldyhsYW1fZmFjdG9yLCAyLCAzLCAwLCAxKTtcbiAgICAgICAgdmFyIGxvbm8gPSBuZXcgbS5NYXRyaXhTdWJWaWV3KGxhbV9mYWN0b3IsIDAsIDEsIDIsIDMpO1xuICAgICAgfSBlbHNlIGlmIChpID09IDEpIHtcbiAgICAgICAgdmFyIGVubyA9IG5ldyBtLk1hdHJpeFN1YlZpZXcoZXRhX2ZhY3RvciwgMCwgMSwgMCwgMCk7XG4gICAgICAgIHZhciBlbyA9IG5ldyBtLk1hdHJpeFN1YlZpZXcoZXRhX2ZhY3RvciwgMiwgMywgMCwgMCk7XG4gICAgICAgIHZhciBsbm9ubyA9IG5ldyBtLk1hdHJpeFN1YlZpZXcobGFtX2ZhY3RvciwgMCwgMSwgMCwgMSk7XG4gICAgICAgIHZhciBsb28gPSBuZXcgbS5NYXRyaXhTdWJWaWV3KGxhbV9mYWN0b3IsIDIsIDMsIDIsIDMpO1xuICAgICAgICB2YXIgbG9ubyA9IG5ldyBtLk1hdHJpeFN1YlZpZXcobGFtX2ZhY3RvciwgMiwgMywgMCwgMSk7XG4gICAgICAgIHZhciBsbm9vID0gbmV3IG0uTWF0cml4U3ViVmlldyhsYW1fZmFjdG9yLCAwLCAxLCAyLCAzKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgbWVzcyA9IG5ldyBnYXVzcy5HYXVzc2lhbihbWzBdLFswXV0sIFtbMCwwXSxbMCwwXV0pO1xuICAgICAgY29uc3QgYmxvY2sgPSBsb25vLm1tdWwobS5pbnZlcnNlKGxub25vKSk7XG4gICAgICBtZXNzLmV0YSA9IG5ldyBtLk1hdHJpeChlby5zdWIoYmxvY2subW11bChlbm8pKSk7XG4gICAgICBtZXNzLmV0YS5tdWwoMS10aGlzLmV0YV9kYW1waW5nKTtcbiAgICAgIG1lc3MuZXRhLmFkZCh0aGlzLm1lc3NhZ2VzW2ldLmV0YS5tdWwodGhpcy5ldGFfZGFtcGluZykpO1xuICAgICAgbWVzcy5sYW0gPSBuZXcgbS5NYXRyaXgobG9vLnN1YihibG9jay5tbXVsKGxub28pKSk7XG4gICAgICB0aGlzLm1lc3NhZ2VzW2ldID0gbWVzcztcbiAgICB9XG5cbiAgfVxufVxuXG4iLCIvLyBOb24tbGluZWFyIG1lYXN1cmVtZW50IG9mIGJlYXJpbmcgYW5kIGRpc3RhbmNlIGJldHdlZW4gMkQgcG9pbnRzXG5cbmltcG9ydCAqIGFzIG0gZnJvbSAnbWwtbWF0cml4JztcblxuLy8gICAvLyBNZWFzdXJlbWVudCBmdW5jdGlvbiBmb3Igbm9ubGluZWFyIGJlYXJpbmcgYW5kIGRpc3RhbmNlIG1lYXN1cmVtZW50XG4vLyAgIGV4cG9ydCBmdW5jdGlvbiBtZWFzRm4oY2FtX2Nvb3JkcywgbG1rX2Nvb3Jkcywgb2Zmc2V0PU1hdGguUEkvNCkge1xuLy8gICAgICAgdmFyIGQ7XG4vLyAgICAgICB2YXIgdGhldGE7XG4vLyAgICAgICBpZiAoKGNhbV9jb29yZHMgaW5zdGFuY2VvZiBtLk1hdHJpeCkgJiYgKGxta19jb29yZHMgaW5zdGFuY2VvZiBtLk1hdHJpeCkpIHtcbi8vICAgICAgICAgICBkID0gTWF0aC5zcXJ0KE1hdGgucG93KGxta19jb29yZHMuZ2V0KDAsMCktY2FtX2Nvb3Jkcy5nZXQoMCwwKSwgMikgKyBNYXRoLnBvdyhsbWtfY29vcmRzLmdldCgxLDApLWNhbV9jb29yZHMuZ2V0KDEsMCksIDIpKTtcbi8vICAgICAgICAgICAvLyB2YXIgYXRhbl9hcmcgPSAobG1rX2Nvb3Jkcy5nZXQoMSwwKS1jYW1fY29vcmRzLmdldCgxLDApKSAvIChsbWtfY29vcmRzLmdldCgwLDApLWNhbV9jb29yZHMuZ2V0KDAsMCkpIC0gb2Zmc2V0O1xuLy8gICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGF0YW5fYXJnLCBvZmZzZXQsIChsbWtfY29vcmRzLmdldCgxLDApLWNhbV9jb29yZHMuZ2V0KDEsMCkpIC8gKGxta19jb29yZHMuZ2V0KDAsMCktY2FtX2Nvb3Jkcy5nZXQoMCwwKSkpXG4vLyAgICAgICAgICAgdGhldGEgPSBNYXRoLmF0YW4oKGxta19jb29yZHMuZ2V0KDEsMCktY2FtX2Nvb3Jkcy5nZXQoMSwwKSkgLyAobG1rX2Nvb3Jkcy5nZXQoMCwwKS1jYW1fY29vcmRzLmdldCgwLDApKSAtIG9mZnNldCk7XG4vLyAgICAgICB9IGVsc2V7XG4vLyAgICAgICAgICAgZCA9IE1hdGguc3FydChNYXRoLnBvdyhsbWtfY29vcmRzLngtY2FtX2Nvb3Jkcy54LCAyKSArIE1hdGgucG93KGxta19jb29yZHMueS1jYW1fY29vcmRzLnksIDIpKTtcbi8vICAgICAgICAgICB2YXIgYXRhbl9hcmcgPSAobG1rX2Nvb3Jkcy55IC0gY2FtX2Nvb3Jkcy55KSAvIChsbWtfY29vcmRzLnggLSBjYW1fY29vcmRzLngpIC0gb2Zmc2V0O1xuLy8gICAgICAgICAgIGNvbnNvbGUubG9nKGF0YW5fYXJnLCBvZmZzZXQsIChsbWtfY29vcmRzLnkgLSBjYW1fY29vcmRzLnkpIC8gKGxta19jb29yZHMueCAtIGNhbV9jb29yZHMueCkpO1xuLy8gICAgICAgICAgIHRoZXRhID0gTWF0aC5hdGFuKChsbWtfY29vcmRzLnkgLSBjYW1fY29vcmRzLnkpIC8gKGxta19jb29yZHMueCAtIGNhbV9jb29yZHMueCkgLSBvZmZzZXQpO1xuLy8gICAgICAgfVxuLy8gICAgICAgbGV0IG1lYXN1cmVtZW50ID0gbmV3IG0uTWF0cml4KFtbdGhldGFdLCBbZF1dKTtcbi8vICAgICAgIHJldHVybiBtZWFzdXJlbWVudDtcbi8vICAgfVxuXG5cbi8vICAgLy8gSmFjb2JpYW4gZnVuY3Rpb24gZm9yIG5vbmxpbmVhciBiZWFyaW5nIGFuZCBkaXN0YW5jZSBtZWFzdXJlbWVudFxuLy8gICBleHBvcnQgZnVuY3Rpb24gamFjRm4oY2FtX2Nvb3JkcywgbG1rX2Nvb3Jkcywgb2Zmc2V0PU1hdGguUEkvNCkge1xuLy8gICAgIHZhciB4MSA9IGNhbV9jb29yZHMuZ2V0KDAsMCk7XG4vLyAgICAgdmFyIHkxID0gY2FtX2Nvb3Jkcy5nZXQoMSwwKTtcbi8vICAgICB2YXIgeDIgPSBsbWtfY29vcmRzLmdldCgwLDApO1xuLy8gICAgIHZhciB5MiA9IGxta19jb29yZHMuZ2V0KDEsMCk7XG4vLyAgICAgdmFyIGQgPSBNYXRoLnNxcnQoTWF0aC5wb3coeDIteDEsIDIpICsgTWF0aC5wb3coeTIteTEsIDIpKTtcbi8vICAgICB2YXIgZHggPSB4MiAtIHgxO1xuLy8gICAgIHZhciBkeSA9IHkyIC0geTE7XG4vLyAgICAgLy8gdmFyIGRlbm9taW5hdG9yID0gTWF0aC5wb3coeDIteDEsIDIpICsgTWF0aC5wb3coeTIteTEsIDIpO1xuLy8gICAgIHZhciBqMDAgPSBkeSAvIChNYXRoLnBvdyhkeCwyKSAqICggMSArIE1hdGgucG93KGR5L2R4IC0gb2Zmc2V0LCAyKSkpO1xuLy8gICAgIHZhciBqMDEgPSAtMSAvIChkeCAqICggMSArIE1hdGgucG93KGR5L2R4IC0gb2Zmc2V0LCAyKSkpO1xuLy8gICAgIHZhciBqMDIgPSAtajAwO1xuLy8gICAgIHZhciBqMDMgPSAtajAxO1xuLy8gICAgIHZhciBqMTAgPSAtKHgyLXgxKSAvIGQ7XG4vLyAgICAgdmFyIGoxMSA9IC0oeTIteTEpIC8gZDtcbi8vICAgICB2YXIgajEyID0gKHgyLXgxKSAvIGQ7XG4vLyAgICAgdmFyIGoxMyA9ICh5Mi15MSkgLyBkO1xuXG4vLyAgICAgcmV0dXJuIG5ldyBtLk1hdHJpeChbW2owMCwgajAxLCBqMDIsIGowM10sIFtqMTAsIGoxMSwgajEyLCBqMTNdXSk7XG4vLyAgIH1cblxuLy8gZXhwb3J0IGZ1bmN0aW9uIGphY0ZuRmQoY2FtX2Nvb3JkcywgbG1rX2Nvb3Jkcywgb2Zmc2V0PU1hdGguUEkvNCkge1xuLy8gICB2YXIgZGVsdGEgPSAwLjAwMDAxO1xuLy8gICB2YXIgamFjX2ZkID0gbmV3IG0uTWF0cml4KFtbMCwwLDAsMF0sIFswLDAsMCwwXV0pO1xuXG4vLyAgICAgY29uc3QgbWVhcyA9IG1lYXNGbihjYW1fY29vcmRzLCBsbWtfY29vcmRzLCBvZmZzZXQpO1xuXG4vLyAgIGZvcih2YXIgYz0wOyBjPDI7IGMrKykge1xuLy8gICAgIHZhciBuZXdfY2FtX2Nvb3JkcyA9IGNhbV9jb29yZHMuY2xvbmUoKTtcbi8vICAgICB2YXIgYWRkaXRpb24gPSBtLk1hdHJpeC56ZXJvcygyLCAxKTtcbi8vICAgICBhZGRpdGlvbi5zZXQoYywgMCwgZGVsdGEpO1xuLy8gICAgIG5ld19jYW1fY29vcmRzLmFkZChhZGRpdGlvbik7XG4vLyAgICAgY29uc3QgbmV3X21lYXMgPSBtZWFzRm4obmV3X2NhbV9jb29yZHMsIGxta19jb29yZHMsIG9mZnNldCk7XG5cbi8vICAgICBqYWNfZmQuc2V0KDAsIGMsIChuZXdfbWVhcy5nZXQoMCwwKSAtIG1lYXMuZ2V0KDAsMCkpIC8gZGVsdGEpO1xuLy8gICAgIGphY19mZC5zZXQoMSwgYywgKG5ld19tZWFzLmdldCgxLDApIC0gbWVhcy5nZXQoMSwwKSkgLyBkZWx0YSk7XG4vLyAgIH1cblxuLy8gICBmb3IodmFyIGM9MDsgYzwyOyBjKyspIHtcbi8vICAgICB2YXIgbmV3X2xta19jb29yZHMgPSBsbWtfY29vcmRzLmNsb25lKCk7XG4vLyAgICAgdmFyIGFkZGl0aW9uID0gbS5NYXRyaXguemVyb3MoMiwgMSk7XG4vLyAgICAgYWRkaXRpb24uc2V0KGMsIDAsIGRlbHRhKTtcbi8vICAgICBuZXdfbG1rX2Nvb3Jkcy5hZGQoYWRkaXRpb24pO1xuLy8gICAgIGNvbnN0IG5ld19tZWFzID0gbWVhc0ZuKGNhbV9jb29yZHMsIG5ld19sbWtfY29vcmRzLCBvZmZzZXQpO1xuXG4vLyAgICAgamFjX2ZkLnNldCgwLCBjKzIsIChuZXdfbWVhcy5nZXQoMCwwKSAtIG1lYXMuZ2V0KDAsMCkpIC8gZGVsdGEpO1xuLy8gICAgIGphY19mZC5zZXQoMSwgYysyLCAobmV3X21lYXMuZ2V0KDEsMCkgLSBtZWFzLmdldCgxLDApKSAvIGRlbHRhKTtcbi8vICAgfVxuLy8gICByZXR1cm4gamFjX2ZkO1xuLy8gfVxuXG5cbi8vIGV4cG9ydCBmdW5jdGlvbiBjaGVja0phYyhjYW1fY29vcmRzLCBsbWtfY29vcmRzLCBvZmZzZXQ9TWF0aC5QSS80KSB7XG4vLyAgICAgdmFyIGphYyA9IGphY0ZuKGNhbV9jb29yZHMsIGxta19jb29yZHMsIG9mZnNldCk7XG4vLyAgICAgdmFyIGphY19mZCA9IGphY0ZuRmQoY2FtX2Nvb3JkcywgbG1rX2Nvb3Jkcywgb2Zmc2V0KTtcblxuLy8gICAgIHZhciBkaWZmID0gbS5NYXRyaXguc3ViKGphYywgamFjX2ZkKVxuLy8gICAgIGNvbnNvbGUubG9nKCdKYWNiaWFuIGNoZWNrIGF2IGRpZmZlcmVuY2UnLCBkaWZmLm5vcm0oKSk7XG4vLyB9XG5cblxuXG4vLyBNZWFzdXJlbWVudCBmdW5jdGlvbiBmb3Igbm9ubGluZWFyIGJlYXJpbmcgYW5kIGRpc3RhbmNlIG1lYXN1cmVtZW50XG5leHBvcnQgZnVuY3Rpb24gbWVhc0ZuUihjYW1fY29vcmRzLCBsbWtfY29vcmRzKSB7XG4gICAgdmFyIGQ7XG4gICAgdmFyIHRoZXRhO1xuICAgIGlmICgoY2FtX2Nvb3JkcyBpbnN0YW5jZW9mIG0uTWF0cml4KSAmJiAobG1rX2Nvb3JkcyBpbnN0YW5jZW9mIG0uTWF0cml4KSkge1xuICAgICAgICBkID0gTWF0aC5zcXJ0KE1hdGgucG93KGxta19jb29yZHMuZ2V0KDAsMCktY2FtX2Nvb3Jkcy5nZXQoMCwwKSwgMikgKyBNYXRoLnBvdyhsbWtfY29vcmRzLmdldCgxLDApLWNhbV9jb29yZHMuZ2V0KDEsMCksIDIpKTtcbiAgICAgICAgdGhldGEgPSBNYXRoLmF0YW4yKGxta19jb29yZHMuZ2V0KDEsMCktY2FtX2Nvb3Jkcy5nZXQoMSwwKSwgbG1rX2Nvb3Jkcy5nZXQoMCwwKS1jYW1fY29vcmRzLmdldCgwLDApKTtcbiAgICB9IGVsc2V7XG4gICAgICAgIGQgPSBNYXRoLnNxcnQoTWF0aC5wb3cobG1rX2Nvb3Jkcy54LWNhbV9jb29yZHMueCwgMikgKyBNYXRoLnBvdyhsbWtfY29vcmRzLnktY2FtX2Nvb3Jkcy55LCAyKSk7XG4gICAgICAgIHRoZXRhID0gTWF0aC5hdGFuMihsbWtfY29vcmRzLnkgLSBjYW1fY29vcmRzLnksIGxta19jb29yZHMueCAtIGNhbV9jb29yZHMueCk7XG4gICAgfVxuICAgIGxldCBtZWFzdXJlbWVudCA9IG5ldyBtLk1hdHJpeChbW3RoZXRhXSwgW2RdXSk7XG4gICAgcmV0dXJuIG1lYXN1cmVtZW50O1xufVxuXG5cbi8vIEphY29iaWFuIGZ1bmN0aW9uIGZvciBub25saW5lYXIgYmVhcmluZyBhbmQgZGlzdGFuY2UgbWVhc3VyZW1lbnRcbmV4cG9ydCBmdW5jdGlvbiBqYWNGblIoY2FtX2Nvb3JkcywgbG1rX2Nvb3Jkcykge1xuXHR2YXIgeDEgPSBjYW1fY29vcmRzLmdldCgwLDApO1xuXHR2YXIgeTEgPSBjYW1fY29vcmRzLmdldCgxLDApO1xuXHR2YXIgeDIgPSBsbWtfY29vcmRzLmdldCgwLDApO1xuXHR2YXIgeTIgPSBsbWtfY29vcmRzLmdldCgxLDApO1xuIFx0dmFyIGQgPSBNYXRoLnNxcnQoTWF0aC5wb3coeDIteDEsIDIpICsgTWF0aC5wb3coeTIteTEsIDIpKTtcblx0dmFyIGRlbm9taW5hdG9yID0gTWF0aC5wb3coeDIteDEsIDIpICsgTWF0aC5wb3coeTIteTEsIDIpO1xuICAgIHZhciBqMDAgPSAoeTIteTEpIC8gZGVub21pbmF0b3I7XG4gICAgdmFyIGowMSA9IC0oeDIteDEpIC8gZGVub21pbmF0b3I7XG4gICAgdmFyIGowMiA9IC0oeTIteTEpIC8gZGVub21pbmF0b3I7XG4gICAgdmFyIGowMyA9ICh4Mi14MSkgLyBkZW5vbWluYXRvcjtcblx0dmFyIGoxMCA9IC0oeDIteDEpIC8gZDtcblx0dmFyIGoxMSA9IC0oeTIteTEpIC8gZDtcblx0dmFyIGoxMiA9ICh4Mi14MSkgLyBkO1xuXHR2YXIgajEzID0gKHkyLXkxKSAvIGQ7XG5cblx0cmV0dXJuIG5ldyBtLk1hdHJpeChbW2owMCwgajAxLCBqMDIsIGowM10sIFtqMTAsIGoxMSwgajEyLCBqMTNdXSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtZWFzRm5MKGNhbV9jb29yZHMsIGxta19jb29yZHMpIHtcbiAgICB2YXIgZDtcbiAgICB2YXIgdGhldGE7XG4gICAgaWYgKChjYW1fY29vcmRzIGluc3RhbmNlb2YgbS5NYXRyaXgpICYmIChsbWtfY29vcmRzIGluc3RhbmNlb2YgbS5NYXRyaXgpKSB7XG4gICAgICAgIGQgPSBNYXRoLnNxcnQoTWF0aC5wb3cobG1rX2Nvb3Jkcy5nZXQoMCwwKS1jYW1fY29vcmRzLmdldCgwLDApLCAyKSArIE1hdGgucG93KGxta19jb29yZHMuZ2V0KDEsMCktY2FtX2Nvb3Jkcy5nZXQoMSwwKSwgMikpO1xuICAgICAgICB0aGV0YSA9IE1hdGguYXRhbjIobG1rX2Nvb3Jkcy5nZXQoMSwwKS1jYW1fY29vcmRzLmdldCgxLDApLCAtbG1rX2Nvb3Jkcy5nZXQoMCwwKStjYW1fY29vcmRzLmdldCgwLDApKTtcbiAgICB9IGVsc2V7XG4gICAgICAgIGQgPSBNYXRoLnNxcnQoTWF0aC5wb3cobG1rX2Nvb3Jkcy54LWNhbV9jb29yZHMueCwgMikgKyBNYXRoLnBvdyhsbWtfY29vcmRzLnktY2FtX2Nvb3Jkcy55LCAyKSk7XG4gICAgICAgIHRoZXRhID0gTWF0aC5hdGFuMihsbWtfY29vcmRzLnkgLSBjYW1fY29vcmRzLnksIC1sbWtfY29vcmRzLnggKyBjYW1fY29vcmRzLngpO1xuICAgIH1cbiAgICBsZXQgbWVhc3VyZW1lbnQgPSBuZXcgbS5NYXRyaXgoW1t0aGV0YV0sIFtkXV0pO1xuICAgIHJldHVybiBtZWFzdXJlbWVudDtcbn1cblxuXG4vLyBKYWNvYmlhbiBmdW5jdGlvbiBmb3Igbm9ubGluZWFyIGJlYXJpbmcgYW5kIGRpc3RhbmNlIG1lYXN1cmVtZW50XG5leHBvcnQgZnVuY3Rpb24gamFjRm5MKGNhbV9jb29yZHMsIGxta19jb29yZHMpIHtcbiAgICB2YXIgeDEgPSBjYW1fY29vcmRzLmdldCgwLDApO1xuICAgIHZhciB5MSA9IGNhbV9jb29yZHMuZ2V0KDEsMCk7XG4gICAgdmFyIHgyID0gbG1rX2Nvb3Jkcy5nZXQoMCwwKTtcbiAgICB2YXIgeTIgPSBsbWtfY29vcmRzLmdldCgxLDApO1xuICAgIHZhciBkID0gTWF0aC5zcXJ0KE1hdGgucG93KHgyLXgxLCAyKSArIE1hdGgucG93KHkyLXkxLCAyKSk7XG4gICAgdmFyIGRlbm9taW5hdG9yID0gTWF0aC5wb3coeDIteDEsIDIpICsgTWF0aC5wb3coeTIteTEsIDIpO1xuICAgIHZhciBqMDAgPSAtKHkyLXkxKSAvIGRlbm9taW5hdG9yO1xuICAgIHZhciBqMDEgPSAoeDIteDEpIC8gZGVub21pbmF0b3I7XG4gICAgdmFyIGowMiA9ICh5Mi15MSkgLyBkZW5vbWluYXRvcjtcbiAgICB2YXIgajAzID0gLSh4Mi14MSkgLyBkZW5vbWluYXRvcjtcbiAgICB2YXIgajEwID0gLSh4Mi14MSkgLyBkO1xuICAgIHZhciBqMTEgPSAtKHkyLXkxKSAvIGQ7XG4gICAgdmFyIGoxMiA9ICh4Mi14MSkgLyBkO1xuICAgIHZhciBqMTMgPSAoeTIteTEpIC8gZDtcblxuICAgIHJldHVybiBuZXcgbS5NYXRyaXgoW1tqMDAsIGowMSwgajAyLCBqMDNdLCBbajEwLCBqMTEsIGoxMiwgajEzXV0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gamFjRm5GZChjYW1fY29vcmRzLCBsbWtfY29vcmRzLCBtZWFzRm4pIHtcblx0dmFyIGRlbHRhID0gMC4wMDAwMTtcblx0dmFyIGphY19mZCA9IG5ldyBtLk1hdHJpeChbWzAsMCwwLDBdLCBbMCwwLDAsMF1dKTtcblxuICAgIGNvbnN0IG1lYXMgPSBtZWFzRm4oY2FtX2Nvb3JkcywgbG1rX2Nvb3Jkcyk7XG5cblx0Zm9yKHZhciBjPTA7IGM8MjsgYysrKSB7XG5cdFx0dmFyIG5ld19jYW1fY29vcmRzID0gY2FtX2Nvb3Jkcy5jbG9uZSgpO1xuXHRcdHZhciBhZGRpdGlvbiA9IG0uTWF0cml4Lnplcm9zKDIsIDEpO1xuXHRcdGFkZGl0aW9uLnNldChjLCAwLCBkZWx0YSk7XG5cdFx0bmV3X2NhbV9jb29yZHMuYWRkKGFkZGl0aW9uKTtcbiAgICBjb25zdCBuZXdfbWVhcyA9IG1lYXNGbihuZXdfY2FtX2Nvb3JkcywgbG1rX2Nvb3Jkcyk7XG5cbiAgICBqYWNfZmQuc2V0KDAsIGMsIChuZXdfbWVhcy5nZXQoMCwwKSAtIG1lYXMuZ2V0KDAsMCkpIC8gZGVsdGEpO1xuICAgIGphY19mZC5zZXQoMSwgYywgKG5ld19tZWFzLmdldCgxLDApIC0gbWVhcy5nZXQoMSwwKSkgLyBkZWx0YSk7XG4gIH1cblxuXHRmb3IodmFyIGM9MDsgYzwyOyBjKyspIHtcblx0XHR2YXIgbmV3X2xta19jb29yZHMgPSBsbWtfY29vcmRzLmNsb25lKCk7XG5cdFx0dmFyIGFkZGl0aW9uID0gbS5NYXRyaXguemVyb3MoMiwgMSk7XG5cdFx0YWRkaXRpb24uc2V0KGMsIDAsIGRlbHRhKTtcblx0XHRuZXdfbG1rX2Nvb3Jkcy5hZGQoYWRkaXRpb24pO1xuICAgIGNvbnN0IG5ld19tZWFzID0gbWVhc0ZuKGNhbV9jb29yZHMsIG5ld19sbWtfY29vcmRzKTtcblxuICAgIGphY19mZC5zZXQoMCwgYysyLCAobmV3X21lYXMuZ2V0KDAsMCkgLSBtZWFzLmdldCgwLDApKSAvIGRlbHRhKTtcbiAgICBqYWNfZmQuc2V0KDEsIGMrMiwgKG5ld19tZWFzLmdldCgxLDApIC0gbWVhcy5nZXQoMSwwKSkgLyBkZWx0YSk7XG4gIH1cbiAgcmV0dXJuIGphY19mZDtcbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gY2hlY2tKYWMoY2FtX2Nvb3JkcywgbG1rX2Nvb3JkcywgbWVhc0ZuLCBqYWNGbikge1xuICAgIHZhciBqYWMgPSBqYWNGbihjYW1fY29vcmRzLCBsbWtfY29vcmRzKTtcbiAgICB2YXIgamFjX2ZkID0gamFjRm5GZChjYW1fY29vcmRzLCBsbWtfY29vcmRzLCBtZWFzRm4pO1xuXG4gICAgdmFyIGRpZmYgPSBtLk1hdHJpeC5zdWIoamFjLCBqYWNfZmQpXG4gICAgY29uc29sZS5sb2coJ0phY2JpYW4gY2hlY2sgYXYgZGlmZmVyZW5jZScsIGRpZmYubm9ybSgpKTtcbn1cbiIsImltcG9ydCB7IG9uRGVzdHJveSB9IGZyb20gJ3N2ZWx0ZSc7XG5cbmV4cG9ydCBmdW5jdGlvbiBvbkludGVydmFsKGNhbGxiYWNrLCBtaWxsaXNlY29uZHMpIHtcblx0Y29uc3QgaW50ZXJ2YWwgPSBzZXRJbnRlcnZhbChjYWxsYmFjaywgbWlsbGlzZWNvbmRzKTtcblxuXHRvbkRlc3Ryb3koKCkgPT4ge1xuXHRcdGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWwpO1xuXHR9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRvZ2dsZShib29sKSB7XG4gIGJvb2wgPSAhYm9vbDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJhbmdlKG4pe1xuICByZXR1cm4gQXJyYXkobikuZmlsbCgpLm1hcCgoXywgaSkgPT4gaSk7XG59XG5cbiIsIjxzY3JpcHQ+XG4gIGltcG9ydCB7IG9uTW91bnQgfSBmcm9tICdzdmVsdGUnO1xuXG4gIGltcG9ydCAqIGFzIG0gZnJvbSAnbWwtbWF0cml4JztcbiAgaW1wb3J0ICogYXMgZ2F1c3MgZnJvbSAnLi4vZ2F1c3NpYW4nO1xuICBpbXBvcnQgKiBhcyBnYnAgZnJvbSAnLi4vZ2JwL2dicDJkLmpzJztcbiAgaW1wb3J0ICogYXMgbmxtIGZyb20gJy4uL2dicC9ub25saW5lYXJfbWVhc19mbi5qcyc7XG5cbiAgaW1wb3J0IHsgb25JbnRlcnZhbCwgcGFubmFibGUgfSBmcm9tICcuLi91dGlsLmpzJztcblxuICAvLyBWaXN1YWwgdmFyYWlibGVzXG4gIGxldCBjYW52YXM7XG4gIGxldCB2YXJfbm9kZV9yYWRpdXMgPSA5O1xuXG4gIGxldCB0aGVuOyAvLyB0aW1lIG9mIHN0YXJ0IG9mIHZpc1xuICBsZXQgc3RhcnRlZCA9IGZhbHNlO1xuXG4gIC8vIE1lYXN1cmVtZW50IG1vZGVsIHN0ZFxuICBsZXQgbG1rX3ByaW9yX3N0ZCA9IDEwMDtcbiAgbGV0IGNhbV9wcmlvcl9zdGQgPSAxO1xuICBsZXQgZGlzdGFuY2Vfc3RkID0gMjUwO1xuICBsZXQgYW5nbGVfc3RkID0gMC4wNTtcblxuICAvLyBHQlAgdmFyaWFibGVzXG4gIGxldCBncmFwaDtcbiAgbGV0IGxta19sb2MgPSB7eDogNjAwLCB5OiAyMDB9O1xuICBsZXQgY2FtX2xvY3MgPSBbe3g6MjAwLCB5OjY0MH0sIHt4OjEwMDAsIHk6NjQwfV1cblxuICBsZXQgc3luY19vbiA9IGZhbHNlO1xuICBsZXQgbl9pdGVycyA9IDA7XG4gIGxldCBpdGVyc19wZXJfc2VjID0gNjA7XG5cbiAgbGV0IGRvd24gPSBbZmFsc2UsIGZhbHNlXTtcblxuICBvbk1vdW50KCgpID0+IHtcbiAgICBjb25zdCBjdHggPSBjYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpO1xuICAgIGN0eC5saW5lV2lkdGggPSA0O1xuXG4gICAgZ3JhcGggPSBuZXcgZ2JwLkZhY3RvckdyYXBoKCk7XG5cdCAgZ2VuR3JhcGgoKTtcblxuXHQvLyBubG0uY2hlY2tKYWMoZ3JhcGgucG9zZV9ub2Rlc1swXS5iZWxpZWYuZ2V0TWVhbigpLCBncmFwaC5sbWtfbm9kZXNbMF0uYmVsaWVmLmdldE1lYW4oKSk7XG5cbiAgICB0aGVuID0gRGF0ZS5ub3coKTtcbiAgfSk7XG5cblx0b25JbnRlcnZhbCgoKSA9PiB1cGRhdGVWaXMoKSwgNjApO1xuXG4vLyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqIERyYXdpbmcgZnVuY3Rpb25zICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcblxuICBmdW5jdGlvbiBkcmF3TGluZSgpIHtcbiAgICBjb25zdCBjdHggPSBjYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpO1xuICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICBjdHgubW92ZVRvKDAsIDY0MCk7XG4gICAgY3R4LmxpbmVUbyhjYW52YXMud2lkdGgsIDY0MCk7XG4gICAgY3R4LnN0cm9rZVN0eWxlID0gJyMyRjRGNEYnO1xuICAgIGN0eC5zdHJva2UoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRyYXdDYW1zKCkge1xuICAgIGNvbnN0IGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIik7XG4gICAgZm9yKHZhciBjPTA7IGM8MjsgYysrKSB7XG4gICAgXHR2YXIgeCA9IGNhbV9sb2NzW2NdLng7XG4gICAgXHR2YXIgeSA9IGNhbV9sb2NzW2NdLnk7XG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcblx0ICAgIGN0eC5tb3ZlVG8oeCwgeSszMCk7XG5cdCAgICBjdHgubGluZVRvKHgrMjAsIHktMjApO1xuICBcdCAgICBjdHgubGluZVRvKHgtMjAsIHktMjApO1xuIFx0ICAgIGN0eC5maWxsKCk7XG5cdCAgICBjdHguZmlsbFN0eWxlID0gXCIjMDA5NUREXCI7XG5cdCAgICBjdHguZmlsbCgpO1xuXHQgICAgY3R4LmNsb3NlUGF0aCgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGRyYXdMYW5kbWFyaygpIHtcbiAgICBjb25zdCBjdHggPSBjYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpO1xuICAgIGNvbnN0IG1lYW4gPSBncmFwaC5sbWtfbm9kZXNbMF0uYmVsaWVmLmdldE1lYW4oKTtcbiAgICB2YXIgeCA9IG1lYW4uZ2V0KDAsIDApO1xuICAgIHZhciB5ID0gbWVhbi5nZXQoMSwgMCk7XG5cbiAgICAvLyBEcmF3IG1lYW5zXG4gICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgIGN0eC5hcmMoeCwgeSwgdmFyX25vZGVfcmFkaXVzLCAwLCBNYXRoLlBJKjIpO1xuICAgIGN0eC5maWxsU3R5bGUgPSBcInllbGxvd1wiO1xuICAgIGN0eC5maWxsKCk7XG4gICAgY3R4LmNsb3NlUGF0aCgpO1xuXG4gICAgdmFyIHZhbHVlcyA9IGdyYXBoLmxta19ub2Rlc1swXS5iZWxpZWYuZ2V0Q292RWxsaXBzZSgpO1xuICAgIHZhciBlaWdfdmFsdWVzID0gdmFsdWVzWzBdO1xuICAgIHZhciBhbmdsZSA9IHZhbHVlc1sxXTtcblxuICAgIC8vIERyYXcgdmFyaWFuY2VzXG4gICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgIGN0eC5lbGxpcHNlKHgsIHksIE1hdGguc3FydChlaWdfdmFsdWVzWzBdKSwgTWF0aC5zcXJ0KGVpZ192YWx1ZXNbMV0pLCBhbmdsZSwgMCwgMipNYXRoLlBJKVxuICAgIGN0eC5zdHJva2VTdHlsZSA9IFwieWVsbG93XCI7XG4gICAgY3R4LnN0cm9rZSgpO1xuICB9XG5cbiAgZnVuY3Rpb24gZHJhd0xta1ByaW9yKCkge1xuICAgIGNvbnN0IGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIik7XG4gICAgY29uc3QgbWVhbiA9IGdyYXBoLmxta19ub2Rlc1swXS5wcmlvci5nZXRNZWFuKCk7XG4gICAgdmFyIHggPSBtZWFuLmdldCgwLCAwKTtcbiAgICB2YXIgeSA9IG1lYW4uZ2V0KDEsIDApO1xuICAgIHZhciB2YWx1ZXMgPSBncmFwaC5sbWtfbm9kZXNbMF0ucHJpb3IuZ2V0Q292RWxsaXBzZSgpO1xuICAgIHZhciBlaWdfdmFsdWVzID0gdmFsdWVzWzBdO1xuICAgIHZhciBhbmdsZSA9IHZhbHVlc1sxXTtcblxuICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICBjdHguZWxsaXBzZSh4LCB5LCBNYXRoLnNxcnQoZWlnX3ZhbHVlc1swXSksIE1hdGguc3FydChlaWdfdmFsdWVzWzFdKSwgYW5nbGUsIDAsIDIqTWF0aC5QSSlcbiAgICBjdHguc3Ryb2tlU3R5bGUgPSBcImJsdWVcIjtcbiAgICBjdHguc3Ryb2tlKCk7XG4gIH1cblxuICBmdW5jdGlvbiBkcmF3TWVzc2FnZXMoKSB7XG4gICAgY29uc3QgY3R4ID0gY2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcbiAgICBmb3IodmFyIGM9MDsgYzwyOyBjKyspIHtcbiAgICBcdGNvbnN0IG1lYW4gPSBncmFwaC5mYWN0b3JzW2NdLm1lc3NhZ2VzWzFdLmdldE1lYW4oKTtcblx0ICAgIHZhciB4ID0gbWVhbi5nZXQoMCwgMCk7XG5cdCAgICB2YXIgeSA9IG1lYW4uZ2V0KDEsIDApO1xuXHQgICAgdmFyIHZhbHVlcyA9IGdyYXBoLmZhY3RvcnNbY10ubWVzc2FnZXNbMV0uZ2V0Q292RWxsaXBzZSgpO1xuXHQgICAgdmFyIGVpZ192YWx1ZXMgPSB2YWx1ZXNbMF07XG5cdCAgICB2YXIgYW5nbGUgPSB2YWx1ZXNbMV07XG5cblx0ICAgIC8vIERyYXcgdmFyaWFuY2UgZWxsaXBzZVxuXHQgICAgY3R4LmJlZ2luUGF0aCgpO1xuXHQgICAgY3R4LmVsbGlwc2UoeCwgeSwgTWF0aC5zcXJ0KGVpZ192YWx1ZXNbMF0pLCBNYXRoLnNxcnQoZWlnX3ZhbHVlc1sxXSksIGFuZ2xlLCAwLCAyKk1hdGguUEkpXG5cdCAgICBjdHguc3Ryb2tlU3R5bGUgPSBcInJlZFwiO1xuXHQgICAgY3R4LnN0cm9rZSgpO1xuICAgIH1cblxuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlVmlzKCkge1xuICAgIGNvbnN0IGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIik7XG4gICAgY3R4LmNsZWFyUmVjdCgwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpO1xuXG4gICAgdmFyIGZwc0ludGVydmFsID0gMTAwMCAvIGl0ZXJzX3Blcl9zZWM7XG4gICAgdmFyIG5vdyA9IERhdGUubm93KCk7XG4gICAgdmFyIGVsYXBzZWQgPSBub3cgLSB0aGVuO1xuICAgIGlmIChlbGFwc2VkID4gZnBzSW50ZXJ2YWwpIHtcbiAgICAgIHRoZW4gPSBub3cgLSAoZWxhcHNlZCAlIGZwc0ludGVydmFsKTtcbiAgICAgIGlmIChzeW5jX29uKSB7XG4gICAgICAgIGdyYXBoLnJlbGluZWFyaXNlKCk7XG4gICAgICAgIGdyYXBoLnN5bmNfaXRlcigpO1xuICAgICAgICBuX2l0ZXJzKys7XG4gICAgICB9IFxuICAgIH1cblxuXHQgIHVwZGF0ZV9sYW5kbWFya19wcmlvcl9zdGQoKTtcbiAgICBcbiAgICBpZiAoc3luY19vbikge1xuXHQgICAgZHJhd01lc3NhZ2VzKCk7XG4gICAgICB1cGRhdGVfbGFtYmRhcygpO1xuICAgIH1cbiAgICBkcmF3TGluZSgpO1xuICAgIGRyYXdMbWtQcmlvcigpO1xuICAgIGRyYXdDYW1zKCk7XG4gICAgZHJhd0xhbmRtYXJrKCk7XG5cbiAgICB2YXIgcmVjdCA9IGNhbnZhcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICBpZiAoIShzdGFydGVkKSAmJiAocmVjdC50b3AgPCB3aW5kb3cuaW5uZXJIZWlnaHQpKSB7XG4gICAgICBzeW5jX29uID0gdHJ1ZTtcbiAgICAgIHN0YXJ0ZWQgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIC8vICoqKioqKioqKioqKioqKioqKioqKioqIEZhY3RvciBncmFwaCBmdW5jdGlvbnMgKioqKioqKioqKioqKioqKioqKioqKioqKiBcblxuICBmdW5jdGlvbiBnZW5HcmFwaCgpIHtcbiAgICBjb25zdCBsbWtfbGFtYmRhID0gMSAvIE1hdGgucG93KGxta19wcmlvcl9zdGQsIDIpO1xuXHQgIGNvbnN0IGNhbV9sYW1iZGEgPSAxIC8gTWF0aC5wb3coY2FtX3ByaW9yX3N0ZCwgMik7XG5cbiAgXHRsZXQgZmlyc3RfdmFyX25vZGUgPSBuZXcgZ2JwLlZhcmlhYmxlTm9kZSgyLCAwKTtcbiAgICBmaXJzdF92YXJfbm9kZS5wcmlvci5sYW0gPSBuZXcgbS5NYXRyaXgoW1tsbWtfbGFtYmRhLCAwXSwgWzAsIGxta19sYW1iZGFdXSk7XG4gICAgZmlyc3RfdmFyX25vZGUucHJpb3IuZXRhID0gZmlyc3RfdmFyX25vZGUucHJpb3IubGFtLm1tdWwobmV3IG0uTWF0cml4KFtbbG1rX2xvYy54XSwgW2xta19sb2MueV1dKSk7XG4gICAgZmlyc3RfdmFyX25vZGUudXBkYXRlX2JlbGllZigpO1xuICAgIGdyYXBoLmxta19ub2Rlcy5wdXNoKGZpcnN0X3Zhcl9ub2RlKTtcblxuICAgIGxldCBjYW0xID0gbmV3IGdicC5WYXJpYWJsZU5vZGUoMiwgMSk7XG4gICAgY2FtMS5wcmlvci5sYW0gPSBuZXcgbS5NYXRyaXgoW1tjYW1fbGFtYmRhLCAwXSwgWzAsIGNhbV9sYW1iZGFdXSk7XG4gICAgY2FtMS5wcmlvci5ldGEgPSBjYW0xLnByaW9yLmxhbS5tbXVsKG5ldyBtLk1hdHJpeChbW2NhbV9sb2NzWzBdLnhdLCBbY2FtX2xvY3NbMF0ueV1dKSk7XG4gICAgY2FtMS51cGRhdGVfYmVsaWVmKCk7XG4gICAgZ3JhcGgucG9zZV9ub2Rlcy5wdXNoKGNhbTEpO1xuXG4gICAgbGV0IGNhbTIgPSBuZXcgZ2JwLlZhcmlhYmxlTm9kZSgyLCAyKTtcbiAgICBjYW0yLnByaW9yLmxhbSA9IG5ldyBtLk1hdHJpeChbW2NhbV9sYW1iZGEsIDBdLCBbMCwgY2FtX2xhbWJkYV1dKTtcbiAgICBjYW0yLnByaW9yLmV0YSA9IGNhbTIucHJpb3IubGFtLm1tdWwobmV3IG0uTWF0cml4KFtbY2FtX2xvY3NbMV0ueF0sIFtjYW1fbG9jc1sxXS55XV0pKTtcbiAgICBjYW0yLnVwZGF0ZV9iZWxpZWYoKTtcbiAgICBncmFwaC5wb3NlX25vZGVzLnB1c2goY2FtMik7XG5cbiAgICB2YXIgbGFtYmRhID0gbmV3IG0uTWF0cml4KFtbMSAvIE1hdGgucG93KGFuZ2xlX3N0ZCwgMiksIDBdLCBbMCwgMSAvIE1hdGgucG93KGRpc3RhbmNlX3N0ZCwgMildXSk7XG4gICAgZm9yKHZhciBjPTA7IGM8MjsgYysrKSB7XG4gICAgICAgIHZhciBkeCA9IGxta19sb2MueCAtIGNhbV9sb2NzW2NdLng7XG4gICAgICAgIGNvbnN0IG5ld19mYWN0b3IgPSBuZXcgZ2JwLk5vbkxpbmVhckZhY3Rvcig0LCBbYysxLCAwXSwgbmxtLm1lYXNGblIsIG5sbS5qYWNGblIpO1xuICAgICAgICBpZiAoZHggPCAwKXtcbiAgICAgICAgICBuZXdfZmFjdG9yLm1lYXNGbiA9IG5sbS5tZWFzRm5MO1xuICAgICAgICAgIG5ld19mYWN0b3IuamFjRm4gPSBubG0uamFjRm5MO1xuICAgICAgICB9XG4gICAgICAgIG5ld19mYWN0b3IubWVhcyA9IG5ld19mYWN0b3IubWVhc0ZuKGNhbV9sb2NzW2NdLCBsbWtfbG9jKTtcblx0ICAgICAgbmV3X2ZhY3Rvci5sYW1iZGEgPSBsYW1iZGE7XG5cbiAgICAgICAgbmV3X2ZhY3Rvci5hZGpfdmFyX2RvZnMucHVzaCgyKTtcbiAgICAgICAgbmV3X2ZhY3Rvci5hZGpfdmFyX2RvZnMucHVzaCgyKTtcblxuICAgICAgICBuZXdfZmFjdG9yLmFkal9iZWxpZWZzLnB1c2goZ3JhcGgucG9zZV9ub2Rlc1tjXS5iZWxpZWYpO1xuICAgICAgICBuZXdfZmFjdG9yLmFkal9iZWxpZWZzLnB1c2goZ3JhcGgubG1rX25vZGVzWzBdLmJlbGllZik7XG5cbiAgICAgICAgbmV3X2ZhY3Rvci5tZXNzYWdlcy5wdXNoKG5ldyBnYXVzcy5HYXVzc2lhbihbWzBdLFswXV0sIFtbMCwwXSxbMCwwXV0pKTtcbiAgICAgICAgbmV3X2ZhY3Rvci5tZXNzYWdlcy5wdXNoKG5ldyBnYXVzcy5HYXVzc2lhbihbWzBdLFswXV0sIFtbMCwwXSxbMCwwXV0pKTtcbiAgICAgICAgZ3JhcGguZmFjdG9ycy5wdXNoKG5ld19mYWN0b3IpO1xuXG4gICAgICAgIGdyYXBoLnBvc2Vfbm9kZXNbY10uYWRqX2ZhY3RvcnMucHVzaChuZXdfZmFjdG9yKTtcbiAgICAgICAgZ3JhcGgubG1rX25vZGVzWzBdLmFkal9mYWN0b3JzLnB1c2gobmV3X2ZhY3Rvcik7XG4gICAgfVxuICAgIGdyYXBoLnJlbGluZWFyaXNlKCk7XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGVDYW1Qb3NpdGlvbihjYW1faXgpIHtcbiAgICAvLyBVcGRhdGUgcHJpb3JcbiAgICBncmFwaC5wb3NlX25vZGVzW2NhbV9peF0ucHJpb3IuZXRhID0gZ3JhcGgucG9zZV9ub2Rlc1tjYW1faXhdLnByaW9yLmxhbS5tbXVsKG5ldyBtLk1hdHJpeChbW2NhbV9sb2NzW2NhbV9peF0ueF0sIFtjYW1fbG9jc1tjYW1faXhdLnldXSkpO1xuICAgIGdyYXBoLnBvc2Vfbm9kZXNbY2FtX2l4XS51cGRhdGVfYmVsaWVmKCk7XG5cbiAgICAvLyBVcGRhdGUgbWVhc3VyZW1lbnRcbiAgICBjb25zdCBtZWFzdXJlbWVudCA9IGdyYXBoLmZhY3RvcnNbY2FtX2l4XS5tZWFzRm4oY2FtX2xvY3NbY2FtX2l4XSwgbG1rX2xvYyk7XG4gICAgZ3JhcGguZmFjdG9yc1tjYW1faXhdLm1lYXMgPSBtZWFzdXJlbWVudDtcbiAgICBncmFwaC5mYWN0b3JzW2NhbV9peF0uY29tcHV0ZV9mYWN0b3IoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZV9sYW1iZGFzKCkge1xuICAgIGZvcih2YXIgYz0wOyBjPDI7IGMrKykge1xuICAgICAgZ3JhcGguZmFjdG9yc1tjXS5sYW1iZGEgPSBuZXcgbS5NYXRyaXgoW1sxIC8gTWF0aC5wb3coYW5nbGVfc3RkLCAyKSwgMF0sIFswLCAxIC8gTWF0aC5wb3coZGlzdGFuY2Vfc3RkLCAyKV1dKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGVfbGFuZG1hcmtfcHJpb3Jfc3RkKCkge1xuICAgIHZhciBsbWtfbGFtYmRhID0gMSAvIE1hdGgucG93KGxta19wcmlvcl9zdGQsIDIpO1xuICAgIGdyYXBoLmxta19ub2Rlc1swXS5wcmlvci5sYW0gPSBuZXcgbS5NYXRyaXgoW1tsbWtfbGFtYmRhLCAwXSwgWzAsIGxta19sYW1iZGFdXSk7XG4gICAgZ3JhcGgubG1rX25vZGVzWzBdLnByaW9yLmV0YSA9IGdyYXBoLmxta19ub2Rlc1swXS5wcmlvci5sYW0ubW11bChuZXcgbS5NYXRyaXgoW1tsbWtfbG9jLnhdLCBbbG1rX2xvYy55XV0pKTtcbiAgfVxuXG5cbiAgLy8gKioqKioqKioqKioqKioqKioqKioqKioqIEV2ZW50IGhhbmRsZXJzICoqKioqKioqKioqKioqKioqKioqKioqKipcbiAgZnVuY3Rpb24gaGFuZGxlTW91c2VNb3ZlKGUpIHtcbiAgICBjb25zdCBjdHggPSBjYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpO1xuXHRcdHZhciByZWN0ID0gY2FudmFzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIHZhciBtb3VzZVggPSBjYW52YXMud2lkdGggKiAoZS5jbGllbnRYIC0gcmVjdC5sZWZ0KSAvIHJlY3Qud2lkdGg7XG4gICAgdmFyIG1vdXNlWSA9IGNhbnZhcy5oZWlnaHQgKiAoZS5jbGllbnRZIC0gcmVjdC50b3ApIC8gcmVjdC5oZWlnaHQ7XG5cbiAgICB2YXIgb24gPSBmYWxzZVxuICAgIGZvcih2YXIgYz0wOyBjPDI7IGMrKykge1xuICAgIFx0dmFyIHggPSBjYW1fbG9jc1tjXS54O1xuICAgIFx0dmFyIHkgPSBjYW1fbG9jc1tjXS55O1xuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG5cdCAgICBjdHgubW92ZVRvKHgsIHkrMzApO1xuXHQgICAgY3R4LmxpbmVUbyh4KzIwLCB5LTIwKTtcbiAgXHQgICAgY3R4LmxpbmVUbyh4LTIwLCB5LTIwKTtcblx0ICAgIGN0eC5jbG9zZVBhdGgoKTtcblxuXHQgICAgaWYgKGN0eC5pc1BvaW50SW5QYXRoKG1vdXNlWCwgbW91c2VZKSkge1xuXHQgICAgXHRvbiA9IHRydWU7XG5cdCAgICB9XG5cdFx0fVxuXG5cdFx0aWYgKG9uKXsgXG5cdFx0ICBcdGNhbnZhcy5zdHlsZS5jdXJzb3IgPSBcInBvaW50ZXJcIjtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Y2FudmFzLnN0eWxlLmN1cnNvciA9IFwiZGVmYXVsdFwiO1xuXHRcdH1cblx0ICAgIGlmIChkb3duWzBdKSB7XG5cdCAgICBcdGNhbV9sb2NzWzBdLnggPSBtb3VzZVg7XG5cdCAgICBcdHVwZGF0ZUNhbVBvc2l0aW9uKDApXG5cdCAgICB9IGVsc2UgaWYgKGRvd25bMV0pIHtcblx0ICAgIFx0Y2FtX2xvY3NbMV0ueCA9IG1vdXNlWDtcblx0ICAgIFx0dXBkYXRlQ2FtUG9zaXRpb24oMSlcblx0ICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZU1vdXNlRG93bihlKSB7XG4gICAgY29uc3QgY3R4ID0gY2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcbiAgICB2YXIgcmVjdCA9IGNhbnZhcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICB2YXIgbW91c2VYID0gY2FudmFzLndpZHRoICogKGUuY2xpZW50WCAtIHJlY3QubGVmdCkgLyByZWN0LndpZHRoO1xuICAgIHZhciBtb3VzZVkgPSBjYW52YXMuaGVpZ2h0ICogKGUuY2xpZW50WSAtIHJlY3QudG9wKSAvIHJlY3QuaGVpZ2h0O1xuXG4gICAgZm9yKHZhciBjPTA7IGM8MjsgYysrKSB7XG4gICAgXHR2YXIgeCA9IGNhbV9sb2NzW2NdLng7XG4gICAgXHR2YXIgeSA9IGNhbV9sb2NzW2NdLnk7XG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcblx0ICAgIGN0eC5tb3ZlVG8oeCwgeSszMCk7XG5cdCAgICBjdHgubGluZVRvKHgrMjAsIHktMjApO1xuICBcdCAgICBjdHgubGluZVRvKHgtMjAsIHktMjApO1xuXHQgICAgY3R4LmNsb3NlUGF0aCgpO1xuXG5cdCAgICBpZiAoY3R4LmlzUG9pbnRJblBhdGgobW91c2VYLCBtb3VzZVkpKSB7XG5cdCAgICBcdGRvd25bY10gPSB0cnVlO1xuXHQgICAgfVxuXHRcdH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZU1vdXNlVXAoZSkge1xuICBcdGRvd25bMF0gPSBmYWxzZTtcbiAgXHRkb3duWzFdID0gZmFsc2U7XG4gIH1cblxuPC9zY3JpcHQ+XG5cbjxkaXYgY2xhc3M9XCJkZW1vLWNvbnRhaW5lclwiPlxuXHQ8ZGl2IGlkPVwiZ2JwLWNvbnRhaW5lclwiPlxuXHRcdDxjYW52YXMgYmluZDp0aGlzPXtjYW52YXN9IHdpZHRoPXsxMjAwfSBoZWlnaHQ9ezgwMH0gb246bW91c2Vkb3duPXtoYW5kbGVNb3VzZURvd259IG9uOm1vdXNlbW92ZT17aGFuZGxlTW91c2VNb3ZlfSBvbjptb3VzZXVwPXtoYW5kbGVNb3VzZVVwfT48L2NhbnZhcz5cblx0ICAgIDxkaXYgY2xhc3M9XCJidXR0b25zLXBhbmVsXCI+XG5cblx0ICAgIDwvZGl2PlxuXHQ8L2Rpdj5cbiAgICBcbiAgICA8ZGl2IGlkPVwic2V0dGluZ3MtcGFuZWxcIj5cbiAgICBcdDxiPlN0YW5kYXJkIGRldmlhdGlvbiBvZiBub2lzZSBpbiBHYXVzc2lhbiBtZWFzdXJlbWVudCBtb2RlbHM6PGJyPjwvYj5cblxuICAgXHQgICAgRGlzdGFuY2UgZmFjdG9ycywgJnNpZ21hID0gPGI+e2Rpc3RhbmNlX3N0ZH08L2I+XG5cdFx0PGlucHV0IHR5cGU9XCJyYW5nZVwiIG1pbj1cIjEwXCIgbWF4PVwiNDAwXCIgYmluZDp2YWx1ZT17ZGlzdGFuY2Vfc3RkfT48YnI+IFxuICAgXHQgICAgQW5nbGUgZmFjdG9ycywgJnNpZ21hID0gPGI+e2FuZ2xlX3N0ZH08L2I+XG5cdFx0PGlucHV0IHR5cGU9XCJyYW5nZVwiIG1pbj1cIjAuMDAxXCIgbWF4PVwiMC4yXCIgc3RlcD1cIjAuMDAxXCIgYmluZDp2YWx1ZT17YW5nbGVfc3RkfT48YnI+XG5cdFx0UHJpb3IgZmFjdG9yLCAmc2lnbWEgPSA8Yj57bG1rX3ByaW9yX3N0ZH08L2I+XG5cdFx0PGlucHV0IHR5cGU9XCJyYW5nZVwiIG1pbj1cIjFcIiBtYXg9XCIyMDBcIiBiaW5kOnZhbHVlPXtsbWtfcHJpb3Jfc3RkfT48YnI+XG5cblx0XHQ8YnI+XG5cdFx0PGRpdiBpZD1cImxlZnQtZGVtby10aXBcIj5cblx0ICAgICAgICA8aW1nIGlkPVwicG9pbnRlclwiIHNyYz1cImltYWdlcy9wb2ludGVyLnN2Z1wiIGFsdD1cInBvaW50ZXJcIiwgc3R5bGU9XCJ3aWR0aDogNDBweFwiPlxuXHQgICAgICAgIDxkaXYgaWQ9XCJoaW50XCI+XG5cdCAgICAgICAgICBcdERyYWcgdG8gbW92ZSB0aGUgY2FtZXJhcy4gICAgICAgICAgICAgICAgXG5cdCAgICAgICAgPC9kaXY+XG5cdCAgICA8L2Rpdj5cblx0PC9kaXY+XG48L2Rpdj5cbiIsImltcG9ydCB7IGN1YmljSW5PdXQsIGxpbmVhciwgY3ViaWNPdXQgfSBmcm9tICcuLi9lYXNpbmcnO1xuaW1wb3J0IHsgaXNfZnVuY3Rpb24sIGFzc2lnbiB9IGZyb20gJy4uL2ludGVybmFsJztcblxuLyohICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbkNvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2VcclxudGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGVcclxuTGljZW5zZSBhdCBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuXHJcblRISVMgQ09ERSBJUyBQUk9WSURFRCBPTiBBTiAqQVMgSVMqIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcclxuS0lORCwgRUlUSEVSIEVYUFJFU1MgT1IgSU1QTElFRCwgSU5DTFVESU5HIFdJVEhPVVQgTElNSVRBVElPTiBBTlkgSU1QTElFRFxyXG5XQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgVElUTEUsIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLFxyXG5NRVJDSEFOVEFCTElUWSBPUiBOT04tSU5GUklOR0VNRU5ULlxyXG5cclxuU2VlIHRoZSBBcGFjaGUgVmVyc2lvbiAyLjAgTGljZW5zZSBmb3Igc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zXHJcbmFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cclxuXHJcbmZ1bmN0aW9uIF9fcmVzdChzLCBlKSB7XHJcbiAgICB2YXIgdCA9IHt9O1xyXG4gICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApICYmIGUuaW5kZXhPZihwKSA8IDApXHJcbiAgICAgICAgdFtwXSA9IHNbcF07XHJcbiAgICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIHAgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHMpOyBpIDwgcC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoZS5pbmRleE9mKHBbaV0pIDwgMCAmJiBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwocywgcFtpXSkpXHJcbiAgICAgICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcclxuICAgICAgICB9XHJcbiAgICByZXR1cm4gdDtcclxufVxuXG5mdW5jdGlvbiBibHVyKG5vZGUsIHsgZGVsYXkgPSAwLCBkdXJhdGlvbiA9IDQwMCwgZWFzaW5nID0gY3ViaWNJbk91dCwgYW1vdW50ID0gNSwgb3BhY2l0eSA9IDAgfSkge1xuICAgIGNvbnN0IHN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShub2RlKTtcbiAgICBjb25zdCB0YXJnZXRfb3BhY2l0eSA9ICtzdHlsZS5vcGFjaXR5O1xuICAgIGNvbnN0IGYgPSBzdHlsZS5maWx0ZXIgPT09ICdub25lJyA/ICcnIDogc3R5bGUuZmlsdGVyO1xuICAgIGNvbnN0IG9kID0gdGFyZ2V0X29wYWNpdHkgKiAoMSAtIG9wYWNpdHkpO1xuICAgIHJldHVybiB7XG4gICAgICAgIGRlbGF5LFxuICAgICAgICBkdXJhdGlvbixcbiAgICAgICAgZWFzaW5nLFxuICAgICAgICBjc3M6IChfdCwgdSkgPT4gYG9wYWNpdHk6ICR7dGFyZ2V0X29wYWNpdHkgLSAob2QgKiB1KX07IGZpbHRlcjogJHtmfSBibHVyKCR7dSAqIGFtb3VudH1weCk7YFxuICAgIH07XG59XG5mdW5jdGlvbiBmYWRlKG5vZGUsIHsgZGVsYXkgPSAwLCBkdXJhdGlvbiA9IDQwMCwgZWFzaW5nID0gbGluZWFyIH0pIHtcbiAgICBjb25zdCBvID0gK2dldENvbXB1dGVkU3R5bGUobm9kZSkub3BhY2l0eTtcbiAgICByZXR1cm4ge1xuICAgICAgICBkZWxheSxcbiAgICAgICAgZHVyYXRpb24sXG4gICAgICAgIGVhc2luZyxcbiAgICAgICAgY3NzOiB0ID0+IGBvcGFjaXR5OiAke3QgKiBvfWBcbiAgICB9O1xufVxuZnVuY3Rpb24gZmx5KG5vZGUsIHsgZGVsYXkgPSAwLCBkdXJhdGlvbiA9IDQwMCwgZWFzaW5nID0gY3ViaWNPdXQsIHggPSAwLCB5ID0gMCwgb3BhY2l0eSA9IDAgfSkge1xuICAgIGNvbnN0IHN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShub2RlKTtcbiAgICBjb25zdCB0YXJnZXRfb3BhY2l0eSA9ICtzdHlsZS5vcGFjaXR5O1xuICAgIGNvbnN0IHRyYW5zZm9ybSA9IHN0eWxlLnRyYW5zZm9ybSA9PT0gJ25vbmUnID8gJycgOiBzdHlsZS50cmFuc2Zvcm07XG4gICAgY29uc3Qgb2QgPSB0YXJnZXRfb3BhY2l0eSAqICgxIC0gb3BhY2l0eSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZGVsYXksXG4gICAgICAgIGR1cmF0aW9uLFxuICAgICAgICBlYXNpbmcsXG4gICAgICAgIGNzczogKHQsIHUpID0+IGBcblx0XHRcdHRyYW5zZm9ybTogJHt0cmFuc2Zvcm19IHRyYW5zbGF0ZSgkeygxIC0gdCkgKiB4fXB4LCAkeygxIC0gdCkgKiB5fXB4KTtcblx0XHRcdG9wYWNpdHk6ICR7dGFyZ2V0X29wYWNpdHkgLSAob2QgKiB1KX1gXG4gICAgfTtcbn1cbmZ1bmN0aW9uIHNsaWRlKG5vZGUsIHsgZGVsYXkgPSAwLCBkdXJhdGlvbiA9IDQwMCwgZWFzaW5nID0gY3ViaWNPdXQgfSkge1xuICAgIGNvbnN0IHN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShub2RlKTtcbiAgICBjb25zdCBvcGFjaXR5ID0gK3N0eWxlLm9wYWNpdHk7XG4gICAgY29uc3QgaGVpZ2h0ID0gcGFyc2VGbG9hdChzdHlsZS5oZWlnaHQpO1xuICAgIGNvbnN0IHBhZGRpbmdfdG9wID0gcGFyc2VGbG9hdChzdHlsZS5wYWRkaW5nVG9wKTtcbiAgICBjb25zdCBwYWRkaW5nX2JvdHRvbSA9IHBhcnNlRmxvYXQoc3R5bGUucGFkZGluZ0JvdHRvbSk7XG4gICAgY29uc3QgbWFyZ2luX3RvcCA9IHBhcnNlRmxvYXQoc3R5bGUubWFyZ2luVG9wKTtcbiAgICBjb25zdCBtYXJnaW5fYm90dG9tID0gcGFyc2VGbG9hdChzdHlsZS5tYXJnaW5Cb3R0b20pO1xuICAgIGNvbnN0IGJvcmRlcl90b3Bfd2lkdGggPSBwYXJzZUZsb2F0KHN0eWxlLmJvcmRlclRvcFdpZHRoKTtcbiAgICBjb25zdCBib3JkZXJfYm90dG9tX3dpZHRoID0gcGFyc2VGbG9hdChzdHlsZS5ib3JkZXJCb3R0b21XaWR0aCk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZGVsYXksXG4gICAgICAgIGR1cmF0aW9uLFxuICAgICAgICBlYXNpbmcsXG4gICAgICAgIGNzczogdCA9PiBgb3ZlcmZsb3c6IGhpZGRlbjtgICtcbiAgICAgICAgICAgIGBvcGFjaXR5OiAke01hdGgubWluKHQgKiAyMCwgMSkgKiBvcGFjaXR5fTtgICtcbiAgICAgICAgICAgIGBoZWlnaHQ6ICR7dCAqIGhlaWdodH1weDtgICtcbiAgICAgICAgICAgIGBwYWRkaW5nLXRvcDogJHt0ICogcGFkZGluZ190b3B9cHg7YCArXG4gICAgICAgICAgICBgcGFkZGluZy1ib3R0b206ICR7dCAqIHBhZGRpbmdfYm90dG9tfXB4O2AgK1xuICAgICAgICAgICAgYG1hcmdpbi10b3A6ICR7dCAqIG1hcmdpbl90b3B9cHg7YCArXG4gICAgICAgICAgICBgbWFyZ2luLWJvdHRvbTogJHt0ICogbWFyZ2luX2JvdHRvbX1weDtgICtcbiAgICAgICAgICAgIGBib3JkZXItdG9wLXdpZHRoOiAke3QgKiBib3JkZXJfdG9wX3dpZHRofXB4O2AgK1xuICAgICAgICAgICAgYGJvcmRlci1ib3R0b20td2lkdGg6ICR7dCAqIGJvcmRlcl9ib3R0b21fd2lkdGh9cHg7YFxuICAgIH07XG59XG5mdW5jdGlvbiBzY2FsZShub2RlLCB7IGRlbGF5ID0gMCwgZHVyYXRpb24gPSA0MDAsIGVhc2luZyA9IGN1YmljT3V0LCBzdGFydCA9IDAsIG9wYWNpdHkgPSAwIH0pIHtcbiAgICBjb25zdCBzdHlsZSA9IGdldENvbXB1dGVkU3R5bGUobm9kZSk7XG4gICAgY29uc3QgdGFyZ2V0X29wYWNpdHkgPSArc3R5bGUub3BhY2l0eTtcbiAgICBjb25zdCB0cmFuc2Zvcm0gPSBzdHlsZS50cmFuc2Zvcm0gPT09ICdub25lJyA/ICcnIDogc3R5bGUudHJhbnNmb3JtO1xuICAgIGNvbnN0IHNkID0gMSAtIHN0YXJ0O1xuICAgIGNvbnN0IG9kID0gdGFyZ2V0X29wYWNpdHkgKiAoMSAtIG9wYWNpdHkpO1xuICAgIHJldHVybiB7XG4gICAgICAgIGRlbGF5LFxuICAgICAgICBkdXJhdGlvbixcbiAgICAgICAgZWFzaW5nLFxuICAgICAgICBjc3M6IChfdCwgdSkgPT4gYFxuXHRcdFx0dHJhbnNmb3JtOiAke3RyYW5zZm9ybX0gc2NhbGUoJHsxIC0gKHNkICogdSl9KTtcblx0XHRcdG9wYWNpdHk6ICR7dGFyZ2V0X29wYWNpdHkgLSAob2QgKiB1KX1cblx0XHRgXG4gICAgfTtcbn1cbmZ1bmN0aW9uIGRyYXcobm9kZSwgeyBkZWxheSA9IDAsIHNwZWVkLCBkdXJhdGlvbiwgZWFzaW5nID0gY3ViaWNJbk91dCB9KSB7XG4gICAgY29uc3QgbGVuID0gbm9kZS5nZXRUb3RhbExlbmd0aCgpO1xuICAgIGlmIChkdXJhdGlvbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmIChzcGVlZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBkdXJhdGlvbiA9IDgwMDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGR1cmF0aW9uID0gbGVuIC8gc3BlZWQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIGR1cmF0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGR1cmF0aW9uID0gZHVyYXRpb24obGVuKTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZGVsYXksXG4gICAgICAgIGR1cmF0aW9uLFxuICAgICAgICBlYXNpbmcsXG4gICAgICAgIGNzczogKHQsIHUpID0+IGBzdHJva2UtZGFzaGFycmF5OiAke3QgKiBsZW59ICR7dSAqIGxlbn1gXG4gICAgfTtcbn1cbmZ1bmN0aW9uIGNyb3NzZmFkZShfYSkge1xuICAgIHZhciB7IGZhbGxiYWNrIH0gPSBfYSwgZGVmYXVsdHMgPSBfX3Jlc3QoX2EsIFtcImZhbGxiYWNrXCJdKTtcbiAgICBjb25zdCB0b19yZWNlaXZlID0gbmV3IE1hcCgpO1xuICAgIGNvbnN0IHRvX3NlbmQgPSBuZXcgTWFwKCk7XG4gICAgZnVuY3Rpb24gY3Jvc3NmYWRlKGZyb20sIG5vZGUsIHBhcmFtcykge1xuICAgICAgICBjb25zdCB7IGRlbGF5ID0gMCwgZHVyYXRpb24gPSBkID0+IE1hdGguc3FydChkKSAqIDMwLCBlYXNpbmcgPSBjdWJpY091dCB9ID0gYXNzaWduKGFzc2lnbih7fSwgZGVmYXVsdHMpLCBwYXJhbXMpO1xuICAgICAgICBjb25zdCB0byA9IG5vZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIGNvbnN0IGR4ID0gZnJvbS5sZWZ0IC0gdG8ubGVmdDtcbiAgICAgICAgY29uc3QgZHkgPSBmcm9tLnRvcCAtIHRvLnRvcDtcbiAgICAgICAgY29uc3QgZHcgPSBmcm9tLndpZHRoIC8gdG8ud2lkdGg7XG4gICAgICAgIGNvbnN0IGRoID0gZnJvbS5oZWlnaHQgLyB0by5oZWlnaHQ7XG4gICAgICAgIGNvbnN0IGQgPSBNYXRoLnNxcnQoZHggKiBkeCArIGR5ICogZHkpO1xuICAgICAgICBjb25zdCBzdHlsZSA9IGdldENvbXB1dGVkU3R5bGUobm9kZSk7XG4gICAgICAgIGNvbnN0IHRyYW5zZm9ybSA9IHN0eWxlLnRyYW5zZm9ybSA9PT0gJ25vbmUnID8gJycgOiBzdHlsZS50cmFuc2Zvcm07XG4gICAgICAgIGNvbnN0IG9wYWNpdHkgPSArc3R5bGUub3BhY2l0eTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGRlbGF5LFxuICAgICAgICAgICAgZHVyYXRpb246IGlzX2Z1bmN0aW9uKGR1cmF0aW9uKSA/IGR1cmF0aW9uKGQpIDogZHVyYXRpb24sXG4gICAgICAgICAgICBlYXNpbmcsXG4gICAgICAgICAgICBjc3M6ICh0LCB1KSA9PiBgXG5cdFx0XHRcdG9wYWNpdHk6ICR7dCAqIG9wYWNpdHl9O1xuXHRcdFx0XHR0cmFuc2Zvcm0tb3JpZ2luOiB0b3AgbGVmdDtcblx0XHRcdFx0dHJhbnNmb3JtOiAke3RyYW5zZm9ybX0gdHJhbnNsYXRlKCR7dSAqIGR4fXB4LCR7dSAqIGR5fXB4KSBzY2FsZSgke3QgKyAoMSAtIHQpICogZHd9LCAke3QgKyAoMSAtIHQpICogZGh9KTtcblx0XHRcdGBcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZnVuY3Rpb24gdHJhbnNpdGlvbihpdGVtcywgY291bnRlcnBhcnRzLCBpbnRybykge1xuICAgICAgICByZXR1cm4gKG5vZGUsIHBhcmFtcykgPT4ge1xuICAgICAgICAgICAgaXRlbXMuc2V0KHBhcmFtcy5rZXksIHtcbiAgICAgICAgICAgICAgICByZWN0OiBub2RlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGNvdW50ZXJwYXJ0cy5oYXMocGFyYW1zLmtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgeyByZWN0IH0gPSBjb3VudGVycGFydHMuZ2V0KHBhcmFtcy5rZXkpO1xuICAgICAgICAgICAgICAgICAgICBjb3VudGVycGFydHMuZGVsZXRlKHBhcmFtcy5rZXkpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3Jvc3NmYWRlKHJlY3QsIG5vZGUsIHBhcmFtcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIGlmIHRoZSBub2RlIGlzIGRpc2FwcGVhcmluZyBhbHRvZ2V0aGVyXG4gICAgICAgICAgICAgICAgLy8gKGkuZS4gd2Fzbid0IGNsYWltZWQgYnkgdGhlIG90aGVyIGxpc3QpXG4gICAgICAgICAgICAgICAgLy8gdGhlbiB3ZSBuZWVkIHRvIHN1cHBseSBhbiBvdXRyb1xuICAgICAgICAgICAgICAgIGl0ZW1zLmRlbGV0ZShwYXJhbXMua2V5KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsbGJhY2sgJiYgZmFsbGJhY2sobm9kZSwgcGFyYW1zLCBpbnRybyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gW1xuICAgICAgICB0cmFuc2l0aW9uKHRvX3NlbmQsIHRvX3JlY2VpdmUsIGZhbHNlKSxcbiAgICAgICAgdHJhbnNpdGlvbih0b19yZWNlaXZlLCB0b19zZW5kLCB0cnVlKVxuICAgIF07XG59XG5cbmV4cG9ydCB7IGJsdXIsIGNyb3NzZmFkZSwgZHJhdywgZmFkZSwgZmx5LCBzY2FsZSwgc2xpZGUgfTtcbiIsImltcG9ydCAqIGFzIG0gZnJvbSAnbWwtbWF0cml4JztcbmltcG9ydCAqIGFzIGdhdXNzIGZyb20gJy4uL2dhdXNzaWFuJztcblxuZXhwb3J0IGNsYXNzIEZhY3RvckdyYXBoIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy52YXJfbm9kZXMgPSBbXTtcbiAgICB0aGlzLmZhY3RvcnMgPSBbXTtcblxuICAgIHRoaXMuc3dlZXBfaXggPSAwO1xuICAgIHRoaXMuZm9yd2FyZCA9IDE7XG4gICAgdGhpcy5wYXN0X2ZpcnN0X21lYXMgPSAwO1xuICB9XG5cbiAgdXBkYXRlX2JlbGllZnMoKSB7XG4gICAgZm9yKHZhciBjPTA7IGM8dGhpcy52YXJfbm9kZXMubGVuZ3RoOyBjKyspIHtcbiAgICAgIHRoaXMudmFyX25vZGVzW2NdLnVwZGF0ZV9iZWxpZWYoKTtcbiAgICB9XG4gIH1cblxuICBzZW5kX21lc3NhZ2VzKCkge1xuICAgIGZvcih2YXIgYz0wOyBjPHRoaXMuZmFjdG9ycy5sZW5ndGg7IGMrKykge1xuICAgICAgdGhpcy5mYWN0b3JzW2NdLnNlbmRfYm90aF9tZXNzKCk7XG4gICAgfVxuXG4gIH1cblxuICBzeW5jX2l0ZXIoKSB7XG4gICAgdGhpcy5zZW5kX21lc3NhZ2VzKCk7XG4gICAgdGhpcy51cGRhdGVfYmVsaWVmcygpO1xuICB9XG5cbiAgYWRkTGluZWFyTWVhc3VyZW1lbnQobWVhcywgeF9tZWFzLCBhZGpfdmFyX2lkcyxcbiAgICAgICAgICAgICAgICAgICAgeF92YXJfbGhzLCB4X3Zhcl9yaHMsIG1lYXNfc3RkKSB7XG4gICAgdmFyIGdhbW1hID0gKHhfbWVhcyAtIHhfdmFyX2xocykgLyAoeF92YXJfcmhzIC0geF92YXJfbGhzKTtcbiAgICBjb25zdCBtZWFzX2phYyA9IG5ldyBtLk1hdHJpeChbWzEgLSBnYW1tYSwgZ2FtbWFdXSk7XG5cbiAgICB0aGlzLmZhY3RvcnNbYWRqX3Zhcl9pZHNbMF1dLmphY3MucHVzaChtZWFzX2phYyk7XG4gICAgdGhpcy5mYWN0b3JzW2Fkal92YXJfaWRzWzBdXS5tZWFzLnB1c2gobWVhcyk7XG4gICAgdGhpcy5mYWN0b3JzW2Fkal92YXJfaWRzWzBdXS5sYW1iZGFzLnB1c2goMSAvIE1hdGgucG93KG1lYXNfc3RkLCAyKSk7XG4gICAgdGhpcy5mYWN0b3JzW2Fkal92YXJfaWRzWzBdXS5jb21wdXRlX2ZhY3RvcigpO1xuICB9XG5cbiAgY29tcHV0ZU1BUCgpIHtcbiAgICB2YXIgdG90X2RvZnMgPSAwO1xuICAgIGZvcih2YXIgYz0wOyBjPHRoaXMudmFyX25vZGVzLmxlbmd0aDsgYysrKSB7XG4gICAgICB0b3RfZG9mcyArPSB0aGlzLnZhcl9ub2Rlc1tjXS5kb2ZzO1xuICAgIH1cblxuICAgIGNvbnN0IGJpZ0V0YSA9IG0uTWF0cml4Lnplcm9zKHRvdF9kb2ZzLCAxKTtcbiAgICBjb25zdCBiaWdMYW0gPSBtLk1hdHJpeC56ZXJvcyh0b3RfZG9mcywgdG90X2RvZnMpO1xuXG4gICAgZm9yKHZhciBjPTA7IGM8dGhpcy5mYWN0b3JzLmxlbmd0aDsgYysrKSB7XG4gICAgICB2YXIgaXggPSB0aGlzLmZhY3RvcnNbY10uYWRqX3Zhcl9pZHNbMF07XG4gICAgICBiaWdFdGEuc2V0KGl4LCAwLCBiaWdFdGEuZ2V0KGl4LCAwKSArIHRoaXMuZmFjdG9yc1tjXS5mYWN0b3IuZXRhLmdldCgwLCAwKSk7XG4gICAgICBiaWdFdGEuc2V0KGl4KzEsIDAsIGJpZ0V0YS5nZXQoaXgrMSwgMCkgKyB0aGlzLmZhY3RvcnNbY10uZmFjdG9yLmV0YS5nZXQoMSwgMCkpO1xuICAgICAgYmlnTGFtLnNldChpeCwgaXgsIGJpZ0xhbS5nZXQoaXgsIGl4KSArIHRoaXMuZmFjdG9yc1tjXS5mYWN0b3IubGFtLmdldCgwLCAwKSk7XG4gICAgICBiaWdMYW0uc2V0KGl4KzEsIGl4LCBiaWdMYW0uZ2V0KGl4KzEsIGl4KSArIHRoaXMuZmFjdG9yc1tjXS5mYWN0b3IubGFtLmdldCgxLCAwKSk7XG4gICAgICBiaWdMYW0uc2V0KGl4LCBpeCsxLCBiaWdMYW0uZ2V0KGl4LCBpeCsxKSArIHRoaXMuZmFjdG9yc1tjXS5mYWN0b3IubGFtLmdldCgwLCAxKSk7XG4gICAgICBiaWdMYW0uc2V0KGl4KzEsIGl4KzEsIGJpZ0xhbS5nZXQoaXgrMSwgaXgrMSkgKyB0aGlzLmZhY3RvcnNbY10uZmFjdG9yLmxhbS5nZXQoMSwgMSkpO1xuICAgIH1cblxuXG4gICAgY29uc3QgYmlnQ292ID0gbS5pbnZlcnNlKGJpZ0xhbSk7XG4gICAgY29uc3QgbWVhbnMgPSBiaWdDb3YubW11bChiaWdFdGEpO1xuICAgIHJldHVybiBbbWVhbnMsIGJpZ0Nvdl07XG4gIH1cblxuICBjb21wYXJlX3RvX01BUCgpIHtcbiAgICB2YXIgZ2JwX21lYW5zID0gW107XG4gICAgZm9yKHZhciBjPTA7IGM8dGhpcy52YXJfbm9kZXMubGVuZ3RoOyBjKyspIHtcbiAgICAgIGdicF9tZWFucy5wdXNoKHRoaXMudmFyX25vZGVzW2NdLmJlbGllZi5nZXRNZWFuKCkuZ2V0KDAsMCkpO1xuICAgIH1cblxuICAgIGNvbnN0IG1lYW5zID0gbmV3IG0uTWF0cml4KFtnYnBfbWVhbnNdKTtcbiAgICBjb25zdCBtYXAgPSB0aGlzLmNvbXB1dGVNQVAoKVswXTtcbiAgICB2YXIgYXZfZGlmZiA9IChtYXAuc3ViKG1lYW5zLnRyYW5zcG9zZSgpKSkubm9ybSgpO1xuICAgIHJldHVybiBhdl9kaWZmO1xuICB9XG5cbiAgc3dlZXBfc3RlcCgpIHtcbiAgICAvLyBQcmVwYXJlIGZvciBuZXh0IHN0ZXBcbiAgICB2YXIgbmV4dF9peCA9IDA7XG4gICAgdmFyIG5leHRfZm9yd2FyZCA9IHRoaXMuZm9yd2FyZDtcbiAgICBpZiAodGhpcy5mb3J3YXJkKSB7XG4gICAgICBuZXh0X2l4ID0gdGhpcy5zd2VlcF9peCArIDE7XG4gICAgICBpZiAodGhpcy5zd2VlcF9peCA9PSB0aGlzLnZhcl9ub2Rlcy5sZW5ndGggLSAyKSB7XG4gICAgICAgIG5leHRfZm9yd2FyZCA9IDA7XG4gICAgICB9IFxuICAgIH0gZWxzZSB7XG4gICAgICBuZXh0X2l4ID0gdGhpcy5zd2VlcF9peCAtIDE7XG4gICAgICBpZiAodGhpcy5zd2VlcF9peCA9PSAxKSB7XG4gICAgICAgIG5leHRfZm9yd2FyZCA9IDE7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuZm9yd2FyZCkge1xuICAgICAgaWYgKHRoaXMuZmFjdG9yc1t0aGlzLnN3ZWVwX2l4XS5tZWFzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgdGhpcy5wYXN0X2ZpcnN0X21lYXMgPSAxO1xuICAgICAgfVxuICAgICAgdGhpcy5mYWN0b3JzW3RoaXMuc3dlZXBfaXhdLnNlbmRfbWVzcyh0aGlzLmZvcndhcmQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmZhY3RvcnNbbmV4dF9peF0uc2VuZF9tZXNzKHRoaXMuZm9yd2FyZCk7XG4gICAgfVxuICAgIGlmICh0aGlzLnBhc3RfZmlyc3RfbWVhcykge1xuICAgICAgdGhpcy52YXJfbm9kZXNbbmV4dF9peF0udXBkYXRlX2JlbGllZigpO1xuICAgIH1cblxuICAgIHRoaXMuc3dlZXBfaXggPSBuZXh0X2l4O1xuICAgIHRoaXMuZm9yd2FyZCA9IG5leHRfZm9yd2FyZDtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgVmFyaWFibGVOb2RlIHtcbiAgY29uc3RydWN0b3IoZG9mcywgdmFyX2lkKSB7XG4gICAgdGhpcy5kb2ZzID0gZG9mcztcbiAgICB0aGlzLnZhcl9pZCA9IHZhcl9pZDtcbiAgICB0aGlzLmJlbGllZiA9IG5ldyBnYXVzcy5HYXVzc2lhbihtLk1hdHJpeC56ZXJvcyhkb2ZzLCAxKSwgbS5NYXRyaXguemVyb3MoZG9mcywgZG9mcykpO1xuXG4gICAgdGhpcy5hZGpfZmFjdG9ycyA9IFtdO1xuICB9XG5cbiAgdXBkYXRlX2JlbGllZigpIHtcbiAgICB0aGlzLmJlbGllZi5ldGEgPSBtLk1hdHJpeC56ZXJvcyh0aGlzLmRvZnMsIDEpO1xuICAgIHRoaXMuYmVsaWVmLmxhbSA9IG0uTWF0cml4Lnplcm9zKHRoaXMuZG9mcywgdGhpcy5kb2ZzKTtcblxuICAgIC8vIFRha2UgcHJvZHVjdCBvZiBpbmNvbWluZyBtZXNzYWdlc1xuICAgIGZvcih2YXIgYz0wOyBjPHRoaXMuYWRqX2ZhY3RvcnMubGVuZ3RoOyBjKyspIHtcbiAgICAgIHZhciBpeCA9IHRoaXMuYWRqX2ZhY3RvcnNbY10uYWRqX3Zhcl9pZHMuaW5kZXhPZih0aGlzLnZhcl9pZCk7XG4gICAgICB0aGlzLmJlbGllZi5wcm9kdWN0KHRoaXMuYWRqX2ZhY3RvcnNbY10ubWVzc2FnZXNbaXhdKVxuICAgIH1cblxuICAgIC8vIFNlbmQgbmV3IGJlbGllZiB0byBhZGphY2VudCBmYWN0b3JzXG4gICAgZm9yKHZhciBjPTA7IGM8dGhpcy5hZGpfZmFjdG9ycy5sZW5ndGg7IGMrKykge1xuICAgICAgdmFyIGl4ID0gdGhpcy5hZGpfZmFjdG9yc1tjXS5hZGpfdmFyX2lkcy5pbmRleE9mKHRoaXMudmFyX2lkKTtcbiAgICAgIHRoaXMuYWRqX2ZhY3RvcnNbY10uYWRqX2JlbGllZnNbaXhdID0gdGhpcy5iZWxpZWY7XG4gICAgfVxuICB9XG59XG5cblxuZXhwb3J0IGNsYXNzIExpbmVhckZhY3RvciB7XG4gIGNvbnN0cnVjdG9yKGRvZnMsIGFkal92YXJfaWRzKSB7XG4gICAgdGhpcy5kb2ZzID0gZG9mcztcbiAgICB0aGlzLmFkal92YXJfaWRzID0gYWRqX3Zhcl9pZHM7XG4gICAgdGhpcy5hZGpfYmVsaWVmcyA9IFtdO1xuXG4gICAgLy8gVG8gY29tcHV0ZSBmYWN0b3Igd2hlbiBmYWN0b3IgaXMgY29tYmluYXRpb24gb2YgbWFueSBmYWN0b3IgdHlwZXMgKGUuZy4gbWVhc3VyZW1lbnQgYW5kIHNtb290aG5lc3MpXG4gICAgdGhpcy5qYWNzID0gW107XG4gICAgdGhpcy5tZWFzID0gW107XG4gICAgdGhpcy5sYW1iZGFzID0gW107XG4gICAgdGhpcy5mYWN0b3IgPSBuZXcgZ2F1c3MuR2F1c3NpYW4obS5NYXRyaXguemVyb3MoZG9mcywgMSksIG0uTWF0cml4Lnplcm9zKGRvZnMsIGRvZnMpKTtcblxuICAgIHRoaXMubWVzc2FnZXMgPSBbXTtcbiAgfVxuXG4gIGNvbXB1dGVfZmFjdG9yKCkge1xuICAgIHRoaXMuZmFjdG9yLmV0YSA9IG0uTWF0cml4Lnplcm9zKHRoaXMuZG9mcywgMSk7XG4gICAgdGhpcy5mYWN0b3IubGFtID0gbS5NYXRyaXguemVyb3ModGhpcy5kb2ZzLCB0aGlzLmRvZnMpO1xuICAgIGZvciAodmFyIGk9MDsgaTx0aGlzLmphY3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMuZmFjdG9yLmV0YS5hZGQodGhpcy5qYWNzW2ldLnRyYW5zcG9zZSgpLm11bCh0aGlzLmxhbWJkYXNbaV0gKiB0aGlzLm1lYXNbaV0pKTtcbiAgICAgIHRoaXMuZmFjdG9yLmxhbS5hZGQodGhpcy5qYWNzW2ldLnRyYW5zcG9zZSgpLm1tdWwodGhpcy5qYWNzW2ldKS5tdWwodGhpcy5sYW1iZGFzW2ldKSk7XG4gICAgfVxuICB9XG5cbiAgLy8gT25seSBmb3IgYmlwYXJ0aXRlIGZhY3RvcnMgd2hlcmUgdGhlIGFkamFjZW50IHZhcnMgaGF2ZSAxIGRvZlxuICBzZW5kX21lc3MoaXgpIHtcbiAgICBpZiAoaXgpIHtcbiAgICAgIGNvbnN0IG1lc3MxID0gbmV3IGdhdXNzLkdhdXNzaWFuKFtbMF1dLCBbWzBdXSk7XG4gICAgICBtZXNzMS5ldGEgPSBuZXcgbS5NYXRyaXgoW1t0aGlzLmZhY3Rvci5ldGEuZ2V0KDEsIDApIC0gXG4gICAgICAgICAgdGhpcy5mYWN0b3IubGFtLmdldCgxLCAwKSAqICh0aGlzLmZhY3Rvci5ldGEuZ2V0KDAsIDApICsgdGhpcy5hZGpfYmVsaWVmc1swXS5ldGEuZ2V0KDAsIDApIC0gdGhpcy5tZXNzYWdlc1swXS5ldGEuZ2V0KDAsIDApKSAvIFxuICAgICAgICAgICh0aGlzLmZhY3Rvci5sYW0uZ2V0KDAsIDApICsgdGhpcy5hZGpfYmVsaWVmc1swXS5sYW0uZ2V0KDAsIDApIC0gdGhpcy5tZXNzYWdlc1swXS5sYW0uZ2V0KDAsIDApKV1dKTtcbiAgICAgIG1lc3MxLmxhbSA9IG5ldyBtLk1hdHJpeChbW3RoaXMuZmFjdG9yLmxhbS5nZXQoMSwgMSkgLSBcbiAgICAgICAgICB0aGlzLmZhY3Rvci5sYW0uZ2V0KDEsIDApICogdGhpcy5mYWN0b3IubGFtLmdldCgwLCAxKSAvIFxuICAgICAgICAgICh0aGlzLmZhY3Rvci5sYW0uZ2V0KDAsIDApICsgdGhpcy5hZGpfYmVsaWVmc1swXS5sYW0uZ2V0KDAsIDApIC0gdGhpcy5tZXNzYWdlc1swXS5sYW0uZ2V0KDAsIDApKV1dKTtcbiAgICAgIHRoaXMubWVzc2FnZXNbMV0gPSBtZXNzMTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgbWVzczAgPSBuZXcgZ2F1c3MuR2F1c3NpYW4oW1swXV0sIFtbMF1dKTtcbiAgICAgIG1lc3MwLmV0YSA9IG5ldyBtLk1hdHJpeChbW3RoaXMuZmFjdG9yLmV0YS5nZXQoMCwgMCkgLSBcbiAgICAgICAgICB0aGlzLmZhY3Rvci5sYW0uZ2V0KDAsIDEpICogKHRoaXMuZmFjdG9yLmV0YS5nZXQoMSwgMCkgKyB0aGlzLmFkal9iZWxpZWZzWzFdLmV0YS5nZXQoMCwgMCkgLSB0aGlzLm1lc3NhZ2VzWzFdLmV0YS5nZXQoMCwgMCkpIC8gXG4gICAgICAgICAgKHRoaXMuZmFjdG9yLmxhbS5nZXQoMSwgMSkgKyB0aGlzLmFkal9iZWxpZWZzWzFdLmxhbS5nZXQoMCwgMCkgLSB0aGlzLm1lc3NhZ2VzWzFdLmxhbS5nZXQoMCwgMCkpXV0pO1xuICAgICAgbWVzczAubGFtID0gbmV3IG0uTWF0cml4KFtbdGhpcy5mYWN0b3IubGFtLmdldCgwLCAwKSAtIFxuICAgICAgICAgIHRoaXMuZmFjdG9yLmxhbS5nZXQoMCwgMSkgKiB0aGlzLmZhY3Rvci5sYW0uZ2V0KDEsIDApIC8gXG4gICAgICAgICAgKHRoaXMuZmFjdG9yLmxhbS5nZXQoMSwgMSkgKyB0aGlzLmFkal9iZWxpZWZzWzFdLmxhbS5nZXQoMCwgMCkgLSB0aGlzLm1lc3NhZ2VzWzFdLmxhbS5nZXQoMCwgMCkpXV0pO1xuICAgICAgdGhpcy5tZXNzYWdlc1swXSA9IG1lc3MwO1xuICAgIH1cbiAgfVxuXG4gIHNlbmRfYm90aF9tZXNzKCl7XG4gICAgdGhpcy5zZW5kX21lc3MoMCk7XG4gICAgdGhpcy5zZW5kX21lc3MoMSk7XG4gIH1cbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlMURncmFwaChuX3Zhcl9ub2Rlcywgc21vb3RobmVzc19zdGQpIHtcblxuICBjb25zdCBncmFwaCA9IG5ldyBGYWN0b3JHcmFwaCgpXG5cbiAgLy8gQ3JlYXRlIHZhcmlhYmxlIG5vZGVzXG4gIGZvcih2YXIgaT0wOyBpPG5fdmFyX25vZGVzOyBpKyspIHtcbiAgICBjb25zdCBuZXdfdmFyX25vZGUgPSBuZXcgVmFyaWFibGVOb2RlKDEsIGkpO1xuICAgIGdyYXBoLnZhcl9ub2Rlcy5wdXNoKG5ld192YXJfbm9kZSk7XG4gIH1cblxuICAvLyBDcmVhdGUgc21vb3RobmVzcyBmYWN0b3JzXG4gIGNvbnN0IHNtb290aG5lc3NfamFjID0gbmV3IG0uTWF0cml4KFtbLTEsIDFdXSk7XG4gIGZvcih2YXIgaT0wOyBpPChuX3Zhcl9ub2Rlcy0xKTsgaSsrKSB7XG4gICAgY29uc3QgbmV3X2ZhY3RvciA9IG5ldyBMaW5lYXJGYWN0b3IoMiwgW2ksIGkrMV0sICk7XG4gICAgbmV3X2ZhY3Rvci5qYWNzLnB1c2goc21vb3RobmVzc19qYWMpO1xuICAgIG5ld19mYWN0b3IubWVhcy5wdXNoKDAuKTtcbiAgICBuZXdfZmFjdG9yLmxhbWJkYXMucHVzaCgxIC8gTWF0aC5wb3coc21vb3RobmVzc19zdGQsIDIpKTtcblxuICAgIG5ld19mYWN0b3IuYWRqX2JlbGllZnMucHVzaChncmFwaC52YXJfbm9kZXNbaV0uYmVsaWVmKTtcbiAgICBuZXdfZmFjdG9yLmFkal9iZWxpZWZzLnB1c2goZ3JhcGgudmFyX25vZGVzW2krMV0uYmVsaWVmKTtcbiAgICBuZXdfZmFjdG9yLm1lc3NhZ2VzLnB1c2gobmV3IGdhdXNzLkdhdXNzaWFuKFtbMF1dLCBbWzBdXSkpO1xuICAgIG5ld19mYWN0b3IubWVzc2FnZXMucHVzaChuZXcgZ2F1c3MuR2F1c3NpYW4oW1swXV0sIFtbMF1dKSk7XG4gICAgbmV3X2ZhY3Rvci5jb21wdXRlX2ZhY3RvcigpO1xuICAgIGdyYXBoLmZhY3RvcnMucHVzaChuZXdfZmFjdG9yKTtcbiAgICBncmFwaC52YXJfbm9kZXNbaV0uYWRqX2ZhY3RvcnMucHVzaChuZXdfZmFjdG9yKTtcbiAgICBncmFwaC52YXJfbm9kZXNbaSsxXS5hZGpfZmFjdG9ycy5wdXNoKG5ld19mYWN0b3IpO1xuICB9XG5cbiAgcmV0dXJuIGdyYXBoO1xufVxuIiwiPHNjcmlwdD5cbiAgaW1wb3J0IHsgb25Nb3VudCB9IGZyb20gJ3N2ZWx0ZSc7XG4gIGltcG9ydCB7IGZhZGUgfSBmcm9tICdzdmVsdGUvdHJhbnNpdGlvbic7XG4gIGltcG9ydCAqIGFzIG0gZnJvbSAnbWwtbWF0cml4JztcbiAgaW1wb3J0ICogYXMgZ2F1c3MgZnJvbSAnLi4vZ2F1c3NpYW4nO1xuICBpbXBvcnQgKiBhcyBnYnAgZnJvbSAnLi4vZ2JwL2dicDFkLmpzJztcblxuXHRpbXBvcnQgeyBvbkludGVydmFsIH0gZnJvbSAnLi4vdXRpbC5qcyc7XG5cbiAgLy8gVmlzdWFsIHZhcmFpYmxlc1xuICBsZXQgY2FudmFzO1xuICBsZXQgbm9kZXNfeF9vZmZzZXQ7XG4gIGxldCBub2RlX3hfc3BhY2luZztcbiAgbGV0IG5vZGVfcmFkaXVzO1xuICBsZXQgdGhlbjsgLy8gdGltZSBvZiBzdGFydCBvZiB2aXNcbiAgbGV0IGRpc3BsYXlfbWFwID0gZmFsc2U7XG4gIGxldCB2aXNpYmxlX2FsZXJ0ID0gZmFsc2U7XG5cbiAgLy8gTWVhc3VyZW1lbnQgbW9kZWwgc3RkXG4gIGxldCBtZWFzX21vZGVsX3N0ZCA9IDUwO1xuICBsZXQgc21vb3RobmVzc19zdGQgPSA1MDtcblxuICAvLyBHQlAgdmFyaWFibGVzXG4gIGxldCBncmFwaDtcbiAgY29uc3Qgbl92YXJfbm9kZXMgPSAxMDtcbiAgY29uc3Qgbl9tZWFzdXJlbWVudHMgPSA4O1xuICBsZXQgbWVhc3VyZW1lbnRzID0gW11cblxuICBsZXQgbXBfc2NoZWR1bGUgPSAwO1xuICB2YXIgc3luY19vbiA9IGZhbHNlO1xuICB2YXIgc3dlZXBfb24gPSBmYWxzZTtcbiAgbGV0IEdCUF9zd2VlcF9kb25lID0gZmFsc2U7XG5cbiAgbGV0IG5faXRlcnMgPSAwO1xuICBsZXQgaXRlcnNfcGVyX3NlYyA9IDIuNTtcbiAgbGV0IGRpc3QgPSAwOyAvLyBBdmVyYWdlIGRpc3RhbmNlIG9mIGJlbGllZiBtZWFucyBmcm9tIE1BUCBzb2x1dGlvblxuXG4gIG9uTW91bnQoKCkgPT4ge1xuICAgIGNvbnN0IGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIik7XG5cbiAgICBncmFwaCA9IGdicC5jcmVhdGUxRGdyYXBoKG5fdmFyX25vZGVzLCBzbW9vdGhuZXNzX3N0ZCk7XG5cbiAgICBjdHgubGluZVdpZHRoID0gNDtcbiAgICBub2Rlc194X29mZnNldCA9IGNhbnZhcy53aWR0aCAvICgyICogbl92YXJfbm9kZXMpO1xuICAgIG5vZGVfeF9zcGFjaW5nID0gKGNhbnZhcy53aWR0aCAtIG5vZGVzX3hfb2Zmc2V0KjIpIC8gKG5fdmFyX25vZGVzIC0gMSlcbiAgICBub2RlX3JhZGl1cyA9IGNhbnZhcy5oZWlnaHQgLyAzODtcblxuICAgIGdlblJhbmRvbU1lYXN1cmVtZW50cyhuX21lYXN1cmVtZW50cywgbWVhc3VyZW1lbnRzKTtcbiAgICB0aGVuID0gRGF0ZS5ub3coKTtcbiAgfSk7XG5cblx0b25JbnRlcnZhbCgoKSA9PiB1cGRhdGVWaXMoKSwgMjUpO1xuXG4gIC8vIERyYXcgZnVuY3Rpb25zXG4gIGZ1bmN0aW9uIGRyYXdOb2RlcygpIHtcbiAgICBjb25zdCBjdHggPSBjYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpO1xuXG4gICAgZm9yKGxldCBjPTA7IGM8Z3JhcGgudmFyX25vZGVzLmxlbmd0aDsgYysrKSB7XG4gICAgICB2YXIgeCA9IG5vZGVzX3hfb2Zmc2V0ICsgYypub2RlX3hfc3BhY2luZztcbiAgICAgIGlmIChncmFwaC52YXJfbm9kZXNbY10uYmVsaWVmLmxhbS5nZXQoMCwgMCkgPT0gMCkge1xuICAgICAgICB2YXIgeSA9IGNhbnZhcy5oZWlnaHQgLSBjYW52YXMuaGVpZ2h0IC8gODtcbiAgICAgICAgdmFyIHZhcl95ID0gTWF0aC5wb3coY2FudmFzLmhlaWdodCAvIDEwLCAyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciB5ID0gZ3JhcGgudmFyX25vZGVzW2NdLmJlbGllZi5nZXRNZWFuKCkuZ2V0KDAsIDApO1xuICAgICAgICB2YXIgdmFyX3kgPSBncmFwaC52YXJfbm9kZXNbY10uYmVsaWVmLmdldENvdigpLmdldCgwLCAwKTtcbiAgICAgIH1cblxuICAgICAgLy8gRHJhdyBtZWFuc1xuICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgY3R4LmFyYyh4LCB5LCBub2RlX3JhZGl1cywgMCwgTWF0aC5QSSoyKTtcbiAgICAgIGN0eC5maWxsU3R5bGUgPSBcIiMwMDk1RERcIjtcbiAgICAgIGN0eC5maWxsKCk7XG4gICAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgICAvLyBEcmF3IHZhcmlhbmNlc1xuICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgY3R4Lm1vdmVUbyh4LCBwYXJzZUludCh5KSArIHBhcnNlSW50KE1hdGguc3FydCh2YXJfeSkpKTtcbiAgICAgIGN0eC5saW5lVG8oeCwgcGFyc2VJbnQoeSkgLSBwYXJzZUludChNYXRoLnNxcnQodmFyX3kpKSk7XG4gICAgICBjdHguc3Ryb2tlU3R5bGUgPSBcIiMwMDk1RERcIjtcbiAgICAgIGN0eC5zdHJva2UoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBkcmF3TWVhc3VyZW1lbnRzKG1lYXNfbW9kZWxfc3RkKSB7XG4gICAgY29uc3QgY3R4ID0gY2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcbiAgICBmb3IodmFyIGM9MDsgYzxtZWFzdXJlbWVudHMubGVuZ3RoOyBjKyspIHtcbiAgICAgIHZhciB4ID0gbWVhc3VyZW1lbnRzW2NdLng7XG4gICAgICB2YXIgeSA9IG1lYXN1cmVtZW50c1tjXS55O1xuXG4gICAgICAvLyBEcmF3IG1lYW5zXG4gICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICBjdHguYXJjKHgsIHksIG5vZGVfcmFkaXVzLCAwLCBNYXRoLlBJKjIpO1xuICAgICAgY3R4LmZpbGxTdHlsZSA9IFwicmVkXCI7XG4gICAgICBjdHguZmlsbCgpO1xuICAgICAgY3R4LmNsb3NlUGF0aCgpO1xuICAgICAgLy8gRHJhdyB2YXJpYW5jZXNcbiAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgIGN0eC5tb3ZlVG8oeCwgcGFyc2VJbnQoeSkgLSBwYXJzZUludChtZWFzX21vZGVsX3N0ZCkpO1xuICAgICAgY3R4LmxpbmVUbyh4LCBwYXJzZUludCh5KSArIHBhcnNlSW50KG1lYXNfbW9kZWxfc3RkKSk7XG4gICAgICBjdHguc3Ryb2tlU3R5bGUgPSBcInJlZFwiO1xuICAgICAgY3R4LnN0cm9rZSgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGRyYXdNQVAoKSB7XG4gICAgY29uc3QgY3R4ID0gY2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcbiAgICB2YXIgdmFsdWVzID0gZ3JhcGguY29tcHV0ZU1BUCgpO1xuICAgIGNvbnN0IG1lYW5zID0gdmFsdWVzWzBdO1xuICAgIGNvbnN0IGJpZ1NpZ21hID0gdmFsdWVzWzFdO1xuICAgIGZvcih2YXIgYz0wOyBjPGdyYXBoLnZhcl9ub2Rlcy5sZW5ndGg7IGMrKykge1xuICAgICAgdmFyIHggPSBub2Rlc194X29mZnNldCArIGMqbm9kZV94X3NwYWNpbmc7XG4gICAgICB2YXIgeSA9IG1lYW5zLmdldChjLCAwKTtcbiAgICAgIHZhciB2YXJfeSA9IGJpZ1NpZ21hLmdldChjLCBjKTtcblxuICAgICAgLy8gRHJhdyBtZWFuc1xuICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgY3R4LmFyYyh4LCB5LCBub2RlX3JhZGl1cywgMCwgTWF0aC5QSSoyKTtcbiAgICAgIGN0eC5zdHJva2VTdHlsZSA9ICdncmVlbic7XG4gICAgICBjdHguc3Ryb2tlKCk7XG4gICAgICAvLyBEcmF3IHZhcmlhbmNlc1xuICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgY3R4Lm1vdmVUbyh4LCBwYXJzZUludCh5KSArIHBhcnNlSW50KE1hdGguc3FydCh2YXJfeSkpKTtcbiAgICAgIGN0eC5saW5lVG8oeCwgcGFyc2VJbnQoeSkgLSBwYXJzZUludChNYXRoLnNxcnQodmFyX3kpKSk7XG4gICAgICBjdHguc3Ryb2tlU3R5bGUgPSAnZ3JlZW4nO1xuICAgICAgY3R4LnN0cm9rZSgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZVZpcygpIHtcbiAgICBjb25zdCBjdHggPSBjYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpO1xuICAgIGN0eC5jbGVhclJlY3QoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcblxuICAgIHZhciBmcHNJbnRlcnZhbCA9IDEwMDAgLyBpdGVyc19wZXJfc2VjO1xuICAgIHZhciBub3cgPSBEYXRlLm5vdygpO1xuICAgIHZhciBlbGFwc2VkID0gbm93IC0gdGhlbjtcbiAgICBpZiAoZWxhcHNlZCA+IGZwc0ludGVydmFsKSB7XG4gICAgICB0aGVuID0gbm93IC0gKGVsYXBzZWQgJSBmcHNJbnRlcnZhbCk7XG4gICAgICBpZiAoKG1wX3NjaGVkdWxlKSAmJiAoc3luY19vbikpIHtcbiAgICAgICAgc3luY0dCUCgpO1xuICAgICAgfSBlbHNlIGlmICgobXBfc2NoZWR1bGUgPT0gMCkgJiYgKHN3ZWVwX29uKSkge1xuICAgICAgICBncmFwaC5zd2VlcF9zdGVwKCk7XG4gICAgICAgIGlmIChncmFwaC5mb3J3YXJkID09IDEgJiYgZ3JhcGguc3dlZXBfaXggPT0gMCkge1xuICAgICAgICAgIC8vIEJhY2sgYW5kIGZvcnRoIHN3ZWVwIGNvbXBsZXRlXG4gICAgICAgICAgc3dlZXBfb24gPSBmYWxzZTtcbiAgICAgICAgICBHQlBfc3dlZXBfZG9uZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgdXBkYXRlX21lYXNfbW9kZWxfc3RkKCk7XG4gICAgdXBkYXRlX3Ntb290aG5lc3Nfc3RkKCk7XG4gICAgZHJhd05vZGVzKCk7XG4gICAgZHJhd01lYXN1cmVtZW50cyhtZWFzX21vZGVsX3N0ZCk7XG4gICAgaWYgKGRpc3BsYXlfbWFwKSB7XG4gICAgICBkcmF3TUFQKCk7XG4gICAgfVxuICB9XG5cbiAgLy8gR0JQIGZ1bmN0aW9uc1xuICBmdW5jdGlvbiBzeW5jR0JQKCkge1xuICAgIGlmIChuX2l0ZXJzID09IDAgJiYgR0JQX3N3ZWVwX2RvbmUgPT0gMCkge1xuICAgICAgLy8gU2V0IGluaXRpYWwgcG9zaXRpb24gb2Ygbm9kZXNcbiAgICAgIGZvcihsZXQgYz0wOyBjPGdyYXBoLnZhcl9ub2Rlcy5sZW5ndGg7IGMrKykge1xuICAgICAgICBncmFwaC52YXJfbm9kZXNbY10uYmVsaWVmLmV0YSA9IG5ldyBtLk1hdHJpeChbWzAuMDVdXSk7XG4gICAgICAgIGdyYXBoLnZhcl9ub2Rlc1tjXS5iZWxpZWYubGFtID0gbmV3IG0uTWF0cml4KFtbMWUtNF1dKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZ3JhcGguc3luY19pdGVyKCk7XG4gICAgaWYgKCEobl9pdGVycyA9PSAwKSkge1xuICAgICAgZGlzdCA9IGdyYXBoLmNvbXBhcmVfdG9fTUFQKCk7ICAgXG4gICAgfVxuICAgIG5faXRlcnMrKztcbiAgfVxuXG4gIGZ1bmN0aW9uIGFkZE1lYXN1cmVtZW50KGUpIHtcbiAgICB2aXNpYmxlX2FsZXJ0ID0gZmFsc2U7XG4gICAgdmFyIHJlY3QgPSBjYW52YXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgdmFyIHggPSBjYW52YXMud2lkdGggKiAoZS5jbGllbnRYIC0gcmVjdC5sZWZ0KSAvIHJlY3Qud2lkdGg7XG4gICAgdmFyIHkgPSBjYW52YXMuaGVpZ2h0ICogKGUuY2xpZW50WSAtIHJlY3QudG9wKSAvIHJlY3QuaGVpZ2h0O1xuICAgIGlmKHggPiBub2Rlc194X29mZnNldCAmJiB4IDwgY2FudmFzLndpZHRoIC0gbm9kZXNfeF9vZmZzZXQgJiYgeSA+IDAgJiYgeSA8IGNhbnZhcy5oZWlnaHQpIHtcbiAgICAgIHZhciBpeCA9ICh4IC0gbm9kZXNfeF9vZmZzZXQpIC8gbm9kZV94X3NwYWNpbmc7XG4gICAgICB2YXIgeF9saHMgPSBub2Rlc194X29mZnNldCArIE1hdGguZmxvb3IoaXgpKm5vZGVfeF9zcGFjaW5nO1xuICAgICAgdmFyIHhfcmhzID0gbm9kZXNfeF9vZmZzZXQgKyBNYXRoLmNlaWwoaXgpKm5vZGVfeF9zcGFjaW5nO1xuICAgICAgZ3JhcGguYWRkTGluZWFyTWVhc3VyZW1lbnQoeSwgeCwgW01hdGguZmxvb3IoaXgpLCBNYXRoLmNlaWwoaXgpXSwgeF9saHMsIHhfcmhzLCBtZWFzX21vZGVsX3N0ZCk7XG4gICAgICBtZWFzdXJlbWVudHMucHVzaCh7eDogeCwgeTogeX0pXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZ2VuUmFuZG9tTWVhc3VyZW1lbnRzKCkge1xuICAgIHZpc2libGVfYWxlcnQgPSBmYWxzZTtcbiAgICBtZWFzdXJlbWVudHMgPSBbXTtcbiAgICBncmFwaC5mYWN0b3JzID0gZ3JhcGguZmFjdG9ycy5zbGljZSgwLCA5KTtcbiAgICBmb3IgKHZhciBpPTA7IGk8bl9tZWFzdXJlbWVudHM7IGkrKykge1xuICAgICAgdmFyIHggPSBNYXRoLnJhbmRvbSgpICogKGNhbnZhcy53aWR0aCAtIDIgKiBub2Rlc194X29mZnNldCkgKyBub2Rlc194X29mZnNldDtcbiAgICAgIHZhciB5ID0gTWF0aC5yYW5kb20oKSAqIChjYW52YXMuaGVpZ2h0IC0gMiAqIG5vZGVzX3hfb2Zmc2V0KSArIG5vZGVzX3hfb2Zmc2V0O1xuICAgICAgdmFyIGl4ID0gKHggLSBub2Rlc194X29mZnNldCkgLyBub2RlX3hfc3BhY2luZztcbiAgICAgIHZhciB4X2xocyA9IG5vZGVzX3hfb2Zmc2V0ICsgTWF0aC5mbG9vcihpeCkqbm9kZV94X3NwYWNpbmc7XG4gICAgICB2YXIgeF9yaHMgPSBub2Rlc194X29mZnNldCArIE1hdGguY2VpbChpeCkqbm9kZV94X3NwYWNpbmc7XG4gICAgICBncmFwaC5hZGRMaW5lYXJNZWFzdXJlbWVudCh5LCB4LCBbTWF0aC5mbG9vcihpeCksIE1hdGguY2VpbChpeCldLCB4X2xocywgeF9yaHMsIG1lYXNfbW9kZWxfc3RkKTtcbiAgICAgIG1lYXN1cmVtZW50cy5wdXNoKHt4OiB4LCB5OiB5fSlcbiAgICB9XG4gIH1cblxuXHRmdW5jdGlvbiBuZXdSYW5kTWVhc3VyZW1lbnRzKCkge1xuICAgIHN5bmNfb24gPSBmYWxzZTtcbiAgICBzd2VlcF9vbiA9IGZhbHNlO1xuICAgIG5faXRlcnMgPSAwO1xuICAgIGdyYXBoID0gZ2JwLmNyZWF0ZTFEZ3JhcGgobl92YXJfbm9kZXMsIHNtb290aG5lc3Nfc3RkKTtcbiAgICBnZW5SYW5kb21NZWFzdXJlbWVudHMobl9tZWFzdXJlbWVudHMsIG1lYXN1cmVtZW50cyk7XG4gICAgdGhlbiA9IERhdGUubm93KCk7XG4gIH1cblxuXHRmdW5jdGlvbiBjbGVhck1lYXN1cmVtZW50cygpIHtcbiAgICBtZWFzdXJlbWVudHMgPSBbXTtcbiAgICBncmFwaC5mYWN0b3JzID0gZ3JhcGguZmFjdG9ycy5zbGljZSgwLCA5KTtcbiAgICBzeW5jX29uID0gZmFsc2U7XG4gICAgc3dlZXBfb24gPSBmYWxzZTtcbiAgICBkaXNwbGF5X21hcCA9IGZhbHNlO1xuICAgIG5faXRlcnMgPSAwO1xuICAgIGdyYXBoID0gZ2JwLmNyZWF0ZTFEZ3JhcGgobl92YXJfbm9kZXMsIHNtb290aG5lc3Nfc3RkKTtcbiAgICB0aGVuID0gRGF0ZS5ub3coKTtcbiAgfVxuXG4gIC8vIFVzZXIgaW50ZXJhY3Rpb24gZnVuY3Rpb25zXG4gIGZ1bmN0aW9uIHRvZ2dsZVN3ZWVwR0JQKCkge1xuICAgIGlmIChtZWFzdXJlbWVudHMubGVuZ3RoID09IDApIHtcbiAgICAgICAgdmlzaWJsZV9hbGVydCA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChzd2VlcF9vbil7XG4gICAgICAgIHN3ZWVwX29uID0gZmFsc2U7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzd2VlcF9vbiA9IHRydWU7XG4gICAgICAgIGl0ZXJzX3Blcl9zZWMgPSAyLjU7XG4gICAgICAgIHN5bmNfb24gPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB0b2dnbGVHQlAoKSB7XG4gICAgaWYgKG1lYXN1cmVtZW50cy5sZW5ndGggPT0gMCkge1xuICAgICAgdmlzaWJsZV9hbGVydCA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChzeW5jX29uKSB7XG4gICAgICAgIHN5bmNfb24gPSBmYWxzZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN5bmNfb24gPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHRvZ2dsZU1BUCgpIHtcbiAgICBpZiAobWVhc3VyZW1lbnRzLmxlbmd0aCA9PSAwKSB7XG4gICAgICB2aXNpYmxlX2FsZXJ0ID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGRpc3BsYXlfbWFwID09IGZhbHNlKSB7XG4gICAgICAgIGRpc3BsYXlfbWFwID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRpc3BsYXlfbWFwID0gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY2hhbmdlX3NjaGVkdWxlKCkge1xuICAgIHN5bmNfb24gPSAwO1xuICAgIHN3ZWVwX29uID0gMDtcbiAgICBpdGVyc19wZXJfc2VjID0gMjU7XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGVfbWVhc19tb2RlbF9zdGQoKSB7XG4gICAgdmFyIGxhbWJkYSA9IDEgLyBNYXRoLnBvdyhtZWFzX21vZGVsX3N0ZCwgMik7XG4gICAgZm9yICh2YXIgYz0wOyBjPGdyYXBoLmZhY3RvcnMubGVuZ3RoOyBjKyspIHtcbiAgICAgIHZhciBkaWZmID0gZmFsc2U7XG4gICAgICBmb3IgKHZhciBpPTE7IGk8Z3JhcGguZmFjdG9yc1tjXS5sYW1iZGFzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChncmFwaC5mYWN0b3JzW2NdLmxhbWJkYXNbaV0gIT0gbGFtYmRhKSB7XG4gICAgICAgICAgZ3JhcGguZmFjdG9yc1tjXS5sYW1iZGFzW2ldID0gbGFtYmRhO1xuICAgICAgICAgIGRpZmYgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoZGlmZikge1xuICAgICAgICBncmFwaC5mYWN0b3JzW2NdLmNvbXB1dGVfZmFjdG9yKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlX3Ntb290aG5lc3Nfc3RkKCkge1xuICAgIHZhciBsYW1iZGEgPSAxIC8gTWF0aC5wb3coc21vb3RobmVzc19zdGQsIDIpO1xuICAgIGZvciAodmFyIGM9MDsgYzxncmFwaC5mYWN0b3JzLmxlbmd0aDsgYysrKSB7XG4gICAgICBpZiAoZ3JhcGguZmFjdG9yc1tjXS5sYW1iZGFzWzBdICE9IGxhbWJkYSl7XG4gICAgICAgIGdyYXBoLmZhY3RvcnNbY10ubGFtYmRhc1swXSA9IGxhbWJkYTtcbiAgICAgICAgZ3JhcGguZmFjdG9yc1tjXS5jb21wdXRlX2ZhY3RvcigpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG5cbjwvc2NyaXB0PlxuXG48c3ZlbHRlOndpbmRvdy8+XG5cbjxkaXYgY2xhc3M9XCJkZW1vLWNvbnRhaW5lclwiPlxuXG4gIDxkaXYgaWQ9XCJnYnAtY29udGFpbmVyXCI+XG4gICAgPGNhbnZhcyBiaW5kOnRoaXM9e2NhbnZhc30gd2lkdGg9ezEzMDB9IGhlaWdodD17NjQwfSBvbjpjbGljaz17YWRkTWVhc3VyZW1lbnR9IGlkPVwiY2xpY2stY2FudmFzXCI+PC9jYW52YXM+XG4gICAgPGRpdiBjbGFzcz1cImNlbnRlclwiPlxuICAgICAgeyNpZiB2aXNpYmxlX2FsZXJ0fVxuICAgICAgICA8cCB0cmFuc2l0aW9uOmZhZGUgaWQ9XCJhbGVydFwiPlxuICAgICAgICAgIEJlZm9yZSBzdGFydGluZyBhZGQgbWVhc3VyZW1lbnRzIVxuICAgICAgICA8L3A+XG4gICAgICB7L2lmfVxuICAgIDwvZGl2PlxuXG4gICAgPGRpdiBjbGFzcz1cImJ1dHRvbnMtcGFuZWxcIj5cbiAgICAgIHsjaWYgbXBfc2NoZWR1bGV9XG4gICAgICAgIHsjaWYgc3luY19vbn1cbiAgICAgICAgICA8aSBjbGFzcz1cImZhIGZhLXBhdXNlIHRvb2x0aXBcIiBvbjpjbGljaz17dG9nZ2xlR0JQfSBzdHlsZT1cIndpZHRoOjI1cHhcIj5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwidG9vbHRpcHRleHRcIj5QYXVzZSBzeW5jaHJvbm91cyBHQlA8L3NwYW4+XG4gICAgICAgICAgPC9pPlxuICAgICAgICB7OmVsc2V9XG4gICAgICAgICAgPGkgY2xhc3M9XCJmYSBmYS1wbGF5IHRvb2x0aXBcIiAgb246Y2xpY2s9e3RvZ2dsZUdCUH0gc3R5bGU9XCJ3aWR0aDoyNXB4XCI+XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cInRvb2x0aXB0ZXh0XCI+UGxheSBzeW5jaHJvbm91cyBHQlA8L3NwYW4+XG4gICAgICAgICAgPC9pPlxuICAgICAgICB7L2lmfSBcbiAgICAgIHs6ZWxzZX1cbiAgICAgICAgeyNpZiBzd2VlcF9vbn1cbiAgICAgICAgICA8aSBjbGFzcz1cImZhIGZhLXBhdXNlIHRvb2x0aXBcIiBvbjpjbGljaz17dG9nZ2xlU3dlZXBHQlB9IHN0eWxlPVwid2lkdGg6MjVweFwiPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJ0b29sdGlwdGV4dFwiPlBhdXNlIEdCUCBzd2VlcDwvc3Bhbj5cbiAgICAgICAgICA8L2k+XG4gICAgICAgIHs6ZWxzZX1cbiAgICAgICAgICA8aSBjbGFzcz1cImZhIGZhLXBsYXkgdG9vbHRpcFwiICBvbjpjbGljaz17dG9nZ2xlU3dlZXBHQlB9IHN0eWxlPVwid2lkdGg6MjVweFwiPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJ0b29sdGlwdGV4dFwiPlBsYXkgR0JQIHN3ZWVwPC9zcGFuPlxuICAgICAgICAgIDwvaT5cbiAgICAgICAgey9pZn0gXG4gICAgICB7L2lmfVxuXG4gICAgICA8aSBjbGFzcz1cImZhIGZhLXJlcGVhdCB0b29sdGlwXCIgb246Y2xpY2s9e25ld1JhbmRNZWFzdXJlbWVudHN9PlxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwidG9vbHRpcHRleHRcIj5HZW5lcmF0ZSBuZXcgcmFuZG9tIG1lYXN1cmVtZW50czwvc3Bhbj5cbiAgICAgIDwvaT5cbiAgICAgIDxpIGNsYXNzPVwiZmEgZmEtcmVtb3ZlIHRvb2x0aXBcIiBvbjpjbGljaz17Y2xlYXJNZWFzdXJlbWVudHN9PlxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwidG9vbHRpcHRleHRcIj5DbGVhciBtZWFzdXJlbWVudHM8L3NwYW4+XG4gICAgICA8L2k+XG5cbiAgICAgIHsjaWYgZGlzcGxheV9tYXB9XG4gICAgICAgIDxidXR0b24gY2xhc3M9XCJ0b29sdGlwXCIgb246Y2xpY2s9e3RvZ2dsZU1BUH0+IFxuICAgICAgICA8Yj5NQVA8L2I+XG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJ0b29sdGlwdGV4dFwiPkhpZGUgTUFQPC9zcGFuPlxuICAgICAgICA8L2J1dHRvbj5cbiAgICAgIHs6ZWxzZX1cbiAgICAgICAgPGJ1dHRvbiBjbGFzcz1cInRvb2x0aXBcIiBvbjpjbGljaz17dG9nZ2xlTUFQfSAgc3R5bGU9XCJjb2xvcjogcmdiKDM5LCAzNiwgMzYsIDAuNilcIj4gXG4gICAgICAgIDxiPk1BUDwvYj5cbiAgICAgICAgICA8c3BhbiBjbGFzcz1cInRvb2x0aXB0ZXh0XCI+RGlzcGxheSBNQVA8L3NwYW4+XG4gICAgICAgIDwvYnV0dG9uPlxuICAgICAgey9pZn0gXG5cbiAgICAgIDxkaXYgaWQ9XCJkZW1vLXRpcFwiPlxuICAgICAgICA8aW1nIGlkPVwicG9pbnRlclwiIHNyYz1cImltYWdlcy9wb2ludGVyLnN2Z1wiIGFsdD1cInBvaW50ZXJcIj5cbiAgICAgICAgPGRpdiBpZD1cImhpbnRcIj5cbiAgICAgICAgICBDbGljayBvbiB0aGUgY2FudmFzIHRvIHN1cmZhY2UgZmFjdG9ycy4gICAgICAgICAgICAgICAgXG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG5cbiAgPGRpdiBpZD1cInNldHRpbmdzLXBhbmVsXCI+XG4gICAgPGI+TWVzc2FnZSBQYXNzaW5nIFNjaGVkdWxlOjwvYj4gPGJyPlxuICAgIDxsYWJlbD5cbiAgICAgIDxpbnB1dCB0eXBlPXJhZGlvIGJpbmQ6Z3JvdXA9e21wX3NjaGVkdWxlfSB2YWx1ZT17MH0gb246Y2xpY2s9e2NoYW5nZV9zY2hlZHVsZX0+XG4gICAgICBTd2VlcFxuICAgIDwvbGFiZWw+PGJyPlxuXG4gICAgPGxhYmVsPlxuICAgICAgPGlucHV0IHR5cGU9cmFkaW8gYmluZDpncm91cD17bXBfc2NoZWR1bGV9IHZhbHVlPXsxfSBvbjpjbGljaz17Y2hhbmdlX3NjaGVkdWxlfT5cbiAgICAgIFN5bmNocm9ub3VzXG4gICAgPC9sYWJlbD5cbiAgICA8YnI+XG5cbiAgICA8YnI+PGI+U3RhbmRhcmQgZGV2aWF0aW9uIG9mIG5vaXNlIGluIEdhdXNzaWFuIG1lYXN1cmVtZW50IG1vZGVsczo8YnI+PC9iPlxuXG4gICAgU3VyZmFjZSBmYWN0b3JzLCAmc2lnbWEgPSA8Yj57bWVhc19tb2RlbF9zdGR9PC9iPlxuICAgIDxpbnB1dCB0eXBlPVwicmFuZ2VcIiBtaW49XCIxXCIgbWF4PVwiMTAwXCIgYmluZDp2YWx1ZT17bWVhc19tb2RlbF9zdGR9Pjxicj5cblxuICAgIFNtb290aG5lc3MgZmFjdG9ycywgJnNpZ21hID0gPGI+e3Ntb290aG5lc3Nfc3RkfTwvYj5cbiAgICA8aW5wdXQgdHlwZT1cInJhbmdlXCIgbWluPVwiMVwiIG1heD1cIjEwMFwiIGJpbmQ6dmFsdWU9e3Ntb290aG5lc3Nfc3RkfT48YnI+XG5cbiAgICB7I2lmIG1wX3NjaGVkdWxlfVxuICAgICAgPGJyPlxuICAgICAgPGI+SXRlcmF0aW9uIHtuX2l0ZXJzfTwvYj4gJm5ic3A7IChpdGVycyAvIHM6IHtpdGVyc19wZXJfc2VjfSlcbiAgICAgIDxpbnB1dCB0eXBlPVwicmFuZ2VcIiBtaW49XCIxXCIgbWF4PVwiNTBcIiBiaW5kOnZhbHVlPXtpdGVyc19wZXJfc2VjfT48YnI+XG4gICAgey9pZn1cblxuICA8L2Rpdj5cbjwvZGl2PlxuXG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHJldHVybiBhIDwgYiA/IC0xIDogYSA+IGIgPyAxIDogYSA+PSBiID8gMCA6IE5hTjtcbn1cbiIsImltcG9ydCBhc2NlbmRpbmcgZnJvbSBcIi4vYXNjZW5kaW5nXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNvbXBhcmUpIHtcbiAgaWYgKGNvbXBhcmUubGVuZ3RoID09PSAxKSBjb21wYXJlID0gYXNjZW5kaW5nQ29tcGFyYXRvcihjb21wYXJlKTtcbiAgcmV0dXJuIHtcbiAgICBsZWZ0OiBmdW5jdGlvbihhLCB4LCBsbywgaGkpIHtcbiAgICAgIGlmIChsbyA9PSBudWxsKSBsbyA9IDA7XG4gICAgICBpZiAoaGkgPT0gbnVsbCkgaGkgPSBhLmxlbmd0aDtcbiAgICAgIHdoaWxlIChsbyA8IGhpKSB7XG4gICAgICAgIHZhciBtaWQgPSBsbyArIGhpID4+PiAxO1xuICAgICAgICBpZiAoY29tcGFyZShhW21pZF0sIHgpIDwgMCkgbG8gPSBtaWQgKyAxO1xuICAgICAgICBlbHNlIGhpID0gbWlkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGxvO1xuICAgIH0sXG4gICAgcmlnaHQ6IGZ1bmN0aW9uKGEsIHgsIGxvLCBoaSkge1xuICAgICAgaWYgKGxvID09IG51bGwpIGxvID0gMDtcbiAgICAgIGlmIChoaSA9PSBudWxsKSBoaSA9IGEubGVuZ3RoO1xuICAgICAgd2hpbGUgKGxvIDwgaGkpIHtcbiAgICAgICAgdmFyIG1pZCA9IGxvICsgaGkgPj4+IDE7XG4gICAgICAgIGlmIChjb21wYXJlKGFbbWlkXSwgeCkgPiAwKSBoaSA9IG1pZDtcbiAgICAgICAgZWxzZSBsbyA9IG1pZCArIDE7XG4gICAgICB9XG4gICAgICByZXR1cm4gbG87XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBhc2NlbmRpbmdDb21wYXJhdG9yKGYpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGQsIHgpIHtcbiAgICByZXR1cm4gYXNjZW5kaW5nKGYoZCksIHgpO1xuICB9O1xufVxuIiwiaW1wb3J0IGFzY2VuZGluZyBmcm9tIFwiLi9hc2NlbmRpbmdcIjtcbmltcG9ydCBiaXNlY3RvciBmcm9tIFwiLi9iaXNlY3RvclwiO1xuXG52YXIgYXNjZW5kaW5nQmlzZWN0ID0gYmlzZWN0b3IoYXNjZW5kaW5nKTtcbmV4cG9ydCB2YXIgYmlzZWN0UmlnaHQgPSBhc2NlbmRpbmdCaXNlY3QucmlnaHQ7XG5leHBvcnQgdmFyIGJpc2VjdExlZnQgPSBhc2NlbmRpbmdCaXNlY3QubGVmdDtcbmV4cG9ydCBkZWZhdWx0IGJpc2VjdFJpZ2h0O1xuIiwiaW1wb3J0IHtwYWlyfSBmcm9tIFwiLi9wYWlyc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZXMwLCB2YWx1ZXMxLCByZWR1Y2UpIHtcbiAgdmFyIG4wID0gdmFsdWVzMC5sZW5ndGgsXG4gICAgICBuMSA9IHZhbHVlczEubGVuZ3RoLFxuICAgICAgdmFsdWVzID0gbmV3IEFycmF5KG4wICogbjEpLFxuICAgICAgaTAsXG4gICAgICBpMSxcbiAgICAgIGksXG4gICAgICB2YWx1ZTA7XG5cbiAgaWYgKHJlZHVjZSA9PSBudWxsKSByZWR1Y2UgPSBwYWlyO1xuXG4gIGZvciAoaTAgPSBpID0gMDsgaTAgPCBuMDsgKytpMCkge1xuICAgIGZvciAodmFsdWUwID0gdmFsdWVzMFtpMF0sIGkxID0gMDsgaTEgPCBuMTsgKytpMSwgKytpKSB7XG4gICAgICB2YWx1ZXNbaV0gPSByZWR1Y2UodmFsdWUwLCB2YWx1ZXMxW2kxXSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHZhbHVlcztcbn1cbiIsInZhciBhcnJheSA9IEFycmF5LnByb3RvdHlwZTtcblxuZXhwb3J0IHZhciBzbGljZSA9IGFycmF5LnNsaWNlO1xuZXhwb3J0IHZhciBtYXAgPSBhcnJheS5tYXA7XG4iLCJ2YXIgZTEwID0gTWF0aC5zcXJ0KDUwKSxcbiAgICBlNSA9IE1hdGguc3FydCgxMCksXG4gICAgZTIgPSBNYXRoLnNxcnQoMik7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHN0YXJ0LCBzdG9wLCBjb3VudCkge1xuICB2YXIgcmV2ZXJzZSxcbiAgICAgIGkgPSAtMSxcbiAgICAgIG4sXG4gICAgICB0aWNrcyxcbiAgICAgIHN0ZXA7XG5cbiAgc3RvcCA9ICtzdG9wLCBzdGFydCA9ICtzdGFydCwgY291bnQgPSArY291bnQ7XG4gIGlmIChzdGFydCA9PT0gc3RvcCAmJiBjb3VudCA+IDApIHJldHVybiBbc3RhcnRdO1xuICBpZiAocmV2ZXJzZSA9IHN0b3AgPCBzdGFydCkgbiA9IHN0YXJ0LCBzdGFydCA9IHN0b3AsIHN0b3AgPSBuO1xuICBpZiAoKHN0ZXAgPSB0aWNrSW5jcmVtZW50KHN0YXJ0LCBzdG9wLCBjb3VudCkpID09PSAwIHx8ICFpc0Zpbml0ZShzdGVwKSkgcmV0dXJuIFtdO1xuXG4gIGlmIChzdGVwID4gMCkge1xuICAgIHN0YXJ0ID0gTWF0aC5jZWlsKHN0YXJ0IC8gc3RlcCk7XG4gICAgc3RvcCA9IE1hdGguZmxvb3Ioc3RvcCAvIHN0ZXApO1xuICAgIHRpY2tzID0gbmV3IEFycmF5KG4gPSBNYXRoLmNlaWwoc3RvcCAtIHN0YXJ0ICsgMSkpO1xuICAgIHdoaWxlICgrK2kgPCBuKSB0aWNrc1tpXSA9IChzdGFydCArIGkpICogc3RlcDtcbiAgfSBlbHNlIHtcbiAgICBzdGFydCA9IE1hdGguZmxvb3Ioc3RhcnQgKiBzdGVwKTtcbiAgICBzdG9wID0gTWF0aC5jZWlsKHN0b3AgKiBzdGVwKTtcbiAgICB0aWNrcyA9IG5ldyBBcnJheShuID0gTWF0aC5jZWlsKHN0YXJ0IC0gc3RvcCArIDEpKTtcbiAgICB3aGlsZSAoKytpIDwgbikgdGlja3NbaV0gPSAoc3RhcnQgLSBpKSAvIHN0ZXA7XG4gIH1cblxuICBpZiAocmV2ZXJzZSkgdGlja3MucmV2ZXJzZSgpO1xuXG4gIHJldHVybiB0aWNrcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRpY2tJbmNyZW1lbnQoc3RhcnQsIHN0b3AsIGNvdW50KSB7XG4gIHZhciBzdGVwID0gKHN0b3AgLSBzdGFydCkgLyBNYXRoLm1heCgwLCBjb3VudCksXG4gICAgICBwb3dlciA9IE1hdGguZmxvb3IoTWF0aC5sb2coc3RlcCkgLyBNYXRoLkxOMTApLFxuICAgICAgZXJyb3IgPSBzdGVwIC8gTWF0aC5wb3coMTAsIHBvd2VyKTtcbiAgcmV0dXJuIHBvd2VyID49IDBcbiAgICAgID8gKGVycm9yID49IGUxMCA/IDEwIDogZXJyb3IgPj0gZTUgPyA1IDogZXJyb3IgPj0gZTIgPyAyIDogMSkgKiBNYXRoLnBvdygxMCwgcG93ZXIpXG4gICAgICA6IC1NYXRoLnBvdygxMCwgLXBvd2VyKSAvIChlcnJvciA+PSBlMTAgPyAxMCA6IGVycm9yID49IGU1ID8gNSA6IGVycm9yID49IGUyID8gMiA6IDEpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdGlja1N0ZXAoc3RhcnQsIHN0b3AsIGNvdW50KSB7XG4gIHZhciBzdGVwMCA9IE1hdGguYWJzKHN0b3AgLSBzdGFydCkgLyBNYXRoLm1heCgwLCBjb3VudCksXG4gICAgICBzdGVwMSA9IE1hdGgucG93KDEwLCBNYXRoLmZsb29yKE1hdGgubG9nKHN0ZXAwKSAvIE1hdGguTE4xMCkpLFxuICAgICAgZXJyb3IgPSBzdGVwMCAvIHN0ZXAxO1xuICBpZiAoZXJyb3IgPj0gZTEwKSBzdGVwMSAqPSAxMDtcbiAgZWxzZSBpZiAoZXJyb3IgPj0gZTUpIHN0ZXAxICo9IDU7XG4gIGVsc2UgaWYgKGVycm9yID49IGUyKSBzdGVwMSAqPSAyO1xuICByZXR1cm4gc3RvcCA8IHN0YXJ0ID8gLXN0ZXAxIDogc3RlcDE7XG59XG4iLCJleHBvcnQgZnVuY3Rpb24gaW5pdFJhbmdlKGRvbWFpbiwgcmFuZ2UpIHtcbiAgc3dpdGNoIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgY2FzZSAwOiBicmVhaztcbiAgICBjYXNlIDE6IHRoaXMucmFuZ2UoZG9tYWluKTsgYnJlYWs7XG4gICAgZGVmYXVsdDogdGhpcy5yYW5nZShyYW5nZSkuZG9tYWluKGRvbWFpbik7IGJyZWFrO1xuICB9XG4gIHJldHVybiB0aGlzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaW5pdEludGVycG9sYXRvcihkb21haW4sIGludGVycG9sYXRvcikge1xuICBzd2l0Y2ggKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICBjYXNlIDA6IGJyZWFrO1xuICAgIGNhc2UgMTogdGhpcy5pbnRlcnBvbGF0b3IoZG9tYWluKTsgYnJlYWs7XG4gICAgZGVmYXVsdDogdGhpcy5pbnRlcnBvbGF0b3IoaW50ZXJwb2xhdG9yKS5kb21haW4oZG9tYWluKTsgYnJlYWs7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG4iLCJleHBvcnQgdmFyIHByZWZpeCA9IFwiJFwiO1xuXG5mdW5jdGlvbiBNYXAoKSB7fVxuXG5NYXAucHJvdG90eXBlID0gbWFwLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IE1hcCxcbiAgaGFzOiBmdW5jdGlvbihrZXkpIHtcbiAgICByZXR1cm4gKHByZWZpeCArIGtleSkgaW4gdGhpcztcbiAgfSxcbiAgZ2V0OiBmdW5jdGlvbihrZXkpIHtcbiAgICByZXR1cm4gdGhpc1twcmVmaXggKyBrZXldO1xuICB9LFxuICBzZXQ6IGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICB0aGlzW3ByZWZpeCArIGtleV0gPSB2YWx1ZTtcbiAgICByZXR1cm4gdGhpcztcbiAgfSxcbiAgcmVtb3ZlOiBmdW5jdGlvbihrZXkpIHtcbiAgICB2YXIgcHJvcGVydHkgPSBwcmVmaXggKyBrZXk7XG4gICAgcmV0dXJuIHByb3BlcnR5IGluIHRoaXMgJiYgZGVsZXRlIHRoaXNbcHJvcGVydHldO1xuICB9LFxuICBjbGVhcjogZnVuY3Rpb24oKSB7XG4gICAgZm9yICh2YXIgcHJvcGVydHkgaW4gdGhpcykgaWYgKHByb3BlcnR5WzBdID09PSBwcmVmaXgpIGRlbGV0ZSB0aGlzW3Byb3BlcnR5XTtcbiAgfSxcbiAga2V5czogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGtleXMgPSBbXTtcbiAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiB0aGlzKSBpZiAocHJvcGVydHlbMF0gPT09IHByZWZpeCkga2V5cy5wdXNoKHByb3BlcnR5LnNsaWNlKDEpKTtcbiAgICByZXR1cm4ga2V5cztcbiAgfSxcbiAgdmFsdWVzOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdmFsdWVzID0gW107XG4gICAgZm9yICh2YXIgcHJvcGVydHkgaW4gdGhpcykgaWYgKHByb3BlcnR5WzBdID09PSBwcmVmaXgpIHZhbHVlcy5wdXNoKHRoaXNbcHJvcGVydHldKTtcbiAgICByZXR1cm4gdmFsdWVzO1xuICB9LFxuICBlbnRyaWVzOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgZW50cmllcyA9IFtdO1xuICAgIGZvciAodmFyIHByb3BlcnR5IGluIHRoaXMpIGlmIChwcm9wZXJ0eVswXSA9PT0gcHJlZml4KSBlbnRyaWVzLnB1c2goe2tleTogcHJvcGVydHkuc2xpY2UoMSksIHZhbHVlOiB0aGlzW3Byb3BlcnR5XX0pO1xuICAgIHJldHVybiBlbnRyaWVzO1xuICB9LFxuICBzaXplOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc2l6ZSA9IDA7XG4gICAgZm9yICh2YXIgcHJvcGVydHkgaW4gdGhpcykgaWYgKHByb3BlcnR5WzBdID09PSBwcmVmaXgpICsrc2l6ZTtcbiAgICByZXR1cm4gc2l6ZTtcbiAgfSxcbiAgZW1wdHk6IGZ1bmN0aW9uKCkge1xuICAgIGZvciAodmFyIHByb3BlcnR5IGluIHRoaXMpIGlmIChwcm9wZXJ0eVswXSA9PT0gcHJlZml4KSByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0sXG4gIGVhY2g6IGZ1bmN0aW9uKGYpIHtcbiAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiB0aGlzKSBpZiAocHJvcGVydHlbMF0gPT09IHByZWZpeCkgZih0aGlzW3Byb3BlcnR5XSwgcHJvcGVydHkuc2xpY2UoMSksIHRoaXMpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBtYXAob2JqZWN0LCBmKSB7XG4gIHZhciBtYXAgPSBuZXcgTWFwO1xuXG4gIC8vIENvcHkgY29uc3RydWN0b3IuXG4gIGlmIChvYmplY3QgaW5zdGFuY2VvZiBNYXApIG9iamVjdC5lYWNoKGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHsgbWFwLnNldChrZXksIHZhbHVlKTsgfSk7XG5cbiAgLy8gSW5kZXggYXJyYXkgYnkgbnVtZXJpYyBpbmRleCBvciBzcGVjaWZpZWQga2V5IGZ1bmN0aW9uLlxuICBlbHNlIGlmIChBcnJheS5pc0FycmF5KG9iamVjdCkpIHtcbiAgICB2YXIgaSA9IC0xLFxuICAgICAgICBuID0gb2JqZWN0Lmxlbmd0aCxcbiAgICAgICAgbztcblxuICAgIGlmIChmID09IG51bGwpIHdoaWxlICgrK2kgPCBuKSBtYXAuc2V0KGksIG9iamVjdFtpXSk7XG4gICAgZWxzZSB3aGlsZSAoKytpIDwgbikgbWFwLnNldChmKG8gPSBvYmplY3RbaV0sIGksIG9iamVjdCksIG8pO1xuICB9XG5cbiAgLy8gQ29udmVydCBvYmplY3QgdG8gbWFwLlxuICBlbHNlIGlmIChvYmplY3QpIGZvciAodmFyIGtleSBpbiBvYmplY3QpIG1hcC5zZXQoa2V5LCBvYmplY3Rba2V5XSk7XG5cbiAgcmV0dXJuIG1hcDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbWFwO1xuIiwiaW1wb3J0IHtkZWZhdWx0IGFzIG1hcCwgcHJlZml4fSBmcm9tIFwiLi9tYXBcIjtcblxuZnVuY3Rpb24gU2V0KCkge31cblxudmFyIHByb3RvID0gbWFwLnByb3RvdHlwZTtcblxuU2V0LnByb3RvdHlwZSA9IHNldC5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBTZXQsXG4gIGhhczogcHJvdG8uaGFzLFxuICBhZGQ6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgdmFsdWUgKz0gXCJcIjtcbiAgICB0aGlzW3ByZWZpeCArIHZhbHVlXSA9IHZhbHVlO1xuICAgIHJldHVybiB0aGlzO1xuICB9LFxuICByZW1vdmU6IHByb3RvLnJlbW92ZSxcbiAgY2xlYXI6IHByb3RvLmNsZWFyLFxuICB2YWx1ZXM6IHByb3RvLmtleXMsXG4gIHNpemU6IHByb3RvLnNpemUsXG4gIGVtcHR5OiBwcm90by5lbXB0eSxcbiAgZWFjaDogcHJvdG8uZWFjaFxufTtcblxuZnVuY3Rpb24gc2V0KG9iamVjdCwgZikge1xuICB2YXIgc2V0ID0gbmV3IFNldDtcblxuICAvLyBDb3B5IGNvbnN0cnVjdG9yLlxuICBpZiAob2JqZWN0IGluc3RhbmNlb2YgU2V0KSBvYmplY3QuZWFjaChmdW5jdGlvbih2YWx1ZSkgeyBzZXQuYWRkKHZhbHVlKTsgfSk7XG5cbiAgLy8gT3RoZXJ3aXNlLCBhc3N1bWUgaXTigJlzIGFuIGFycmF5LlxuICBlbHNlIGlmIChvYmplY3QpIHtcbiAgICB2YXIgaSA9IC0xLCBuID0gb2JqZWN0Lmxlbmd0aDtcbiAgICBpZiAoZiA9PSBudWxsKSB3aGlsZSAoKytpIDwgbikgc2V0LmFkZChvYmplY3RbaV0pO1xuICAgIGVsc2Ugd2hpbGUgKCsraSA8IG4pIHNldC5hZGQoZihvYmplY3RbaV0sIGksIG9iamVjdCkpO1xuICB9XG5cbiAgcmV0dXJuIHNldDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgc2V0O1xuIiwidmFyIGFycmF5ID0gQXJyYXkucHJvdG90eXBlO1xuXG5leHBvcnQgdmFyIG1hcCA9IGFycmF5Lm1hcDtcbmV4cG9ydCB2YXIgc2xpY2UgPSBhcnJheS5zbGljZTtcbiIsImltcG9ydCB7bWFwfSBmcm9tIFwiZDMtY29sbGVjdGlvblwiO1xuaW1wb3J0IHtzbGljZX0gZnJvbSBcIi4vYXJyYXlcIjtcbmltcG9ydCB7aW5pdFJhbmdlfSBmcm9tIFwiLi9pbml0XCI7XG5cbmV4cG9ydCB2YXIgaW1wbGljaXQgPSB7bmFtZTogXCJpbXBsaWNpdFwifTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gb3JkaW5hbCgpIHtcbiAgdmFyIGluZGV4ID0gbWFwKCksXG4gICAgICBkb21haW4gPSBbXSxcbiAgICAgIHJhbmdlID0gW10sXG4gICAgICB1bmtub3duID0gaW1wbGljaXQ7XG5cbiAgZnVuY3Rpb24gc2NhbGUoZCkge1xuICAgIHZhciBrZXkgPSBkICsgXCJcIiwgaSA9IGluZGV4LmdldChrZXkpO1xuICAgIGlmICghaSkge1xuICAgICAgaWYgKHVua25vd24gIT09IGltcGxpY2l0KSByZXR1cm4gdW5rbm93bjtcbiAgICAgIGluZGV4LnNldChrZXksIGkgPSBkb21haW4ucHVzaChkKSk7XG4gICAgfVxuICAgIHJldHVybiByYW5nZVsoaSAtIDEpICUgcmFuZ2UubGVuZ3RoXTtcbiAgfVxuXG4gIHNjYWxlLmRvbWFpbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBkb21haW4uc2xpY2UoKTtcbiAgICBkb21haW4gPSBbXSwgaW5kZXggPSBtYXAoKTtcbiAgICB2YXIgaSA9IC0xLCBuID0gXy5sZW5ndGgsIGQsIGtleTtcbiAgICB3aGlsZSAoKytpIDwgbikgaWYgKCFpbmRleC5oYXMoa2V5ID0gKGQgPSBfW2ldKSArIFwiXCIpKSBpbmRleC5zZXQoa2V5LCBkb21haW4ucHVzaChkKSk7XG4gICAgcmV0dXJuIHNjYWxlO1xuICB9O1xuXG4gIHNjYWxlLnJhbmdlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHJhbmdlID0gc2xpY2UuY2FsbChfKSwgc2NhbGUpIDogcmFuZ2Uuc2xpY2UoKTtcbiAgfTtcblxuICBzY2FsZS51bmtub3duID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHVua25vd24gPSBfLCBzY2FsZSkgOiB1bmtub3duO1xuICB9O1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gb3JkaW5hbChkb21haW4sIHJhbmdlKS51bmtub3duKHVua25vd24pO1xuICB9O1xuXG4gIGluaXRSYW5nZS5hcHBseShzY2FsZSwgYXJndW1lbnRzKTtcblxuICByZXR1cm4gc2NhbGU7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjb25zdHJ1Y3RvciwgZmFjdG9yeSwgcHJvdG90eXBlKSB7XG4gIGNvbnN0cnVjdG9yLnByb3RvdHlwZSA9IGZhY3RvcnkucHJvdG90eXBlID0gcHJvdG90eXBlO1xuICBwcm90b3R5cGUuY29uc3RydWN0b3IgPSBjb25zdHJ1Y3Rvcjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGV4dGVuZChwYXJlbnQsIGRlZmluaXRpb24pIHtcbiAgdmFyIHByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUocGFyZW50LnByb3RvdHlwZSk7XG4gIGZvciAodmFyIGtleSBpbiBkZWZpbml0aW9uKSBwcm90b3R5cGVba2V5XSA9IGRlZmluaXRpb25ba2V5XTtcbiAgcmV0dXJuIHByb3RvdHlwZTtcbn1cbiIsImltcG9ydCBkZWZpbmUsIHtleHRlbmR9IGZyb20gXCIuL2RlZmluZS5qc1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gQ29sb3IoKSB7fVxuXG5leHBvcnQgdmFyIGRhcmtlciA9IDAuNztcbmV4cG9ydCB2YXIgYnJpZ2h0ZXIgPSAxIC8gZGFya2VyO1xuXG52YXIgcmVJID0gXCJcXFxccyooWystXT9cXFxcZCspXFxcXHMqXCIsXG4gICAgcmVOID0gXCJcXFxccyooWystXT9cXFxcZCpcXFxcLj9cXFxcZCsoPzpbZUVdWystXT9cXFxcZCspPylcXFxccypcIixcbiAgICByZVAgPSBcIlxcXFxzKihbKy1dP1xcXFxkKlxcXFwuP1xcXFxkKyg/OltlRV1bKy1dP1xcXFxkKyk/KSVcXFxccypcIixcbiAgICByZUhleCA9IC9eIyhbMC05YS1mXXszLDh9KSQvLFxuICAgIHJlUmdiSW50ZWdlciA9IG5ldyBSZWdFeHAoXCJecmdiXFxcXChcIiArIFtyZUksIHJlSSwgcmVJXSArIFwiXFxcXCkkXCIpLFxuICAgIHJlUmdiUGVyY2VudCA9IG5ldyBSZWdFeHAoXCJecmdiXFxcXChcIiArIFtyZVAsIHJlUCwgcmVQXSArIFwiXFxcXCkkXCIpLFxuICAgIHJlUmdiYUludGVnZXIgPSBuZXcgUmVnRXhwKFwiXnJnYmFcXFxcKFwiICsgW3JlSSwgcmVJLCByZUksIHJlTl0gKyBcIlxcXFwpJFwiKSxcbiAgICByZVJnYmFQZXJjZW50ID0gbmV3IFJlZ0V4cChcIl5yZ2JhXFxcXChcIiArIFtyZVAsIHJlUCwgcmVQLCByZU5dICsgXCJcXFxcKSRcIiksXG4gICAgcmVIc2xQZXJjZW50ID0gbmV3IFJlZ0V4cChcIl5oc2xcXFxcKFwiICsgW3JlTiwgcmVQLCByZVBdICsgXCJcXFxcKSRcIiksXG4gICAgcmVIc2xhUGVyY2VudCA9IG5ldyBSZWdFeHAoXCJeaHNsYVxcXFwoXCIgKyBbcmVOLCByZVAsIHJlUCwgcmVOXSArIFwiXFxcXCkkXCIpO1xuXG52YXIgbmFtZWQgPSB7XG4gIGFsaWNlYmx1ZTogMHhmMGY4ZmYsXG4gIGFudGlxdWV3aGl0ZTogMHhmYWViZDcsXG4gIGFxdWE6IDB4MDBmZmZmLFxuICBhcXVhbWFyaW5lOiAweDdmZmZkNCxcbiAgYXp1cmU6IDB4ZjBmZmZmLFxuICBiZWlnZTogMHhmNWY1ZGMsXG4gIGJpc3F1ZTogMHhmZmU0YzQsXG4gIGJsYWNrOiAweDAwMDAwMCxcbiAgYmxhbmNoZWRhbG1vbmQ6IDB4ZmZlYmNkLFxuICBibHVlOiAweDAwMDBmZixcbiAgYmx1ZXZpb2xldDogMHg4YTJiZTIsXG4gIGJyb3duOiAweGE1MmEyYSxcbiAgYnVybHl3b29kOiAweGRlYjg4NyxcbiAgY2FkZXRibHVlOiAweDVmOWVhMCxcbiAgY2hhcnRyZXVzZTogMHg3ZmZmMDAsXG4gIGNob2NvbGF0ZTogMHhkMjY5MWUsXG4gIGNvcmFsOiAweGZmN2Y1MCxcbiAgY29ybmZsb3dlcmJsdWU6IDB4NjQ5NWVkLFxuICBjb3Juc2lsazogMHhmZmY4ZGMsXG4gIGNyaW1zb246IDB4ZGMxNDNjLFxuICBjeWFuOiAweDAwZmZmZixcbiAgZGFya2JsdWU6IDB4MDAwMDhiLFxuICBkYXJrY3lhbjogMHgwMDhiOGIsXG4gIGRhcmtnb2xkZW5yb2Q6IDB4Yjg4NjBiLFxuICBkYXJrZ3JheTogMHhhOWE5YTksXG4gIGRhcmtncmVlbjogMHgwMDY0MDAsXG4gIGRhcmtncmV5OiAweGE5YTlhOSxcbiAgZGFya2toYWtpOiAweGJkYjc2YixcbiAgZGFya21hZ2VudGE6IDB4OGIwMDhiLFxuICBkYXJrb2xpdmVncmVlbjogMHg1NTZiMmYsXG4gIGRhcmtvcmFuZ2U6IDB4ZmY4YzAwLFxuICBkYXJrb3JjaGlkOiAweDk5MzJjYyxcbiAgZGFya3JlZDogMHg4YjAwMDAsXG4gIGRhcmtzYWxtb246IDB4ZTk5NjdhLFxuICBkYXJrc2VhZ3JlZW46IDB4OGZiYzhmLFxuICBkYXJrc2xhdGVibHVlOiAweDQ4M2Q4YixcbiAgZGFya3NsYXRlZ3JheTogMHgyZjRmNGYsXG4gIGRhcmtzbGF0ZWdyZXk6IDB4MmY0ZjRmLFxuICBkYXJrdHVycXVvaXNlOiAweDAwY2VkMSxcbiAgZGFya3Zpb2xldDogMHg5NDAwZDMsXG4gIGRlZXBwaW5rOiAweGZmMTQ5MyxcbiAgZGVlcHNreWJsdWU6IDB4MDBiZmZmLFxuICBkaW1ncmF5OiAweDY5Njk2OSxcbiAgZGltZ3JleTogMHg2OTY5NjksXG4gIGRvZGdlcmJsdWU6IDB4MWU5MGZmLFxuICBmaXJlYnJpY2s6IDB4YjIyMjIyLFxuICBmbG9yYWx3aGl0ZTogMHhmZmZhZjAsXG4gIGZvcmVzdGdyZWVuOiAweDIyOGIyMixcbiAgZnVjaHNpYTogMHhmZjAwZmYsXG4gIGdhaW5zYm9ybzogMHhkY2RjZGMsXG4gIGdob3N0d2hpdGU6IDB4ZjhmOGZmLFxuICBnb2xkOiAweGZmZDcwMCxcbiAgZ29sZGVucm9kOiAweGRhYTUyMCxcbiAgZ3JheTogMHg4MDgwODAsXG4gIGdyZWVuOiAweDAwODAwMCxcbiAgZ3JlZW55ZWxsb3c6IDB4YWRmZjJmLFxuICBncmV5OiAweDgwODA4MCxcbiAgaG9uZXlkZXc6IDB4ZjBmZmYwLFxuICBob3RwaW5rOiAweGZmNjliNCxcbiAgaW5kaWFucmVkOiAweGNkNWM1YyxcbiAgaW5kaWdvOiAweDRiMDA4MixcbiAgaXZvcnk6IDB4ZmZmZmYwLFxuICBraGFraTogMHhmMGU2OGMsXG4gIGxhdmVuZGVyOiAweGU2ZTZmYSxcbiAgbGF2ZW5kZXJibHVzaDogMHhmZmYwZjUsXG4gIGxhd25ncmVlbjogMHg3Y2ZjMDAsXG4gIGxlbW9uY2hpZmZvbjogMHhmZmZhY2QsXG4gIGxpZ2h0Ymx1ZTogMHhhZGQ4ZTYsXG4gIGxpZ2h0Y29yYWw6IDB4ZjA4MDgwLFxuICBsaWdodGN5YW46IDB4ZTBmZmZmLFxuICBsaWdodGdvbGRlbnJvZHllbGxvdzogMHhmYWZhZDIsXG4gIGxpZ2h0Z3JheTogMHhkM2QzZDMsXG4gIGxpZ2h0Z3JlZW46IDB4OTBlZTkwLFxuICBsaWdodGdyZXk6IDB4ZDNkM2QzLFxuICBsaWdodHBpbms6IDB4ZmZiNmMxLFxuICBsaWdodHNhbG1vbjogMHhmZmEwN2EsXG4gIGxpZ2h0c2VhZ3JlZW46IDB4MjBiMmFhLFxuICBsaWdodHNreWJsdWU6IDB4ODdjZWZhLFxuICBsaWdodHNsYXRlZ3JheTogMHg3Nzg4OTksXG4gIGxpZ2h0c2xhdGVncmV5OiAweDc3ODg5OSxcbiAgbGlnaHRzdGVlbGJsdWU6IDB4YjBjNGRlLFxuICBsaWdodHllbGxvdzogMHhmZmZmZTAsXG4gIGxpbWU6IDB4MDBmZjAwLFxuICBsaW1lZ3JlZW46IDB4MzJjZDMyLFxuICBsaW5lbjogMHhmYWYwZTYsXG4gIG1hZ2VudGE6IDB4ZmYwMGZmLFxuICBtYXJvb246IDB4ODAwMDAwLFxuICBtZWRpdW1hcXVhbWFyaW5lOiAweDY2Y2RhYSxcbiAgbWVkaXVtYmx1ZTogMHgwMDAwY2QsXG4gIG1lZGl1bW9yY2hpZDogMHhiYTU1ZDMsXG4gIG1lZGl1bXB1cnBsZTogMHg5MzcwZGIsXG4gIG1lZGl1bXNlYWdyZWVuOiAweDNjYjM3MSxcbiAgbWVkaXVtc2xhdGVibHVlOiAweDdiNjhlZSxcbiAgbWVkaXVtc3ByaW5nZ3JlZW46IDB4MDBmYTlhLFxuICBtZWRpdW10dXJxdW9pc2U6IDB4NDhkMWNjLFxuICBtZWRpdW12aW9sZXRyZWQ6IDB4YzcxNTg1LFxuICBtaWRuaWdodGJsdWU6IDB4MTkxOTcwLFxuICBtaW50Y3JlYW06IDB4ZjVmZmZhLFxuICBtaXN0eXJvc2U6IDB4ZmZlNGUxLFxuICBtb2NjYXNpbjogMHhmZmU0YjUsXG4gIG5hdmFqb3doaXRlOiAweGZmZGVhZCxcbiAgbmF2eTogMHgwMDAwODAsXG4gIG9sZGxhY2U6IDB4ZmRmNWU2LFxuICBvbGl2ZTogMHg4MDgwMDAsXG4gIG9saXZlZHJhYjogMHg2YjhlMjMsXG4gIG9yYW5nZTogMHhmZmE1MDAsXG4gIG9yYW5nZXJlZDogMHhmZjQ1MDAsXG4gIG9yY2hpZDogMHhkYTcwZDYsXG4gIHBhbGVnb2xkZW5yb2Q6IDB4ZWVlOGFhLFxuICBwYWxlZ3JlZW46IDB4OThmYjk4LFxuICBwYWxldHVycXVvaXNlOiAweGFmZWVlZSxcbiAgcGFsZXZpb2xldHJlZDogMHhkYjcwOTMsXG4gIHBhcGF5YXdoaXA6IDB4ZmZlZmQ1LFxuICBwZWFjaHB1ZmY6IDB4ZmZkYWI5LFxuICBwZXJ1OiAweGNkODUzZixcbiAgcGluazogMHhmZmMwY2IsXG4gIHBsdW06IDB4ZGRhMGRkLFxuICBwb3dkZXJibHVlOiAweGIwZTBlNixcbiAgcHVycGxlOiAweDgwMDA4MCxcbiAgcmViZWNjYXB1cnBsZTogMHg2NjMzOTksXG4gIHJlZDogMHhmZjAwMDAsXG4gIHJvc3licm93bjogMHhiYzhmOGYsXG4gIHJveWFsYmx1ZTogMHg0MTY5ZTEsXG4gIHNhZGRsZWJyb3duOiAweDhiNDUxMyxcbiAgc2FsbW9uOiAweGZhODA3MixcbiAgc2FuZHlicm93bjogMHhmNGE0NjAsXG4gIHNlYWdyZWVuOiAweDJlOGI1NyxcbiAgc2Vhc2hlbGw6IDB4ZmZmNWVlLFxuICBzaWVubmE6IDB4YTA1MjJkLFxuICBzaWx2ZXI6IDB4YzBjMGMwLFxuICBza3libHVlOiAweDg3Y2VlYixcbiAgc2xhdGVibHVlOiAweDZhNWFjZCxcbiAgc2xhdGVncmF5OiAweDcwODA5MCxcbiAgc2xhdGVncmV5OiAweDcwODA5MCxcbiAgc25vdzogMHhmZmZhZmEsXG4gIHNwcmluZ2dyZWVuOiAweDAwZmY3ZixcbiAgc3RlZWxibHVlOiAweDQ2ODJiNCxcbiAgdGFuOiAweGQyYjQ4YyxcbiAgdGVhbDogMHgwMDgwODAsXG4gIHRoaXN0bGU6IDB4ZDhiZmQ4LFxuICB0b21hdG86IDB4ZmY2MzQ3LFxuICB0dXJxdW9pc2U6IDB4NDBlMGQwLFxuICB2aW9sZXQ6IDB4ZWU4MmVlLFxuICB3aGVhdDogMHhmNWRlYjMsXG4gIHdoaXRlOiAweGZmZmZmZixcbiAgd2hpdGVzbW9rZTogMHhmNWY1ZjUsXG4gIHllbGxvdzogMHhmZmZmMDAsXG4gIHllbGxvd2dyZWVuOiAweDlhY2QzMlxufTtcblxuZGVmaW5lKENvbG9yLCBjb2xvciwge1xuICBjb3B5OiBmdW5jdGlvbihjaGFubmVscykge1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKG5ldyB0aGlzLmNvbnN0cnVjdG9yLCB0aGlzLCBjaGFubmVscyk7XG4gIH0sXG4gIGRpc3BsYXlhYmxlOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5yZ2IoKS5kaXNwbGF5YWJsZSgpO1xuICB9LFxuICBoZXg6IGNvbG9yX2Zvcm1hdEhleCwgLy8gRGVwcmVjYXRlZCEgVXNlIGNvbG9yLmZvcm1hdEhleC5cbiAgZm9ybWF0SGV4OiBjb2xvcl9mb3JtYXRIZXgsXG4gIGZvcm1hdEhzbDogY29sb3JfZm9ybWF0SHNsLFxuICBmb3JtYXRSZ2I6IGNvbG9yX2Zvcm1hdFJnYixcbiAgdG9TdHJpbmc6IGNvbG9yX2Zvcm1hdFJnYlxufSk7XG5cbmZ1bmN0aW9uIGNvbG9yX2Zvcm1hdEhleCgpIHtcbiAgcmV0dXJuIHRoaXMucmdiKCkuZm9ybWF0SGV4KCk7XG59XG5cbmZ1bmN0aW9uIGNvbG9yX2Zvcm1hdEhzbCgpIHtcbiAgcmV0dXJuIGhzbENvbnZlcnQodGhpcykuZm9ybWF0SHNsKCk7XG59XG5cbmZ1bmN0aW9uIGNvbG9yX2Zvcm1hdFJnYigpIHtcbiAgcmV0dXJuIHRoaXMucmdiKCkuZm9ybWF0UmdiKCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbG9yKGZvcm1hdCkge1xuICB2YXIgbSwgbDtcbiAgZm9ybWF0ID0gKGZvcm1hdCArIFwiXCIpLnRyaW0oKS50b0xvd2VyQ2FzZSgpO1xuICByZXR1cm4gKG0gPSByZUhleC5leGVjKGZvcm1hdCkpID8gKGwgPSBtWzFdLmxlbmd0aCwgbSA9IHBhcnNlSW50KG1bMV0sIDE2KSwgbCA9PT0gNiA/IHJnYm4obSkgLy8gI2ZmMDAwMFxuICAgICAgOiBsID09PSAzID8gbmV3IFJnYigobSA+PiA4ICYgMHhmKSB8IChtID4+IDQgJiAweGYwKSwgKG0gPj4gNCAmIDB4ZikgfCAobSAmIDB4ZjApLCAoKG0gJiAweGYpIDw8IDQpIHwgKG0gJiAweGYpLCAxKSAvLyAjZjAwXG4gICAgICA6IGwgPT09IDggPyBuZXcgUmdiKG0gPj4gMjQgJiAweGZmLCBtID4+IDE2ICYgMHhmZiwgbSA+PiA4ICYgMHhmZiwgKG0gJiAweGZmKSAvIDB4ZmYpIC8vICNmZjAwMDAwMFxuICAgICAgOiBsID09PSA0ID8gbmV3IFJnYigobSA+PiAxMiAmIDB4ZikgfCAobSA+PiA4ICYgMHhmMCksIChtID4+IDggJiAweGYpIHwgKG0gPj4gNCAmIDB4ZjApLCAobSA+PiA0ICYgMHhmKSB8IChtICYgMHhmMCksICgoKG0gJiAweGYpIDw8IDQpIHwgKG0gJiAweGYpKSAvIDB4ZmYpIC8vICNmMDAwXG4gICAgICA6IG51bGwpIC8vIGludmFsaWQgaGV4XG4gICAgICA6IChtID0gcmVSZ2JJbnRlZ2VyLmV4ZWMoZm9ybWF0KSkgPyBuZXcgUmdiKG1bMV0sIG1bMl0sIG1bM10sIDEpIC8vIHJnYigyNTUsIDAsIDApXG4gICAgICA6IChtID0gcmVSZ2JQZXJjZW50LmV4ZWMoZm9ybWF0KSkgPyBuZXcgUmdiKG1bMV0gKiAyNTUgLyAxMDAsIG1bMl0gKiAyNTUgLyAxMDAsIG1bM10gKiAyNTUgLyAxMDAsIDEpIC8vIHJnYigxMDAlLCAwJSwgMCUpXG4gICAgICA6IChtID0gcmVSZ2JhSW50ZWdlci5leGVjKGZvcm1hdCkpID8gcmdiYShtWzFdLCBtWzJdLCBtWzNdLCBtWzRdKSAvLyByZ2JhKDI1NSwgMCwgMCwgMSlcbiAgICAgIDogKG0gPSByZVJnYmFQZXJjZW50LmV4ZWMoZm9ybWF0KSkgPyByZ2JhKG1bMV0gKiAyNTUgLyAxMDAsIG1bMl0gKiAyNTUgLyAxMDAsIG1bM10gKiAyNTUgLyAxMDAsIG1bNF0pIC8vIHJnYigxMDAlLCAwJSwgMCUsIDEpXG4gICAgICA6IChtID0gcmVIc2xQZXJjZW50LmV4ZWMoZm9ybWF0KSkgPyBoc2xhKG1bMV0sIG1bMl0gLyAxMDAsIG1bM10gLyAxMDAsIDEpIC8vIGhzbCgxMjAsIDUwJSwgNTAlKVxuICAgICAgOiAobSA9IHJlSHNsYVBlcmNlbnQuZXhlYyhmb3JtYXQpKSA/IGhzbGEobVsxXSwgbVsyXSAvIDEwMCwgbVszXSAvIDEwMCwgbVs0XSkgLy8gaHNsYSgxMjAsIDUwJSwgNTAlLCAxKVxuICAgICAgOiBuYW1lZC5oYXNPd25Qcm9wZXJ0eShmb3JtYXQpID8gcmdibihuYW1lZFtmb3JtYXRdKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xuICAgICAgOiBmb3JtYXQgPT09IFwidHJhbnNwYXJlbnRcIiA/IG5ldyBSZ2IoTmFOLCBOYU4sIE5hTiwgMClcbiAgICAgIDogbnVsbDtcbn1cblxuZnVuY3Rpb24gcmdibihuKSB7XG4gIHJldHVybiBuZXcgUmdiKG4gPj4gMTYgJiAweGZmLCBuID4+IDggJiAweGZmLCBuICYgMHhmZiwgMSk7XG59XG5cbmZ1bmN0aW9uIHJnYmEociwgZywgYiwgYSkge1xuICBpZiAoYSA8PSAwKSByID0gZyA9IGIgPSBOYU47XG4gIHJldHVybiBuZXcgUmdiKHIsIGcsIGIsIGEpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmdiQ29udmVydChvKSB7XG4gIGlmICghKG8gaW5zdGFuY2VvZiBDb2xvcikpIG8gPSBjb2xvcihvKTtcbiAgaWYgKCFvKSByZXR1cm4gbmV3IFJnYjtcbiAgbyA9IG8ucmdiKCk7XG4gIHJldHVybiBuZXcgUmdiKG8uciwgby5nLCBvLmIsIG8ub3BhY2l0eSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZ2IociwgZywgYiwgb3BhY2l0eSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/IHJnYkNvbnZlcnQocikgOiBuZXcgUmdiKHIsIGcsIGIsIG9wYWNpdHkgPT0gbnVsbCA/IDEgOiBvcGFjaXR5KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFJnYihyLCBnLCBiLCBvcGFjaXR5KSB7XG4gIHRoaXMuciA9ICtyO1xuICB0aGlzLmcgPSArZztcbiAgdGhpcy5iID0gK2I7XG4gIHRoaXMub3BhY2l0eSA9ICtvcGFjaXR5O1xufVxuXG5kZWZpbmUoUmdiLCByZ2IsIGV4dGVuZChDb2xvciwge1xuICBicmlnaHRlcjogZnVuY3Rpb24oaykge1xuICAgIGsgPSBrID09IG51bGwgPyBicmlnaHRlciA6IE1hdGgucG93KGJyaWdodGVyLCBrKTtcbiAgICByZXR1cm4gbmV3IFJnYih0aGlzLnIgKiBrLCB0aGlzLmcgKiBrLCB0aGlzLmIgKiBrLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICBkYXJrZXI6IGZ1bmN0aW9uKGspIHtcbiAgICBrID0gayA9PSBudWxsID8gZGFya2VyIDogTWF0aC5wb3coZGFya2VyLCBrKTtcbiAgICByZXR1cm4gbmV3IFJnYih0aGlzLnIgKiBrLCB0aGlzLmcgKiBrLCB0aGlzLmIgKiBrLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICByZ2I6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9LFxuICBkaXNwbGF5YWJsZTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuICgtMC41IDw9IHRoaXMuciAmJiB0aGlzLnIgPCAyNTUuNSlcbiAgICAgICAgJiYgKC0wLjUgPD0gdGhpcy5nICYmIHRoaXMuZyA8IDI1NS41KVxuICAgICAgICAmJiAoLTAuNSA8PSB0aGlzLmIgJiYgdGhpcy5iIDwgMjU1LjUpXG4gICAgICAgICYmICgwIDw9IHRoaXMub3BhY2l0eSAmJiB0aGlzLm9wYWNpdHkgPD0gMSk7XG4gIH0sXG4gIGhleDogcmdiX2Zvcm1hdEhleCwgLy8gRGVwcmVjYXRlZCEgVXNlIGNvbG9yLmZvcm1hdEhleC5cbiAgZm9ybWF0SGV4OiByZ2JfZm9ybWF0SGV4LFxuICBmb3JtYXRSZ2I6IHJnYl9mb3JtYXRSZ2IsXG4gIHRvU3RyaW5nOiByZ2JfZm9ybWF0UmdiXG59KSk7XG5cbmZ1bmN0aW9uIHJnYl9mb3JtYXRIZXgoKSB7XG4gIHJldHVybiBcIiNcIiArIGhleCh0aGlzLnIpICsgaGV4KHRoaXMuZykgKyBoZXgodGhpcy5iKTtcbn1cblxuZnVuY3Rpb24gcmdiX2Zvcm1hdFJnYigpIHtcbiAgdmFyIGEgPSB0aGlzLm9wYWNpdHk7IGEgPSBpc05hTihhKSA/IDEgOiBNYXRoLm1heCgwLCBNYXRoLm1pbigxLCBhKSk7XG4gIHJldHVybiAoYSA9PT0gMSA/IFwicmdiKFwiIDogXCJyZ2JhKFwiKVxuICAgICAgKyBNYXRoLm1heCgwLCBNYXRoLm1pbigyNTUsIE1hdGgucm91bmQodGhpcy5yKSB8fCAwKSkgKyBcIiwgXCJcbiAgICAgICsgTWF0aC5tYXgoMCwgTWF0aC5taW4oMjU1LCBNYXRoLnJvdW5kKHRoaXMuZykgfHwgMCkpICsgXCIsIFwiXG4gICAgICArIE1hdGgubWF4KDAsIE1hdGgubWluKDI1NSwgTWF0aC5yb3VuZCh0aGlzLmIpIHx8IDApKVxuICAgICAgKyAoYSA9PT0gMSA/IFwiKVwiIDogXCIsIFwiICsgYSArIFwiKVwiKTtcbn1cblxuZnVuY3Rpb24gaGV4KHZhbHVlKSB7XG4gIHZhbHVlID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oMjU1LCBNYXRoLnJvdW5kKHZhbHVlKSB8fCAwKSk7XG4gIHJldHVybiAodmFsdWUgPCAxNiA/IFwiMFwiIDogXCJcIikgKyB2YWx1ZS50b1N0cmluZygxNik7XG59XG5cbmZ1bmN0aW9uIGhzbGEoaCwgcywgbCwgYSkge1xuICBpZiAoYSA8PSAwKSBoID0gcyA9IGwgPSBOYU47XG4gIGVsc2UgaWYgKGwgPD0gMCB8fCBsID49IDEpIGggPSBzID0gTmFOO1xuICBlbHNlIGlmIChzIDw9IDApIGggPSBOYU47XG4gIHJldHVybiBuZXcgSHNsKGgsIHMsIGwsIGEpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaHNsQ29udmVydChvKSB7XG4gIGlmIChvIGluc3RhbmNlb2YgSHNsKSByZXR1cm4gbmV3IEhzbChvLmgsIG8ucywgby5sLCBvLm9wYWNpdHkpO1xuICBpZiAoIShvIGluc3RhbmNlb2YgQ29sb3IpKSBvID0gY29sb3Iobyk7XG4gIGlmICghbykgcmV0dXJuIG5ldyBIc2w7XG4gIGlmIChvIGluc3RhbmNlb2YgSHNsKSByZXR1cm4gbztcbiAgbyA9IG8ucmdiKCk7XG4gIHZhciByID0gby5yIC8gMjU1LFxuICAgICAgZyA9IG8uZyAvIDI1NSxcbiAgICAgIGIgPSBvLmIgLyAyNTUsXG4gICAgICBtaW4gPSBNYXRoLm1pbihyLCBnLCBiKSxcbiAgICAgIG1heCA9IE1hdGgubWF4KHIsIGcsIGIpLFxuICAgICAgaCA9IE5hTixcbiAgICAgIHMgPSBtYXggLSBtaW4sXG4gICAgICBsID0gKG1heCArIG1pbikgLyAyO1xuICBpZiAocykge1xuICAgIGlmIChyID09PSBtYXgpIGggPSAoZyAtIGIpIC8gcyArIChnIDwgYikgKiA2O1xuICAgIGVsc2UgaWYgKGcgPT09IG1heCkgaCA9IChiIC0gcikgLyBzICsgMjtcbiAgICBlbHNlIGggPSAociAtIGcpIC8gcyArIDQ7XG4gICAgcyAvPSBsIDwgMC41ID8gbWF4ICsgbWluIDogMiAtIG1heCAtIG1pbjtcbiAgICBoICo9IDYwO1xuICB9IGVsc2Uge1xuICAgIHMgPSBsID4gMCAmJiBsIDwgMSA/IDAgOiBoO1xuICB9XG4gIHJldHVybiBuZXcgSHNsKGgsIHMsIGwsIG8ub3BhY2l0eSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoc2woaCwgcywgbCwgb3BhY2l0eSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/IGhzbENvbnZlcnQoaCkgOiBuZXcgSHNsKGgsIHMsIGwsIG9wYWNpdHkgPT0gbnVsbCA/IDEgOiBvcGFjaXR5KTtcbn1cblxuZnVuY3Rpb24gSHNsKGgsIHMsIGwsIG9wYWNpdHkpIHtcbiAgdGhpcy5oID0gK2g7XG4gIHRoaXMucyA9ICtzO1xuICB0aGlzLmwgPSArbDtcbiAgdGhpcy5vcGFjaXR5ID0gK29wYWNpdHk7XG59XG5cbmRlZmluZShIc2wsIGhzbCwgZXh0ZW5kKENvbG9yLCB7XG4gIGJyaWdodGVyOiBmdW5jdGlvbihrKSB7XG4gICAgayA9IGsgPT0gbnVsbCA/IGJyaWdodGVyIDogTWF0aC5wb3coYnJpZ2h0ZXIsIGspO1xuICAgIHJldHVybiBuZXcgSHNsKHRoaXMuaCwgdGhpcy5zLCB0aGlzLmwgKiBrLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICBkYXJrZXI6IGZ1bmN0aW9uKGspIHtcbiAgICBrID0gayA9PSBudWxsID8gZGFya2VyIDogTWF0aC5wb3coZGFya2VyLCBrKTtcbiAgICByZXR1cm4gbmV3IEhzbCh0aGlzLmgsIHRoaXMucywgdGhpcy5sICogaywgdGhpcy5vcGFjaXR5KTtcbiAgfSxcbiAgcmdiOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgaCA9IHRoaXMuaCAlIDM2MCArICh0aGlzLmggPCAwKSAqIDM2MCxcbiAgICAgICAgcyA9IGlzTmFOKGgpIHx8IGlzTmFOKHRoaXMucykgPyAwIDogdGhpcy5zLFxuICAgICAgICBsID0gdGhpcy5sLFxuICAgICAgICBtMiA9IGwgKyAobCA8IDAuNSA/IGwgOiAxIC0gbCkgKiBzLFxuICAgICAgICBtMSA9IDIgKiBsIC0gbTI7XG4gICAgcmV0dXJuIG5ldyBSZ2IoXG4gICAgICBoc2wycmdiKGggPj0gMjQwID8gaCAtIDI0MCA6IGggKyAxMjAsIG0xLCBtMiksXG4gICAgICBoc2wycmdiKGgsIG0xLCBtMiksXG4gICAgICBoc2wycmdiKGggPCAxMjAgPyBoICsgMjQwIDogaCAtIDEyMCwgbTEsIG0yKSxcbiAgICAgIHRoaXMub3BhY2l0eVxuICAgICk7XG4gIH0sXG4gIGRpc3BsYXlhYmxlOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gKDAgPD0gdGhpcy5zICYmIHRoaXMucyA8PSAxIHx8IGlzTmFOKHRoaXMucykpXG4gICAgICAgICYmICgwIDw9IHRoaXMubCAmJiB0aGlzLmwgPD0gMSlcbiAgICAgICAgJiYgKDAgPD0gdGhpcy5vcGFjaXR5ICYmIHRoaXMub3BhY2l0eSA8PSAxKTtcbiAgfSxcbiAgZm9ybWF0SHNsOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgYSA9IHRoaXMub3BhY2l0eTsgYSA9IGlzTmFOKGEpID8gMSA6IE1hdGgubWF4KDAsIE1hdGgubWluKDEsIGEpKTtcbiAgICByZXR1cm4gKGEgPT09IDEgPyBcImhzbChcIiA6IFwiaHNsYShcIilcbiAgICAgICAgKyAodGhpcy5oIHx8IDApICsgXCIsIFwiXG4gICAgICAgICsgKHRoaXMucyB8fCAwKSAqIDEwMCArIFwiJSwgXCJcbiAgICAgICAgKyAodGhpcy5sIHx8IDApICogMTAwICsgXCIlXCJcbiAgICAgICAgKyAoYSA9PT0gMSA/IFwiKVwiIDogXCIsIFwiICsgYSArIFwiKVwiKTtcbiAgfVxufSkpO1xuXG4vKiBGcm9tIEZ2RCAxMy4zNywgQ1NTIENvbG9yIE1vZHVsZSBMZXZlbCAzICovXG5mdW5jdGlvbiBoc2wycmdiKGgsIG0xLCBtMikge1xuICByZXR1cm4gKGggPCA2MCA/IG0xICsgKG0yIC0gbTEpICogaCAvIDYwXG4gICAgICA6IGggPCAxODAgPyBtMlxuICAgICAgOiBoIDwgMjQwID8gbTEgKyAobTIgLSBtMSkgKiAoMjQwIC0gaCkgLyA2MFxuICAgICAgOiBtMSkgKiAyNTU7XG59XG4iLCJleHBvcnQgZnVuY3Rpb24gYmFzaXModDEsIHYwLCB2MSwgdjIsIHYzKSB7XG4gIHZhciB0MiA9IHQxICogdDEsIHQzID0gdDIgKiB0MTtcbiAgcmV0dXJuICgoMSAtIDMgKiB0MSArIDMgKiB0MiAtIHQzKSAqIHYwXG4gICAgICArICg0IC0gNiAqIHQyICsgMyAqIHQzKSAqIHYxXG4gICAgICArICgxICsgMyAqIHQxICsgMyAqIHQyIC0gMyAqIHQzKSAqIHYyXG4gICAgICArIHQzICogdjMpIC8gNjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWVzKSB7XG4gIHZhciBuID0gdmFsdWVzLmxlbmd0aCAtIDE7XG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgdmFyIGkgPSB0IDw9IDAgPyAodCA9IDApIDogdCA+PSAxID8gKHQgPSAxLCBuIC0gMSkgOiBNYXRoLmZsb29yKHQgKiBuKSxcbiAgICAgICAgdjEgPSB2YWx1ZXNbaV0sXG4gICAgICAgIHYyID0gdmFsdWVzW2kgKyAxXSxcbiAgICAgICAgdjAgPSBpID4gMCA/IHZhbHVlc1tpIC0gMV0gOiAyICogdjEgLSB2MixcbiAgICAgICAgdjMgPSBpIDwgbiAtIDEgPyB2YWx1ZXNbaSArIDJdIDogMiAqIHYyIC0gdjE7XG4gICAgcmV0dXJuIGJhc2lzKCh0IC0gaSAvIG4pICogbiwgdjAsIHYxLCB2MiwgdjMpO1xuICB9O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHg7XG4gIH07XG59XG4iLCJpbXBvcnQgY29uc3RhbnQgZnJvbSBcIi4vY29uc3RhbnQuanNcIjtcblxuZnVuY3Rpb24gbGluZWFyKGEsIGQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICByZXR1cm4gYSArIHQgKiBkO1xuICB9O1xufVxuXG5mdW5jdGlvbiBleHBvbmVudGlhbChhLCBiLCB5KSB7XG4gIHJldHVybiBhID0gTWF0aC5wb3coYSwgeSksIGIgPSBNYXRoLnBvdyhiLCB5KSAtIGEsIHkgPSAxIC8geSwgZnVuY3Rpb24odCkge1xuICAgIHJldHVybiBNYXRoLnBvdyhhICsgdCAqIGIsIHkpO1xuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaHVlKGEsIGIpIHtcbiAgdmFyIGQgPSBiIC0gYTtcbiAgcmV0dXJuIGQgPyBsaW5lYXIoYSwgZCA+IDE4MCB8fCBkIDwgLTE4MCA/IGQgLSAzNjAgKiBNYXRoLnJvdW5kKGQgLyAzNjApIDogZCkgOiBjb25zdGFudChpc05hTihhKSA/IGIgOiBhKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdhbW1hKHkpIHtcbiAgcmV0dXJuICh5ID0gK3kpID09PSAxID8gbm9nYW1tYSA6IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICByZXR1cm4gYiAtIGEgPyBleHBvbmVudGlhbChhLCBiLCB5KSA6IGNvbnN0YW50KGlzTmFOKGEpID8gYiA6IGEpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBub2dhbW1hKGEsIGIpIHtcbiAgdmFyIGQgPSBiIC0gYTtcbiAgcmV0dXJuIGQgPyBsaW5lYXIoYSwgZCkgOiBjb25zdGFudChpc05hTihhKSA/IGIgOiBhKTtcbn1cbiIsImltcG9ydCB7cmdiIGFzIGNvbG9yUmdifSBmcm9tIFwiZDMtY29sb3JcIjtcbmltcG9ydCBiYXNpcyBmcm9tIFwiLi9iYXNpcy5qc1wiO1xuaW1wb3J0IGJhc2lzQ2xvc2VkIGZyb20gXCIuL2Jhc2lzQ2xvc2VkLmpzXCI7XG5pbXBvcnQgbm9nYW1tYSwge2dhbW1hfSBmcm9tIFwiLi9jb2xvci5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCAoZnVuY3Rpb24gcmdiR2FtbWEoeSkge1xuICB2YXIgY29sb3IgPSBnYW1tYSh5KTtcblxuICBmdW5jdGlvbiByZ2Ioc3RhcnQsIGVuZCkge1xuICAgIHZhciByID0gY29sb3IoKHN0YXJ0ID0gY29sb3JSZ2Ioc3RhcnQpKS5yLCAoZW5kID0gY29sb3JSZ2IoZW5kKSkuciksXG4gICAgICAgIGcgPSBjb2xvcihzdGFydC5nLCBlbmQuZyksXG4gICAgICAgIGIgPSBjb2xvcihzdGFydC5iLCBlbmQuYiksXG4gICAgICAgIG9wYWNpdHkgPSBub2dhbW1hKHN0YXJ0Lm9wYWNpdHksIGVuZC5vcGFjaXR5KTtcbiAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgc3RhcnQuciA9IHIodCk7XG4gICAgICBzdGFydC5nID0gZyh0KTtcbiAgICAgIHN0YXJ0LmIgPSBiKHQpO1xuICAgICAgc3RhcnQub3BhY2l0eSA9IG9wYWNpdHkodCk7XG4gICAgICByZXR1cm4gc3RhcnQgKyBcIlwiO1xuICAgIH07XG4gIH1cblxuICByZ2IuZ2FtbWEgPSByZ2JHYW1tYTtcblxuICByZXR1cm4gcmdiO1xufSkoMSk7XG5cbmZ1bmN0aW9uIHJnYlNwbGluZShzcGxpbmUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGNvbG9ycykge1xuICAgIHZhciBuID0gY29sb3JzLmxlbmd0aCxcbiAgICAgICAgciA9IG5ldyBBcnJheShuKSxcbiAgICAgICAgZyA9IG5ldyBBcnJheShuKSxcbiAgICAgICAgYiA9IG5ldyBBcnJheShuKSxcbiAgICAgICAgaSwgY29sb3I7XG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgY29sb3IgPSBjb2xvclJnYihjb2xvcnNbaV0pO1xuICAgICAgcltpXSA9IGNvbG9yLnIgfHwgMDtcbiAgICAgIGdbaV0gPSBjb2xvci5nIHx8IDA7XG4gICAgICBiW2ldID0gY29sb3IuYiB8fCAwO1xuICAgIH1cbiAgICByID0gc3BsaW5lKHIpO1xuICAgIGcgPSBzcGxpbmUoZyk7XG4gICAgYiA9IHNwbGluZShiKTtcbiAgICBjb2xvci5vcGFjaXR5ID0gMTtcbiAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgY29sb3IuciA9IHIodCk7XG4gICAgICBjb2xvci5nID0gZyh0KTtcbiAgICAgIGNvbG9yLmIgPSBiKHQpO1xuICAgICAgcmV0dXJuIGNvbG9yICsgXCJcIjtcbiAgICB9O1xuICB9O1xufVxuXG5leHBvcnQgdmFyIHJnYkJhc2lzID0gcmdiU3BsaW5lKGJhc2lzKTtcbmV4cG9ydCB2YXIgcmdiQmFzaXNDbG9zZWQgPSByZ2JTcGxpbmUoYmFzaXNDbG9zZWQpO1xuIiwiaW1wb3J0IHtiYXNpc30gZnJvbSBcIi4vYmFzaXMuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWVzKSB7XG4gIHZhciBuID0gdmFsdWVzLmxlbmd0aDtcbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICB2YXIgaSA9IE1hdGguZmxvb3IoKCh0ICU9IDEpIDwgMCA/ICsrdCA6IHQpICogbiksXG4gICAgICAgIHYwID0gdmFsdWVzWyhpICsgbiAtIDEpICUgbl0sXG4gICAgICAgIHYxID0gdmFsdWVzW2kgJSBuXSxcbiAgICAgICAgdjIgPSB2YWx1ZXNbKGkgKyAxKSAlIG5dLFxuICAgICAgICB2MyA9IHZhbHVlc1soaSArIDIpICUgbl07XG4gICAgcmV0dXJuIGJhc2lzKCh0IC0gaSAvIG4pICogbiwgdjAsIHYxLCB2MiwgdjMpO1xuICB9O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICBpZiAoIWIpIGIgPSBbXTtcbiAgdmFyIG4gPSBhID8gTWF0aC5taW4oYi5sZW5ndGgsIGEubGVuZ3RoKSA6IDAsXG4gICAgICBjID0gYi5zbGljZSgpLFxuICAgICAgaTtcbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSBjW2ldID0gYVtpXSAqICgxIC0gdCkgKyBiW2ldICogdDtcbiAgICByZXR1cm4gYztcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzTnVtYmVyQXJyYXkoeCkge1xuICByZXR1cm4gQXJyYXlCdWZmZXIuaXNWaWV3KHgpICYmICEoeCBpbnN0YW5jZW9mIERhdGFWaWV3KTtcbn1cbiIsImltcG9ydCB2YWx1ZSBmcm9tIFwiLi92YWx1ZS5qc1wiO1xuaW1wb3J0IG51bWJlckFycmF5LCB7aXNOdW1iZXJBcnJheX0gZnJvbSBcIi4vbnVtYmVyQXJyYXkuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICByZXR1cm4gKGlzTnVtYmVyQXJyYXkoYikgPyBudW1iZXJBcnJheSA6IGdlbmVyaWNBcnJheSkoYSwgYik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmljQXJyYXkoYSwgYikge1xuICB2YXIgbmIgPSBiID8gYi5sZW5ndGggOiAwLFxuICAgICAgbmEgPSBhID8gTWF0aC5taW4obmIsIGEubGVuZ3RoKSA6IDAsXG4gICAgICB4ID0gbmV3IEFycmF5KG5hKSxcbiAgICAgIGMgPSBuZXcgQXJyYXkobmIpLFxuICAgICAgaTtcblxuICBmb3IgKGkgPSAwOyBpIDwgbmE7ICsraSkgeFtpXSA9IHZhbHVlKGFbaV0sIGJbaV0pO1xuICBmb3IgKDsgaSA8IG5iOyArK2kpIGNbaV0gPSBiW2ldO1xuXG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgZm9yIChpID0gMDsgaSA8IG5hOyArK2kpIGNbaV0gPSB4W2ldKHQpO1xuICAgIHJldHVybiBjO1xuICB9O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICB2YXIgZCA9IG5ldyBEYXRlO1xuICByZXR1cm4gYSA9ICthLCBiID0gK2IsIGZ1bmN0aW9uKHQpIHtcbiAgICByZXR1cm4gZC5zZXRUaW1lKGEgKiAoMSAtIHQpICsgYiAqIHQpLCBkO1xuICB9O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICByZXR1cm4gYSA9ICthLCBiID0gK2IsIGZ1bmN0aW9uKHQpIHtcbiAgICByZXR1cm4gYSAqICgxIC0gdCkgKyBiICogdDtcbiAgfTtcbn1cbiIsImltcG9ydCB2YWx1ZSBmcm9tIFwiLi92YWx1ZS5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHZhciBpID0ge30sXG4gICAgICBjID0ge30sXG4gICAgICBrO1xuXG4gIGlmIChhID09PSBudWxsIHx8IHR5cGVvZiBhICE9PSBcIm9iamVjdFwiKSBhID0ge307XG4gIGlmIChiID09PSBudWxsIHx8IHR5cGVvZiBiICE9PSBcIm9iamVjdFwiKSBiID0ge307XG5cbiAgZm9yIChrIGluIGIpIHtcbiAgICBpZiAoayBpbiBhKSB7XG4gICAgICBpW2tdID0gdmFsdWUoYVtrXSwgYltrXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNba10gPSBiW2tdO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgZm9yIChrIGluIGkpIGNba10gPSBpW2tdKHQpO1xuICAgIHJldHVybiBjO1xuICB9O1xufVxuIiwiaW1wb3J0IG51bWJlciBmcm9tIFwiLi9udW1iZXIuanNcIjtcblxudmFyIHJlQSA9IC9bLStdPyg/OlxcZCtcXC4/XFxkKnxcXC4/XFxkKykoPzpbZUVdWy0rXT9cXGQrKT8vZyxcbiAgICByZUIgPSBuZXcgUmVnRXhwKHJlQS5zb3VyY2UsIFwiZ1wiKTtcblxuZnVuY3Rpb24gemVybyhiKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gYjtcbiAgfTtcbn1cblxuZnVuY3Rpb24gb25lKGIpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICByZXR1cm4gYih0KSArIFwiXCI7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgdmFyIGJpID0gcmVBLmxhc3RJbmRleCA9IHJlQi5sYXN0SW5kZXggPSAwLCAvLyBzY2FuIGluZGV4IGZvciBuZXh0IG51bWJlciBpbiBiXG4gICAgICBhbSwgLy8gY3VycmVudCBtYXRjaCBpbiBhXG4gICAgICBibSwgLy8gY3VycmVudCBtYXRjaCBpbiBiXG4gICAgICBicywgLy8gc3RyaW5nIHByZWNlZGluZyBjdXJyZW50IG51bWJlciBpbiBiLCBpZiBhbnlcbiAgICAgIGkgPSAtMSwgLy8gaW5kZXggaW4gc1xuICAgICAgcyA9IFtdLCAvLyBzdHJpbmcgY29uc3RhbnRzIGFuZCBwbGFjZWhvbGRlcnNcbiAgICAgIHEgPSBbXTsgLy8gbnVtYmVyIGludGVycG9sYXRvcnNcblxuICAvLyBDb2VyY2UgaW5wdXRzIHRvIHN0cmluZ3MuXG4gIGEgPSBhICsgXCJcIiwgYiA9IGIgKyBcIlwiO1xuXG4gIC8vIEludGVycG9sYXRlIHBhaXJzIG9mIG51bWJlcnMgaW4gYSAmIGIuXG4gIHdoaWxlICgoYW0gPSByZUEuZXhlYyhhKSlcbiAgICAgICYmIChibSA9IHJlQi5leGVjKGIpKSkge1xuICAgIGlmICgoYnMgPSBibS5pbmRleCkgPiBiaSkgeyAvLyBhIHN0cmluZyBwcmVjZWRlcyB0aGUgbmV4dCBudW1iZXIgaW4gYlxuICAgICAgYnMgPSBiLnNsaWNlKGJpLCBicyk7XG4gICAgICBpZiAoc1tpXSkgc1tpXSArPSBiczsgLy8gY29hbGVzY2Ugd2l0aCBwcmV2aW91cyBzdHJpbmdcbiAgICAgIGVsc2Ugc1srK2ldID0gYnM7XG4gICAgfVxuICAgIGlmICgoYW0gPSBhbVswXSkgPT09IChibSA9IGJtWzBdKSkgeyAvLyBudW1iZXJzIGluIGEgJiBiIG1hdGNoXG4gICAgICBpZiAoc1tpXSkgc1tpXSArPSBibTsgLy8gY29hbGVzY2Ugd2l0aCBwcmV2aW91cyBzdHJpbmdcbiAgICAgIGVsc2Ugc1srK2ldID0gYm07XG4gICAgfSBlbHNlIHsgLy8gaW50ZXJwb2xhdGUgbm9uLW1hdGNoaW5nIG51bWJlcnNcbiAgICAgIHNbKytpXSA9IG51bGw7XG4gICAgICBxLnB1c2goe2k6IGksIHg6IG51bWJlcihhbSwgYm0pfSk7XG4gICAgfVxuICAgIGJpID0gcmVCLmxhc3RJbmRleDtcbiAgfVxuXG4gIC8vIEFkZCByZW1haW5zIG9mIGIuXG4gIGlmIChiaSA8IGIubGVuZ3RoKSB7XG4gICAgYnMgPSBiLnNsaWNlKGJpKTtcbiAgICBpZiAoc1tpXSkgc1tpXSArPSBiczsgLy8gY29hbGVzY2Ugd2l0aCBwcmV2aW91cyBzdHJpbmdcbiAgICBlbHNlIHNbKytpXSA9IGJzO1xuICB9XG5cbiAgLy8gU3BlY2lhbCBvcHRpbWl6YXRpb24gZm9yIG9ubHkgYSBzaW5nbGUgbWF0Y2guXG4gIC8vIE90aGVyd2lzZSwgaW50ZXJwb2xhdGUgZWFjaCBvZiB0aGUgbnVtYmVycyBhbmQgcmVqb2luIHRoZSBzdHJpbmcuXG4gIHJldHVybiBzLmxlbmd0aCA8IDIgPyAocVswXVxuICAgICAgPyBvbmUocVswXS54KVxuICAgICAgOiB6ZXJvKGIpKVxuICAgICAgOiAoYiA9IHEubGVuZ3RoLCBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDAsIG87IGkgPCBiOyArK2kpIHNbKG8gPSBxW2ldKS5pXSA9IG8ueCh0KTtcbiAgICAgICAgICByZXR1cm4gcy5qb2luKFwiXCIpO1xuICAgICAgICB9KTtcbn1cbiIsImltcG9ydCB7Y29sb3J9IGZyb20gXCJkMy1jb2xvclwiO1xuaW1wb3J0IHJnYiBmcm9tIFwiLi9yZ2IuanNcIjtcbmltcG9ydCB7Z2VuZXJpY0FycmF5fSBmcm9tIFwiLi9hcnJheS5qc1wiO1xuaW1wb3J0IGRhdGUgZnJvbSBcIi4vZGF0ZS5qc1wiO1xuaW1wb3J0IG51bWJlciBmcm9tIFwiLi9udW1iZXIuanNcIjtcbmltcG9ydCBvYmplY3QgZnJvbSBcIi4vb2JqZWN0LmpzXCI7XG5pbXBvcnQgc3RyaW5nIGZyb20gXCIuL3N0cmluZy5qc1wiO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50LmpzXCI7XG5pbXBvcnQgbnVtYmVyQXJyYXksIHtpc051bWJlckFycmF5fSBmcm9tIFwiLi9udW1iZXJBcnJheS5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHZhciB0ID0gdHlwZW9mIGIsIGM7XG4gIHJldHVybiBiID09IG51bGwgfHwgdCA9PT0gXCJib29sZWFuXCIgPyBjb25zdGFudChiKVxuICAgICAgOiAodCA9PT0gXCJudW1iZXJcIiA/IG51bWJlclxuICAgICAgOiB0ID09PSBcInN0cmluZ1wiID8gKChjID0gY29sb3IoYikpID8gKGIgPSBjLCByZ2IpIDogc3RyaW5nKVxuICAgICAgOiBiIGluc3RhbmNlb2YgY29sb3IgPyByZ2JcbiAgICAgIDogYiBpbnN0YW5jZW9mIERhdGUgPyBkYXRlXG4gICAgICA6IGlzTnVtYmVyQXJyYXkoYikgPyBudW1iZXJBcnJheVxuICAgICAgOiBBcnJheS5pc0FycmF5KGIpID8gZ2VuZXJpY0FycmF5XG4gICAgICA6IHR5cGVvZiBiLnZhbHVlT2YgIT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgYi50b1N0cmluZyAhPT0gXCJmdW5jdGlvblwiIHx8IGlzTmFOKGIpID8gb2JqZWN0XG4gICAgICA6IG51bWJlcikoYSwgYik7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHJldHVybiBhID0gK2EsIGIgPSArYiwgZnVuY3Rpb24odCkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKGEgKiAoMSAtIHQpICsgYiAqIHQpO1xuICB9O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4gK3g7XG59XG4iLCJpbXBvcnQge2Jpc2VjdH0gZnJvbSBcImQzLWFycmF5XCI7XG5pbXBvcnQge2ludGVycG9sYXRlIGFzIGludGVycG9sYXRlVmFsdWUsIGludGVycG9sYXRlTnVtYmVyLCBpbnRlcnBvbGF0ZVJvdW5kfSBmcm9tIFwiZDMtaW50ZXJwb2xhdGVcIjtcbmltcG9ydCB7bWFwLCBzbGljZX0gZnJvbSBcIi4vYXJyYXlcIjtcbmltcG9ydCBjb25zdGFudCBmcm9tIFwiLi9jb25zdGFudFwiO1xuaW1wb3J0IG51bWJlciBmcm9tIFwiLi9udW1iZXJcIjtcblxudmFyIHVuaXQgPSBbMCwgMV07XG5cbmV4cG9ydCBmdW5jdGlvbiBpZGVudGl0eSh4KSB7XG4gIHJldHVybiB4O1xufVxuXG5mdW5jdGlvbiBub3JtYWxpemUoYSwgYikge1xuICByZXR1cm4gKGIgLT0gKGEgPSArYSkpXG4gICAgICA/IGZ1bmN0aW9uKHgpIHsgcmV0dXJuICh4IC0gYSkgLyBiOyB9XG4gICAgICA6IGNvbnN0YW50KGlzTmFOKGIpID8gTmFOIDogMC41KTtcbn1cblxuZnVuY3Rpb24gY2xhbXBlcihkb21haW4pIHtcbiAgdmFyIGEgPSBkb21haW5bMF0sIGIgPSBkb21haW5bZG9tYWluLmxlbmd0aCAtIDFdLCB0O1xuICBpZiAoYSA+IGIpIHQgPSBhLCBhID0gYiwgYiA9IHQ7XG4gIHJldHVybiBmdW5jdGlvbih4KSB7IHJldHVybiBNYXRoLm1heChhLCBNYXRoLm1pbihiLCB4KSk7IH07XG59XG5cbi8vIG5vcm1hbGl6ZShhLCBiKSh4KSB0YWtlcyBhIGRvbWFpbiB2YWx1ZSB4IGluIFthLGJdIGFuZCByZXR1cm5zIHRoZSBjb3JyZXNwb25kaW5nIHBhcmFtZXRlciB0IGluIFswLDFdLlxuLy8gaW50ZXJwb2xhdGUoYSwgYikodCkgdGFrZXMgYSBwYXJhbWV0ZXIgdCBpbiBbMCwxXSBhbmQgcmV0dXJucyB0aGUgY29ycmVzcG9uZGluZyByYW5nZSB2YWx1ZSB4IGluIFthLGJdLlxuZnVuY3Rpb24gYmltYXAoZG9tYWluLCByYW5nZSwgaW50ZXJwb2xhdGUpIHtcbiAgdmFyIGQwID0gZG9tYWluWzBdLCBkMSA9IGRvbWFpblsxXSwgcjAgPSByYW5nZVswXSwgcjEgPSByYW5nZVsxXTtcbiAgaWYgKGQxIDwgZDApIGQwID0gbm9ybWFsaXplKGQxLCBkMCksIHIwID0gaW50ZXJwb2xhdGUocjEsIHIwKTtcbiAgZWxzZSBkMCA9IG5vcm1hbGl6ZShkMCwgZDEpLCByMCA9IGludGVycG9sYXRlKHIwLCByMSk7XG4gIHJldHVybiBmdW5jdGlvbih4KSB7IHJldHVybiByMChkMCh4KSk7IH07XG59XG5cbmZ1bmN0aW9uIHBvbHltYXAoZG9tYWluLCByYW5nZSwgaW50ZXJwb2xhdGUpIHtcbiAgdmFyIGogPSBNYXRoLm1pbihkb21haW4ubGVuZ3RoLCByYW5nZS5sZW5ndGgpIC0gMSxcbiAgICAgIGQgPSBuZXcgQXJyYXkoaiksXG4gICAgICByID0gbmV3IEFycmF5KGopLFxuICAgICAgaSA9IC0xO1xuXG4gIC8vIFJldmVyc2UgZGVzY2VuZGluZyBkb21haW5zLlxuICBpZiAoZG9tYWluW2pdIDwgZG9tYWluWzBdKSB7XG4gICAgZG9tYWluID0gZG9tYWluLnNsaWNlKCkucmV2ZXJzZSgpO1xuICAgIHJhbmdlID0gcmFuZ2Uuc2xpY2UoKS5yZXZlcnNlKCk7XG4gIH1cblxuICB3aGlsZSAoKytpIDwgaikge1xuICAgIGRbaV0gPSBub3JtYWxpemUoZG9tYWluW2ldLCBkb21haW5baSArIDFdKTtcbiAgICByW2ldID0gaW50ZXJwb2xhdGUocmFuZ2VbaV0sIHJhbmdlW2kgKyAxXSk7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24oeCkge1xuICAgIHZhciBpID0gYmlzZWN0KGRvbWFpbiwgeCwgMSwgaikgLSAxO1xuICAgIHJldHVybiByW2ldKGRbaV0oeCkpO1xuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29weShzb3VyY2UsIHRhcmdldCkge1xuICByZXR1cm4gdGFyZ2V0XG4gICAgICAuZG9tYWluKHNvdXJjZS5kb21haW4oKSlcbiAgICAgIC5yYW5nZShzb3VyY2UucmFuZ2UoKSlcbiAgICAgIC5pbnRlcnBvbGF0ZShzb3VyY2UuaW50ZXJwb2xhdGUoKSlcbiAgICAgIC5jbGFtcChzb3VyY2UuY2xhbXAoKSlcbiAgICAgIC51bmtub3duKHNvdXJjZS51bmtub3duKCkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNmb3JtZXIoKSB7XG4gIHZhciBkb21haW4gPSB1bml0LFxuICAgICAgcmFuZ2UgPSB1bml0LFxuICAgICAgaW50ZXJwb2xhdGUgPSBpbnRlcnBvbGF0ZVZhbHVlLFxuICAgICAgdHJhbnNmb3JtLFxuICAgICAgdW50cmFuc2Zvcm0sXG4gICAgICB1bmtub3duLFxuICAgICAgY2xhbXAgPSBpZGVudGl0eSxcbiAgICAgIHBpZWNld2lzZSxcbiAgICAgIG91dHB1dCxcbiAgICAgIGlucHV0O1xuXG4gIGZ1bmN0aW9uIHJlc2NhbGUoKSB7XG4gICAgcGllY2V3aXNlID0gTWF0aC5taW4oZG9tYWluLmxlbmd0aCwgcmFuZ2UubGVuZ3RoKSA+IDIgPyBwb2x5bWFwIDogYmltYXA7XG4gICAgb3V0cHV0ID0gaW5wdXQgPSBudWxsO1xuICAgIHJldHVybiBzY2FsZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNjYWxlKHgpIHtcbiAgICByZXR1cm4gaXNOYU4oeCA9ICt4KSA/IHVua25vd24gOiAob3V0cHV0IHx8IChvdXRwdXQgPSBwaWVjZXdpc2UoZG9tYWluLm1hcCh0cmFuc2Zvcm0pLCByYW5nZSwgaW50ZXJwb2xhdGUpKSkodHJhbnNmb3JtKGNsYW1wKHgpKSk7XG4gIH1cblxuICBzY2FsZS5pbnZlcnQgPSBmdW5jdGlvbih5KSB7XG4gICAgcmV0dXJuIGNsYW1wKHVudHJhbnNmb3JtKChpbnB1dCB8fCAoaW5wdXQgPSBwaWVjZXdpc2UocmFuZ2UsIGRvbWFpbi5tYXAodHJhbnNmb3JtKSwgaW50ZXJwb2xhdGVOdW1iZXIpKSkoeSkpKTtcbiAgfTtcblxuICBzY2FsZS5kb21haW4gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZG9tYWluID0gbWFwLmNhbGwoXywgbnVtYmVyKSwgY2xhbXAgPT09IGlkZW50aXR5IHx8IChjbGFtcCA9IGNsYW1wZXIoZG9tYWluKSksIHJlc2NhbGUoKSkgOiBkb21haW4uc2xpY2UoKTtcbiAgfTtcblxuICBzY2FsZS5yYW5nZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChyYW5nZSA9IHNsaWNlLmNhbGwoXyksIHJlc2NhbGUoKSkgOiByYW5nZS5zbGljZSgpO1xuICB9O1xuXG4gIHNjYWxlLnJhbmdlUm91bmQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIHJhbmdlID0gc2xpY2UuY2FsbChfKSwgaW50ZXJwb2xhdGUgPSBpbnRlcnBvbGF0ZVJvdW5kLCByZXNjYWxlKCk7XG4gIH07XG5cbiAgc2NhbGUuY2xhbXAgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoY2xhbXAgPSBfID8gY2xhbXBlcihkb21haW4pIDogaWRlbnRpdHksIHNjYWxlKSA6IGNsYW1wICE9PSBpZGVudGl0eTtcbiAgfTtcblxuICBzY2FsZS5pbnRlcnBvbGF0ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChpbnRlcnBvbGF0ZSA9IF8sIHJlc2NhbGUoKSkgOiBpbnRlcnBvbGF0ZTtcbiAgfTtcblxuICBzY2FsZS51bmtub3duID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHVua25vd24gPSBfLCBzY2FsZSkgOiB1bmtub3duO1xuICB9O1xuXG4gIHJldHVybiBmdW5jdGlvbih0LCB1KSB7XG4gICAgdHJhbnNmb3JtID0gdCwgdW50cmFuc2Zvcm0gPSB1O1xuICAgIHJldHVybiByZXNjYWxlKCk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbnRpbnVvdXModHJhbnNmb3JtLCB1bnRyYW5zZm9ybSkge1xuICByZXR1cm4gdHJhbnNmb3JtZXIoKSh0cmFuc2Zvcm0sIHVudHJhbnNmb3JtKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB4O1xuICB9O1xufVxuIiwiLy8gW1tmaWxsXWFsaWduXVtzaWduXVtzeW1ib2xdWzBdW3dpZHRoXVssXVsucHJlY2lzaW9uXVt+XVt0eXBlXVxudmFyIHJlID0gL14oPzooLik/KFs8Pj1eXSkpPyhbK1xcLSggXSk/KFskI10pPygwKT8oXFxkKyk/KCwpPyhcXC5cXGQrKT8ofik/KFthLXolXSk/JC9pO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmb3JtYXRTcGVjaWZpZXIoc3BlY2lmaWVyKSB7XG4gIGlmICghKG1hdGNoID0gcmUuZXhlYyhzcGVjaWZpZXIpKSkgdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBmb3JtYXQ6IFwiICsgc3BlY2lmaWVyKTtcbiAgdmFyIG1hdGNoO1xuICByZXR1cm4gbmV3IEZvcm1hdFNwZWNpZmllcih7XG4gICAgZmlsbDogbWF0Y2hbMV0sXG4gICAgYWxpZ246IG1hdGNoWzJdLFxuICAgIHNpZ246IG1hdGNoWzNdLFxuICAgIHN5bWJvbDogbWF0Y2hbNF0sXG4gICAgemVybzogbWF0Y2hbNV0sXG4gICAgd2lkdGg6IG1hdGNoWzZdLFxuICAgIGNvbW1hOiBtYXRjaFs3XSxcbiAgICBwcmVjaXNpb246IG1hdGNoWzhdICYmIG1hdGNoWzhdLnNsaWNlKDEpLFxuICAgIHRyaW06IG1hdGNoWzldLFxuICAgIHR5cGU6IG1hdGNoWzEwXVxuICB9KTtcbn1cblxuZm9ybWF0U3BlY2lmaWVyLnByb3RvdHlwZSA9IEZvcm1hdFNwZWNpZmllci5wcm90b3R5cGU7IC8vIGluc3RhbmNlb2ZcblxuZXhwb3J0IGZ1bmN0aW9uIEZvcm1hdFNwZWNpZmllcihzcGVjaWZpZXIpIHtcbiAgdGhpcy5maWxsID0gc3BlY2lmaWVyLmZpbGwgPT09IHVuZGVmaW5lZCA/IFwiIFwiIDogc3BlY2lmaWVyLmZpbGwgKyBcIlwiO1xuICB0aGlzLmFsaWduID0gc3BlY2lmaWVyLmFsaWduID09PSB1bmRlZmluZWQgPyBcIj5cIiA6IHNwZWNpZmllci5hbGlnbiArIFwiXCI7XG4gIHRoaXMuc2lnbiA9IHNwZWNpZmllci5zaWduID09PSB1bmRlZmluZWQgPyBcIi1cIiA6IHNwZWNpZmllci5zaWduICsgXCJcIjtcbiAgdGhpcy5zeW1ib2wgPSBzcGVjaWZpZXIuc3ltYm9sID09PSB1bmRlZmluZWQgPyBcIlwiIDogc3BlY2lmaWVyLnN5bWJvbCArIFwiXCI7XG4gIHRoaXMuemVybyA9ICEhc3BlY2lmaWVyLnplcm87XG4gIHRoaXMud2lkdGggPSBzcGVjaWZpZXIud2lkdGggPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6ICtzcGVjaWZpZXIud2lkdGg7XG4gIHRoaXMuY29tbWEgPSAhIXNwZWNpZmllci5jb21tYTtcbiAgdGhpcy5wcmVjaXNpb24gPSBzcGVjaWZpZXIucHJlY2lzaW9uID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiArc3BlY2lmaWVyLnByZWNpc2lvbjtcbiAgdGhpcy50cmltID0gISFzcGVjaWZpZXIudHJpbTtcbiAgdGhpcy50eXBlID0gc3BlY2lmaWVyLnR5cGUgPT09IHVuZGVmaW5lZCA/IFwiXCIgOiBzcGVjaWZpZXIudHlwZSArIFwiXCI7XG59XG5cbkZvcm1hdFNwZWNpZmllci5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuZmlsbFxuICAgICAgKyB0aGlzLmFsaWduXG4gICAgICArIHRoaXMuc2lnblxuICAgICAgKyB0aGlzLnN5bWJvbFxuICAgICAgKyAodGhpcy56ZXJvID8gXCIwXCIgOiBcIlwiKVxuICAgICAgKyAodGhpcy53aWR0aCA9PT0gdW5kZWZpbmVkID8gXCJcIiA6IE1hdGgubWF4KDEsIHRoaXMud2lkdGggfCAwKSlcbiAgICAgICsgKHRoaXMuY29tbWEgPyBcIixcIiA6IFwiXCIpXG4gICAgICArICh0aGlzLnByZWNpc2lvbiA9PT0gdW5kZWZpbmVkID8gXCJcIiA6IFwiLlwiICsgTWF0aC5tYXgoMCwgdGhpcy5wcmVjaXNpb24gfCAwKSlcbiAgICAgICsgKHRoaXMudHJpbSA/IFwiflwiIDogXCJcIilcbiAgICAgICsgdGhpcy50eXBlO1xufTtcbiIsIi8vIENvbXB1dGVzIHRoZSBkZWNpbWFsIGNvZWZmaWNpZW50IGFuZCBleHBvbmVudCBvZiB0aGUgc3BlY2lmaWVkIG51bWJlciB4IHdpdGhcbi8vIHNpZ25pZmljYW50IGRpZ2l0cyBwLCB3aGVyZSB4IGlzIHBvc2l0aXZlIGFuZCBwIGlzIGluIFsxLCAyMV0gb3IgdW5kZWZpbmVkLlxuLy8gRm9yIGV4YW1wbGUsIGZvcm1hdERlY2ltYWwoMS4yMykgcmV0dXJucyBbXCIxMjNcIiwgMF0uXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4LCBwKSB7XG4gIGlmICgoaSA9ICh4ID0gcCA/IHgudG9FeHBvbmVudGlhbChwIC0gMSkgOiB4LnRvRXhwb25lbnRpYWwoKSkuaW5kZXhPZihcImVcIikpIDwgMCkgcmV0dXJuIG51bGw7IC8vIE5hTiwgwrFJbmZpbml0eVxuICB2YXIgaSwgY29lZmZpY2llbnQgPSB4LnNsaWNlKDAsIGkpO1xuXG4gIC8vIFRoZSBzdHJpbmcgcmV0dXJuZWQgYnkgdG9FeHBvbmVudGlhbCBlaXRoZXIgaGFzIHRoZSBmb3JtIFxcZFxcLlxcZCtlWy0rXVxcZCtcbiAgLy8gKGUuZy4sIDEuMmUrMykgb3IgdGhlIGZvcm0gXFxkZVstK11cXGQrIChlLmcuLCAxZSszKS5cbiAgcmV0dXJuIFtcbiAgICBjb2VmZmljaWVudC5sZW5ndGggPiAxID8gY29lZmZpY2llbnRbMF0gKyBjb2VmZmljaWVudC5zbGljZSgyKSA6IGNvZWZmaWNpZW50LFxuICAgICt4LnNsaWNlKGkgKyAxKVxuICBdO1xufVxuIiwiaW1wb3J0IGZvcm1hdERlY2ltYWwgZnJvbSBcIi4vZm9ybWF0RGVjaW1hbC5qc1wiO1xuXG5leHBvcnQgdmFyIHByZWZpeEV4cG9uZW50O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4LCBwKSB7XG4gIHZhciBkID0gZm9ybWF0RGVjaW1hbCh4LCBwKTtcbiAgaWYgKCFkKSByZXR1cm4geCArIFwiXCI7XG4gIHZhciBjb2VmZmljaWVudCA9IGRbMF0sXG4gICAgICBleHBvbmVudCA9IGRbMV0sXG4gICAgICBpID0gZXhwb25lbnQgLSAocHJlZml4RXhwb25lbnQgPSBNYXRoLm1heCgtOCwgTWF0aC5taW4oOCwgTWF0aC5mbG9vcihleHBvbmVudCAvIDMpKSkgKiAzKSArIDEsXG4gICAgICBuID0gY29lZmZpY2llbnQubGVuZ3RoO1xuICByZXR1cm4gaSA9PT0gbiA/IGNvZWZmaWNpZW50XG4gICAgICA6IGkgPiBuID8gY29lZmZpY2llbnQgKyBuZXcgQXJyYXkoaSAtIG4gKyAxKS5qb2luKFwiMFwiKVxuICAgICAgOiBpID4gMCA/IGNvZWZmaWNpZW50LnNsaWNlKDAsIGkpICsgXCIuXCIgKyBjb2VmZmljaWVudC5zbGljZShpKVxuICAgICAgOiBcIjAuXCIgKyBuZXcgQXJyYXkoMSAtIGkpLmpvaW4oXCIwXCIpICsgZm9ybWF0RGVjaW1hbCh4LCBNYXRoLm1heCgwLCBwICsgaSAtIDEpKVswXTsgLy8gbGVzcyB0aGFuIDF5IVxufVxuIiwiaW1wb3J0IGZvcm1hdExvY2FsZSBmcm9tIFwiLi9sb2NhbGUuanNcIjtcblxudmFyIGxvY2FsZTtcbmV4cG9ydCB2YXIgZm9ybWF0O1xuZXhwb3J0IHZhciBmb3JtYXRQcmVmaXg7XG5cbmRlZmF1bHRMb2NhbGUoe1xuICBkZWNpbWFsOiBcIi5cIixcbiAgdGhvdXNhbmRzOiBcIixcIixcbiAgZ3JvdXBpbmc6IFszXSxcbiAgY3VycmVuY3k6IFtcIiRcIiwgXCJcIl0sXG4gIG1pbnVzOiBcIi1cIlxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRlZmF1bHRMb2NhbGUoZGVmaW5pdGlvbikge1xuICBsb2NhbGUgPSBmb3JtYXRMb2NhbGUoZGVmaW5pdGlvbik7XG4gIGZvcm1hdCA9IGxvY2FsZS5mb3JtYXQ7XG4gIGZvcm1hdFByZWZpeCA9IGxvY2FsZS5mb3JtYXRQcmVmaXg7XG4gIHJldHVybiBsb2NhbGU7XG59XG4iLCJpbXBvcnQgZm9ybWF0RGVjaW1hbCBmcm9tIFwiLi9mb3JtYXREZWNpbWFsLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIHggPSBmb3JtYXREZWNpbWFsKE1hdGguYWJzKHgpKSwgeCA/IHhbMV0gOiBOYU47XG59XG4iLCJpbXBvcnQgZm9ybWF0RGVjaW1hbCBmcm9tIFwiLi9mb3JtYXREZWNpbWFsLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgsIHApIHtcbiAgdmFyIGQgPSBmb3JtYXREZWNpbWFsKHgsIHApO1xuICBpZiAoIWQpIHJldHVybiB4ICsgXCJcIjtcbiAgdmFyIGNvZWZmaWNpZW50ID0gZFswXSxcbiAgICAgIGV4cG9uZW50ID0gZFsxXTtcbiAgcmV0dXJuIGV4cG9uZW50IDwgMCA/IFwiMC5cIiArIG5ldyBBcnJheSgtZXhwb25lbnQpLmpvaW4oXCIwXCIpICsgY29lZmZpY2llbnRcbiAgICAgIDogY29lZmZpY2llbnQubGVuZ3RoID4gZXhwb25lbnQgKyAxID8gY29lZmZpY2llbnQuc2xpY2UoMCwgZXhwb25lbnQgKyAxKSArIFwiLlwiICsgY29lZmZpY2llbnQuc2xpY2UoZXhwb25lbnQgKyAxKVxuICAgICAgOiBjb2VmZmljaWVudCArIG5ldyBBcnJheShleHBvbmVudCAtIGNvZWZmaWNpZW50Lmxlbmd0aCArIDIpLmpvaW4oXCIwXCIpO1xufVxuIiwiaW1wb3J0IGZvcm1hdFByZWZpeEF1dG8gZnJvbSBcIi4vZm9ybWF0UHJlZml4QXV0by5qc1wiO1xuaW1wb3J0IGZvcm1hdFJvdW5kZWQgZnJvbSBcIi4vZm9ybWF0Um91bmRlZC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIFwiJVwiOiBmdW5jdGlvbih4LCBwKSB7IHJldHVybiAoeCAqIDEwMCkudG9GaXhlZChwKTsgfSxcbiAgXCJiXCI6IGZ1bmN0aW9uKHgpIHsgcmV0dXJuIE1hdGgucm91bmQoeCkudG9TdHJpbmcoMik7IH0sXG4gIFwiY1wiOiBmdW5jdGlvbih4KSB7IHJldHVybiB4ICsgXCJcIjsgfSxcbiAgXCJkXCI6IGZ1bmN0aW9uKHgpIHsgcmV0dXJuIE1hdGgucm91bmQoeCkudG9TdHJpbmcoMTApOyB9LFxuICBcImVcIjogZnVuY3Rpb24oeCwgcCkgeyByZXR1cm4geC50b0V4cG9uZW50aWFsKHApOyB9LFxuICBcImZcIjogZnVuY3Rpb24oeCwgcCkgeyByZXR1cm4geC50b0ZpeGVkKHApOyB9LFxuICBcImdcIjogZnVuY3Rpb24oeCwgcCkgeyByZXR1cm4geC50b1ByZWNpc2lvbihwKTsgfSxcbiAgXCJvXCI6IGZ1bmN0aW9uKHgpIHsgcmV0dXJuIE1hdGgucm91bmQoeCkudG9TdHJpbmcoOCk7IH0sXG4gIFwicFwiOiBmdW5jdGlvbih4LCBwKSB7IHJldHVybiBmb3JtYXRSb3VuZGVkKHggKiAxMDAsIHApOyB9LFxuICBcInJcIjogZm9ybWF0Um91bmRlZCxcbiAgXCJzXCI6IGZvcm1hdFByZWZpeEF1dG8sXG4gIFwiWFwiOiBmdW5jdGlvbih4KSB7IHJldHVybiBNYXRoLnJvdW5kKHgpLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpOyB9LFxuICBcInhcIjogZnVuY3Rpb24oeCkgeyByZXR1cm4gTWF0aC5yb3VuZCh4KS50b1N0cmluZygxNik7IH1cbn07XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiB4O1xufVxuIiwiaW1wb3J0IGV4cG9uZW50IGZyb20gXCIuL2V4cG9uZW50LmpzXCI7XG5pbXBvcnQgZm9ybWF0R3JvdXAgZnJvbSBcIi4vZm9ybWF0R3JvdXAuanNcIjtcbmltcG9ydCBmb3JtYXROdW1lcmFscyBmcm9tIFwiLi9mb3JtYXROdW1lcmFscy5qc1wiO1xuaW1wb3J0IGZvcm1hdFNwZWNpZmllciBmcm9tIFwiLi9mb3JtYXRTcGVjaWZpZXIuanNcIjtcbmltcG9ydCBmb3JtYXRUcmltIGZyb20gXCIuL2Zvcm1hdFRyaW0uanNcIjtcbmltcG9ydCBmb3JtYXRUeXBlcyBmcm9tIFwiLi9mb3JtYXRUeXBlcy5qc1wiO1xuaW1wb3J0IHtwcmVmaXhFeHBvbmVudH0gZnJvbSBcIi4vZm9ybWF0UHJlZml4QXV0by5qc1wiO1xuaW1wb3J0IGlkZW50aXR5IGZyb20gXCIuL2lkZW50aXR5LmpzXCI7XG5cbnZhciBtYXAgPSBBcnJheS5wcm90b3R5cGUubWFwLFxuICAgIHByZWZpeGVzID0gW1wieVwiLFwielwiLFwiYVwiLFwiZlwiLFwicFwiLFwiblwiLFwiwrVcIixcIm1cIixcIlwiLFwia1wiLFwiTVwiLFwiR1wiLFwiVFwiLFwiUFwiLFwiRVwiLFwiWlwiLFwiWVwiXTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obG9jYWxlKSB7XG4gIHZhciBncm91cCA9IGxvY2FsZS5ncm91cGluZyA9PT0gdW5kZWZpbmVkIHx8IGxvY2FsZS50aG91c2FuZHMgPT09IHVuZGVmaW5lZCA/IGlkZW50aXR5IDogZm9ybWF0R3JvdXAobWFwLmNhbGwobG9jYWxlLmdyb3VwaW5nLCBOdW1iZXIpLCBsb2NhbGUudGhvdXNhbmRzICsgXCJcIiksXG4gICAgICBjdXJyZW5jeVByZWZpeCA9IGxvY2FsZS5jdXJyZW5jeSA9PT0gdW5kZWZpbmVkID8gXCJcIiA6IGxvY2FsZS5jdXJyZW5jeVswXSArIFwiXCIsXG4gICAgICBjdXJyZW5jeVN1ZmZpeCA9IGxvY2FsZS5jdXJyZW5jeSA9PT0gdW5kZWZpbmVkID8gXCJcIiA6IGxvY2FsZS5jdXJyZW5jeVsxXSArIFwiXCIsXG4gICAgICBkZWNpbWFsID0gbG9jYWxlLmRlY2ltYWwgPT09IHVuZGVmaW5lZCA/IFwiLlwiIDogbG9jYWxlLmRlY2ltYWwgKyBcIlwiLFxuICAgICAgbnVtZXJhbHMgPSBsb2NhbGUubnVtZXJhbHMgPT09IHVuZGVmaW5lZCA/IGlkZW50aXR5IDogZm9ybWF0TnVtZXJhbHMobWFwLmNhbGwobG9jYWxlLm51bWVyYWxzLCBTdHJpbmcpKSxcbiAgICAgIHBlcmNlbnQgPSBsb2NhbGUucGVyY2VudCA9PT0gdW5kZWZpbmVkID8gXCIlXCIgOiBsb2NhbGUucGVyY2VudCArIFwiXCIsXG4gICAgICBtaW51cyA9IGxvY2FsZS5taW51cyA9PT0gdW5kZWZpbmVkID8gXCItXCIgOiBsb2NhbGUubWludXMgKyBcIlwiLFxuICAgICAgbmFuID0gbG9jYWxlLm5hbiA9PT0gdW5kZWZpbmVkID8gXCJOYU5cIiA6IGxvY2FsZS5uYW4gKyBcIlwiO1xuXG4gIGZ1bmN0aW9uIG5ld0Zvcm1hdChzcGVjaWZpZXIpIHtcbiAgICBzcGVjaWZpZXIgPSBmb3JtYXRTcGVjaWZpZXIoc3BlY2lmaWVyKTtcblxuICAgIHZhciBmaWxsID0gc3BlY2lmaWVyLmZpbGwsXG4gICAgICAgIGFsaWduID0gc3BlY2lmaWVyLmFsaWduLFxuICAgICAgICBzaWduID0gc3BlY2lmaWVyLnNpZ24sXG4gICAgICAgIHN5bWJvbCA9IHNwZWNpZmllci5zeW1ib2wsXG4gICAgICAgIHplcm8gPSBzcGVjaWZpZXIuemVybyxcbiAgICAgICAgd2lkdGggPSBzcGVjaWZpZXIud2lkdGgsXG4gICAgICAgIGNvbW1hID0gc3BlY2lmaWVyLmNvbW1hLFxuICAgICAgICBwcmVjaXNpb24gPSBzcGVjaWZpZXIucHJlY2lzaW9uLFxuICAgICAgICB0cmltID0gc3BlY2lmaWVyLnRyaW0sXG4gICAgICAgIHR5cGUgPSBzcGVjaWZpZXIudHlwZTtcblxuICAgIC8vIFRoZSBcIm5cIiB0eXBlIGlzIGFuIGFsaWFzIGZvciBcIixnXCIuXG4gICAgaWYgKHR5cGUgPT09IFwiblwiKSBjb21tYSA9IHRydWUsIHR5cGUgPSBcImdcIjtcblxuICAgIC8vIFRoZSBcIlwiIHR5cGUsIGFuZCBhbnkgaW52YWxpZCB0eXBlLCBpcyBhbiBhbGlhcyBmb3IgXCIuMTJ+Z1wiLlxuICAgIGVsc2UgaWYgKCFmb3JtYXRUeXBlc1t0eXBlXSkgcHJlY2lzaW9uID09PSB1bmRlZmluZWQgJiYgKHByZWNpc2lvbiA9IDEyKSwgdHJpbSA9IHRydWUsIHR5cGUgPSBcImdcIjtcblxuICAgIC8vIElmIHplcm8gZmlsbCBpcyBzcGVjaWZpZWQsIHBhZGRpbmcgZ29lcyBhZnRlciBzaWduIGFuZCBiZWZvcmUgZGlnaXRzLlxuICAgIGlmICh6ZXJvIHx8IChmaWxsID09PSBcIjBcIiAmJiBhbGlnbiA9PT0gXCI9XCIpKSB6ZXJvID0gdHJ1ZSwgZmlsbCA9IFwiMFwiLCBhbGlnbiA9IFwiPVwiO1xuXG4gICAgLy8gQ29tcHV0ZSB0aGUgcHJlZml4IGFuZCBzdWZmaXguXG4gICAgLy8gRm9yIFNJLXByZWZpeCwgdGhlIHN1ZmZpeCBpcyBsYXppbHkgY29tcHV0ZWQuXG4gICAgdmFyIHByZWZpeCA9IHN5bWJvbCA9PT0gXCIkXCIgPyBjdXJyZW5jeVByZWZpeCA6IHN5bWJvbCA9PT0gXCIjXCIgJiYgL1tib3hYXS8udGVzdCh0eXBlKSA/IFwiMFwiICsgdHlwZS50b0xvd2VyQ2FzZSgpIDogXCJcIixcbiAgICAgICAgc3VmZml4ID0gc3ltYm9sID09PSBcIiRcIiA/IGN1cnJlbmN5U3VmZml4IDogL1slcF0vLnRlc3QodHlwZSkgPyBwZXJjZW50IDogXCJcIjtcblxuICAgIC8vIFdoYXQgZm9ybWF0IGZ1bmN0aW9uIHNob3VsZCB3ZSB1c2U/XG4gICAgLy8gSXMgdGhpcyBhbiBpbnRlZ2VyIHR5cGU/XG4gICAgLy8gQ2FuIHRoaXMgdHlwZSBnZW5lcmF0ZSBleHBvbmVudGlhbCBub3RhdGlvbj9cbiAgICB2YXIgZm9ybWF0VHlwZSA9IGZvcm1hdFR5cGVzW3R5cGVdLFxuICAgICAgICBtYXliZVN1ZmZpeCA9IC9bZGVmZ3BycyVdLy50ZXN0KHR5cGUpO1xuXG4gICAgLy8gU2V0IHRoZSBkZWZhdWx0IHByZWNpc2lvbiBpZiBub3Qgc3BlY2lmaWVkLFxuICAgIC8vIG9yIGNsYW1wIHRoZSBzcGVjaWZpZWQgcHJlY2lzaW9uIHRvIHRoZSBzdXBwb3J0ZWQgcmFuZ2UuXG4gICAgLy8gRm9yIHNpZ25pZmljYW50IHByZWNpc2lvbiwgaXQgbXVzdCBiZSBpbiBbMSwgMjFdLlxuICAgIC8vIEZvciBmaXhlZCBwcmVjaXNpb24sIGl0IG11c3QgYmUgaW4gWzAsIDIwXS5cbiAgICBwcmVjaXNpb24gPSBwcmVjaXNpb24gPT09IHVuZGVmaW5lZCA/IDZcbiAgICAgICAgOiAvW2dwcnNdLy50ZXN0KHR5cGUpID8gTWF0aC5tYXgoMSwgTWF0aC5taW4oMjEsIHByZWNpc2lvbikpXG4gICAgICAgIDogTWF0aC5tYXgoMCwgTWF0aC5taW4oMjAsIHByZWNpc2lvbikpO1xuXG4gICAgZnVuY3Rpb24gZm9ybWF0KHZhbHVlKSB7XG4gICAgICB2YXIgdmFsdWVQcmVmaXggPSBwcmVmaXgsXG4gICAgICAgICAgdmFsdWVTdWZmaXggPSBzdWZmaXgsXG4gICAgICAgICAgaSwgbiwgYztcblxuICAgICAgaWYgKHR5cGUgPT09IFwiY1wiKSB7XG4gICAgICAgIHZhbHVlU3VmZml4ID0gZm9ybWF0VHlwZSh2YWx1ZSkgKyB2YWx1ZVN1ZmZpeDtcbiAgICAgICAgdmFsdWUgPSBcIlwiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsdWUgPSArdmFsdWU7XG5cbiAgICAgICAgLy8gRGV0ZXJtaW5lIHRoZSBzaWduLiAtMCBpcyBub3QgbGVzcyB0aGFuIDAsIGJ1dCAxIC8gLTAgaXMhXG4gICAgICAgIHZhciB2YWx1ZU5lZ2F0aXZlID0gdmFsdWUgPCAwIHx8IDEgLyB2YWx1ZSA8IDA7XG5cbiAgICAgICAgLy8gUGVyZm9ybSB0aGUgaW5pdGlhbCBmb3JtYXR0aW5nLlxuICAgICAgICB2YWx1ZSA9IGlzTmFOKHZhbHVlKSA/IG5hbiA6IGZvcm1hdFR5cGUoTWF0aC5hYnModmFsdWUpLCBwcmVjaXNpb24pO1xuXG4gICAgICAgIC8vIFRyaW0gaW5zaWduaWZpY2FudCB6ZXJvcy5cbiAgICAgICAgaWYgKHRyaW0pIHZhbHVlID0gZm9ybWF0VHJpbSh2YWx1ZSk7XG5cbiAgICAgICAgLy8gSWYgYSBuZWdhdGl2ZSB2YWx1ZSByb3VuZHMgdG8gemVybyBhZnRlciBmb3JtYXR0aW5nLCBhbmQgbm8gZXhwbGljaXQgcG9zaXRpdmUgc2lnbiBpcyByZXF1ZXN0ZWQsIGhpZGUgdGhlIHNpZ24uXG4gICAgICAgIGlmICh2YWx1ZU5lZ2F0aXZlICYmICt2YWx1ZSA9PT0gMCAmJiBzaWduICE9PSBcIitcIikgdmFsdWVOZWdhdGl2ZSA9IGZhbHNlO1xuXG4gICAgICAgIC8vIENvbXB1dGUgdGhlIHByZWZpeCBhbmQgc3VmZml4LlxuICAgICAgICB2YWx1ZVByZWZpeCA9ICh2YWx1ZU5lZ2F0aXZlID8gKHNpZ24gPT09IFwiKFwiID8gc2lnbiA6IG1pbnVzKSA6IHNpZ24gPT09IFwiLVwiIHx8IHNpZ24gPT09IFwiKFwiID8gXCJcIiA6IHNpZ24pICsgdmFsdWVQcmVmaXg7XG4gICAgICAgIHZhbHVlU3VmZml4ID0gKHR5cGUgPT09IFwic1wiID8gcHJlZml4ZXNbOCArIHByZWZpeEV4cG9uZW50IC8gM10gOiBcIlwiKSArIHZhbHVlU3VmZml4ICsgKHZhbHVlTmVnYXRpdmUgJiYgc2lnbiA9PT0gXCIoXCIgPyBcIilcIiA6IFwiXCIpO1xuXG4gICAgICAgIC8vIEJyZWFrIHRoZSBmb3JtYXR0ZWQgdmFsdWUgaW50byB0aGUgaW50ZWdlciDigJx2YWx1ZeKAnSBwYXJ0IHRoYXQgY2FuIGJlXG4gICAgICAgIC8vIGdyb3VwZWQsIGFuZCBmcmFjdGlvbmFsIG9yIGV4cG9uZW50aWFsIOKAnHN1ZmZpeOKAnSBwYXJ0IHRoYXQgaXMgbm90LlxuICAgICAgICBpZiAobWF5YmVTdWZmaXgpIHtcbiAgICAgICAgICBpID0gLTEsIG4gPSB2YWx1ZS5sZW5ndGg7XG4gICAgICAgICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgICAgICAgIGlmIChjID0gdmFsdWUuY2hhckNvZGVBdChpKSwgNDggPiBjIHx8IGMgPiA1Nykge1xuICAgICAgICAgICAgICB2YWx1ZVN1ZmZpeCA9IChjID09PSA0NiA/IGRlY2ltYWwgKyB2YWx1ZS5zbGljZShpICsgMSkgOiB2YWx1ZS5zbGljZShpKSkgKyB2YWx1ZVN1ZmZpeDtcbiAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS5zbGljZSgwLCBpKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIElmIHRoZSBmaWxsIGNoYXJhY3RlciBpcyBub3QgXCIwXCIsIGdyb3VwaW5nIGlzIGFwcGxpZWQgYmVmb3JlIHBhZGRpbmcuXG4gICAgICBpZiAoY29tbWEgJiYgIXplcm8pIHZhbHVlID0gZ3JvdXAodmFsdWUsIEluZmluaXR5KTtcblxuICAgICAgLy8gQ29tcHV0ZSB0aGUgcGFkZGluZy5cbiAgICAgIHZhciBsZW5ndGggPSB2YWx1ZVByZWZpeC5sZW5ndGggKyB2YWx1ZS5sZW5ndGggKyB2YWx1ZVN1ZmZpeC5sZW5ndGgsXG4gICAgICAgICAgcGFkZGluZyA9IGxlbmd0aCA8IHdpZHRoID8gbmV3IEFycmF5KHdpZHRoIC0gbGVuZ3RoICsgMSkuam9pbihmaWxsKSA6IFwiXCI7XG5cbiAgICAgIC8vIElmIHRoZSBmaWxsIGNoYXJhY3RlciBpcyBcIjBcIiwgZ3JvdXBpbmcgaXMgYXBwbGllZCBhZnRlciBwYWRkaW5nLlxuICAgICAgaWYgKGNvbW1hICYmIHplcm8pIHZhbHVlID0gZ3JvdXAocGFkZGluZyArIHZhbHVlLCBwYWRkaW5nLmxlbmd0aCA/IHdpZHRoIC0gdmFsdWVTdWZmaXgubGVuZ3RoIDogSW5maW5pdHkpLCBwYWRkaW5nID0gXCJcIjtcblxuICAgICAgLy8gUmVjb25zdHJ1Y3QgdGhlIGZpbmFsIG91dHB1dCBiYXNlZCBvbiB0aGUgZGVzaXJlZCBhbGlnbm1lbnQuXG4gICAgICBzd2l0Y2ggKGFsaWduKSB7XG4gICAgICAgIGNhc2UgXCI8XCI6IHZhbHVlID0gdmFsdWVQcmVmaXggKyB2YWx1ZSArIHZhbHVlU3VmZml4ICsgcGFkZGluZzsgYnJlYWs7XG4gICAgICAgIGNhc2UgXCI9XCI6IHZhbHVlID0gdmFsdWVQcmVmaXggKyBwYWRkaW5nICsgdmFsdWUgKyB2YWx1ZVN1ZmZpeDsgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJeXCI6IHZhbHVlID0gcGFkZGluZy5zbGljZSgwLCBsZW5ndGggPSBwYWRkaW5nLmxlbmd0aCA+PiAxKSArIHZhbHVlUHJlZml4ICsgdmFsdWUgKyB2YWx1ZVN1ZmZpeCArIHBhZGRpbmcuc2xpY2UobGVuZ3RoKTsgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6IHZhbHVlID0gcGFkZGluZyArIHZhbHVlUHJlZml4ICsgdmFsdWUgKyB2YWx1ZVN1ZmZpeDsgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBudW1lcmFscyh2YWx1ZSk7XG4gICAgfVxuXG4gICAgZm9ybWF0LnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gc3BlY2lmaWVyICsgXCJcIjtcbiAgICB9O1xuXG4gICAgcmV0dXJuIGZvcm1hdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFByZWZpeChzcGVjaWZpZXIsIHZhbHVlKSB7XG4gICAgdmFyIGYgPSBuZXdGb3JtYXQoKHNwZWNpZmllciA9IGZvcm1hdFNwZWNpZmllcihzcGVjaWZpZXIpLCBzcGVjaWZpZXIudHlwZSA9IFwiZlwiLCBzcGVjaWZpZXIpKSxcbiAgICAgICAgZSA9IE1hdGgubWF4KC04LCBNYXRoLm1pbig4LCBNYXRoLmZsb29yKGV4cG9uZW50KHZhbHVlKSAvIDMpKSkgKiAzLFxuICAgICAgICBrID0gTWF0aC5wb3coMTAsIC1lKSxcbiAgICAgICAgcHJlZml4ID0gcHJlZml4ZXNbOCArIGUgLyAzXTtcbiAgICByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJldHVybiBmKGsgKiB2YWx1ZSkgKyBwcmVmaXg7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZm9ybWF0OiBuZXdGb3JtYXQsXG4gICAgZm9ybWF0UHJlZml4OiBmb3JtYXRQcmVmaXhcbiAgfTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGdyb3VwaW5nLCB0aG91c2FuZHMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlLCB3aWR0aCkge1xuICAgIHZhciBpID0gdmFsdWUubGVuZ3RoLFxuICAgICAgICB0ID0gW10sXG4gICAgICAgIGogPSAwLFxuICAgICAgICBnID0gZ3JvdXBpbmdbMF0sXG4gICAgICAgIGxlbmd0aCA9IDA7XG5cbiAgICB3aGlsZSAoaSA+IDAgJiYgZyA+IDApIHtcbiAgICAgIGlmIChsZW5ndGggKyBnICsgMSA+IHdpZHRoKSBnID0gTWF0aC5tYXgoMSwgd2lkdGggLSBsZW5ndGgpO1xuICAgICAgdC5wdXNoKHZhbHVlLnN1YnN0cmluZyhpIC09IGcsIGkgKyBnKSk7XG4gICAgICBpZiAoKGxlbmd0aCArPSBnICsgMSkgPiB3aWR0aCkgYnJlYWs7XG4gICAgICBnID0gZ3JvdXBpbmdbaiA9IChqICsgMSkgJSBncm91cGluZy5sZW5ndGhdO1xuICAgIH1cblxuICAgIHJldHVybiB0LnJldmVyc2UoKS5qb2luKHRob3VzYW5kcyk7XG4gIH07XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihudW1lcmFscykge1xuICByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUucmVwbGFjZSgvWzAtOV0vZywgZnVuY3Rpb24oaSkge1xuICAgICAgcmV0dXJuIG51bWVyYWxzWytpXTtcbiAgICB9KTtcbiAgfTtcbn1cbiIsIi8vIFRyaW1zIGluc2lnbmlmaWNhbnQgemVyb3MsIGUuZy4sIHJlcGxhY2VzIDEuMjAwMGsgd2l0aCAxLjJrLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ocykge1xuICBvdXQ6IGZvciAodmFyIG4gPSBzLmxlbmd0aCwgaSA9IDEsIGkwID0gLTEsIGkxOyBpIDwgbjsgKytpKSB7XG4gICAgc3dpdGNoIChzW2ldKSB7XG4gICAgICBjYXNlIFwiLlwiOiBpMCA9IGkxID0gaTsgYnJlYWs7XG4gICAgICBjYXNlIFwiMFwiOiBpZiAoaTAgPT09IDApIGkwID0gaTsgaTEgPSBpOyBicmVhaztcbiAgICAgIGRlZmF1bHQ6IGlmICghK3NbaV0pIGJyZWFrIG91dDsgaWYgKGkwID4gMCkgaTAgPSAwOyBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGkwID4gMCA/IHMuc2xpY2UoMCwgaTApICsgcy5zbGljZShpMSArIDEpIDogcztcbn1cbiIsImltcG9ydCBleHBvbmVudCBmcm9tIFwiLi9leHBvbmVudC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzdGVwLCBtYXgpIHtcbiAgc3RlcCA9IE1hdGguYWJzKHN0ZXApLCBtYXggPSBNYXRoLmFicyhtYXgpIC0gc3RlcDtcbiAgcmV0dXJuIE1hdGgubWF4KDAsIGV4cG9uZW50KG1heCkgLSBleHBvbmVudChzdGVwKSkgKyAxO1xufVxuIiwiaW1wb3J0IHt0aWNrU3RlcH0gZnJvbSBcImQzLWFycmF5XCI7XG5pbXBvcnQge2Zvcm1hdCwgZm9ybWF0UHJlZml4LCBmb3JtYXRTcGVjaWZpZXIsIHByZWNpc2lvbkZpeGVkLCBwcmVjaXNpb25QcmVmaXgsIHByZWNpc2lvblJvdW5kfSBmcm9tIFwiZDMtZm9ybWF0XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHN0YXJ0LCBzdG9wLCBjb3VudCwgc3BlY2lmaWVyKSB7XG4gIHZhciBzdGVwID0gdGlja1N0ZXAoc3RhcnQsIHN0b3AsIGNvdW50KSxcbiAgICAgIHByZWNpc2lvbjtcbiAgc3BlY2lmaWVyID0gZm9ybWF0U3BlY2lmaWVyKHNwZWNpZmllciA9PSBudWxsID8gXCIsZlwiIDogc3BlY2lmaWVyKTtcbiAgc3dpdGNoIChzcGVjaWZpZXIudHlwZSkge1xuICAgIGNhc2UgXCJzXCI6IHtcbiAgICAgIHZhciB2YWx1ZSA9IE1hdGgubWF4KE1hdGguYWJzKHN0YXJ0KSwgTWF0aC5hYnMoc3RvcCkpO1xuICAgICAgaWYgKHNwZWNpZmllci5wcmVjaXNpb24gPT0gbnVsbCAmJiAhaXNOYU4ocHJlY2lzaW9uID0gcHJlY2lzaW9uUHJlZml4KHN0ZXAsIHZhbHVlKSkpIHNwZWNpZmllci5wcmVjaXNpb24gPSBwcmVjaXNpb247XG4gICAgICByZXR1cm4gZm9ybWF0UHJlZml4KHNwZWNpZmllciwgdmFsdWUpO1xuICAgIH1cbiAgICBjYXNlIFwiXCI6XG4gICAgY2FzZSBcImVcIjpcbiAgICBjYXNlIFwiZ1wiOlxuICAgIGNhc2UgXCJwXCI6XG4gICAgY2FzZSBcInJcIjoge1xuICAgICAgaWYgKHNwZWNpZmllci5wcmVjaXNpb24gPT0gbnVsbCAmJiAhaXNOYU4ocHJlY2lzaW9uID0gcHJlY2lzaW9uUm91bmQoc3RlcCwgTWF0aC5tYXgoTWF0aC5hYnMoc3RhcnQpLCBNYXRoLmFicyhzdG9wKSkpKSkgc3BlY2lmaWVyLnByZWNpc2lvbiA9IHByZWNpc2lvbiAtIChzcGVjaWZpZXIudHlwZSA9PT0gXCJlXCIpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGNhc2UgXCJmXCI6XG4gICAgY2FzZSBcIiVcIjoge1xuICAgICAgaWYgKHNwZWNpZmllci5wcmVjaXNpb24gPT0gbnVsbCAmJiAhaXNOYU4ocHJlY2lzaW9uID0gcHJlY2lzaW9uRml4ZWQoc3RlcCkpKSBzcGVjaWZpZXIucHJlY2lzaW9uID0gcHJlY2lzaW9uIC0gKHNwZWNpZmllci50eXBlID09PSBcIiVcIikgKiAyO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiBmb3JtYXQoc3BlY2lmaWVyKTtcbn1cbiIsImltcG9ydCBleHBvbmVudCBmcm9tIFwiLi9leHBvbmVudC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzdGVwLCB2YWx1ZSkge1xuICByZXR1cm4gTWF0aC5tYXgoMCwgTWF0aC5tYXgoLTgsIE1hdGgubWluKDgsIE1hdGguZmxvb3IoZXhwb25lbnQodmFsdWUpIC8gMykpKSAqIDMgLSBleHBvbmVudChNYXRoLmFicyhzdGVwKSkpO1xufVxuIiwiaW1wb3J0IGV4cG9uZW50IGZyb20gXCIuL2V4cG9uZW50LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHN0ZXApIHtcbiAgcmV0dXJuIE1hdGgubWF4KDAsIC1leHBvbmVudChNYXRoLmFicyhzdGVwKSkpO1xufVxuIiwiaW1wb3J0IHt0aWNrcywgdGlja0luY3JlbWVudH0gZnJvbSBcImQzLWFycmF5XCI7XG5pbXBvcnQgY29udGludW91cywge2NvcHksIGlkZW50aXR5fSBmcm9tIFwiLi9jb250aW51b3VzXCI7XG5pbXBvcnQge2luaXRSYW5nZX0gZnJvbSBcIi4vaW5pdFwiO1xuaW1wb3J0IHRpY2tGb3JtYXQgZnJvbSBcIi4vdGlja0Zvcm1hdFwiO1xuXG5leHBvcnQgZnVuY3Rpb24gbGluZWFyaXNoKHNjYWxlKSB7XG4gIHZhciBkb21haW4gPSBzY2FsZS5kb21haW47XG5cbiAgc2NhbGUudGlja3MgPSBmdW5jdGlvbihjb3VudCkge1xuICAgIHZhciBkID0gZG9tYWluKCk7XG4gICAgcmV0dXJuIHRpY2tzKGRbMF0sIGRbZC5sZW5ndGggLSAxXSwgY291bnQgPT0gbnVsbCA/IDEwIDogY291bnQpO1xuICB9O1xuXG4gIHNjYWxlLnRpY2tGb3JtYXQgPSBmdW5jdGlvbihjb3VudCwgc3BlY2lmaWVyKSB7XG4gICAgdmFyIGQgPSBkb21haW4oKTtcbiAgICByZXR1cm4gdGlja0Zvcm1hdChkWzBdLCBkW2QubGVuZ3RoIC0gMV0sIGNvdW50ID09IG51bGwgPyAxMCA6IGNvdW50LCBzcGVjaWZpZXIpO1xuICB9O1xuXG4gIHNjYWxlLm5pY2UgPSBmdW5jdGlvbihjb3VudCkge1xuICAgIGlmIChjb3VudCA9PSBudWxsKSBjb3VudCA9IDEwO1xuXG4gICAgdmFyIGQgPSBkb21haW4oKSxcbiAgICAgICAgaTAgPSAwLFxuICAgICAgICBpMSA9IGQubGVuZ3RoIC0gMSxcbiAgICAgICAgc3RhcnQgPSBkW2kwXSxcbiAgICAgICAgc3RvcCA9IGRbaTFdLFxuICAgICAgICBzdGVwO1xuXG4gICAgaWYgKHN0b3AgPCBzdGFydCkge1xuICAgICAgc3RlcCA9IHN0YXJ0LCBzdGFydCA9IHN0b3AsIHN0b3AgPSBzdGVwO1xuICAgICAgc3RlcCA9IGkwLCBpMCA9IGkxLCBpMSA9IHN0ZXA7XG4gICAgfVxuXG4gICAgc3RlcCA9IHRpY2tJbmNyZW1lbnQoc3RhcnQsIHN0b3AsIGNvdW50KTtcblxuICAgIGlmIChzdGVwID4gMCkge1xuICAgICAgc3RhcnQgPSBNYXRoLmZsb29yKHN0YXJ0IC8gc3RlcCkgKiBzdGVwO1xuICAgICAgc3RvcCA9IE1hdGguY2VpbChzdG9wIC8gc3RlcCkgKiBzdGVwO1xuICAgICAgc3RlcCA9IHRpY2tJbmNyZW1lbnQoc3RhcnQsIHN0b3AsIGNvdW50KTtcbiAgICB9IGVsc2UgaWYgKHN0ZXAgPCAwKSB7XG4gICAgICBzdGFydCA9IE1hdGguY2VpbChzdGFydCAqIHN0ZXApIC8gc3RlcDtcbiAgICAgIHN0b3AgPSBNYXRoLmZsb29yKHN0b3AgKiBzdGVwKSAvIHN0ZXA7XG4gICAgICBzdGVwID0gdGlja0luY3JlbWVudChzdGFydCwgc3RvcCwgY291bnQpO1xuICAgIH1cblxuICAgIGlmIChzdGVwID4gMCkge1xuICAgICAgZFtpMF0gPSBNYXRoLmZsb29yKHN0YXJ0IC8gc3RlcCkgKiBzdGVwO1xuICAgICAgZFtpMV0gPSBNYXRoLmNlaWwoc3RvcCAvIHN0ZXApICogc3RlcDtcbiAgICAgIGRvbWFpbihkKTtcbiAgICB9IGVsc2UgaWYgKHN0ZXAgPCAwKSB7XG4gICAgICBkW2kwXSA9IE1hdGguY2VpbChzdGFydCAqIHN0ZXApIC8gc3RlcDtcbiAgICAgIGRbaTFdID0gTWF0aC5mbG9vcihzdG9wICogc3RlcCkgLyBzdGVwO1xuICAgICAgZG9tYWluKGQpO1xuICAgIH1cblxuICAgIHJldHVybiBzY2FsZTtcbiAgfTtcblxuICByZXR1cm4gc2NhbGU7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGxpbmVhcigpIHtcbiAgdmFyIHNjYWxlID0gY29udGludW91cyhpZGVudGl0eSwgaWRlbnRpdHkpO1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gY29weShzY2FsZSwgbGluZWFyKCkpO1xuICB9O1xuXG4gIGluaXRSYW5nZS5hcHBseShzY2FsZSwgYXJndW1lbnRzKTtcblxuICByZXR1cm4gbGluZWFyaXNoKHNjYWxlKTtcbn1cbiIsInZhciB0MCA9IG5ldyBEYXRlLFxuICAgIHQxID0gbmV3IERhdGU7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG5ld0ludGVydmFsKGZsb29yaSwgb2Zmc2V0aSwgY291bnQsIGZpZWxkKSB7XG5cbiAgZnVuY3Rpb24gaW50ZXJ2YWwoZGF0ZSkge1xuICAgIHJldHVybiBmbG9vcmkoZGF0ZSA9IGFyZ3VtZW50cy5sZW5ndGggPT09IDAgPyBuZXcgRGF0ZSA6IG5ldyBEYXRlKCtkYXRlKSksIGRhdGU7XG4gIH1cblxuICBpbnRlcnZhbC5mbG9vciA9IGZ1bmN0aW9uKGRhdGUpIHtcbiAgICByZXR1cm4gZmxvb3JpKGRhdGUgPSBuZXcgRGF0ZSgrZGF0ZSkpLCBkYXRlO1xuICB9O1xuXG4gIGludGVydmFsLmNlaWwgPSBmdW5jdGlvbihkYXRlKSB7XG4gICAgcmV0dXJuIGZsb29yaShkYXRlID0gbmV3IERhdGUoZGF0ZSAtIDEpKSwgb2Zmc2V0aShkYXRlLCAxKSwgZmxvb3JpKGRhdGUpLCBkYXRlO1xuICB9O1xuXG4gIGludGVydmFsLnJvdW5kID0gZnVuY3Rpb24oZGF0ZSkge1xuICAgIHZhciBkMCA9IGludGVydmFsKGRhdGUpLFxuICAgICAgICBkMSA9IGludGVydmFsLmNlaWwoZGF0ZSk7XG4gICAgcmV0dXJuIGRhdGUgLSBkMCA8IGQxIC0gZGF0ZSA/IGQwIDogZDE7XG4gIH07XG5cbiAgaW50ZXJ2YWwub2Zmc2V0ID0gZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICAgIHJldHVybiBvZmZzZXRpKGRhdGUgPSBuZXcgRGF0ZSgrZGF0ZSksIHN0ZXAgPT0gbnVsbCA/IDEgOiBNYXRoLmZsb29yKHN0ZXApKSwgZGF0ZTtcbiAgfTtcblxuICBpbnRlcnZhbC5yYW5nZSA9IGZ1bmN0aW9uKHN0YXJ0LCBzdG9wLCBzdGVwKSB7XG4gICAgdmFyIHJhbmdlID0gW10sIHByZXZpb3VzO1xuICAgIHN0YXJ0ID0gaW50ZXJ2YWwuY2VpbChzdGFydCk7XG4gICAgc3RlcCA9IHN0ZXAgPT0gbnVsbCA/IDEgOiBNYXRoLmZsb29yKHN0ZXApO1xuICAgIGlmICghKHN0YXJ0IDwgc3RvcCkgfHwgIShzdGVwID4gMCkpIHJldHVybiByYW5nZTsgLy8gYWxzbyBoYW5kbGVzIEludmFsaWQgRGF0ZVxuICAgIGRvIHJhbmdlLnB1c2gocHJldmlvdXMgPSBuZXcgRGF0ZSgrc3RhcnQpKSwgb2Zmc2V0aShzdGFydCwgc3RlcCksIGZsb29yaShzdGFydCk7XG4gICAgd2hpbGUgKHByZXZpb3VzIDwgc3RhcnQgJiYgc3RhcnQgPCBzdG9wKTtcbiAgICByZXR1cm4gcmFuZ2U7XG4gIH07XG5cbiAgaW50ZXJ2YWwuZmlsdGVyID0gZnVuY3Rpb24odGVzdCkge1xuICAgIHJldHVybiBuZXdJbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gICAgICBpZiAoZGF0ZSA+PSBkYXRlKSB3aGlsZSAoZmxvb3JpKGRhdGUpLCAhdGVzdChkYXRlKSkgZGF0ZS5zZXRUaW1lKGRhdGUgLSAxKTtcbiAgICB9LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gICAgICBpZiAoZGF0ZSA+PSBkYXRlKSB7XG4gICAgICAgIGlmIChzdGVwIDwgMCkgd2hpbGUgKCsrc3RlcCA8PSAwKSB7XG4gICAgICAgICAgd2hpbGUgKG9mZnNldGkoZGF0ZSwgLTEpLCAhdGVzdChkYXRlKSkge30gLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1lbXB0eVxuICAgICAgICB9IGVsc2Ugd2hpbGUgKC0tc3RlcCA+PSAwKSB7XG4gICAgICAgICAgd2hpbGUgKG9mZnNldGkoZGF0ZSwgKzEpLCAhdGVzdChkYXRlKSkge30gLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1lbXB0eVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgaWYgKGNvdW50KSB7XG4gICAgaW50ZXJ2YWwuY291bnQgPSBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gICAgICB0MC5zZXRUaW1lKCtzdGFydCksIHQxLnNldFRpbWUoK2VuZCk7XG4gICAgICBmbG9vcmkodDApLCBmbG9vcmkodDEpO1xuICAgICAgcmV0dXJuIE1hdGguZmxvb3IoY291bnQodDAsIHQxKSk7XG4gICAgfTtcblxuICAgIGludGVydmFsLmV2ZXJ5ID0gZnVuY3Rpb24oc3RlcCkge1xuICAgICAgc3RlcCA9IE1hdGguZmxvb3Ioc3RlcCk7XG4gICAgICByZXR1cm4gIWlzRmluaXRlKHN0ZXApIHx8ICEoc3RlcCA+IDApID8gbnVsbFxuICAgICAgICAgIDogIShzdGVwID4gMSkgPyBpbnRlcnZhbFxuICAgICAgICAgIDogaW50ZXJ2YWwuZmlsdGVyKGZpZWxkXG4gICAgICAgICAgICAgID8gZnVuY3Rpb24oZCkgeyByZXR1cm4gZmllbGQoZCkgJSBzdGVwID09PSAwOyB9XG4gICAgICAgICAgICAgIDogZnVuY3Rpb24oZCkgeyByZXR1cm4gaW50ZXJ2YWwuY291bnQoMCwgZCkgJSBzdGVwID09PSAwOyB9KTtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIGludGVydmFsO1xufVxuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsLmpzXCI7XG5cbnZhciB5ZWFyID0gaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICBkYXRlLnNldE1vbnRoKDAsIDEpO1xuICBkYXRlLnNldEhvdXJzKDAsIDAsIDAsIDApO1xufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldEZ1bGxZZWFyKGRhdGUuZ2V0RnVsbFllYXIoKSArIHN0ZXApO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gZW5kLmdldEZ1bGxZZWFyKCkgLSBzdGFydC5nZXRGdWxsWWVhcigpO1xufSwgZnVuY3Rpb24oZGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXRGdWxsWWVhcigpO1xufSk7XG5cbi8vIEFuIG9wdGltaXplZCBpbXBsZW1lbnRhdGlvbiBmb3IgdGhpcyBzaW1wbGUgY2FzZS5cbnllYXIuZXZlcnkgPSBmdW5jdGlvbihrKSB7XG4gIHJldHVybiAhaXNGaW5pdGUoayA9IE1hdGguZmxvb3IoaykpIHx8ICEoayA+IDApID8gbnVsbCA6IGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgICBkYXRlLnNldEZ1bGxZZWFyKE1hdGguZmxvb3IoZGF0ZS5nZXRGdWxsWWVhcigpIC8gaykgKiBrKTtcbiAgICBkYXRlLnNldE1vbnRoKDAsIDEpO1xuICAgIGRhdGUuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG4gIH0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgICBkYXRlLnNldEZ1bGxZZWFyKGRhdGUuZ2V0RnVsbFllYXIoKSArIHN0ZXAgKiBrKTtcbiAgfSk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCB5ZWFyO1xuZXhwb3J0IHZhciB5ZWFycyA9IHllYXIucmFuZ2U7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWwuanNcIjtcblxudmFyIG1vbnRoID0gaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICBkYXRlLnNldERhdGUoMSk7XG4gIGRhdGUuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG59LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0TW9udGgoZGF0ZS5nZXRNb250aCgpICsgc3RlcCk7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiBlbmQuZ2V0TW9udGgoKSAtIHN0YXJ0LmdldE1vbnRoKCkgKyAoZW5kLmdldEZ1bGxZZWFyKCkgLSBzdGFydC5nZXRGdWxsWWVhcigpKSAqIDEyO1xufSwgZnVuY3Rpb24oZGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXRNb250aCgpO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IG1vbnRoO1xuZXhwb3J0IHZhciBtb250aHMgPSBtb250aC5yYW5nZTtcbiIsImltcG9ydCBpbnRlcnZhbCBmcm9tIFwiLi9pbnRlcnZhbC5qc1wiO1xuaW1wb3J0IHtkdXJhdGlvbk1pbnV0ZSwgZHVyYXRpb25XZWVrfSBmcm9tIFwiLi9kdXJhdGlvbi5qc1wiO1xuXG5mdW5jdGlvbiB3ZWVrZGF5KGkpIHtcbiAgcmV0dXJuIGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgICBkYXRlLnNldERhdGUoZGF0ZS5nZXREYXRlKCkgLSAoZGF0ZS5nZXREYXkoKSArIDcgLSBpKSAlIDcpO1xuICAgIGRhdGUuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG4gIH0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgICBkYXRlLnNldERhdGUoZGF0ZS5nZXREYXRlKCkgKyBzdGVwICogNyk7XG4gIH0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgICByZXR1cm4gKGVuZCAtIHN0YXJ0IC0gKGVuZC5nZXRUaW1lem9uZU9mZnNldCgpIC0gc3RhcnQuZ2V0VGltZXpvbmVPZmZzZXQoKSkgKiBkdXJhdGlvbk1pbnV0ZSkgLyBkdXJhdGlvbldlZWs7XG4gIH0pO1xufVxuXG5leHBvcnQgdmFyIHN1bmRheSA9IHdlZWtkYXkoMCk7XG5leHBvcnQgdmFyIG1vbmRheSA9IHdlZWtkYXkoMSk7XG5leHBvcnQgdmFyIHR1ZXNkYXkgPSB3ZWVrZGF5KDIpO1xuZXhwb3J0IHZhciB3ZWRuZXNkYXkgPSB3ZWVrZGF5KDMpO1xuZXhwb3J0IHZhciB0aHVyc2RheSA9IHdlZWtkYXkoNCk7XG5leHBvcnQgdmFyIGZyaWRheSA9IHdlZWtkYXkoNSk7XG5leHBvcnQgdmFyIHNhdHVyZGF5ID0gd2Vla2RheSg2KTtcblxuZXhwb3J0IHZhciBzdW5kYXlzID0gc3VuZGF5LnJhbmdlO1xuZXhwb3J0IHZhciBtb25kYXlzID0gbW9uZGF5LnJhbmdlO1xuZXhwb3J0IHZhciB0dWVzZGF5cyA9IHR1ZXNkYXkucmFuZ2U7XG5leHBvcnQgdmFyIHdlZG5lc2RheXMgPSB3ZWRuZXNkYXkucmFuZ2U7XG5leHBvcnQgdmFyIHRodXJzZGF5cyA9IHRodXJzZGF5LnJhbmdlO1xuZXhwb3J0IHZhciBmcmlkYXlzID0gZnJpZGF5LnJhbmdlO1xuZXhwb3J0IHZhciBzYXR1cmRheXMgPSBzYXR1cmRheS5yYW5nZTtcbiIsImV4cG9ydCB2YXIgZHVyYXRpb25TZWNvbmQgPSAxZTM7XG5leHBvcnQgdmFyIGR1cmF0aW9uTWludXRlID0gNmU0O1xuZXhwb3J0IHZhciBkdXJhdGlvbkhvdXIgPSAzNmU1O1xuZXhwb3J0IHZhciBkdXJhdGlvbkRheSA9IDg2NGU1O1xuZXhwb3J0IHZhciBkdXJhdGlvbldlZWsgPSA2MDQ4ZTU7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWwuanNcIjtcbmltcG9ydCB7ZHVyYXRpb25EYXksIGR1cmF0aW9uTWludXRlfSBmcm9tIFwiLi9kdXJhdGlvbi5qc1wiO1xuXG52YXIgZGF5ID0gaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICBkYXRlLnNldEhvdXJzKDAsIDAsIDAsIDApO1xufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldERhdGUoZGF0ZS5nZXREYXRlKCkgKyBzdGVwKTtcbn0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIChlbmQgLSBzdGFydCAtIChlbmQuZ2V0VGltZXpvbmVPZmZzZXQoKSAtIHN0YXJ0LmdldFRpbWV6b25lT2Zmc2V0KCkpICogZHVyYXRpb25NaW51dGUpIC8gZHVyYXRpb25EYXk7XG59LCBmdW5jdGlvbihkYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldERhdGUoKSAtIDE7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgZGF5O1xuZXhwb3J0IHZhciBkYXlzID0gZGF5LnJhbmdlO1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsLmpzXCI7XG5pbXBvcnQge2R1cmF0aW9uSG91ciwgZHVyYXRpb25NaW51dGUsIGR1cmF0aW9uU2Vjb25kfSBmcm9tIFwiLi9kdXJhdGlvbi5qc1wiO1xuXG52YXIgaG91ciA9IGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgZGF0ZS5zZXRUaW1lKGRhdGUgLSBkYXRlLmdldE1pbGxpc2Vjb25kcygpIC0gZGF0ZS5nZXRTZWNvbmRzKCkgKiBkdXJhdGlvblNlY29uZCAtIGRhdGUuZ2V0TWludXRlcygpICogZHVyYXRpb25NaW51dGUpO1xufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldFRpbWUoK2RhdGUgKyBzdGVwICogZHVyYXRpb25Ib3VyKTtcbn0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIChlbmQgLSBzdGFydCkgLyBkdXJhdGlvbkhvdXI7XG59LCBmdW5jdGlvbihkYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldEhvdXJzKCk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgaG91cjtcbmV4cG9ydCB2YXIgaG91cnMgPSBob3VyLnJhbmdlO1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsLmpzXCI7XG5pbXBvcnQge2R1cmF0aW9uTWludXRlLCBkdXJhdGlvblNlY29uZH0gZnJvbSBcIi4vZHVyYXRpb24uanNcIjtcblxudmFyIG1pbnV0ZSA9IGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgZGF0ZS5zZXRUaW1lKGRhdGUgLSBkYXRlLmdldE1pbGxpc2Vjb25kcygpIC0gZGF0ZS5nZXRTZWNvbmRzKCkgKiBkdXJhdGlvblNlY29uZCk7XG59LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0VGltZSgrZGF0ZSArIHN0ZXAgKiBkdXJhdGlvbk1pbnV0ZSk7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiAoZW5kIC0gc3RhcnQpIC8gZHVyYXRpb25NaW51dGU7XG59LCBmdW5jdGlvbihkYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldE1pbnV0ZXMoKTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBtaW51dGU7XG5leHBvcnQgdmFyIG1pbnV0ZXMgPSBtaW51dGUucmFuZ2U7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWwuanNcIjtcbmltcG9ydCB7ZHVyYXRpb25TZWNvbmR9IGZyb20gXCIuL2R1cmF0aW9uLmpzXCI7XG5cbnZhciBzZWNvbmQgPSBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIGRhdGUuc2V0VGltZShkYXRlIC0gZGF0ZS5nZXRNaWxsaXNlY29uZHMoKSk7XG59LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0VGltZSgrZGF0ZSArIHN0ZXAgKiBkdXJhdGlvblNlY29uZCk7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiAoZW5kIC0gc3RhcnQpIC8gZHVyYXRpb25TZWNvbmQ7XG59LCBmdW5jdGlvbihkYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldFVUQ1NlY29uZHMoKTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBzZWNvbmQ7XG5leHBvcnQgdmFyIHNlY29uZHMgPSBzZWNvbmQucmFuZ2U7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWwuanNcIjtcblxudmFyIG1pbGxpc2Vjb25kID0gaW50ZXJ2YWwoZnVuY3Rpb24oKSB7XG4gIC8vIG5vb3Bcbn0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgZGF0ZS5zZXRUaW1lKCtkYXRlICsgc3RlcCk7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiBlbmQgLSBzdGFydDtcbn0pO1xuXG4vLyBBbiBvcHRpbWl6ZWQgaW1wbGVtZW50YXRpb24gZm9yIHRoaXMgc2ltcGxlIGNhc2UuXG5taWxsaXNlY29uZC5ldmVyeSA9IGZ1bmN0aW9uKGspIHtcbiAgayA9IE1hdGguZmxvb3Ioayk7XG4gIGlmICghaXNGaW5pdGUoaykgfHwgIShrID4gMCkpIHJldHVybiBudWxsO1xuICBpZiAoIShrID4gMSkpIHJldHVybiBtaWxsaXNlY29uZDtcbiAgcmV0dXJuIGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgICBkYXRlLnNldFRpbWUoTWF0aC5mbG9vcihkYXRlIC8gaykgKiBrKTtcbiAgfSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICAgIGRhdGUuc2V0VGltZSgrZGF0ZSArIHN0ZXAgKiBrKTtcbiAgfSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICAgIHJldHVybiAoZW5kIC0gc3RhcnQpIC8gaztcbiAgfSk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBtaWxsaXNlY29uZDtcbmV4cG9ydCB2YXIgbWlsbGlzZWNvbmRzID0gbWlsbGlzZWNvbmQucmFuZ2U7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWwuanNcIjtcbmltcG9ydCB7ZHVyYXRpb25XZWVrfSBmcm9tIFwiLi9kdXJhdGlvbi5qc1wiO1xuXG5mdW5jdGlvbiB1dGNXZWVrZGF5KGkpIHtcbiAgcmV0dXJuIGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgICBkYXRlLnNldFVUQ0RhdGUoZGF0ZS5nZXRVVENEYXRlKCkgLSAoZGF0ZS5nZXRVVENEYXkoKSArIDcgLSBpKSAlIDcpO1xuICAgIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIH0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgICBkYXRlLnNldFVUQ0RhdGUoZGF0ZS5nZXRVVENEYXRlKCkgKyBzdGVwICogNyk7XG4gIH0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgICByZXR1cm4gKGVuZCAtIHN0YXJ0KSAvIGR1cmF0aW9uV2VlaztcbiAgfSk7XG59XG5cbmV4cG9ydCB2YXIgdXRjU3VuZGF5ID0gdXRjV2Vla2RheSgwKTtcbmV4cG9ydCB2YXIgdXRjTW9uZGF5ID0gdXRjV2Vla2RheSgxKTtcbmV4cG9ydCB2YXIgdXRjVHVlc2RheSA9IHV0Y1dlZWtkYXkoMik7XG5leHBvcnQgdmFyIHV0Y1dlZG5lc2RheSA9IHV0Y1dlZWtkYXkoMyk7XG5leHBvcnQgdmFyIHV0Y1RodXJzZGF5ID0gdXRjV2Vla2RheSg0KTtcbmV4cG9ydCB2YXIgdXRjRnJpZGF5ID0gdXRjV2Vla2RheSg1KTtcbmV4cG9ydCB2YXIgdXRjU2F0dXJkYXkgPSB1dGNXZWVrZGF5KDYpO1xuXG5leHBvcnQgdmFyIHV0Y1N1bmRheXMgPSB1dGNTdW5kYXkucmFuZ2U7XG5leHBvcnQgdmFyIHV0Y01vbmRheXMgPSB1dGNNb25kYXkucmFuZ2U7XG5leHBvcnQgdmFyIHV0Y1R1ZXNkYXlzID0gdXRjVHVlc2RheS5yYW5nZTtcbmV4cG9ydCB2YXIgdXRjV2VkbmVzZGF5cyA9IHV0Y1dlZG5lc2RheS5yYW5nZTtcbmV4cG9ydCB2YXIgdXRjVGh1cnNkYXlzID0gdXRjVGh1cnNkYXkucmFuZ2U7XG5leHBvcnQgdmFyIHV0Y0ZyaWRheXMgPSB1dGNGcmlkYXkucmFuZ2U7XG5leHBvcnQgdmFyIHV0Y1NhdHVyZGF5cyA9IHV0Y1NhdHVyZGF5LnJhbmdlO1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsLmpzXCI7XG5pbXBvcnQge2R1cmF0aW9uRGF5fSBmcm9tIFwiLi9kdXJhdGlvbi5qc1wiO1xuXG52YXIgdXRjRGF5ID0gaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldFVUQ0RhdGUoZGF0ZS5nZXRVVENEYXRlKCkgKyBzdGVwKTtcbn0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIChlbmQgLSBzdGFydCkgLyBkdXJhdGlvbkRheTtcbn0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0VVRDRGF0ZSgpIC0gMTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCB1dGNEYXk7XG5leHBvcnQgdmFyIHV0Y0RheXMgPSB1dGNEYXkucmFuZ2U7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWwuanNcIjtcblxudmFyIHV0Y1llYXIgPSBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIGRhdGUuc2V0VVRDTW9udGgoMCwgMSk7XG4gIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG59LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0VVRDRnVsbFllYXIoZGF0ZS5nZXRVVENGdWxsWWVhcigpICsgc3RlcCk7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiBlbmQuZ2V0VVRDRnVsbFllYXIoKSAtIHN0YXJ0LmdldFVUQ0Z1bGxZZWFyKCk7XG59LCBmdW5jdGlvbihkYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldFVUQ0Z1bGxZZWFyKCk7XG59KTtcblxuLy8gQW4gb3B0aW1pemVkIGltcGxlbWVudGF0aW9uIGZvciB0aGlzIHNpbXBsZSBjYXNlLlxudXRjWWVhci5ldmVyeSA9IGZ1bmN0aW9uKGspIHtcbiAgcmV0dXJuICFpc0Zpbml0ZShrID0gTWF0aC5mbG9vcihrKSkgfHwgIShrID4gMCkgPyBudWxsIDogaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICAgIGRhdGUuc2V0VVRDRnVsbFllYXIoTWF0aC5mbG9vcihkYXRlLmdldFVUQ0Z1bGxZZWFyKCkgLyBrKSAqIGspO1xuICAgIGRhdGUuc2V0VVRDTW9udGgoMCwgMSk7XG4gICAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgfSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICAgIGRhdGUuc2V0VVRDRnVsbFllYXIoZGF0ZS5nZXRVVENGdWxsWWVhcigpICsgc3RlcCAqIGspO1xuICB9KTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHV0Y1llYXI7XG5leHBvcnQgdmFyIHV0Y1llYXJzID0gdXRjWWVhci5yYW5nZTtcbiIsImltcG9ydCB7XG4gIHRpbWVEYXksXG4gIHRpbWVTdW5kYXksXG4gIHRpbWVNb25kYXksXG4gIHRpbWVUaHVyc2RheSxcbiAgdGltZVllYXIsXG4gIHV0Y0RheSxcbiAgdXRjU3VuZGF5LFxuICB1dGNNb25kYXksXG4gIHV0Y1RodXJzZGF5LFxuICB1dGNZZWFyXG59IGZyb20gXCJkMy10aW1lXCI7XG5cbmZ1bmN0aW9uIGxvY2FsRGF0ZShkKSB7XG4gIGlmICgwIDw9IGQueSAmJiBkLnkgPCAxMDApIHtcbiAgICB2YXIgZGF0ZSA9IG5ldyBEYXRlKC0xLCBkLm0sIGQuZCwgZC5ILCBkLk0sIGQuUywgZC5MKTtcbiAgICBkYXRlLnNldEZ1bGxZZWFyKGQueSk7XG4gICAgcmV0dXJuIGRhdGU7XG4gIH1cbiAgcmV0dXJuIG5ldyBEYXRlKGQueSwgZC5tLCBkLmQsIGQuSCwgZC5NLCBkLlMsIGQuTCk7XG59XG5cbmZ1bmN0aW9uIHV0Y0RhdGUoZCkge1xuICBpZiAoMCA8PSBkLnkgJiYgZC55IDwgMTAwKSB7XG4gICAgdmFyIGRhdGUgPSBuZXcgRGF0ZShEYXRlLlVUQygtMSwgZC5tLCBkLmQsIGQuSCwgZC5NLCBkLlMsIGQuTCkpO1xuICAgIGRhdGUuc2V0VVRDRnVsbFllYXIoZC55KTtcbiAgICByZXR1cm4gZGF0ZTtcbiAgfVxuICByZXR1cm4gbmV3IERhdGUoRGF0ZS5VVEMoZC55LCBkLm0sIGQuZCwgZC5ILCBkLk0sIGQuUywgZC5MKSk7XG59XG5cbmZ1bmN0aW9uIG5ld0RhdGUoeSwgbSwgZCkge1xuICByZXR1cm4ge3k6IHksIG06IG0sIGQ6IGQsIEg6IDAsIE06IDAsIFM6IDAsIEw6IDB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmb3JtYXRMb2NhbGUobG9jYWxlKSB7XG4gIHZhciBsb2NhbGVfZGF0ZVRpbWUgPSBsb2NhbGUuZGF0ZVRpbWUsXG4gICAgICBsb2NhbGVfZGF0ZSA9IGxvY2FsZS5kYXRlLFxuICAgICAgbG9jYWxlX3RpbWUgPSBsb2NhbGUudGltZSxcbiAgICAgIGxvY2FsZV9wZXJpb2RzID0gbG9jYWxlLnBlcmlvZHMsXG4gICAgICBsb2NhbGVfd2Vla2RheXMgPSBsb2NhbGUuZGF5cyxcbiAgICAgIGxvY2FsZV9zaG9ydFdlZWtkYXlzID0gbG9jYWxlLnNob3J0RGF5cyxcbiAgICAgIGxvY2FsZV9tb250aHMgPSBsb2NhbGUubW9udGhzLFxuICAgICAgbG9jYWxlX3Nob3J0TW9udGhzID0gbG9jYWxlLnNob3J0TW9udGhzO1xuXG4gIHZhciBwZXJpb2RSZSA9IGZvcm1hdFJlKGxvY2FsZV9wZXJpb2RzKSxcbiAgICAgIHBlcmlvZExvb2t1cCA9IGZvcm1hdExvb2t1cChsb2NhbGVfcGVyaW9kcyksXG4gICAgICB3ZWVrZGF5UmUgPSBmb3JtYXRSZShsb2NhbGVfd2Vla2RheXMpLFxuICAgICAgd2Vla2RheUxvb2t1cCA9IGZvcm1hdExvb2t1cChsb2NhbGVfd2Vla2RheXMpLFxuICAgICAgc2hvcnRXZWVrZGF5UmUgPSBmb3JtYXRSZShsb2NhbGVfc2hvcnRXZWVrZGF5cyksXG4gICAgICBzaG9ydFdlZWtkYXlMb29rdXAgPSBmb3JtYXRMb29rdXAobG9jYWxlX3Nob3J0V2Vla2RheXMpLFxuICAgICAgbW9udGhSZSA9IGZvcm1hdFJlKGxvY2FsZV9tb250aHMpLFxuICAgICAgbW9udGhMb29rdXAgPSBmb3JtYXRMb29rdXAobG9jYWxlX21vbnRocyksXG4gICAgICBzaG9ydE1vbnRoUmUgPSBmb3JtYXRSZShsb2NhbGVfc2hvcnRNb250aHMpLFxuICAgICAgc2hvcnRNb250aExvb2t1cCA9IGZvcm1hdExvb2t1cChsb2NhbGVfc2hvcnRNb250aHMpO1xuXG4gIHZhciBmb3JtYXRzID0ge1xuICAgIFwiYVwiOiBmb3JtYXRTaG9ydFdlZWtkYXksXG4gICAgXCJBXCI6IGZvcm1hdFdlZWtkYXksXG4gICAgXCJiXCI6IGZvcm1hdFNob3J0TW9udGgsXG4gICAgXCJCXCI6IGZvcm1hdE1vbnRoLFxuICAgIFwiY1wiOiBudWxsLFxuICAgIFwiZFwiOiBmb3JtYXREYXlPZk1vbnRoLFxuICAgIFwiZVwiOiBmb3JtYXREYXlPZk1vbnRoLFxuICAgIFwiZlwiOiBmb3JtYXRNaWNyb3NlY29uZHMsXG4gICAgXCJIXCI6IGZvcm1hdEhvdXIyNCxcbiAgICBcIklcIjogZm9ybWF0SG91cjEyLFxuICAgIFwialwiOiBmb3JtYXREYXlPZlllYXIsXG4gICAgXCJMXCI6IGZvcm1hdE1pbGxpc2Vjb25kcyxcbiAgICBcIm1cIjogZm9ybWF0TW9udGhOdW1iZXIsXG4gICAgXCJNXCI6IGZvcm1hdE1pbnV0ZXMsXG4gICAgXCJwXCI6IGZvcm1hdFBlcmlvZCxcbiAgICBcInFcIjogZm9ybWF0UXVhcnRlcixcbiAgICBcIlFcIjogZm9ybWF0VW5peFRpbWVzdGFtcCxcbiAgICBcInNcIjogZm9ybWF0VW5peFRpbWVzdGFtcFNlY29uZHMsXG4gICAgXCJTXCI6IGZvcm1hdFNlY29uZHMsXG4gICAgXCJ1XCI6IGZvcm1hdFdlZWtkYXlOdW1iZXJNb25kYXksXG4gICAgXCJVXCI6IGZvcm1hdFdlZWtOdW1iZXJTdW5kYXksXG4gICAgXCJWXCI6IGZvcm1hdFdlZWtOdW1iZXJJU08sXG4gICAgXCJ3XCI6IGZvcm1hdFdlZWtkYXlOdW1iZXJTdW5kYXksXG4gICAgXCJXXCI6IGZvcm1hdFdlZWtOdW1iZXJNb25kYXksXG4gICAgXCJ4XCI6IG51bGwsXG4gICAgXCJYXCI6IG51bGwsXG4gICAgXCJ5XCI6IGZvcm1hdFllYXIsXG4gICAgXCJZXCI6IGZvcm1hdEZ1bGxZZWFyLFxuICAgIFwiWlwiOiBmb3JtYXRab25lLFxuICAgIFwiJVwiOiBmb3JtYXRMaXRlcmFsUGVyY2VudFxuICB9O1xuXG4gIHZhciB1dGNGb3JtYXRzID0ge1xuICAgIFwiYVwiOiBmb3JtYXRVVENTaG9ydFdlZWtkYXksXG4gICAgXCJBXCI6IGZvcm1hdFVUQ1dlZWtkYXksXG4gICAgXCJiXCI6IGZvcm1hdFVUQ1Nob3J0TW9udGgsXG4gICAgXCJCXCI6IGZvcm1hdFVUQ01vbnRoLFxuICAgIFwiY1wiOiBudWxsLFxuICAgIFwiZFwiOiBmb3JtYXRVVENEYXlPZk1vbnRoLFxuICAgIFwiZVwiOiBmb3JtYXRVVENEYXlPZk1vbnRoLFxuICAgIFwiZlwiOiBmb3JtYXRVVENNaWNyb3NlY29uZHMsXG4gICAgXCJIXCI6IGZvcm1hdFVUQ0hvdXIyNCxcbiAgICBcIklcIjogZm9ybWF0VVRDSG91cjEyLFxuICAgIFwialwiOiBmb3JtYXRVVENEYXlPZlllYXIsXG4gICAgXCJMXCI6IGZvcm1hdFVUQ01pbGxpc2Vjb25kcyxcbiAgICBcIm1cIjogZm9ybWF0VVRDTW9udGhOdW1iZXIsXG4gICAgXCJNXCI6IGZvcm1hdFVUQ01pbnV0ZXMsXG4gICAgXCJwXCI6IGZvcm1hdFVUQ1BlcmlvZCxcbiAgICBcInFcIjogZm9ybWF0VVRDUXVhcnRlcixcbiAgICBcIlFcIjogZm9ybWF0VW5peFRpbWVzdGFtcCxcbiAgICBcInNcIjogZm9ybWF0VW5peFRpbWVzdGFtcFNlY29uZHMsXG4gICAgXCJTXCI6IGZvcm1hdFVUQ1NlY29uZHMsXG4gICAgXCJ1XCI6IGZvcm1hdFVUQ1dlZWtkYXlOdW1iZXJNb25kYXksXG4gICAgXCJVXCI6IGZvcm1hdFVUQ1dlZWtOdW1iZXJTdW5kYXksXG4gICAgXCJWXCI6IGZvcm1hdFVUQ1dlZWtOdW1iZXJJU08sXG4gICAgXCJ3XCI6IGZvcm1hdFVUQ1dlZWtkYXlOdW1iZXJTdW5kYXksXG4gICAgXCJXXCI6IGZvcm1hdFVUQ1dlZWtOdW1iZXJNb25kYXksXG4gICAgXCJ4XCI6IG51bGwsXG4gICAgXCJYXCI6IG51bGwsXG4gICAgXCJ5XCI6IGZvcm1hdFVUQ1llYXIsXG4gICAgXCJZXCI6IGZvcm1hdFVUQ0Z1bGxZZWFyLFxuICAgIFwiWlwiOiBmb3JtYXRVVENab25lLFxuICAgIFwiJVwiOiBmb3JtYXRMaXRlcmFsUGVyY2VudFxuICB9O1xuXG4gIHZhciBwYXJzZXMgPSB7XG4gICAgXCJhXCI6IHBhcnNlU2hvcnRXZWVrZGF5LFxuICAgIFwiQVwiOiBwYXJzZVdlZWtkYXksXG4gICAgXCJiXCI6IHBhcnNlU2hvcnRNb250aCxcbiAgICBcIkJcIjogcGFyc2VNb250aCxcbiAgICBcImNcIjogcGFyc2VMb2NhbGVEYXRlVGltZSxcbiAgICBcImRcIjogcGFyc2VEYXlPZk1vbnRoLFxuICAgIFwiZVwiOiBwYXJzZURheU9mTW9udGgsXG4gICAgXCJmXCI6IHBhcnNlTWljcm9zZWNvbmRzLFxuICAgIFwiSFwiOiBwYXJzZUhvdXIyNCxcbiAgICBcIklcIjogcGFyc2VIb3VyMjQsXG4gICAgXCJqXCI6IHBhcnNlRGF5T2ZZZWFyLFxuICAgIFwiTFwiOiBwYXJzZU1pbGxpc2Vjb25kcyxcbiAgICBcIm1cIjogcGFyc2VNb250aE51bWJlcixcbiAgICBcIk1cIjogcGFyc2VNaW51dGVzLFxuICAgIFwicFwiOiBwYXJzZVBlcmlvZCxcbiAgICBcInFcIjogcGFyc2VRdWFydGVyLFxuICAgIFwiUVwiOiBwYXJzZVVuaXhUaW1lc3RhbXAsXG4gICAgXCJzXCI6IHBhcnNlVW5peFRpbWVzdGFtcFNlY29uZHMsXG4gICAgXCJTXCI6IHBhcnNlU2Vjb25kcyxcbiAgICBcInVcIjogcGFyc2VXZWVrZGF5TnVtYmVyTW9uZGF5LFxuICAgIFwiVVwiOiBwYXJzZVdlZWtOdW1iZXJTdW5kYXksXG4gICAgXCJWXCI6IHBhcnNlV2Vla051bWJlcklTTyxcbiAgICBcIndcIjogcGFyc2VXZWVrZGF5TnVtYmVyU3VuZGF5LFxuICAgIFwiV1wiOiBwYXJzZVdlZWtOdW1iZXJNb25kYXksXG4gICAgXCJ4XCI6IHBhcnNlTG9jYWxlRGF0ZSxcbiAgICBcIlhcIjogcGFyc2VMb2NhbGVUaW1lLFxuICAgIFwieVwiOiBwYXJzZVllYXIsXG4gICAgXCJZXCI6IHBhcnNlRnVsbFllYXIsXG4gICAgXCJaXCI6IHBhcnNlWm9uZSxcbiAgICBcIiVcIjogcGFyc2VMaXRlcmFsUGVyY2VudFxuICB9O1xuXG4gIC8vIFRoZXNlIHJlY3Vyc2l2ZSBkaXJlY3RpdmUgZGVmaW5pdGlvbnMgbXVzdCBiZSBkZWZlcnJlZC5cbiAgZm9ybWF0cy54ID0gbmV3Rm9ybWF0KGxvY2FsZV9kYXRlLCBmb3JtYXRzKTtcbiAgZm9ybWF0cy5YID0gbmV3Rm9ybWF0KGxvY2FsZV90aW1lLCBmb3JtYXRzKTtcbiAgZm9ybWF0cy5jID0gbmV3Rm9ybWF0KGxvY2FsZV9kYXRlVGltZSwgZm9ybWF0cyk7XG4gIHV0Y0Zvcm1hdHMueCA9IG5ld0Zvcm1hdChsb2NhbGVfZGF0ZSwgdXRjRm9ybWF0cyk7XG4gIHV0Y0Zvcm1hdHMuWCA9IG5ld0Zvcm1hdChsb2NhbGVfdGltZSwgdXRjRm9ybWF0cyk7XG4gIHV0Y0Zvcm1hdHMuYyA9IG5ld0Zvcm1hdChsb2NhbGVfZGF0ZVRpbWUsIHV0Y0Zvcm1hdHMpO1xuXG4gIGZ1bmN0aW9uIG5ld0Zvcm1hdChzcGVjaWZpZXIsIGZvcm1hdHMpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oZGF0ZSkge1xuICAgICAgdmFyIHN0cmluZyA9IFtdLFxuICAgICAgICAgIGkgPSAtMSxcbiAgICAgICAgICBqID0gMCxcbiAgICAgICAgICBuID0gc3BlY2lmaWVyLmxlbmd0aCxcbiAgICAgICAgICBjLFxuICAgICAgICAgIHBhZCxcbiAgICAgICAgICBmb3JtYXQ7XG5cbiAgICAgIGlmICghKGRhdGUgaW5zdGFuY2VvZiBEYXRlKSkgZGF0ZSA9IG5ldyBEYXRlKCtkYXRlKTtcblxuICAgICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgICAgaWYgKHNwZWNpZmllci5jaGFyQ29kZUF0KGkpID09PSAzNykge1xuICAgICAgICAgIHN0cmluZy5wdXNoKHNwZWNpZmllci5zbGljZShqLCBpKSk7XG4gICAgICAgICAgaWYgKChwYWQgPSBwYWRzW2MgPSBzcGVjaWZpZXIuY2hhckF0KCsraSldKSAhPSBudWxsKSBjID0gc3BlY2lmaWVyLmNoYXJBdCgrK2kpO1xuICAgICAgICAgIGVsc2UgcGFkID0gYyA9PT0gXCJlXCIgPyBcIiBcIiA6IFwiMFwiO1xuICAgICAgICAgIGlmIChmb3JtYXQgPSBmb3JtYXRzW2NdKSBjID0gZm9ybWF0KGRhdGUsIHBhZCk7XG4gICAgICAgICAgc3RyaW5nLnB1c2goYyk7XG4gICAgICAgICAgaiA9IGkgKyAxO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHN0cmluZy5wdXNoKHNwZWNpZmllci5zbGljZShqLCBpKSk7XG4gICAgICByZXR1cm4gc3RyaW5nLmpvaW4oXCJcIik7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG5ld1BhcnNlKHNwZWNpZmllciwgWikge1xuICAgIHJldHVybiBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICAgIHZhciBkID0gbmV3RGF0ZSgxOTAwLCB1bmRlZmluZWQsIDEpLFxuICAgICAgICAgIGkgPSBwYXJzZVNwZWNpZmllcihkLCBzcGVjaWZpZXIsIHN0cmluZyArPSBcIlwiLCAwKSxcbiAgICAgICAgICB3ZWVrLCBkYXk7XG4gICAgICBpZiAoaSAhPSBzdHJpbmcubGVuZ3RoKSByZXR1cm4gbnVsbDtcblxuICAgICAgLy8gSWYgYSBVTklYIHRpbWVzdGFtcCBpcyBzcGVjaWZpZWQsIHJldHVybiBpdC5cbiAgICAgIGlmIChcIlFcIiBpbiBkKSByZXR1cm4gbmV3IERhdGUoZC5RKTtcbiAgICAgIGlmIChcInNcIiBpbiBkKSByZXR1cm4gbmV3IERhdGUoZC5zICogMTAwMCArIChcIkxcIiBpbiBkID8gZC5MIDogMCkpO1xuXG4gICAgICAvLyBJZiB0aGlzIGlzIHV0Y1BhcnNlLCBuZXZlciB1c2UgdGhlIGxvY2FsIHRpbWV6b25lLlxuICAgICAgaWYgKFogJiYgIShcIlpcIiBpbiBkKSkgZC5aID0gMDtcblxuICAgICAgLy8gVGhlIGFtLXBtIGZsYWcgaXMgMCBmb3IgQU0sIGFuZCAxIGZvciBQTS5cbiAgICAgIGlmIChcInBcIiBpbiBkKSBkLkggPSBkLkggJSAxMiArIGQucCAqIDEyO1xuXG4gICAgICAvLyBJZiB0aGUgbW9udGggd2FzIG5vdCBzcGVjaWZpZWQsIGluaGVyaXQgZnJvbSB0aGUgcXVhcnRlci5cbiAgICAgIGlmIChkLm0gPT09IHVuZGVmaW5lZCkgZC5tID0gXCJxXCIgaW4gZCA/IGQucSA6IDA7XG5cbiAgICAgIC8vIENvbnZlcnQgZGF5LW9mLXdlZWsgYW5kIHdlZWstb2YteWVhciB0byBkYXktb2YteWVhci5cbiAgICAgIGlmIChcIlZcIiBpbiBkKSB7XG4gICAgICAgIGlmIChkLlYgPCAxIHx8IGQuViA+IDUzKSByZXR1cm4gbnVsbDtcbiAgICAgICAgaWYgKCEoXCJ3XCIgaW4gZCkpIGQudyA9IDE7XG4gICAgICAgIGlmIChcIlpcIiBpbiBkKSB7XG4gICAgICAgICAgd2VlayA9IHV0Y0RhdGUobmV3RGF0ZShkLnksIDAsIDEpKSwgZGF5ID0gd2Vlay5nZXRVVENEYXkoKTtcbiAgICAgICAgICB3ZWVrID0gZGF5ID4gNCB8fCBkYXkgPT09IDAgPyB1dGNNb25kYXkuY2VpbCh3ZWVrKSA6IHV0Y01vbmRheSh3ZWVrKTtcbiAgICAgICAgICB3ZWVrID0gdXRjRGF5Lm9mZnNldCh3ZWVrLCAoZC5WIC0gMSkgKiA3KTtcbiAgICAgICAgICBkLnkgPSB3ZWVrLmdldFVUQ0Z1bGxZZWFyKCk7XG4gICAgICAgICAgZC5tID0gd2Vlay5nZXRVVENNb250aCgpO1xuICAgICAgICAgIGQuZCA9IHdlZWsuZ2V0VVRDRGF0ZSgpICsgKGQudyArIDYpICUgNztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB3ZWVrID0gbG9jYWxEYXRlKG5ld0RhdGUoZC55LCAwLCAxKSksIGRheSA9IHdlZWsuZ2V0RGF5KCk7XG4gICAgICAgICAgd2VlayA9IGRheSA+IDQgfHwgZGF5ID09PSAwID8gdGltZU1vbmRheS5jZWlsKHdlZWspIDogdGltZU1vbmRheSh3ZWVrKTtcbiAgICAgICAgICB3ZWVrID0gdGltZURheS5vZmZzZXQod2VlaywgKGQuViAtIDEpICogNyk7XG4gICAgICAgICAgZC55ID0gd2Vlay5nZXRGdWxsWWVhcigpO1xuICAgICAgICAgIGQubSA9IHdlZWsuZ2V0TW9udGgoKTtcbiAgICAgICAgICBkLmQgPSB3ZWVrLmdldERhdGUoKSArIChkLncgKyA2KSAlIDc7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoXCJXXCIgaW4gZCB8fCBcIlVcIiBpbiBkKSB7XG4gICAgICAgIGlmICghKFwid1wiIGluIGQpKSBkLncgPSBcInVcIiBpbiBkID8gZC51ICUgNyA6IFwiV1wiIGluIGQgPyAxIDogMDtcbiAgICAgICAgZGF5ID0gXCJaXCIgaW4gZCA/IHV0Y0RhdGUobmV3RGF0ZShkLnksIDAsIDEpKS5nZXRVVENEYXkoKSA6IGxvY2FsRGF0ZShuZXdEYXRlKGQueSwgMCwgMSkpLmdldERheSgpO1xuICAgICAgICBkLm0gPSAwO1xuICAgICAgICBkLmQgPSBcIldcIiBpbiBkID8gKGQudyArIDYpICUgNyArIGQuVyAqIDcgLSAoZGF5ICsgNSkgJSA3IDogZC53ICsgZC5VICogNyAtIChkYXkgKyA2KSAlIDc7XG4gICAgICB9XG5cbiAgICAgIC8vIElmIGEgdGltZSB6b25lIGlzIHNwZWNpZmllZCwgYWxsIGZpZWxkcyBhcmUgaW50ZXJwcmV0ZWQgYXMgVVRDIGFuZCB0aGVuXG4gICAgICAvLyBvZmZzZXQgYWNjb3JkaW5nIHRvIHRoZSBzcGVjaWZpZWQgdGltZSB6b25lLlxuICAgICAgaWYgKFwiWlwiIGluIGQpIHtcbiAgICAgICAgZC5IICs9IGQuWiAvIDEwMCB8IDA7XG4gICAgICAgIGQuTSArPSBkLlogJSAxMDA7XG4gICAgICAgIHJldHVybiB1dGNEYXRlKGQpO1xuICAgICAgfVxuXG4gICAgICAvLyBPdGhlcndpc2UsIGFsbCBmaWVsZHMgYXJlIGluIGxvY2FsIHRpbWUuXG4gICAgICByZXR1cm4gbG9jYWxEYXRlKGQpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZVNwZWNpZmllcihkLCBzcGVjaWZpZXIsIHN0cmluZywgaikge1xuICAgIHZhciBpID0gMCxcbiAgICAgICAgbiA9IHNwZWNpZmllci5sZW5ndGgsXG4gICAgICAgIG0gPSBzdHJpbmcubGVuZ3RoLFxuICAgICAgICBjLFxuICAgICAgICBwYXJzZTtcblxuICAgIHdoaWxlIChpIDwgbikge1xuICAgICAgaWYgKGogPj0gbSkgcmV0dXJuIC0xO1xuICAgICAgYyA9IHNwZWNpZmllci5jaGFyQ29kZUF0KGkrKyk7XG4gICAgICBpZiAoYyA9PT0gMzcpIHtcbiAgICAgICAgYyA9IHNwZWNpZmllci5jaGFyQXQoaSsrKTtcbiAgICAgICAgcGFyc2UgPSBwYXJzZXNbYyBpbiBwYWRzID8gc3BlY2lmaWVyLmNoYXJBdChpKyspIDogY107XG4gICAgICAgIGlmICghcGFyc2UgfHwgKChqID0gcGFyc2UoZCwgc3RyaW5nLCBqKSkgPCAwKSkgcmV0dXJuIC0xO1xuICAgICAgfSBlbHNlIGlmIChjICE9IHN0cmluZy5jaGFyQ29kZUF0KGorKykpIHtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBqO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VQZXJpb2QoZCwgc3RyaW5nLCBpKSB7XG4gICAgdmFyIG4gPSBwZXJpb2RSZS5leGVjKHN0cmluZy5zbGljZShpKSk7XG4gICAgcmV0dXJuIG4gPyAoZC5wID0gcGVyaW9kTG9va3VwW25bMF0udG9Mb3dlckNhc2UoKV0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlU2hvcnRXZWVrZGF5KGQsIHN0cmluZywgaSkge1xuICAgIHZhciBuID0gc2hvcnRXZWVrZGF5UmUuZXhlYyhzdHJpbmcuc2xpY2UoaSkpO1xuICAgIHJldHVybiBuID8gKGQudyA9IHNob3J0V2Vla2RheUxvb2t1cFtuWzBdLnRvTG93ZXJDYXNlKCldLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZVdlZWtkYXkoZCwgc3RyaW5nLCBpKSB7XG4gICAgdmFyIG4gPSB3ZWVrZGF5UmUuZXhlYyhzdHJpbmcuc2xpY2UoaSkpO1xuICAgIHJldHVybiBuID8gKGQudyA9IHdlZWtkYXlMb29rdXBbblswXS50b0xvd2VyQ2FzZSgpXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VTaG9ydE1vbnRoKGQsIHN0cmluZywgaSkge1xuICAgIHZhciBuID0gc2hvcnRNb250aFJlLmV4ZWMoc3RyaW5nLnNsaWNlKGkpKTtcbiAgICByZXR1cm4gbiA/IChkLm0gPSBzaG9ydE1vbnRoTG9va3VwW25bMF0udG9Mb3dlckNhc2UoKV0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlTW9udGgoZCwgc3RyaW5nLCBpKSB7XG4gICAgdmFyIG4gPSBtb250aFJlLmV4ZWMoc3RyaW5nLnNsaWNlKGkpKTtcbiAgICByZXR1cm4gbiA/IChkLm0gPSBtb250aExvb2t1cFtuWzBdLnRvTG93ZXJDYXNlKCldLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZUxvY2FsZURhdGVUaW1lKGQsIHN0cmluZywgaSkge1xuICAgIHJldHVybiBwYXJzZVNwZWNpZmllcihkLCBsb2NhbGVfZGF0ZVRpbWUsIHN0cmluZywgaSk7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZUxvY2FsZURhdGUoZCwgc3RyaW5nLCBpKSB7XG4gICAgcmV0dXJuIHBhcnNlU3BlY2lmaWVyKGQsIGxvY2FsZV9kYXRlLCBzdHJpbmcsIGkpO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VMb2NhbGVUaW1lKGQsIHN0cmluZywgaSkge1xuICAgIHJldHVybiBwYXJzZVNwZWNpZmllcihkLCBsb2NhbGVfdGltZSwgc3RyaW5nLCBpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFNob3J0V2Vla2RheShkKSB7XG4gICAgcmV0dXJuIGxvY2FsZV9zaG9ydFdlZWtkYXlzW2QuZ2V0RGF5KCldO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0V2Vla2RheShkKSB7XG4gICAgcmV0dXJuIGxvY2FsZV93ZWVrZGF5c1tkLmdldERheSgpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFNob3J0TW9udGgoZCkge1xuICAgIHJldHVybiBsb2NhbGVfc2hvcnRNb250aHNbZC5nZXRNb250aCgpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdE1vbnRoKGQpIHtcbiAgICByZXR1cm4gbG9jYWxlX21vbnRoc1tkLmdldE1vbnRoKCldO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0UGVyaW9kKGQpIHtcbiAgICByZXR1cm4gbG9jYWxlX3BlcmlvZHNbKyhkLmdldEhvdXJzKCkgPj0gMTIpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFF1YXJ0ZXIoZCkge1xuICAgIHJldHVybiAxICsgfn4oZC5nZXRNb250aCgpIC8gMyk7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRVVENTaG9ydFdlZWtkYXkoZCkge1xuICAgIHJldHVybiBsb2NhbGVfc2hvcnRXZWVrZGF5c1tkLmdldFVUQ0RheSgpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFVUQ1dlZWtkYXkoZCkge1xuICAgIHJldHVybiBsb2NhbGVfd2Vla2RheXNbZC5nZXRVVENEYXkoKV07XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRVVENTaG9ydE1vbnRoKGQpIHtcbiAgICByZXR1cm4gbG9jYWxlX3Nob3J0TW9udGhzW2QuZ2V0VVRDTW9udGgoKV07XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRVVENNb250aChkKSB7XG4gICAgcmV0dXJuIGxvY2FsZV9tb250aHNbZC5nZXRVVENNb250aCgpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFVUQ1BlcmlvZChkKSB7XG4gICAgcmV0dXJuIGxvY2FsZV9wZXJpb2RzWysoZC5nZXRVVENIb3VycygpID49IDEyKV07XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRVVENRdWFydGVyKGQpIHtcbiAgICByZXR1cm4gMSArIH5+KGQuZ2V0VVRDTW9udGgoKSAvIDMpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBmb3JtYXQ6IGZ1bmN0aW9uKHNwZWNpZmllcikge1xuICAgICAgdmFyIGYgPSBuZXdGb3JtYXQoc3BlY2lmaWVyICs9IFwiXCIsIGZvcm1hdHMpO1xuICAgICAgZi50b1N0cmluZyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gc3BlY2lmaWVyOyB9O1xuICAgICAgcmV0dXJuIGY7XG4gICAgfSxcbiAgICBwYXJzZTogZnVuY3Rpb24oc3BlY2lmaWVyKSB7XG4gICAgICB2YXIgcCA9IG5ld1BhcnNlKHNwZWNpZmllciArPSBcIlwiLCBmYWxzZSk7XG4gICAgICBwLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7IHJldHVybiBzcGVjaWZpZXI7IH07XG4gICAgICByZXR1cm4gcDtcbiAgICB9LFxuICAgIHV0Y0Zvcm1hdDogZnVuY3Rpb24oc3BlY2lmaWVyKSB7XG4gICAgICB2YXIgZiA9IG5ld0Zvcm1hdChzcGVjaWZpZXIgKz0gXCJcIiwgdXRjRm9ybWF0cyk7XG4gICAgICBmLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7IHJldHVybiBzcGVjaWZpZXI7IH07XG4gICAgICByZXR1cm4gZjtcbiAgICB9LFxuICAgIHV0Y1BhcnNlOiBmdW5jdGlvbihzcGVjaWZpZXIpIHtcbiAgICAgIHZhciBwID0gbmV3UGFyc2Uoc3BlY2lmaWVyICs9IFwiXCIsIHRydWUpO1xuICAgICAgcC50b1N0cmluZyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gc3BlY2lmaWVyOyB9O1xuICAgICAgcmV0dXJuIHA7XG4gICAgfVxuICB9O1xufVxuXG52YXIgcGFkcyA9IHtcIi1cIjogXCJcIiwgXCJfXCI6IFwiIFwiLCBcIjBcIjogXCIwXCJ9LFxuICAgIG51bWJlclJlID0gL15cXHMqXFxkKy8sIC8vIG5vdGU6IGlnbm9yZXMgbmV4dCBkaXJlY3RpdmVcbiAgICBwZXJjZW50UmUgPSAvXiUvLFxuICAgIHJlcXVvdGVSZSA9IC9bXFxcXF4kKis/fFtcXF0oKS57fV0vZztcblxuZnVuY3Rpb24gcGFkKHZhbHVlLCBmaWxsLCB3aWR0aCkge1xuICB2YXIgc2lnbiA9IHZhbHVlIDwgMCA/IFwiLVwiIDogXCJcIixcbiAgICAgIHN0cmluZyA9IChzaWduID8gLXZhbHVlIDogdmFsdWUpICsgXCJcIixcbiAgICAgIGxlbmd0aCA9IHN0cmluZy5sZW5ndGg7XG4gIHJldHVybiBzaWduICsgKGxlbmd0aCA8IHdpZHRoID8gbmV3IEFycmF5KHdpZHRoIC0gbGVuZ3RoICsgMSkuam9pbihmaWxsKSArIHN0cmluZyA6IHN0cmluZyk7XG59XG5cbmZ1bmN0aW9uIHJlcXVvdGUocykge1xuICByZXR1cm4gcy5yZXBsYWNlKHJlcXVvdGVSZSwgXCJcXFxcJCZcIik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFJlKG5hbWVzKSB7XG4gIHJldHVybiBuZXcgUmVnRXhwKFwiXig/OlwiICsgbmFtZXMubWFwKHJlcXVvdGUpLmpvaW4oXCJ8XCIpICsgXCIpXCIsIFwiaVwiKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0TG9va3VwKG5hbWVzKSB7XG4gIHZhciBtYXAgPSB7fSwgaSA9IC0xLCBuID0gbmFtZXMubGVuZ3RoO1xuICB3aGlsZSAoKytpIDwgbikgbWFwW25hbWVzW2ldLnRvTG93ZXJDYXNlKCldID0gaTtcbiAgcmV0dXJuIG1hcDtcbn1cblxuZnVuY3Rpb24gcGFyc2VXZWVrZGF5TnVtYmVyU3VuZGF5KGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAxKSk7XG4gIHJldHVybiBuID8gKGQudyA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlV2Vla2RheU51bWJlck1vbmRheShkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMSkpO1xuICByZXR1cm4gbiA/IChkLnUgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZVdlZWtOdW1iZXJTdW5kYXkoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDIpKTtcbiAgcmV0dXJuIG4gPyAoZC5VID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VXZWVrTnVtYmVySVNPKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG4gIHJldHVybiBuID8gKGQuViA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlV2Vla051bWJlck1vbmRheShkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICByZXR1cm4gbiA/IChkLlcgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZUZ1bGxZZWFyKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyA0KSk7XG4gIHJldHVybiBuID8gKGQueSA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlWWVhcihkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICByZXR1cm4gbiA/IChkLnkgPSArblswXSArICgrblswXSA+IDY4ID8gMTkwMCA6IDIwMDApLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlWm9uZShkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSAvXihaKXwoWystXVxcZFxcZCkoPzo6PyhcXGRcXGQpKT8vLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyA2KSk7XG4gIHJldHVybiBuID8gKGQuWiA9IG5bMV0gPyAwIDogLShuWzJdICsgKG5bM10gfHwgXCIwMFwiKSksIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VRdWFydGVyKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAxKSk7XG4gIHJldHVybiBuID8gKGQucSA9IG5bMF0gKiAzIC0gMywgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZU1vbnRoTnVtYmVyKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG4gIHJldHVybiBuID8gKGQubSA9IG5bMF0gLSAxLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlRGF5T2ZNb250aChkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICByZXR1cm4gbiA/IChkLmQgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZURheU9mWWVhcihkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMykpO1xuICByZXR1cm4gbiA/IChkLm0gPSAwLCBkLmQgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZUhvdXIyNChkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICByZXR1cm4gbiA/IChkLkggPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZU1pbnV0ZXMoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDIpKTtcbiAgcmV0dXJuIG4gPyAoZC5NID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VTZWNvbmRzKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG4gIHJldHVybiBuID8gKGQuUyA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlTWlsbGlzZWNvbmRzKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAzKSk7XG4gIHJldHVybiBuID8gKGQuTCA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlTWljcm9zZWNvbmRzKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyA2KSk7XG4gIHJldHVybiBuID8gKGQuTCA9IE1hdGguZmxvb3IoblswXSAvIDEwMDApLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlTGl0ZXJhbFBlcmNlbnQoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gcGVyY2VudFJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAxKSk7XG4gIHJldHVybiBuID8gaSArIG5bMF0ubGVuZ3RoIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlVW5peFRpbWVzdGFtcChkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpKSk7XG4gIHJldHVybiBuID8gKGQuUSA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlVW5peFRpbWVzdGFtcFNlY29uZHMoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSkpO1xuICByZXR1cm4gbiA/IChkLnMgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBmb3JtYXREYXlPZk1vbnRoKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldERhdGUoKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdEhvdXIyNChkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRIb3VycygpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0SG91cjEyKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldEhvdXJzKCkgJSAxMiB8fCAxMiwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdERheU9mWWVhcihkLCBwKSB7XG4gIHJldHVybiBwYWQoMSArIHRpbWVEYXkuY291bnQodGltZVllYXIoZCksIGQpLCBwLCAzKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0TWlsbGlzZWNvbmRzKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldE1pbGxpc2Vjb25kcygpLCBwLCAzKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0TWljcm9zZWNvbmRzKGQsIHApIHtcbiAgcmV0dXJuIGZvcm1hdE1pbGxpc2Vjb25kcyhkLCBwKSArIFwiMDAwXCI7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdE1vbnRoTnVtYmVyKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldE1vbnRoKCkgKyAxLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0TWludXRlcyhkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRNaW51dGVzKCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRTZWNvbmRzKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldFNlY29uZHMoKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFdlZWtkYXlOdW1iZXJNb25kYXkoZCkge1xuICB2YXIgZGF5ID0gZC5nZXREYXkoKTtcbiAgcmV0dXJuIGRheSA9PT0gMCA/IDcgOiBkYXk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFdlZWtOdW1iZXJTdW5kYXkoZCwgcCkge1xuICByZXR1cm4gcGFkKHRpbWVTdW5kYXkuY291bnQodGltZVllYXIoZCkgLSAxLCBkKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFdlZWtOdW1iZXJJU08oZCwgcCkge1xuICB2YXIgZGF5ID0gZC5nZXREYXkoKTtcbiAgZCA9IChkYXkgPj0gNCB8fCBkYXkgPT09IDApID8gdGltZVRodXJzZGF5KGQpIDogdGltZVRodXJzZGF5LmNlaWwoZCk7XG4gIHJldHVybiBwYWQodGltZVRodXJzZGF5LmNvdW50KHRpbWVZZWFyKGQpLCBkKSArICh0aW1lWWVhcihkKS5nZXREYXkoKSA9PT0gNCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRXZWVrZGF5TnVtYmVyU3VuZGF5KGQpIHtcbiAgcmV0dXJuIGQuZ2V0RGF5KCk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFdlZWtOdW1iZXJNb25kYXkoZCwgcCkge1xuICByZXR1cm4gcGFkKHRpbWVNb25kYXkuY291bnQodGltZVllYXIoZCkgLSAxLCBkKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFllYXIoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0RnVsbFllYXIoKSAlIDEwMCwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdEZ1bGxZZWFyKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldEZ1bGxZZWFyKCkgJSAxMDAwMCwgcCwgNCk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFpvbmUoZCkge1xuICB2YXIgeiA9IGQuZ2V0VGltZXpvbmVPZmZzZXQoKTtcbiAgcmV0dXJuICh6ID4gMCA/IFwiLVwiIDogKHogKj0gLTEsIFwiK1wiKSlcbiAgICAgICsgcGFkKHogLyA2MCB8IDAsIFwiMFwiLCAyKVxuICAgICAgKyBwYWQoeiAlIDYwLCBcIjBcIiwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ0RheU9mTW9udGgoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0VVRDRGF0ZSgpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDSG91cjI0KGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldFVUQ0hvdXJzKCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENIb3VyMTIoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0VVRDSG91cnMoKSAlIDEyIHx8IDEyLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDRGF5T2ZZZWFyKGQsIHApIHtcbiAgcmV0dXJuIHBhZCgxICsgdXRjRGF5LmNvdW50KHV0Y1llYXIoZCksIGQpLCBwLCAzKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDTWlsbGlzZWNvbmRzKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldFVUQ01pbGxpc2Vjb25kcygpLCBwLCAzKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDTWljcm9zZWNvbmRzKGQsIHApIHtcbiAgcmV0dXJuIGZvcm1hdFVUQ01pbGxpc2Vjb25kcyhkLCBwKSArIFwiMDAwXCI7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ01vbnRoTnVtYmVyKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldFVUQ01vbnRoKCkgKyAxLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDTWludXRlcyhkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRVVENNaW51dGVzKCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENTZWNvbmRzKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldFVUQ1NlY29uZHMoKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ1dlZWtkYXlOdW1iZXJNb25kYXkoZCkge1xuICB2YXIgZG93ID0gZC5nZXRVVENEYXkoKTtcbiAgcmV0dXJuIGRvdyA9PT0gMCA/IDcgOiBkb3c7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ1dlZWtOdW1iZXJTdW5kYXkoZCwgcCkge1xuICByZXR1cm4gcGFkKHV0Y1N1bmRheS5jb3VudCh1dGNZZWFyKGQpIC0gMSwgZCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENXZWVrTnVtYmVySVNPKGQsIHApIHtcbiAgdmFyIGRheSA9IGQuZ2V0VVRDRGF5KCk7XG4gIGQgPSAoZGF5ID49IDQgfHwgZGF5ID09PSAwKSA/IHV0Y1RodXJzZGF5KGQpIDogdXRjVGh1cnNkYXkuY2VpbChkKTtcbiAgcmV0dXJuIHBhZCh1dGNUaHVyc2RheS5jb3VudCh1dGNZZWFyKGQpLCBkKSArICh1dGNZZWFyKGQpLmdldFVUQ0RheSgpID09PSA0KSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ1dlZWtkYXlOdW1iZXJTdW5kYXkoZCkge1xuICByZXR1cm4gZC5nZXRVVENEYXkoKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDV2Vla051bWJlck1vbmRheShkLCBwKSB7XG4gIHJldHVybiBwYWQodXRjTW9uZGF5LmNvdW50KHV0Y1llYXIoZCkgLSAxLCBkKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ1llYXIoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0VVRDRnVsbFllYXIoKSAlIDEwMCwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ0Z1bGxZZWFyKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldFVUQ0Z1bGxZZWFyKCkgJSAxMDAwMCwgcCwgNCk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ1pvbmUoKSB7XG4gIHJldHVybiBcIiswMDAwXCI7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdExpdGVyYWxQZXJjZW50KCkge1xuICByZXR1cm4gXCIlXCI7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVuaXhUaW1lc3RhbXAoZCkge1xuICByZXR1cm4gK2Q7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVuaXhUaW1lc3RhbXBTZWNvbmRzKGQpIHtcbiAgcmV0dXJuIE1hdGguZmxvb3IoK2QgLyAxMDAwKTtcbn1cbiIsImltcG9ydCBmb3JtYXRMb2NhbGUgZnJvbSBcIi4vbG9jYWxlLmpzXCI7XG5cbnZhciBsb2NhbGU7XG5leHBvcnQgdmFyIHRpbWVGb3JtYXQ7XG5leHBvcnQgdmFyIHRpbWVQYXJzZTtcbmV4cG9ydCB2YXIgdXRjRm9ybWF0O1xuZXhwb3J0IHZhciB1dGNQYXJzZTtcblxuZGVmYXVsdExvY2FsZSh7XG4gIGRhdGVUaW1lOiBcIiV4LCAlWFwiLFxuICBkYXRlOiBcIiUtbS8lLWQvJVlcIixcbiAgdGltZTogXCIlLUk6JU06JVMgJXBcIixcbiAgcGVyaW9kczogW1wiQU1cIiwgXCJQTVwiXSxcbiAgZGF5czogW1wiU3VuZGF5XCIsIFwiTW9uZGF5XCIsIFwiVHVlc2RheVwiLCBcIldlZG5lc2RheVwiLCBcIlRodXJzZGF5XCIsIFwiRnJpZGF5XCIsIFwiU2F0dXJkYXlcIl0sXG4gIHNob3J0RGF5czogW1wiU3VuXCIsIFwiTW9uXCIsIFwiVHVlXCIsIFwiV2VkXCIsIFwiVGh1XCIsIFwiRnJpXCIsIFwiU2F0XCJdLFxuICBtb250aHM6IFtcIkphbnVhcnlcIiwgXCJGZWJydWFyeVwiLCBcIk1hcmNoXCIsIFwiQXByaWxcIiwgXCJNYXlcIiwgXCJKdW5lXCIsIFwiSnVseVwiLCBcIkF1Z3VzdFwiLCBcIlNlcHRlbWJlclwiLCBcIk9jdG9iZXJcIiwgXCJOb3ZlbWJlclwiLCBcIkRlY2VtYmVyXCJdLFxuICBzaG9ydE1vbnRoczogW1wiSmFuXCIsIFwiRmViXCIsIFwiTWFyXCIsIFwiQXByXCIsIFwiTWF5XCIsIFwiSnVuXCIsIFwiSnVsXCIsIFwiQXVnXCIsIFwiU2VwXCIsIFwiT2N0XCIsIFwiTm92XCIsIFwiRGVjXCJdXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGVmYXVsdExvY2FsZShkZWZpbml0aW9uKSB7XG4gIGxvY2FsZSA9IGZvcm1hdExvY2FsZShkZWZpbml0aW9uKTtcbiAgdGltZUZvcm1hdCA9IGxvY2FsZS5mb3JtYXQ7XG4gIHRpbWVQYXJzZSA9IGxvY2FsZS5wYXJzZTtcbiAgdXRjRm9ybWF0ID0gbG9jYWxlLnV0Y0Zvcm1hdDtcbiAgdXRjUGFyc2UgPSBsb2NhbGUudXRjUGFyc2U7XG4gIHJldHVybiBsb2NhbGU7XG59XG4iLCJpbXBvcnQge2Jpc2VjdG9yLCB0aWNrU3RlcH0gZnJvbSBcImQzLWFycmF5XCI7XG5pbXBvcnQge3RpbWVZZWFyLCB0aW1lTW9udGgsIHRpbWVXZWVrLCB0aW1lRGF5LCB0aW1lSG91ciwgdGltZU1pbnV0ZSwgdGltZVNlY29uZCwgdGltZU1pbGxpc2Vjb25kfSBmcm9tIFwiZDMtdGltZVwiO1xuaW1wb3J0IHt0aW1lRm9ybWF0fSBmcm9tIFwiZDMtdGltZS1mb3JtYXRcIjtcbmltcG9ydCB7bWFwfSBmcm9tIFwiLi9hcnJheVwiO1xuaW1wb3J0IGNvbnRpbnVvdXMsIHtjb3B5LCBpZGVudGl0eX0gZnJvbSBcIi4vY29udGludW91c1wiO1xuaW1wb3J0IHtpbml0UmFuZ2V9IGZyb20gXCIuL2luaXRcIjtcbmltcG9ydCBuaWNlIGZyb20gXCIuL25pY2VcIjtcblxudmFyIGR1cmF0aW9uU2Vjb25kID0gMTAwMCxcbiAgICBkdXJhdGlvbk1pbnV0ZSA9IGR1cmF0aW9uU2Vjb25kICogNjAsXG4gICAgZHVyYXRpb25Ib3VyID0gZHVyYXRpb25NaW51dGUgKiA2MCxcbiAgICBkdXJhdGlvbkRheSA9IGR1cmF0aW9uSG91ciAqIDI0LFxuICAgIGR1cmF0aW9uV2VlayA9IGR1cmF0aW9uRGF5ICogNyxcbiAgICBkdXJhdGlvbk1vbnRoID0gZHVyYXRpb25EYXkgKiAzMCxcbiAgICBkdXJhdGlvblllYXIgPSBkdXJhdGlvbkRheSAqIDM2NTtcblxuZnVuY3Rpb24gZGF0ZSh0KSB7XG4gIHJldHVybiBuZXcgRGF0ZSh0KTtcbn1cblxuZnVuY3Rpb24gbnVtYmVyKHQpIHtcbiAgcmV0dXJuIHQgaW5zdGFuY2VvZiBEYXRlID8gK3QgOiArbmV3IERhdGUoK3QpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2FsZW5kYXIoeWVhciwgbW9udGgsIHdlZWssIGRheSwgaG91ciwgbWludXRlLCBzZWNvbmQsIG1pbGxpc2Vjb25kLCBmb3JtYXQpIHtcbiAgdmFyIHNjYWxlID0gY29udGludW91cyhpZGVudGl0eSwgaWRlbnRpdHkpLFxuICAgICAgaW52ZXJ0ID0gc2NhbGUuaW52ZXJ0LFxuICAgICAgZG9tYWluID0gc2NhbGUuZG9tYWluO1xuXG4gIHZhciBmb3JtYXRNaWxsaXNlY29uZCA9IGZvcm1hdChcIi4lTFwiKSxcbiAgICAgIGZvcm1hdFNlY29uZCA9IGZvcm1hdChcIjolU1wiKSxcbiAgICAgIGZvcm1hdE1pbnV0ZSA9IGZvcm1hdChcIiVJOiVNXCIpLFxuICAgICAgZm9ybWF0SG91ciA9IGZvcm1hdChcIiVJICVwXCIpLFxuICAgICAgZm9ybWF0RGF5ID0gZm9ybWF0KFwiJWEgJWRcIiksXG4gICAgICBmb3JtYXRXZWVrID0gZm9ybWF0KFwiJWIgJWRcIiksXG4gICAgICBmb3JtYXRNb250aCA9IGZvcm1hdChcIiVCXCIpLFxuICAgICAgZm9ybWF0WWVhciA9IGZvcm1hdChcIiVZXCIpO1xuXG4gIHZhciB0aWNrSW50ZXJ2YWxzID0gW1xuICAgIFtzZWNvbmQsICAxLCAgICAgIGR1cmF0aW9uU2Vjb25kXSxcbiAgICBbc2Vjb25kLCAgNSwgIDUgKiBkdXJhdGlvblNlY29uZF0sXG4gICAgW3NlY29uZCwgMTUsIDE1ICogZHVyYXRpb25TZWNvbmRdLFxuICAgIFtzZWNvbmQsIDMwLCAzMCAqIGR1cmF0aW9uU2Vjb25kXSxcbiAgICBbbWludXRlLCAgMSwgICAgICBkdXJhdGlvbk1pbnV0ZV0sXG4gICAgW21pbnV0ZSwgIDUsICA1ICogZHVyYXRpb25NaW51dGVdLFxuICAgIFttaW51dGUsIDE1LCAxNSAqIGR1cmF0aW9uTWludXRlXSxcbiAgICBbbWludXRlLCAzMCwgMzAgKiBkdXJhdGlvbk1pbnV0ZV0sXG4gICAgWyAgaG91ciwgIDEsICAgICAgZHVyYXRpb25Ib3VyICBdLFxuICAgIFsgIGhvdXIsICAzLCAgMyAqIGR1cmF0aW9uSG91ciAgXSxcbiAgICBbICBob3VyLCAgNiwgIDYgKiBkdXJhdGlvbkhvdXIgIF0sXG4gICAgWyAgaG91ciwgMTIsIDEyICogZHVyYXRpb25Ib3VyICBdLFxuICAgIFsgICBkYXksICAxLCAgICAgIGR1cmF0aW9uRGF5ICAgXSxcbiAgICBbICAgZGF5LCAgMiwgIDIgKiBkdXJhdGlvbkRheSAgIF0sXG4gICAgWyAgd2VlaywgIDEsICAgICAgZHVyYXRpb25XZWVrICBdLFxuICAgIFsgbW9udGgsICAxLCAgICAgIGR1cmF0aW9uTW9udGggXSxcbiAgICBbIG1vbnRoLCAgMywgIDMgKiBkdXJhdGlvbk1vbnRoIF0sXG4gICAgWyAgeWVhciwgIDEsICAgICAgZHVyYXRpb25ZZWFyICBdXG4gIF07XG5cbiAgZnVuY3Rpb24gdGlja0Zvcm1hdChkYXRlKSB7XG4gICAgcmV0dXJuIChzZWNvbmQoZGF0ZSkgPCBkYXRlID8gZm9ybWF0TWlsbGlzZWNvbmRcbiAgICAgICAgOiBtaW51dGUoZGF0ZSkgPCBkYXRlID8gZm9ybWF0U2Vjb25kXG4gICAgICAgIDogaG91cihkYXRlKSA8IGRhdGUgPyBmb3JtYXRNaW51dGVcbiAgICAgICAgOiBkYXkoZGF0ZSkgPCBkYXRlID8gZm9ybWF0SG91clxuICAgICAgICA6IG1vbnRoKGRhdGUpIDwgZGF0ZSA/ICh3ZWVrKGRhdGUpIDwgZGF0ZSA/IGZvcm1hdERheSA6IGZvcm1hdFdlZWspXG4gICAgICAgIDogeWVhcihkYXRlKSA8IGRhdGUgPyBmb3JtYXRNb250aFxuICAgICAgICA6IGZvcm1hdFllYXIpKGRhdGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gdGlja0ludGVydmFsKGludGVydmFsLCBzdGFydCwgc3RvcCwgc3RlcCkge1xuICAgIGlmIChpbnRlcnZhbCA9PSBudWxsKSBpbnRlcnZhbCA9IDEwO1xuXG4gICAgLy8gSWYgYSBkZXNpcmVkIHRpY2sgY291bnQgaXMgc3BlY2lmaWVkLCBwaWNrIGEgcmVhc29uYWJsZSB0aWNrIGludGVydmFsXG4gICAgLy8gYmFzZWQgb24gdGhlIGV4dGVudCBvZiB0aGUgZG9tYWluIGFuZCBhIHJvdWdoIGVzdGltYXRlIG9mIHRpY2sgc2l6ZS5cbiAgICAvLyBPdGhlcndpc2UsIGFzc3VtZSBpbnRlcnZhbCBpcyBhbHJlYWR5IGEgdGltZSBpbnRlcnZhbCBhbmQgdXNlIGl0LlxuICAgIGlmICh0eXBlb2YgaW50ZXJ2YWwgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgIHZhciB0YXJnZXQgPSBNYXRoLmFicyhzdG9wIC0gc3RhcnQpIC8gaW50ZXJ2YWwsXG4gICAgICAgICAgaSA9IGJpc2VjdG9yKGZ1bmN0aW9uKGkpIHsgcmV0dXJuIGlbMl07IH0pLnJpZ2h0KHRpY2tJbnRlcnZhbHMsIHRhcmdldCk7XG4gICAgICBpZiAoaSA9PT0gdGlja0ludGVydmFscy5sZW5ndGgpIHtcbiAgICAgICAgc3RlcCA9IHRpY2tTdGVwKHN0YXJ0IC8gZHVyYXRpb25ZZWFyLCBzdG9wIC8gZHVyYXRpb25ZZWFyLCBpbnRlcnZhbCk7XG4gICAgICAgIGludGVydmFsID0geWVhcjtcbiAgICAgIH0gZWxzZSBpZiAoaSkge1xuICAgICAgICBpID0gdGlja0ludGVydmFsc1t0YXJnZXQgLyB0aWNrSW50ZXJ2YWxzW2kgLSAxXVsyXSA8IHRpY2tJbnRlcnZhbHNbaV1bMl0gLyB0YXJnZXQgPyBpIC0gMSA6IGldO1xuICAgICAgICBzdGVwID0gaVsxXTtcbiAgICAgICAgaW50ZXJ2YWwgPSBpWzBdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RlcCA9IE1hdGgubWF4KHRpY2tTdGVwKHN0YXJ0LCBzdG9wLCBpbnRlcnZhbCksIDEpO1xuICAgICAgICBpbnRlcnZhbCA9IG1pbGxpc2Vjb25kO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBzdGVwID09IG51bGwgPyBpbnRlcnZhbCA6IGludGVydmFsLmV2ZXJ5KHN0ZXApO1xuICB9XG5cbiAgc2NhbGUuaW52ZXJ0ID0gZnVuY3Rpb24oeSkge1xuICAgIHJldHVybiBuZXcgRGF0ZShpbnZlcnQoeSkpO1xuICB9O1xuXG4gIHNjYWxlLmRvbWFpbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IGRvbWFpbihtYXAuY2FsbChfLCBudW1iZXIpKSA6IGRvbWFpbigpLm1hcChkYXRlKTtcbiAgfTtcblxuICBzY2FsZS50aWNrcyA9IGZ1bmN0aW9uKGludGVydmFsLCBzdGVwKSB7XG4gICAgdmFyIGQgPSBkb21haW4oKSxcbiAgICAgICAgdDAgPSBkWzBdLFxuICAgICAgICB0MSA9IGRbZC5sZW5ndGggLSAxXSxcbiAgICAgICAgciA9IHQxIDwgdDAsXG4gICAgICAgIHQ7XG4gICAgaWYgKHIpIHQgPSB0MCwgdDAgPSB0MSwgdDEgPSB0O1xuICAgIHQgPSB0aWNrSW50ZXJ2YWwoaW50ZXJ2YWwsIHQwLCB0MSwgc3RlcCk7XG4gICAgdCA9IHQgPyB0LnJhbmdlKHQwLCB0MSArIDEpIDogW107IC8vIGluY2x1c2l2ZSBzdG9wXG4gICAgcmV0dXJuIHIgPyB0LnJldmVyc2UoKSA6IHQ7XG4gIH07XG5cbiAgc2NhbGUudGlja0Zvcm1hdCA9IGZ1bmN0aW9uKGNvdW50LCBzcGVjaWZpZXIpIHtcbiAgICByZXR1cm4gc3BlY2lmaWVyID09IG51bGwgPyB0aWNrRm9ybWF0IDogZm9ybWF0KHNwZWNpZmllcik7XG4gIH07XG5cbiAgc2NhbGUubmljZSA9IGZ1bmN0aW9uKGludGVydmFsLCBzdGVwKSB7XG4gICAgdmFyIGQgPSBkb21haW4oKTtcbiAgICByZXR1cm4gKGludGVydmFsID0gdGlja0ludGVydmFsKGludGVydmFsLCBkWzBdLCBkW2QubGVuZ3RoIC0gMV0sIHN0ZXApKVxuICAgICAgICA/IGRvbWFpbihuaWNlKGQsIGludGVydmFsKSlcbiAgICAgICAgOiBzY2FsZTtcbiAgfTtcblxuICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGNvcHkoc2NhbGUsIGNhbGVuZGFyKHllYXIsIG1vbnRoLCB3ZWVrLCBkYXksIGhvdXIsIG1pbnV0ZSwgc2Vjb25kLCBtaWxsaXNlY29uZCwgZm9ybWF0KSk7XG4gIH07XG5cbiAgcmV0dXJuIHNjYWxlO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGluaXRSYW5nZS5hcHBseShjYWxlbmRhcih0aW1lWWVhciwgdGltZU1vbnRoLCB0aW1lV2VlaywgdGltZURheSwgdGltZUhvdXIsIHRpbWVNaW51dGUsIHRpbWVTZWNvbmQsIHRpbWVNaWxsaXNlY29uZCwgdGltZUZvcm1hdCkuZG9tYWluKFtuZXcgRGF0ZSgyMDAwLCAwLCAxKSwgbmV3IERhdGUoMjAwMCwgMCwgMildKSwgYXJndW1lbnRzKTtcbn1cbiIsImltcG9ydCBpbnRlcnZhbCBmcm9tIFwiLi9pbnRlcnZhbC5qc1wiO1xuXG52YXIgdXRjTW9udGggPSBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIGRhdGUuc2V0VVRDRGF0ZSgxKTtcbiAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbn0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgZGF0ZS5zZXRVVENNb250aChkYXRlLmdldFVUQ01vbnRoKCkgKyBzdGVwKTtcbn0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIGVuZC5nZXRVVENNb250aCgpIC0gc3RhcnQuZ2V0VVRDTW9udGgoKSArIChlbmQuZ2V0VVRDRnVsbFllYXIoKSAtIHN0YXJ0LmdldFVUQ0Z1bGxZZWFyKCkpICogMTI7XG59LCBmdW5jdGlvbihkYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldFVUQ01vbnRoKCk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgdXRjTW9udGg7XG5leHBvcnQgdmFyIHV0Y01vbnRocyA9IHV0Y01vbnRoLnJhbmdlO1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsLmpzXCI7XG5pbXBvcnQge2R1cmF0aW9uSG91cn0gZnJvbSBcIi4vZHVyYXRpb24uanNcIjtcblxudmFyIHV0Y0hvdXIgPSBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIGRhdGUuc2V0VVRDTWludXRlcygwLCAwLCAwKTtcbn0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgZGF0ZS5zZXRUaW1lKCtkYXRlICsgc3RlcCAqIGR1cmF0aW9uSG91cik7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiAoZW5kIC0gc3RhcnQpIC8gZHVyYXRpb25Ib3VyO1xufSwgZnVuY3Rpb24oZGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXRVVENIb3VycygpO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IHV0Y0hvdXI7XG5leHBvcnQgdmFyIHV0Y0hvdXJzID0gdXRjSG91ci5yYW5nZTtcbiIsImltcG9ydCBpbnRlcnZhbCBmcm9tIFwiLi9pbnRlcnZhbC5qc1wiO1xuaW1wb3J0IHtkdXJhdGlvbk1pbnV0ZX0gZnJvbSBcIi4vZHVyYXRpb24uanNcIjtcblxudmFyIHV0Y01pbnV0ZSA9IGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgZGF0ZS5zZXRVVENTZWNvbmRzKDAsIDApO1xufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldFRpbWUoK2RhdGUgKyBzdGVwICogZHVyYXRpb25NaW51dGUpO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gKGVuZCAtIHN0YXJ0KSAvIGR1cmF0aW9uTWludXRlO1xufSwgZnVuY3Rpb24oZGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXRVVENNaW51dGVzKCk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgdXRjTWludXRlO1xuZXhwb3J0IHZhciB1dGNNaW51dGVzID0gdXRjTWludXRlLnJhbmdlO1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc3BlY2lmaWVyKSB7XG4gIHZhciBuID0gc3BlY2lmaWVyLmxlbmd0aCAvIDYgfCAwLCBjb2xvcnMgPSBuZXcgQXJyYXkobiksIGkgPSAwO1xuICB3aGlsZSAoaSA8IG4pIGNvbG9yc1tpXSA9IFwiI1wiICsgc3BlY2lmaWVyLnNsaWNlKGkgKiA2LCArK2kgKiA2KTtcbiAgcmV0dXJuIGNvbG9ycztcbn1cbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9ycy5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjb2xvcnMoXCIxZjc3YjRmZjdmMGUyY2EwMmNkNjI3Mjg5NDY3YmQ4YzU2NGJlMzc3YzI3ZjdmN2ZiY2JkMjIxN2JlY2ZcIik7XG4iLCJmdW5jdGlvbiBub25lKCkge31cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VsZWN0b3IpIHtcbiAgcmV0dXJuIHNlbGVjdG9yID09IG51bGwgPyBub25lIDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMucXVlcnlTZWxlY3RvcihzZWxlY3Rvcik7XG4gIH07XG59XG4iLCJmdW5jdGlvbiBlbXB0eSgpIHtcbiAgcmV0dXJuIFtdO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3Rvcikge1xuICByZXR1cm4gc2VsZWN0b3IgPT0gbnVsbCA/IGVtcHR5IDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7XG4gIH07XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih1cGRhdGUpIHtcbiAgcmV0dXJuIG5ldyBBcnJheSh1cGRhdGUubGVuZ3RoKTtcbn1cbiIsImltcG9ydCBzcGFyc2UgZnJvbSBcIi4vc3BhcnNlXCI7XG5pbXBvcnQge1NlbGVjdGlvbn0gZnJvbSBcIi4vaW5kZXhcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKHRoaXMuX2VudGVyIHx8IHRoaXMuX2dyb3Vwcy5tYXAoc3BhcnNlKSwgdGhpcy5fcGFyZW50cyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBFbnRlck5vZGUocGFyZW50LCBkYXR1bSkge1xuICB0aGlzLm93bmVyRG9jdW1lbnQgPSBwYXJlbnQub3duZXJEb2N1bWVudDtcbiAgdGhpcy5uYW1lc3BhY2VVUkkgPSBwYXJlbnQubmFtZXNwYWNlVVJJO1xuICB0aGlzLl9uZXh0ID0gbnVsbDtcbiAgdGhpcy5fcGFyZW50ID0gcGFyZW50O1xuICB0aGlzLl9fZGF0YV9fID0gZGF0dW07XG59XG5cbkVudGVyTm9kZS5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBFbnRlck5vZGUsXG4gIGFwcGVuZENoaWxkOiBmdW5jdGlvbihjaGlsZCkgeyByZXR1cm4gdGhpcy5fcGFyZW50Lmluc2VydEJlZm9yZShjaGlsZCwgdGhpcy5fbmV4dCk7IH0sXG4gIGluc2VydEJlZm9yZTogZnVuY3Rpb24oY2hpbGQsIG5leHQpIHsgcmV0dXJuIHRoaXMuX3BhcmVudC5pbnNlcnRCZWZvcmUoY2hpbGQsIG5leHQpOyB9LFxuICBxdWVyeVNlbGVjdG9yOiBmdW5jdGlvbihzZWxlY3RvcikgeyByZXR1cm4gdGhpcy5fcGFyZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpOyB9LFxuICBxdWVyeVNlbGVjdG9yQWxsOiBmdW5jdGlvbihzZWxlY3RvcikgeyByZXR1cm4gdGhpcy5fcGFyZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpOyB9XG59O1xuIiwiaW1wb3J0IHtTZWxlY3Rpb259IGZyb20gXCIuL2luZGV4XCI7XG5pbXBvcnQge0VudGVyTm9kZX0gZnJvbSBcIi4vZW50ZXJcIjtcbmltcG9ydCBjb25zdGFudCBmcm9tIFwiLi4vY29uc3RhbnRcIjtcblxudmFyIGtleVByZWZpeCA9IFwiJFwiOyAvLyBQcm90ZWN0IGFnYWluc3Qga2V5cyBsaWtlIOKAnF9fcHJvdG9fX+KAnS5cblxuZnVuY3Rpb24gYmluZEluZGV4KHBhcmVudCwgZ3JvdXAsIGVudGVyLCB1cGRhdGUsIGV4aXQsIGRhdGEpIHtcbiAgdmFyIGkgPSAwLFxuICAgICAgbm9kZSxcbiAgICAgIGdyb3VwTGVuZ3RoID0gZ3JvdXAubGVuZ3RoLFxuICAgICAgZGF0YUxlbmd0aCA9IGRhdGEubGVuZ3RoO1xuXG4gIC8vIFB1dCBhbnkgbm9uLW51bGwgbm9kZXMgdGhhdCBmaXQgaW50byB1cGRhdGUuXG4gIC8vIFB1dCBhbnkgbnVsbCBub2RlcyBpbnRvIGVudGVyLlxuICAvLyBQdXQgYW55IHJlbWFpbmluZyBkYXRhIGludG8gZW50ZXIuXG4gIGZvciAoOyBpIDwgZGF0YUxlbmd0aDsgKytpKSB7XG4gICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgbm9kZS5fX2RhdGFfXyA9IGRhdGFbaV07XG4gICAgICB1cGRhdGVbaV0gPSBub2RlO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbnRlcltpXSA9IG5ldyBFbnRlck5vZGUocGFyZW50LCBkYXRhW2ldKTtcbiAgICB9XG4gIH1cblxuICAvLyBQdXQgYW55IG5vbi1udWxsIG5vZGVzIHRoYXQgZG9u4oCZdCBmaXQgaW50byBleGl0LlxuICBmb3IgKDsgaSA8IGdyb3VwTGVuZ3RoOyArK2kpIHtcbiAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICBleGl0W2ldID0gbm9kZTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYmluZEtleShwYXJlbnQsIGdyb3VwLCBlbnRlciwgdXBkYXRlLCBleGl0LCBkYXRhLCBrZXkpIHtcbiAgdmFyIGksXG4gICAgICBub2RlLFxuICAgICAgbm9kZUJ5S2V5VmFsdWUgPSB7fSxcbiAgICAgIGdyb3VwTGVuZ3RoID0gZ3JvdXAubGVuZ3RoLFxuICAgICAgZGF0YUxlbmd0aCA9IGRhdGEubGVuZ3RoLFxuICAgICAga2V5VmFsdWVzID0gbmV3IEFycmF5KGdyb3VwTGVuZ3RoKSxcbiAgICAgIGtleVZhbHVlO1xuXG4gIC8vIENvbXB1dGUgdGhlIGtleSBmb3IgZWFjaCBub2RlLlxuICAvLyBJZiBtdWx0aXBsZSBub2RlcyBoYXZlIHRoZSBzYW1lIGtleSwgdGhlIGR1cGxpY2F0ZXMgYXJlIGFkZGVkIHRvIGV4aXQuXG4gIGZvciAoaSA9IDA7IGkgPCBncm91cExlbmd0aDsgKytpKSB7XG4gICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAga2V5VmFsdWVzW2ldID0ga2V5VmFsdWUgPSBrZXlQcmVmaXggKyBrZXkuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCk7XG4gICAgICBpZiAoa2V5VmFsdWUgaW4gbm9kZUJ5S2V5VmFsdWUpIHtcbiAgICAgICAgZXhpdFtpXSA9IG5vZGU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBub2RlQnlLZXlWYWx1ZVtrZXlWYWx1ZV0gPSBub2RlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIENvbXB1dGUgdGhlIGtleSBmb3IgZWFjaCBkYXR1bS5cbiAgLy8gSWYgdGhlcmUgYSBub2RlIGFzc29jaWF0ZWQgd2l0aCB0aGlzIGtleSwgam9pbiBhbmQgYWRkIGl0IHRvIHVwZGF0ZS5cbiAgLy8gSWYgdGhlcmUgaXMgbm90IChvciB0aGUga2V5IGlzIGEgZHVwbGljYXRlKSwgYWRkIGl0IHRvIGVudGVyLlxuICBmb3IgKGkgPSAwOyBpIDwgZGF0YUxlbmd0aDsgKytpKSB7XG4gICAga2V5VmFsdWUgPSBrZXlQcmVmaXggKyBrZXkuY2FsbChwYXJlbnQsIGRhdGFbaV0sIGksIGRhdGEpO1xuICAgIGlmIChub2RlID0gbm9kZUJ5S2V5VmFsdWVba2V5VmFsdWVdKSB7XG4gICAgICB1cGRhdGVbaV0gPSBub2RlO1xuICAgICAgbm9kZS5fX2RhdGFfXyA9IGRhdGFbaV07XG4gICAgICBub2RlQnlLZXlWYWx1ZVtrZXlWYWx1ZV0gPSBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbnRlcltpXSA9IG5ldyBFbnRlck5vZGUocGFyZW50LCBkYXRhW2ldKTtcbiAgICB9XG4gIH1cblxuICAvLyBBZGQgYW55IHJlbWFpbmluZyBub2RlcyB0aGF0IHdlcmUgbm90IGJvdW5kIHRvIGRhdGEgdG8gZXhpdC5cbiAgZm9yIChpID0gMDsgaSA8IGdyb3VwTGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoKG5vZGUgPSBncm91cFtpXSkgJiYgKG5vZGVCeUtleVZhbHVlW2tleVZhbHVlc1tpXV0gPT09IG5vZGUpKSB7XG4gICAgICBleGl0W2ldID0gbm9kZTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICBpZiAoIXZhbHVlKSB7XG4gICAgZGF0YSA9IG5ldyBBcnJheSh0aGlzLnNpemUoKSksIGogPSAtMTtcbiAgICB0aGlzLmVhY2goZnVuY3Rpb24oZCkgeyBkYXRhWysral0gPSBkOyB9KTtcbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuXG4gIHZhciBiaW5kID0ga2V5ID8gYmluZEtleSA6IGJpbmRJbmRleCxcbiAgICAgIHBhcmVudHMgPSB0aGlzLl9wYXJlbnRzLFxuICAgICAgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzO1xuXG4gIGlmICh0eXBlb2YgdmFsdWUgIT09IFwiZnVuY3Rpb25cIikgdmFsdWUgPSBjb25zdGFudCh2YWx1ZSk7XG5cbiAgZm9yICh2YXIgbSA9IGdyb3Vwcy5sZW5ndGgsIHVwZGF0ZSA9IG5ldyBBcnJheShtKSwgZW50ZXIgPSBuZXcgQXJyYXkobSksIGV4aXQgPSBuZXcgQXJyYXkobSksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgdmFyIHBhcmVudCA9IHBhcmVudHNbal0sXG4gICAgICAgIGdyb3VwID0gZ3JvdXBzW2pdLFxuICAgICAgICBncm91cExlbmd0aCA9IGdyb3VwLmxlbmd0aCxcbiAgICAgICAgZGF0YSA9IHZhbHVlLmNhbGwocGFyZW50LCBwYXJlbnQgJiYgcGFyZW50Ll9fZGF0YV9fLCBqLCBwYXJlbnRzKSxcbiAgICAgICAgZGF0YUxlbmd0aCA9IGRhdGEubGVuZ3RoLFxuICAgICAgICBlbnRlckdyb3VwID0gZW50ZXJbal0gPSBuZXcgQXJyYXkoZGF0YUxlbmd0aCksXG4gICAgICAgIHVwZGF0ZUdyb3VwID0gdXBkYXRlW2pdID0gbmV3IEFycmF5KGRhdGFMZW5ndGgpLFxuICAgICAgICBleGl0R3JvdXAgPSBleGl0W2pdID0gbmV3IEFycmF5KGdyb3VwTGVuZ3RoKTtcblxuICAgIGJpbmQocGFyZW50LCBncm91cCwgZW50ZXJHcm91cCwgdXBkYXRlR3JvdXAsIGV4aXRHcm91cCwgZGF0YSwga2V5KTtcblxuICAgIC8vIE5vdyBjb25uZWN0IHRoZSBlbnRlciBub2RlcyB0byB0aGVpciBmb2xsb3dpbmcgdXBkYXRlIG5vZGUsIHN1Y2ggdGhhdFxuICAgIC8vIGFwcGVuZENoaWxkIGNhbiBpbnNlcnQgdGhlIG1hdGVyaWFsaXplZCBlbnRlciBub2RlIGJlZm9yZSB0aGlzIG5vZGUsXG4gICAgLy8gcmF0aGVyIHRoYW4gYXQgdGhlIGVuZCBvZiB0aGUgcGFyZW50IG5vZGUuXG4gICAgZm9yICh2YXIgaTAgPSAwLCBpMSA9IDAsIHByZXZpb3VzLCBuZXh0OyBpMCA8IGRhdGFMZW5ndGg7ICsraTApIHtcbiAgICAgIGlmIChwcmV2aW91cyA9IGVudGVyR3JvdXBbaTBdKSB7XG4gICAgICAgIGlmIChpMCA+PSBpMSkgaTEgPSBpMCArIDE7XG4gICAgICAgIHdoaWxlICghKG5leHQgPSB1cGRhdGVHcm91cFtpMV0pICYmICsraTEgPCBkYXRhTGVuZ3RoKTtcbiAgICAgICAgcHJldmlvdXMuX25leHQgPSBuZXh0IHx8IG51bGw7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdXBkYXRlID0gbmV3IFNlbGVjdGlvbih1cGRhdGUsIHBhcmVudHMpO1xuICB1cGRhdGUuX2VudGVyID0gZW50ZXI7XG4gIHVwZGF0ZS5fZXhpdCA9IGV4aXQ7XG4gIHJldHVybiB1cGRhdGU7XG59XG4iLCJpbXBvcnQge1NlbGVjdGlvbn0gZnJvbSBcIi4vaW5kZXhcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY29tcGFyZSkge1xuICBpZiAoIWNvbXBhcmUpIGNvbXBhcmUgPSBhc2NlbmRpbmc7XG5cbiAgZnVuY3Rpb24gY29tcGFyZU5vZGUoYSwgYikge1xuICAgIHJldHVybiBhICYmIGIgPyBjb21wYXJlKGEuX19kYXRhX18sIGIuX19kYXRhX18pIDogIWEgLSAhYjtcbiAgfVxuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIHNvcnRncm91cHMgPSBuZXcgQXJyYXkobSksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIHNvcnRncm91cCA9IHNvcnRncm91cHNbal0gPSBuZXcgQXJyYXkobiksIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgIHNvcnRncm91cFtpXSA9IG5vZGU7XG4gICAgICB9XG4gICAgfVxuICAgIHNvcnRncm91cC5zb3J0KGNvbXBhcmVOb2RlKTtcbiAgfVxuXG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKHNvcnRncm91cHMsIHRoaXMuX3BhcmVudHMpLm9yZGVyKCk7XG59XG5cbmZ1bmN0aW9uIGFzY2VuZGluZyhhLCBiKSB7XG4gIHJldHVybiBhIDwgYiA/IC0xIDogYSA+IGIgPyAxIDogYSA+PSBiID8gMCA6IE5hTjtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgY2FsbGJhY2sgPSBhcmd1bWVudHNbMF07XG4gIGFyZ3VtZW50c1swXSA9IHRoaXM7XG4gIGNhbGxiYWNrLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gIHJldHVybiB0aGlzO1xufVxuIiwiZXhwb3J0IHZhciB4aHRtbCA9IFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIHN2ZzogXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLFxuICB4aHRtbDogeGh0bWwsXG4gIHhsaW5rOiBcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIixcbiAgeG1sOiBcImh0dHA6Ly93d3cudzMub3JnL1hNTC8xOTk4L25hbWVzcGFjZVwiLFxuICB4bWxuczogXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3htbG5zL1wiXG59O1xuIiwiaW1wb3J0IG5hbWVzcGFjZXMgZnJvbSBcIi4vbmFtZXNwYWNlc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lKSB7XG4gIHZhciBwcmVmaXggPSBuYW1lICs9IFwiXCIsIGkgPSBwcmVmaXguaW5kZXhPZihcIjpcIik7XG4gIGlmIChpID49IDAgJiYgKHByZWZpeCA9IG5hbWUuc2xpY2UoMCwgaSkpICE9PSBcInhtbG5zXCIpIG5hbWUgPSBuYW1lLnNsaWNlKGkgKyAxKTtcbiAgcmV0dXJuIG5hbWVzcGFjZXMuaGFzT3duUHJvcGVydHkocHJlZml4KSA/IHtzcGFjZTogbmFtZXNwYWNlc1twcmVmaXhdLCBsb2NhbDogbmFtZX0gOiBuYW1lO1xufVxuIiwiaW1wb3J0IG5hbWVzcGFjZSBmcm9tIFwiLi4vbmFtZXNwYWNlXCI7XG5cbmZ1bmN0aW9uIGF0dHJSZW1vdmUobmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJSZW1vdmVOUyhmdWxsbmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5yZW1vdmVBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyQ29uc3RhbnQobmFtZSwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuc2V0QXR0cmlidXRlKG5hbWUsIHZhbHVlKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckNvbnN0YW50TlMoZnVsbG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCwgdmFsdWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyRnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAodiA9PSBudWxsKSB0aGlzLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgICBlbHNlIHRoaXMuc2V0QXR0cmlidXRlKG5hbWUsIHYpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyRnVuY3Rpb25OUyhmdWxsbmFtZSwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAodiA9PSBudWxsKSB0aGlzLnJlbW92ZUF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCk7XG4gICAgZWxzZSB0aGlzLnNldEF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCwgdik7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHZhciBmdWxsbmFtZSA9IG5hbWVzcGFjZShuYW1lKTtcblxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICB2YXIgbm9kZSA9IHRoaXMubm9kZSgpO1xuICAgIHJldHVybiBmdWxsbmFtZS5sb2NhbFxuICAgICAgICA/IG5vZGUuZ2V0QXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKVxuICAgICAgICA6IG5vZGUuZ2V0QXR0cmlidXRlKGZ1bGxuYW1lKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzLmVhY2goKHZhbHVlID09IG51bGxcbiAgICAgID8gKGZ1bGxuYW1lLmxvY2FsID8gYXR0clJlbW92ZU5TIDogYXR0clJlbW92ZSkgOiAodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgID8gKGZ1bGxuYW1lLmxvY2FsID8gYXR0ckZ1bmN0aW9uTlMgOiBhdHRyRnVuY3Rpb24pXG4gICAgICA6IChmdWxsbmFtZS5sb2NhbCA/IGF0dHJDb25zdGFudE5TIDogYXR0ckNvbnN0YW50KSkpKGZ1bGxuYW1lLCB2YWx1ZSkpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obm9kZSkge1xuICByZXR1cm4gKG5vZGUub3duZXJEb2N1bWVudCAmJiBub2RlLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcpIC8vIG5vZGUgaXMgYSBOb2RlXG4gICAgICB8fCAobm9kZS5kb2N1bWVudCAmJiBub2RlKSAvLyBub2RlIGlzIGEgV2luZG93XG4gICAgICB8fCBub2RlLmRlZmF1bHRWaWV3OyAvLyBub2RlIGlzIGEgRG9jdW1lbnRcbn1cbiIsImltcG9ydCBkZWZhdWx0VmlldyBmcm9tIFwiLi4vd2luZG93XCI7XG5cbmZ1bmN0aW9uIHN0eWxlUmVtb3ZlKG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuc3R5bGUucmVtb3ZlUHJvcGVydHkobmFtZSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHN0eWxlQ29uc3RhbnQobmFtZSwgdmFsdWUsIHByaW9yaXR5KSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnN0eWxlLnNldFByb3BlcnR5KG5hbWUsIHZhbHVlLCBwcmlvcml0eSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHN0eWxlRnVuY3Rpb24obmFtZSwgdmFsdWUsIHByaW9yaXR5KSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdiA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKHYgPT0gbnVsbCkgdGhpcy5zdHlsZS5yZW1vdmVQcm9wZXJ0eShuYW1lKTtcbiAgICBlbHNlIHRoaXMuc3R5bGUuc2V0UHJvcGVydHkobmFtZSwgdiwgcHJpb3JpdHkpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAxXG4gICAgICA/IHRoaXMuZWFjaCgodmFsdWUgPT0gbnVsbFxuICAgICAgICAgICAgPyBzdHlsZVJlbW92ZSA6IHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgICA/IHN0eWxlRnVuY3Rpb25cbiAgICAgICAgICAgIDogc3R5bGVDb25zdGFudCkobmFtZSwgdmFsdWUsIHByaW9yaXR5ID09IG51bGwgPyBcIlwiIDogcHJpb3JpdHkpKVxuICAgICAgOiBzdHlsZVZhbHVlKHRoaXMubm9kZSgpLCBuYW1lKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN0eWxlVmFsdWUobm9kZSwgbmFtZSkge1xuICByZXR1cm4gbm9kZS5zdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKG5hbWUpXG4gICAgICB8fCBkZWZhdWx0Vmlldyhub2RlKS5nZXRDb21wdXRlZFN0eWxlKG5vZGUsIG51bGwpLmdldFByb3BlcnR5VmFsdWUobmFtZSk7XG59XG4iLCJmdW5jdGlvbiBwcm9wZXJ0eVJlbW92ZShuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICBkZWxldGUgdGhpc1tuYW1lXTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gcHJvcGVydHlDb25zdGFudChuYW1lLCB2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpc1tuYW1lXSA9IHZhbHVlO1xuICB9O1xufVxuXG5mdW5jdGlvbiBwcm9wZXJ0eUZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdiA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKHYgPT0gbnVsbCkgZGVsZXRlIHRoaXNbbmFtZV07XG4gICAgZWxzZSB0aGlzW25hbWVdID0gdjtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAxXG4gICAgICA/IHRoaXMuZWFjaCgodmFsdWUgPT0gbnVsbFxuICAgICAgICAgID8gcHJvcGVydHlSZW1vdmUgOiB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICAgID8gcHJvcGVydHlGdW5jdGlvblxuICAgICAgICAgIDogcHJvcGVydHlDb25zdGFudCkobmFtZSwgdmFsdWUpKVxuICAgICAgOiB0aGlzLm5vZGUoKVtuYW1lXTtcbn1cbiIsImZ1bmN0aW9uIGNsYXNzQXJyYXkoc3RyaW5nKSB7XG4gIHJldHVybiBzdHJpbmcudHJpbSgpLnNwbGl0KC9efFxccysvKTtcbn1cblxuZnVuY3Rpb24gY2xhc3NMaXN0KG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUuY2xhc3NMaXN0IHx8IG5ldyBDbGFzc0xpc3Qobm9kZSk7XG59XG5cbmZ1bmN0aW9uIENsYXNzTGlzdChub2RlKSB7XG4gIHRoaXMuX25vZGUgPSBub2RlO1xuICB0aGlzLl9uYW1lcyA9IGNsYXNzQXJyYXkobm9kZS5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKSB8fCBcIlwiKTtcbn1cblxuQ2xhc3NMaXN0LnByb3RvdHlwZSA9IHtcbiAgYWRkOiBmdW5jdGlvbihuYW1lKSB7XG4gICAgdmFyIGkgPSB0aGlzLl9uYW1lcy5pbmRleE9mKG5hbWUpO1xuICAgIGlmIChpIDwgMCkge1xuICAgICAgdGhpcy5fbmFtZXMucHVzaChuYW1lKTtcbiAgICAgIHRoaXMuX25vZGUuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgdGhpcy5fbmFtZXMuam9pbihcIiBcIikpO1xuICAgIH1cbiAgfSxcbiAgcmVtb3ZlOiBmdW5jdGlvbihuYW1lKSB7XG4gICAgdmFyIGkgPSB0aGlzLl9uYW1lcy5pbmRleE9mKG5hbWUpO1xuICAgIGlmIChpID49IDApIHtcbiAgICAgIHRoaXMuX25hbWVzLnNwbGljZShpLCAxKTtcbiAgICAgIHRoaXMuX25vZGUuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgdGhpcy5fbmFtZXMuam9pbihcIiBcIikpO1xuICAgIH1cbiAgfSxcbiAgY29udGFpbnM6IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5fbmFtZXMuaW5kZXhPZihuYW1lKSA+PSAwO1xuICB9XG59O1xuXG5mdW5jdGlvbiBjbGFzc2VkQWRkKG5vZGUsIG5hbWVzKSB7XG4gIHZhciBsaXN0ID0gY2xhc3NMaXN0KG5vZGUpLCBpID0gLTEsIG4gPSBuYW1lcy5sZW5ndGg7XG4gIHdoaWxlICgrK2kgPCBuKSBsaXN0LmFkZChuYW1lc1tpXSk7XG59XG5cbmZ1bmN0aW9uIGNsYXNzZWRSZW1vdmUobm9kZSwgbmFtZXMpIHtcbiAgdmFyIGxpc3QgPSBjbGFzc0xpc3Qobm9kZSksIGkgPSAtMSwgbiA9IG5hbWVzLmxlbmd0aDtcbiAgd2hpbGUgKCsraSA8IG4pIGxpc3QucmVtb3ZlKG5hbWVzW2ldKTtcbn1cblxuZnVuY3Rpb24gY2xhc3NlZFRydWUobmFtZXMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIGNsYXNzZWRBZGQodGhpcywgbmFtZXMpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBjbGFzc2VkRmFsc2UobmFtZXMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIGNsYXNzZWRSZW1vdmUodGhpcywgbmFtZXMpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBjbGFzc2VkRnVuY3Rpb24obmFtZXMsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAodmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKSA/IGNsYXNzZWRBZGQgOiBjbGFzc2VkUmVtb3ZlKSh0aGlzLCBuYW1lcyk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHZhciBuYW1lcyA9IGNsYXNzQXJyYXkobmFtZSArIFwiXCIpO1xuXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgIHZhciBsaXN0ID0gY2xhc3NMaXN0KHRoaXMubm9kZSgpKSwgaSA9IC0xLCBuID0gbmFtZXMubGVuZ3RoO1xuICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoIWxpc3QuY29udGFpbnMobmFtZXNbaV0pKSByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICByZXR1cm4gdGhpcy5lYWNoKCh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgPyBjbGFzc2VkRnVuY3Rpb24gOiB2YWx1ZVxuICAgICAgPyBjbGFzc2VkVHJ1ZVxuICAgICAgOiBjbGFzc2VkRmFsc2UpKG5hbWVzLCB2YWx1ZSkpO1xufVxuIiwiZnVuY3Rpb24gdGV4dFJlbW92ZSgpIHtcbiAgdGhpcy50ZXh0Q29udGVudCA9IFwiXCI7XG59XG5cbmZ1bmN0aW9uIHRleHRDb25zdGFudCh2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy50ZXh0Q29udGVudCA9IHZhbHVlO1xuICB9O1xufVxuXG5mdW5jdGlvbiB0ZXh0RnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB0aGlzLnRleHRDb250ZW50ID0gdiA9PSBudWxsID8gXCJcIiA6IHY7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXG4gICAgICA/IHRoaXMuZWFjaCh2YWx1ZSA9PSBudWxsXG4gICAgICAgICAgPyB0ZXh0UmVtb3ZlIDogKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgPyB0ZXh0RnVuY3Rpb25cbiAgICAgICAgICA6IHRleHRDb25zdGFudCkodmFsdWUpKVxuICAgICAgOiB0aGlzLm5vZGUoKS50ZXh0Q29udGVudDtcbn1cbiIsImZ1bmN0aW9uIGh0bWxSZW1vdmUoKSB7XG4gIHRoaXMuaW5uZXJIVE1MID0gXCJcIjtcbn1cblxuZnVuY3Rpb24gaHRtbENvbnN0YW50KHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmlubmVySFRNTCA9IHZhbHVlO1xuICB9O1xufVxuXG5mdW5jdGlvbiBodG1sRnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB0aGlzLmlubmVySFRNTCA9IHYgPT0gbnVsbCA/IFwiXCIgOiB2O1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgPyB0aGlzLmVhY2godmFsdWUgPT0gbnVsbFxuICAgICAgICAgID8gaHRtbFJlbW92ZSA6ICh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICAgID8gaHRtbEZ1bmN0aW9uXG4gICAgICAgICAgOiBodG1sQ29uc3RhbnQpKHZhbHVlKSlcbiAgICAgIDogdGhpcy5ub2RlKCkuaW5uZXJIVE1MO1xufVxuIiwiZnVuY3Rpb24gcmFpc2UoKSB7XG4gIGlmICh0aGlzLm5leHRTaWJsaW5nKSB0aGlzLnBhcmVudE5vZGUuYXBwZW5kQ2hpbGQodGhpcyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5lYWNoKHJhaXNlKTtcbn1cbiIsImZ1bmN0aW9uIGxvd2VyKCkge1xuICBpZiAodGhpcy5wcmV2aW91c1NpYmxpbmcpIHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodGhpcywgdGhpcy5wYXJlbnROb2RlLmZpcnN0Q2hpbGQpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuZWFjaChsb3dlcik7XG59XG4iLCJpbXBvcnQgbmFtZXNwYWNlIGZyb20gXCIuL25hbWVzcGFjZVwiO1xuaW1wb3J0IHt4aHRtbH0gZnJvbSBcIi4vbmFtZXNwYWNlc1wiO1xuXG5mdW5jdGlvbiBjcmVhdG9ySW5oZXJpdChuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgZG9jdW1lbnQgPSB0aGlzLm93bmVyRG9jdW1lbnQsXG4gICAgICAgIHVyaSA9IHRoaXMubmFtZXNwYWNlVVJJO1xuICAgIHJldHVybiB1cmkgPT09IHhodG1sICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5uYW1lc3BhY2VVUkkgPT09IHhodG1sXG4gICAgICAgID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChuYW1lKVxuICAgICAgICA6IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyh1cmksIG5hbWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBjcmVhdG9yRml4ZWQoZnVsbG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLm93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUpIHtcbiAgdmFyIGZ1bGxuYW1lID0gbmFtZXNwYWNlKG5hbWUpO1xuICByZXR1cm4gKGZ1bGxuYW1lLmxvY2FsXG4gICAgICA/IGNyZWF0b3JGaXhlZFxuICAgICAgOiBjcmVhdG9ySW5oZXJpdCkoZnVsbG5hbWUpO1xufVxuIiwiaW1wb3J0IGNyZWF0b3IgZnJvbSBcIi4uL2NyZWF0b3JcIjtcbmltcG9ydCBzZWxlY3RvciBmcm9tIFwiLi4vc2VsZWN0b3JcIjtcblxuZnVuY3Rpb24gY29uc3RhbnROdWxsKCkge1xuICByZXR1cm4gbnVsbDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgYmVmb3JlKSB7XG4gIHZhciBjcmVhdGUgPSB0eXBlb2YgbmFtZSA9PT0gXCJmdW5jdGlvblwiID8gbmFtZSA6IGNyZWF0b3IobmFtZSksXG4gICAgICBzZWxlY3QgPSBiZWZvcmUgPT0gbnVsbCA/IGNvbnN0YW50TnVsbCA6IHR5cGVvZiBiZWZvcmUgPT09IFwiZnVuY3Rpb25cIiA/IGJlZm9yZSA6IHNlbGVjdG9yKGJlZm9yZSk7XG4gIHJldHVybiB0aGlzLnNlbGVjdChmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5pbnNlcnRCZWZvcmUoY3JlYXRlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksIHNlbGVjdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IG51bGwpO1xuICB9KTtcbn1cbiIsImZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgdmFyIHBhcmVudCA9IHRoaXMucGFyZW50Tm9kZTtcbiAgaWYgKHBhcmVudCkgcGFyZW50LnJlbW92ZUNoaWxkKHRoaXMpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuZWFjaChyZW1vdmUpO1xufVxuIiwiZnVuY3Rpb24gc2VsZWN0aW9uX2Nsb25lU2hhbGxvdygpIHtcbiAgdmFyIGNsb25lID0gdGhpcy5jbG9uZU5vZGUoZmFsc2UpLCBwYXJlbnQgPSB0aGlzLnBhcmVudE5vZGU7XG4gIHJldHVybiBwYXJlbnQgPyBwYXJlbnQuaW5zZXJ0QmVmb3JlKGNsb25lLCB0aGlzLm5leHRTaWJsaW5nKSA6IGNsb25lO1xufVxuXG5mdW5jdGlvbiBzZWxlY3Rpb25fY2xvbmVEZWVwKCkge1xuICB2YXIgY2xvbmUgPSB0aGlzLmNsb25lTm9kZSh0cnVlKSwgcGFyZW50ID0gdGhpcy5wYXJlbnROb2RlO1xuICByZXR1cm4gcGFyZW50ID8gcGFyZW50Lmluc2VydEJlZm9yZShjbG9uZSwgdGhpcy5uZXh0U2libGluZykgOiBjbG9uZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oZGVlcCkge1xuICByZXR1cm4gdGhpcy5zZWxlY3QoZGVlcCA/IHNlbGVjdGlvbl9jbG9uZURlZXAgOiBzZWxlY3Rpb25fY2xvbmVTaGFsbG93KTtcbn1cbiIsInZhciBmaWx0ZXJFdmVudHMgPSB7fTtcblxuZXhwb3J0IHZhciBldmVudCA9IG51bGw7XG5cbmlmICh0eXBlb2YgZG9jdW1lbnQgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gIGlmICghKFwib25tb3VzZWVudGVyXCIgaW4gZWxlbWVudCkpIHtcbiAgICBmaWx0ZXJFdmVudHMgPSB7bW91c2VlbnRlcjogXCJtb3VzZW92ZXJcIiwgbW91c2VsZWF2ZTogXCJtb3VzZW91dFwifTtcbiAgfVxufVxuXG5mdW5jdGlvbiBmaWx0ZXJDb250ZXh0TGlzdGVuZXIobGlzdGVuZXIsIGluZGV4LCBncm91cCkge1xuICBsaXN0ZW5lciA9IGNvbnRleHRMaXN0ZW5lcihsaXN0ZW5lciwgaW5kZXgsIGdyb3VwKTtcbiAgcmV0dXJuIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgdmFyIHJlbGF0ZWQgPSBldmVudC5yZWxhdGVkVGFyZ2V0O1xuICAgIGlmICghcmVsYXRlZCB8fCAocmVsYXRlZCAhPT0gdGhpcyAmJiAhKHJlbGF0ZWQuY29tcGFyZURvY3VtZW50UG9zaXRpb24odGhpcykgJiA4KSkpIHtcbiAgICAgIGxpc3RlbmVyLmNhbGwodGhpcywgZXZlbnQpO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gY29udGV4dExpc3RlbmVyKGxpc3RlbmVyLCBpbmRleCwgZ3JvdXApIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGV2ZW50MSkge1xuICAgIHZhciBldmVudDAgPSBldmVudDsgLy8gRXZlbnRzIGNhbiBiZSByZWVudHJhbnQgKGUuZy4sIGZvY3VzKS5cbiAgICBldmVudCA9IGV2ZW50MTtcbiAgICB0cnkge1xuICAgICAgbGlzdGVuZXIuY2FsbCh0aGlzLCB0aGlzLl9fZGF0YV9fLCBpbmRleCwgZ3JvdXApO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBldmVudCA9IGV2ZW50MDtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIHBhcnNlVHlwZW5hbWVzKHR5cGVuYW1lcykge1xuICByZXR1cm4gdHlwZW5hbWVzLnRyaW0oKS5zcGxpdCgvXnxcXHMrLykubWFwKGZ1bmN0aW9uKHQpIHtcbiAgICB2YXIgbmFtZSA9IFwiXCIsIGkgPSB0LmluZGV4T2YoXCIuXCIpO1xuICAgIGlmIChpID49IDApIG5hbWUgPSB0LnNsaWNlKGkgKyAxKSwgdCA9IHQuc2xpY2UoMCwgaSk7XG4gICAgcmV0dXJuIHt0eXBlOiB0LCBuYW1lOiBuYW1lfTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIG9uUmVtb3ZlKHR5cGVuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgb24gPSB0aGlzLl9fb247XG4gICAgaWYgKCFvbikgcmV0dXJuO1xuICAgIGZvciAodmFyIGogPSAwLCBpID0gLTEsIG0gPSBvbi5sZW5ndGgsIG87IGogPCBtOyArK2opIHtcbiAgICAgIGlmIChvID0gb25bal0sICghdHlwZW5hbWUudHlwZSB8fCBvLnR5cGUgPT09IHR5cGVuYW1lLnR5cGUpICYmIG8ubmFtZSA9PT0gdHlwZW5hbWUubmFtZSkge1xuICAgICAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoby50eXBlLCBvLmxpc3RlbmVyLCBvLmNhcHR1cmUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb25bKytpXSA9IG87XG4gICAgICB9XG4gICAgfVxuICAgIGlmICgrK2kpIG9uLmxlbmd0aCA9IGk7XG4gICAgZWxzZSBkZWxldGUgdGhpcy5fX29uO1xuICB9O1xufVxuXG5mdW5jdGlvbiBvbkFkZCh0eXBlbmFtZSwgdmFsdWUsIGNhcHR1cmUpIHtcbiAgdmFyIHdyYXAgPSBmaWx0ZXJFdmVudHMuaGFzT3duUHJvcGVydHkodHlwZW5hbWUudHlwZSkgPyBmaWx0ZXJDb250ZXh0TGlzdGVuZXIgOiBjb250ZXh0TGlzdGVuZXI7XG4gIHJldHVybiBmdW5jdGlvbihkLCBpLCBncm91cCkge1xuICAgIHZhciBvbiA9IHRoaXMuX19vbiwgbywgbGlzdGVuZXIgPSB3cmFwKHZhbHVlLCBpLCBncm91cCk7XG4gICAgaWYgKG9uKSBmb3IgKHZhciBqID0gMCwgbSA9IG9uLmxlbmd0aDsgaiA8IG07ICsraikge1xuICAgICAgaWYgKChvID0gb25bal0pLnR5cGUgPT09IHR5cGVuYW1lLnR5cGUgJiYgby5uYW1lID09PSB0eXBlbmFtZS5uYW1lKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihvLnR5cGUsIG8ubGlzdGVuZXIsIG8uY2FwdHVyZSk7XG4gICAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcihvLnR5cGUsIG8ubGlzdGVuZXIgPSBsaXN0ZW5lciwgby5jYXB0dXJlID0gY2FwdHVyZSk7XG4gICAgICAgIG8udmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIodHlwZW5hbWUudHlwZSwgbGlzdGVuZXIsIGNhcHR1cmUpO1xuICAgIG8gPSB7dHlwZTogdHlwZW5hbWUudHlwZSwgbmFtZTogdHlwZW5hbWUubmFtZSwgdmFsdWU6IHZhbHVlLCBsaXN0ZW5lcjogbGlzdGVuZXIsIGNhcHR1cmU6IGNhcHR1cmV9O1xuICAgIGlmICghb24pIHRoaXMuX19vbiA9IFtvXTtcbiAgICBlbHNlIG9uLnB1c2gobyk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHR5cGVuYW1lLCB2YWx1ZSwgY2FwdHVyZSkge1xuICB2YXIgdHlwZW5hbWVzID0gcGFyc2VUeXBlbmFtZXModHlwZW5hbWUgKyBcIlwiKSwgaSwgbiA9IHR5cGVuYW1lcy5sZW5ndGgsIHQ7XG5cbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgdmFyIG9uID0gdGhpcy5ub2RlKCkuX19vbjtcbiAgICBpZiAob24pIGZvciAodmFyIGogPSAwLCBtID0gb24ubGVuZ3RoLCBvOyBqIDwgbTsgKytqKSB7XG4gICAgICBmb3IgKGkgPSAwLCBvID0gb25bal07IGkgPCBuOyArK2kpIHtcbiAgICAgICAgaWYgKCh0ID0gdHlwZW5hbWVzW2ldKS50eXBlID09PSBvLnR5cGUgJiYgdC5uYW1lID09PSBvLm5hbWUpIHtcbiAgICAgICAgICByZXR1cm4gby52YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm47XG4gIH1cblxuICBvbiA9IHZhbHVlID8gb25BZGQgOiBvblJlbW92ZTtcbiAgaWYgKGNhcHR1cmUgPT0gbnVsbCkgY2FwdHVyZSA9IGZhbHNlO1xuICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB0aGlzLmVhY2gob24odHlwZW5hbWVzW2ldLCB2YWx1ZSwgY2FwdHVyZSkpO1xuICByZXR1cm4gdGhpcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGN1c3RvbUV2ZW50KGV2ZW50MSwgbGlzdGVuZXIsIHRoYXQsIGFyZ3MpIHtcbiAgdmFyIGV2ZW50MCA9IGV2ZW50O1xuICBldmVudDEuc291cmNlRXZlbnQgPSBldmVudDtcbiAgZXZlbnQgPSBldmVudDE7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGxpc3RlbmVyLmFwcGx5KHRoYXQsIGFyZ3MpO1xuICB9IGZpbmFsbHkge1xuICAgIGV2ZW50ID0gZXZlbnQwO1xuICB9XG59XG4iLCJpbXBvcnQgZGVmYXVsdFZpZXcgZnJvbSBcIi4uL3dpbmRvd1wiO1xuXG5mdW5jdGlvbiBkaXNwYXRjaEV2ZW50KG5vZGUsIHR5cGUsIHBhcmFtcykge1xuICB2YXIgd2luZG93ID0gZGVmYXVsdFZpZXcobm9kZSksXG4gICAgICBldmVudCA9IHdpbmRvdy5DdXN0b21FdmVudDtcblxuICBpZiAodHlwZW9mIGV2ZW50ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBldmVudCA9IG5ldyBldmVudCh0eXBlLCBwYXJhbXMpO1xuICB9IGVsc2Uge1xuICAgIGV2ZW50ID0gd2luZG93LmRvY3VtZW50LmNyZWF0ZUV2ZW50KFwiRXZlbnRcIik7XG4gICAgaWYgKHBhcmFtcykgZXZlbnQuaW5pdEV2ZW50KHR5cGUsIHBhcmFtcy5idWJibGVzLCBwYXJhbXMuY2FuY2VsYWJsZSksIGV2ZW50LmRldGFpbCA9IHBhcmFtcy5kZXRhaWw7XG4gICAgZWxzZSBldmVudC5pbml0RXZlbnQodHlwZSwgZmFsc2UsIGZhbHNlKTtcbiAgfVxuXG4gIG5vZGUuZGlzcGF0Y2hFdmVudChldmVudCk7XG59XG5cbmZ1bmN0aW9uIGRpc3BhdGNoQ29uc3RhbnQodHlwZSwgcGFyYW1zKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZGlzcGF0Y2hFdmVudCh0aGlzLCB0eXBlLCBwYXJhbXMpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBkaXNwYXRjaEZ1bmN0aW9uKHR5cGUsIHBhcmFtcykge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGRpc3BhdGNoRXZlbnQodGhpcywgdHlwZSwgcGFyYW1zLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih0eXBlLCBwYXJhbXMpIHtcbiAgcmV0dXJuIHRoaXMuZWFjaCgodHlwZW9mIHBhcmFtcyA9PT0gXCJmdW5jdGlvblwiXG4gICAgICA/IGRpc3BhdGNoRnVuY3Rpb25cbiAgICAgIDogZGlzcGF0Y2hDb25zdGFudCkodHlwZSwgcGFyYW1zKSk7XG59XG4iLCJpbXBvcnQgc2VsZWN0aW9uX3NlbGVjdCBmcm9tIFwiLi9zZWxlY3RcIjtcbmltcG9ydCBzZWxlY3Rpb25fc2VsZWN0QWxsIGZyb20gXCIuL3NlbGVjdEFsbFwiO1xuaW1wb3J0IHNlbGVjdGlvbl9maWx0ZXIgZnJvbSBcIi4vZmlsdGVyXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2RhdGEgZnJvbSBcIi4vZGF0YVwiO1xuaW1wb3J0IHNlbGVjdGlvbl9lbnRlciBmcm9tIFwiLi9lbnRlclwiO1xuaW1wb3J0IHNlbGVjdGlvbl9leGl0IGZyb20gXCIuL2V4aXRcIjtcbmltcG9ydCBzZWxlY3Rpb25fam9pbiBmcm9tIFwiLi9qb2luXCI7XG5pbXBvcnQgc2VsZWN0aW9uX21lcmdlIGZyb20gXCIuL21lcmdlXCI7XG5pbXBvcnQgc2VsZWN0aW9uX29yZGVyIGZyb20gXCIuL29yZGVyXCI7XG5pbXBvcnQgc2VsZWN0aW9uX3NvcnQgZnJvbSBcIi4vc29ydFwiO1xuaW1wb3J0IHNlbGVjdGlvbl9jYWxsIGZyb20gXCIuL2NhbGxcIjtcbmltcG9ydCBzZWxlY3Rpb25fbm9kZXMgZnJvbSBcIi4vbm9kZXNcIjtcbmltcG9ydCBzZWxlY3Rpb25fbm9kZSBmcm9tIFwiLi9ub2RlXCI7XG5pbXBvcnQgc2VsZWN0aW9uX3NpemUgZnJvbSBcIi4vc2l6ZVwiO1xuaW1wb3J0IHNlbGVjdGlvbl9lbXB0eSBmcm9tIFwiLi9lbXB0eVwiO1xuaW1wb3J0IHNlbGVjdGlvbl9lYWNoIGZyb20gXCIuL2VhY2hcIjtcbmltcG9ydCBzZWxlY3Rpb25fYXR0ciBmcm9tIFwiLi9hdHRyXCI7XG5pbXBvcnQgc2VsZWN0aW9uX3N0eWxlIGZyb20gXCIuL3N0eWxlXCI7XG5pbXBvcnQgc2VsZWN0aW9uX3Byb3BlcnR5IGZyb20gXCIuL3Byb3BlcnR5XCI7XG5pbXBvcnQgc2VsZWN0aW9uX2NsYXNzZWQgZnJvbSBcIi4vY2xhc3NlZFwiO1xuaW1wb3J0IHNlbGVjdGlvbl90ZXh0IGZyb20gXCIuL3RleHRcIjtcbmltcG9ydCBzZWxlY3Rpb25faHRtbCBmcm9tIFwiLi9odG1sXCI7XG5pbXBvcnQgc2VsZWN0aW9uX3JhaXNlIGZyb20gXCIuL3JhaXNlXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2xvd2VyIGZyb20gXCIuL2xvd2VyXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2FwcGVuZCBmcm9tIFwiLi9hcHBlbmRcIjtcbmltcG9ydCBzZWxlY3Rpb25faW5zZXJ0IGZyb20gXCIuL2luc2VydFwiO1xuaW1wb3J0IHNlbGVjdGlvbl9yZW1vdmUgZnJvbSBcIi4vcmVtb3ZlXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2Nsb25lIGZyb20gXCIuL2Nsb25lXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2RhdHVtIGZyb20gXCIuL2RhdHVtXCI7XG5pbXBvcnQgc2VsZWN0aW9uX29uIGZyb20gXCIuL29uXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2Rpc3BhdGNoIGZyb20gXCIuL2Rpc3BhdGNoXCI7XG5cbmV4cG9ydCB2YXIgcm9vdCA9IFtudWxsXTtcblxuZXhwb3J0IGZ1bmN0aW9uIFNlbGVjdGlvbihncm91cHMsIHBhcmVudHMpIHtcbiAgdGhpcy5fZ3JvdXBzID0gZ3JvdXBzO1xuICB0aGlzLl9wYXJlbnRzID0gcGFyZW50cztcbn1cblxuZnVuY3Rpb24gc2VsZWN0aW9uKCkge1xuICByZXR1cm4gbmV3IFNlbGVjdGlvbihbW2RvY3VtZW50LmRvY3VtZW50RWxlbWVudF1dLCByb290KTtcbn1cblxuU2VsZWN0aW9uLnByb3RvdHlwZSA9IHNlbGVjdGlvbi5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBTZWxlY3Rpb24sXG4gIHNlbGVjdDogc2VsZWN0aW9uX3NlbGVjdCxcbiAgc2VsZWN0QWxsOiBzZWxlY3Rpb25fc2VsZWN0QWxsLFxuICBmaWx0ZXI6IHNlbGVjdGlvbl9maWx0ZXIsXG4gIGRhdGE6IHNlbGVjdGlvbl9kYXRhLFxuICBlbnRlcjogc2VsZWN0aW9uX2VudGVyLFxuICBleGl0OiBzZWxlY3Rpb25fZXhpdCxcbiAgam9pbjogc2VsZWN0aW9uX2pvaW4sXG4gIG1lcmdlOiBzZWxlY3Rpb25fbWVyZ2UsXG4gIG9yZGVyOiBzZWxlY3Rpb25fb3JkZXIsXG4gIHNvcnQ6IHNlbGVjdGlvbl9zb3J0LFxuICBjYWxsOiBzZWxlY3Rpb25fY2FsbCxcbiAgbm9kZXM6IHNlbGVjdGlvbl9ub2RlcyxcbiAgbm9kZTogc2VsZWN0aW9uX25vZGUsXG4gIHNpemU6IHNlbGVjdGlvbl9zaXplLFxuICBlbXB0eTogc2VsZWN0aW9uX2VtcHR5LFxuICBlYWNoOiBzZWxlY3Rpb25fZWFjaCxcbiAgYXR0cjogc2VsZWN0aW9uX2F0dHIsXG4gIHN0eWxlOiBzZWxlY3Rpb25fc3R5bGUsXG4gIHByb3BlcnR5OiBzZWxlY3Rpb25fcHJvcGVydHksXG4gIGNsYXNzZWQ6IHNlbGVjdGlvbl9jbGFzc2VkLFxuICB0ZXh0OiBzZWxlY3Rpb25fdGV4dCxcbiAgaHRtbDogc2VsZWN0aW9uX2h0bWwsXG4gIHJhaXNlOiBzZWxlY3Rpb25fcmFpc2UsXG4gIGxvd2VyOiBzZWxlY3Rpb25fbG93ZXIsXG4gIGFwcGVuZDogc2VsZWN0aW9uX2FwcGVuZCxcbiAgaW5zZXJ0OiBzZWxlY3Rpb25faW5zZXJ0LFxuICByZW1vdmU6IHNlbGVjdGlvbl9yZW1vdmUsXG4gIGNsb25lOiBzZWxlY3Rpb25fY2xvbmUsXG4gIGRhdHVtOiBzZWxlY3Rpb25fZGF0dW0sXG4gIG9uOiBzZWxlY3Rpb25fb24sXG4gIGRpc3BhdGNoOiBzZWxlY3Rpb25fZGlzcGF0Y2hcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHNlbGVjdGlvbjtcbiIsImltcG9ydCB7U2VsZWN0aW9ufSBmcm9tIFwiLi9pbmRleFwiO1xuaW1wb3J0IHNlbGVjdG9yIGZyb20gXCIuLi9zZWxlY3RvclwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3QpIHtcbiAgaWYgKHR5cGVvZiBzZWxlY3QgIT09IFwiZnVuY3Rpb25cIikgc2VsZWN0ID0gc2VsZWN0b3Ioc2VsZWN0KTtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBzdWJncm91cHMgPSBuZXcgQXJyYXkobSksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIHN1Ymdyb3VwID0gc3ViZ3JvdXBzW2pdID0gbmV3IEFycmF5KG4pLCBub2RlLCBzdWJub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKChub2RlID0gZ3JvdXBbaV0pICYmIChzdWJub2RlID0gc2VsZWN0LmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApKSkge1xuICAgICAgICBpZiAoXCJfX2RhdGFfX1wiIGluIG5vZGUpIHN1Ym5vZGUuX19kYXRhX18gPSBub2RlLl9fZGF0YV9fO1xuICAgICAgICBzdWJncm91cFtpXSA9IHN1Ym5vZGU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24oc3ViZ3JvdXBzLCB0aGlzLl9wYXJlbnRzKTtcbn1cbiIsImltcG9ydCB7U2VsZWN0aW9ufSBmcm9tIFwiLi9pbmRleFwiO1xuaW1wb3J0IHNlbGVjdG9yQWxsIGZyb20gXCIuLi9zZWxlY3RvckFsbFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3QpIHtcbiAgaWYgKHR5cGVvZiBzZWxlY3QgIT09IFwiZnVuY3Rpb25cIikgc2VsZWN0ID0gc2VsZWN0b3JBbGwoc2VsZWN0KTtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBzdWJncm91cHMgPSBbXSwgcGFyZW50cyA9IFtdLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgICBzdWJncm91cHMucHVzaChzZWxlY3QuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCkpO1xuICAgICAgICBwYXJlbnRzLnB1c2gobm9kZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24oc3ViZ3JvdXBzLCBwYXJlbnRzKTtcbn1cbiIsImltcG9ydCB7U2VsZWN0aW9ufSBmcm9tIFwiLi9pbmRleFwiO1xuaW1wb3J0IG1hdGNoZXIgZnJvbSBcIi4uL21hdGNoZXJcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obWF0Y2gpIHtcbiAgaWYgKHR5cGVvZiBtYXRjaCAhPT0gXCJmdW5jdGlvblwiKSBtYXRjaCA9IG1hdGNoZXIobWF0Y2gpO1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIHN1Ymdyb3VwcyA9IG5ldyBBcnJheShtKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgc3ViZ3JvdXAgPSBzdWJncm91cHNbal0gPSBbXSwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmICgobm9kZSA9IGdyb3VwW2ldKSAmJiBtYXRjaC5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKSkge1xuICAgICAgICBzdWJncm91cC5wdXNoKG5vZGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKHN1Ymdyb3VwcywgdGhpcy5fcGFyZW50cyk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3Rvcikge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMubWF0Y2hlcyhzZWxlY3Rvcik7XG4gIH07XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4geDtcbiAgfTtcbn1cbiIsImltcG9ydCBzcGFyc2UgZnJvbSBcIi4vc3BhcnNlXCI7XG5pbXBvcnQge1NlbGVjdGlvbn0gZnJvbSBcIi4vaW5kZXhcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKHRoaXMuX2V4aXQgfHwgdGhpcy5fZ3JvdXBzLm1hcChzcGFyc2UpLCB0aGlzLl9wYXJlbnRzKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG9uZW50ZXIsIG9udXBkYXRlLCBvbmV4aXQpIHtcbiAgdmFyIGVudGVyID0gdGhpcy5lbnRlcigpLCB1cGRhdGUgPSB0aGlzLCBleGl0ID0gdGhpcy5leGl0KCk7XG4gIGVudGVyID0gdHlwZW9mIG9uZW50ZXIgPT09IFwiZnVuY3Rpb25cIiA/IG9uZW50ZXIoZW50ZXIpIDogZW50ZXIuYXBwZW5kKG9uZW50ZXIgKyBcIlwiKTtcbiAgaWYgKG9udXBkYXRlICE9IG51bGwpIHVwZGF0ZSA9IG9udXBkYXRlKHVwZGF0ZSk7XG4gIGlmIChvbmV4aXQgPT0gbnVsbCkgZXhpdC5yZW1vdmUoKTsgZWxzZSBvbmV4aXQoZXhpdCk7XG4gIHJldHVybiBlbnRlciAmJiB1cGRhdGUgPyBlbnRlci5tZXJnZSh1cGRhdGUpLm9yZGVyKCkgOiB1cGRhdGU7XG59XG4iLCJpbXBvcnQge1NlbGVjdGlvbn0gZnJvbSBcIi4vaW5kZXhcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VsZWN0aW9uKSB7XG5cbiAgZm9yICh2YXIgZ3JvdXBzMCA9IHRoaXMuX2dyb3VwcywgZ3JvdXBzMSA9IHNlbGVjdGlvbi5fZ3JvdXBzLCBtMCA9IGdyb3VwczAubGVuZ3RoLCBtMSA9IGdyb3VwczEubGVuZ3RoLCBtID0gTWF0aC5taW4obTAsIG0xKSwgbWVyZ2VzID0gbmV3IEFycmF5KG0wKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cDAgPSBncm91cHMwW2pdLCBncm91cDEgPSBncm91cHMxW2pdLCBuID0gZ3JvdXAwLmxlbmd0aCwgbWVyZ2UgPSBtZXJnZXNbal0gPSBuZXcgQXJyYXkobiksIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwMFtpXSB8fCBncm91cDFbaV0pIHtcbiAgICAgICAgbWVyZ2VbaV0gPSBub2RlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZvciAoOyBqIDwgbTA7ICsraikge1xuICAgIG1lcmdlc1tqXSA9IGdyb3VwczBbal07XG4gIH1cblxuICByZXR1cm4gbmV3IFNlbGVjdGlvbihtZXJnZXMsIHRoaXMuX3BhcmVudHMpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBqID0gLTEsIG0gPSBncm91cHMubGVuZ3RoOyArK2ogPCBtOykge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBpID0gZ3JvdXAubGVuZ3RoIC0gMSwgbmV4dCA9IGdyb3VwW2ldLCBub2RlOyAtLWkgPj0gMDspIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgICAgaWYgKG5leHQgJiYgbm9kZS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihuZXh0KSBeIDQpIG5leHQucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobm9kZSwgbmV4dCk7XG4gICAgICAgIG5leHQgPSBub2RlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBub2RlcyA9IG5ldyBBcnJheSh0aGlzLnNpemUoKSksIGkgPSAtMTtcbiAgdGhpcy5lYWNoKGZ1bmN0aW9uKCkgeyBub2Rlc1srK2ldID0gdGhpczsgfSk7XG4gIHJldHVybiBub2Rlcztcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgaiA9IDAsIG0gPSBncm91cHMubGVuZ3RoOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIGkgPSAwLCBuID0gZ3JvdXAubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgICB2YXIgbm9kZSA9IGdyb3VwW2ldO1xuICAgICAgaWYgKG5vZGUpIHJldHVybiBub2RlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBzaXplID0gMDtcbiAgdGhpcy5lYWNoKGZ1bmN0aW9uKCkgeyArK3NpemU7IH0pO1xuICByZXR1cm4gc2l6ZTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gIXRoaXMubm9kZSgpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY2FsbGJhY2spIHtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIGogPSAwLCBtID0gZ3JvdXBzLmxlbmd0aDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBpID0gMCwgbiA9IGdyb3VwLmxlbmd0aCwgbm9kZTsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkgY2FsbGJhY2suY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG4iLCJpbXBvcnQgY3JlYXRvciBmcm9tIFwiLi4vY3JlYXRvclwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lKSB7XG4gIHZhciBjcmVhdGUgPSB0eXBlb2YgbmFtZSA9PT0gXCJmdW5jdGlvblwiID8gbmFtZSA6IGNyZWF0b3IobmFtZSk7XG4gIHJldHVybiB0aGlzLnNlbGVjdChmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5hcHBlbmRDaGlsZChjcmVhdGUuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH0pO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgID8gdGhpcy5wcm9wZXJ0eShcIl9fZGF0YV9fXCIsIHZhbHVlKVxuICAgICAgOiB0aGlzLm5vZGUoKS5fX2RhdGFfXztcbn1cbiIsImltcG9ydCB7U2VsZWN0aW9uLCByb290fSBmcm9tIFwiLi9zZWxlY3Rpb24vaW5kZXhcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VsZWN0b3IpIHtcbiAgcmV0dXJuIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIlxuICAgICAgPyBuZXcgU2VsZWN0aW9uKFtbZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3RvcildXSwgW2RvY3VtZW50LmRvY3VtZW50RWxlbWVudF0pXG4gICAgICA6IG5ldyBTZWxlY3Rpb24oW1tzZWxlY3Rvcl1dLCByb290KTtcbn1cbiIsImltcG9ydCB7U2VsZWN0aW9uLCByb290fSBmcm9tIFwiLi9zZWxlY3Rpb24vaW5kZXhcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VsZWN0b3IpIHtcbiAgcmV0dXJuIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIlxuICAgICAgPyBuZXcgU2VsZWN0aW9uKFtkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKV0sIFtkb2N1bWVudC5kb2N1bWVudEVsZW1lbnRdKVxuICAgICAgOiBuZXcgU2VsZWN0aW9uKFtzZWxlY3RvciA9PSBudWxsID8gW10gOiBzZWxlY3Rvcl0sIHJvb3QpO1xufVxuIiwidmFyIG5vb3AgPSB7dmFsdWU6IGZ1bmN0aW9uKCkge319O1xuXG5mdW5jdGlvbiBkaXNwYXRjaCgpIHtcbiAgZm9yICh2YXIgaSA9IDAsIG4gPSBhcmd1bWVudHMubGVuZ3RoLCBfID0ge30sIHQ7IGkgPCBuOyArK2kpIHtcbiAgICBpZiAoISh0ID0gYXJndW1lbnRzW2ldICsgXCJcIikgfHwgKHQgaW4gXykgfHwgL1tcXHMuXS8udGVzdCh0KSkgdGhyb3cgbmV3IEVycm9yKFwiaWxsZWdhbCB0eXBlOiBcIiArIHQpO1xuICAgIF9bdF0gPSBbXTtcbiAgfVxuICByZXR1cm4gbmV3IERpc3BhdGNoKF8pO1xufVxuXG5mdW5jdGlvbiBEaXNwYXRjaChfKSB7XG4gIHRoaXMuXyA9IF87XG59XG5cbmZ1bmN0aW9uIHBhcnNlVHlwZW5hbWVzKHR5cGVuYW1lcywgdHlwZXMpIHtcbiAgcmV0dXJuIHR5cGVuYW1lcy50cmltKCkuc3BsaXQoL158XFxzKy8pLm1hcChmdW5jdGlvbih0KSB7XG4gICAgdmFyIG5hbWUgPSBcIlwiLCBpID0gdC5pbmRleE9mKFwiLlwiKTtcbiAgICBpZiAoaSA+PSAwKSBuYW1lID0gdC5zbGljZShpICsgMSksIHQgPSB0LnNsaWNlKDAsIGkpO1xuICAgIGlmICh0ICYmICF0eXBlcy5oYXNPd25Qcm9wZXJ0eSh0KSkgdGhyb3cgbmV3IEVycm9yKFwidW5rbm93biB0eXBlOiBcIiArIHQpO1xuICAgIHJldHVybiB7dHlwZTogdCwgbmFtZTogbmFtZX07XG4gIH0pO1xufVxuXG5EaXNwYXRjaC5wcm90b3R5cGUgPSBkaXNwYXRjaC5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBEaXNwYXRjaCxcbiAgb246IGZ1bmN0aW9uKHR5cGVuYW1lLCBjYWxsYmFjaykge1xuICAgIHZhciBfID0gdGhpcy5fLFxuICAgICAgICBUID0gcGFyc2VUeXBlbmFtZXModHlwZW5hbWUgKyBcIlwiLCBfKSxcbiAgICAgICAgdCxcbiAgICAgICAgaSA9IC0xLFxuICAgICAgICBuID0gVC5sZW5ndGg7XG5cbiAgICAvLyBJZiBubyBjYWxsYmFjayB3YXMgc3BlY2lmaWVkLCByZXR1cm4gdGhlIGNhbGxiYWNrIG9mIHRoZSBnaXZlbiB0eXBlIGFuZCBuYW1lLlxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgICAgd2hpbGUgKCsraSA8IG4pIGlmICgodCA9ICh0eXBlbmFtZSA9IFRbaV0pLnR5cGUpICYmICh0ID0gZ2V0KF9bdF0sIHR5cGVuYW1lLm5hbWUpKSkgcmV0dXJuIHQ7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gSWYgYSB0eXBlIHdhcyBzcGVjaWZpZWQsIHNldCB0aGUgY2FsbGJhY2sgZm9yIHRoZSBnaXZlbiB0eXBlIGFuZCBuYW1lLlxuICAgIC8vIE90aGVyd2lzZSwgaWYgYSBudWxsIGNhbGxiYWNrIHdhcyBzcGVjaWZpZWQsIHJlbW92ZSBjYWxsYmFja3Mgb2YgdGhlIGdpdmVuIG5hbWUuXG4gICAgaWYgKGNhbGxiYWNrICE9IG51bGwgJiYgdHlwZW9mIGNhbGxiYWNrICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgY2FsbGJhY2s6IFwiICsgY2FsbGJhY2spO1xuICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICBpZiAodCA9ICh0eXBlbmFtZSA9IFRbaV0pLnR5cGUpIF9bdF0gPSBzZXQoX1t0XSwgdHlwZW5hbWUubmFtZSwgY2FsbGJhY2spO1xuICAgICAgZWxzZSBpZiAoY2FsbGJhY2sgPT0gbnVsbCkgZm9yICh0IGluIF8pIF9bdF0gPSBzZXQoX1t0XSwgdHlwZW5hbWUubmFtZSwgbnVsbCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG4gIGNvcHk6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBjb3B5ID0ge30sIF8gPSB0aGlzLl87XG4gICAgZm9yICh2YXIgdCBpbiBfKSBjb3B5W3RdID0gX1t0XS5zbGljZSgpO1xuICAgIHJldHVybiBuZXcgRGlzcGF0Y2goY29weSk7XG4gIH0sXG4gIGNhbGw6IGZ1bmN0aW9uKHR5cGUsIHRoYXQpIHtcbiAgICBpZiAoKG4gPSBhcmd1bWVudHMubGVuZ3RoIC0gMikgPiAwKSBmb3IgKHZhciBhcmdzID0gbmV3IEFycmF5KG4pLCBpID0gMCwgbiwgdDsgaSA8IG47ICsraSkgYXJnc1tpXSA9IGFyZ3VtZW50c1tpICsgMl07XG4gICAgaWYgKCF0aGlzLl8uaGFzT3duUHJvcGVydHkodHlwZSkpIHRocm93IG5ldyBFcnJvcihcInVua25vd24gdHlwZTogXCIgKyB0eXBlKTtcbiAgICBmb3IgKHQgPSB0aGlzLl9bdHlwZV0sIGkgPSAwLCBuID0gdC5sZW5ndGg7IGkgPCBuOyArK2kpIHRbaV0udmFsdWUuYXBwbHkodGhhdCwgYXJncyk7XG4gIH0sXG4gIGFwcGx5OiBmdW5jdGlvbih0eXBlLCB0aGF0LCBhcmdzKSB7XG4gICAgaWYgKCF0aGlzLl8uaGFzT3duUHJvcGVydHkodHlwZSkpIHRocm93IG5ldyBFcnJvcihcInVua25vd24gdHlwZTogXCIgKyB0eXBlKTtcbiAgICBmb3IgKHZhciB0ID0gdGhpcy5fW3R5cGVdLCBpID0gMCwgbiA9IHQubGVuZ3RoOyBpIDwgbjsgKytpKSB0W2ldLnZhbHVlLmFwcGx5KHRoYXQsIGFyZ3MpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBnZXQodHlwZSwgbmFtZSkge1xuICBmb3IgKHZhciBpID0gMCwgbiA9IHR5cGUubGVuZ3RoLCBjOyBpIDwgbjsgKytpKSB7XG4gICAgaWYgKChjID0gdHlwZVtpXSkubmFtZSA9PT0gbmFtZSkge1xuICAgICAgcmV0dXJuIGMudmFsdWU7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHNldCh0eXBlLCBuYW1lLCBjYWxsYmFjaykge1xuICBmb3IgKHZhciBpID0gMCwgbiA9IHR5cGUubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgaWYgKHR5cGVbaV0ubmFtZSA9PT0gbmFtZSkge1xuICAgICAgdHlwZVtpXSA9IG5vb3AsIHR5cGUgPSB0eXBlLnNsaWNlKDAsIGkpLmNvbmNhdCh0eXBlLnNsaWNlKGkgKyAxKSk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgaWYgKGNhbGxiYWNrICE9IG51bGwpIHR5cGUucHVzaCh7bmFtZTogbmFtZSwgdmFsdWU6IGNhbGxiYWNrfSk7XG4gIHJldHVybiB0eXBlO1xufVxuXG5leHBvcnQgZGVmYXVsdCBkaXNwYXRjaDtcbiIsImltcG9ydCB7ZXZlbnR9IGZyb20gXCIuL3NlbGVjdGlvbi9vblwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIGN1cnJlbnQgPSBldmVudCwgc291cmNlO1xuICB3aGlsZSAoc291cmNlID0gY3VycmVudC5zb3VyY2VFdmVudCkgY3VycmVudCA9IHNvdXJjZTtcbiAgcmV0dXJuIGN1cnJlbnQ7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihub2RlLCBldmVudCkge1xuICB2YXIgc3ZnID0gbm9kZS5vd25lclNWR0VsZW1lbnQgfHwgbm9kZTtcblxuICBpZiAoc3ZnLmNyZWF0ZVNWR1BvaW50KSB7XG4gICAgdmFyIHBvaW50ID0gc3ZnLmNyZWF0ZVNWR1BvaW50KCk7XG4gICAgcG9pbnQueCA9IGV2ZW50LmNsaWVudFgsIHBvaW50LnkgPSBldmVudC5jbGllbnRZO1xuICAgIHBvaW50ID0gcG9pbnQubWF0cml4VHJhbnNmb3JtKG5vZGUuZ2V0U2NyZWVuQ1RNKCkuaW52ZXJzZSgpKTtcbiAgICByZXR1cm4gW3BvaW50LngsIHBvaW50LnldO1xuICB9XG5cbiAgdmFyIHJlY3QgPSBub2RlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICByZXR1cm4gW2V2ZW50LmNsaWVudFggLSByZWN0LmxlZnQgLSBub2RlLmNsaWVudExlZnQsIGV2ZW50LmNsaWVudFkgLSByZWN0LnRvcCAtIG5vZGUuY2xpZW50VG9wXTtcbn1cbiIsImltcG9ydCBzb3VyY2VFdmVudCBmcm9tIFwiLi9zb3VyY2VFdmVudFwiO1xuaW1wb3J0IHBvaW50IGZyb20gXCIuL3BvaW50XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5vZGUpIHtcbiAgdmFyIGV2ZW50ID0gc291cmNlRXZlbnQoKTtcbiAgaWYgKGV2ZW50LmNoYW5nZWRUb3VjaGVzKSBldmVudCA9IGV2ZW50LmNoYW5nZWRUb3VjaGVzWzBdO1xuICByZXR1cm4gcG9pbnQobm9kZSwgZXZlbnQpO1xufVxuIiwiaW1wb3J0IHNvdXJjZUV2ZW50IGZyb20gXCIuL3NvdXJjZUV2ZW50XCI7XG5pbXBvcnQgcG9pbnQgZnJvbSBcIi4vcG9pbnRcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obm9kZSwgdG91Y2hlcywgaWRlbnRpZmllcikge1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDMpIGlkZW50aWZpZXIgPSB0b3VjaGVzLCB0b3VjaGVzID0gc291cmNlRXZlbnQoKS5jaGFuZ2VkVG91Y2hlcztcblxuICBmb3IgKHZhciBpID0gMCwgbiA9IHRvdWNoZXMgPyB0b3VjaGVzLmxlbmd0aCA6IDAsIHRvdWNoOyBpIDwgbjsgKytpKSB7XG4gICAgaWYgKCh0b3VjaCA9IHRvdWNoZXNbaV0pLmlkZW50aWZpZXIgPT09IGlkZW50aWZpZXIpIHtcbiAgICAgIHJldHVybiBwb2ludChub2RlLCB0b3VjaCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG4iLCJpbXBvcnQge2V2ZW50fSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBub3Byb3BhZ2F0aW9uKCkge1xuICBldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gIGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xufVxuIiwiaW1wb3J0IHtzZWxlY3R9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCBub2V2ZW50IGZyb20gXCIuL25vZXZlbnQuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmlldykge1xuICB2YXIgcm9vdCA9IHZpZXcuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LFxuICAgICAgc2VsZWN0aW9uID0gc2VsZWN0KHZpZXcpLm9uKFwiZHJhZ3N0YXJ0LmRyYWdcIiwgbm9ldmVudCwgdHJ1ZSk7XG4gIGlmIChcIm9uc2VsZWN0c3RhcnRcIiBpbiByb290KSB7XG4gICAgc2VsZWN0aW9uLm9uKFwic2VsZWN0c3RhcnQuZHJhZ1wiLCBub2V2ZW50LCB0cnVlKTtcbiAgfSBlbHNlIHtcbiAgICByb290Ll9fbm9zZWxlY3QgPSByb290LnN0eWxlLk1velVzZXJTZWxlY3Q7XG4gICAgcm9vdC5zdHlsZS5Nb3pVc2VyU2VsZWN0ID0gXCJub25lXCI7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHllc2RyYWcodmlldywgbm9jbGljaykge1xuICB2YXIgcm9vdCA9IHZpZXcuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LFxuICAgICAgc2VsZWN0aW9uID0gc2VsZWN0KHZpZXcpLm9uKFwiZHJhZ3N0YXJ0LmRyYWdcIiwgbnVsbCk7XG4gIGlmIChub2NsaWNrKSB7XG4gICAgc2VsZWN0aW9uLm9uKFwiY2xpY2suZHJhZ1wiLCBub2V2ZW50LCB0cnVlKTtcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgeyBzZWxlY3Rpb24ub24oXCJjbGljay5kcmFnXCIsIG51bGwpOyB9LCAwKTtcbiAgfVxuICBpZiAoXCJvbnNlbGVjdHN0YXJ0XCIgaW4gcm9vdCkge1xuICAgIHNlbGVjdGlvbi5vbihcInNlbGVjdHN0YXJ0LmRyYWdcIiwgbnVsbCk7XG4gIH0gZWxzZSB7XG4gICAgcm9vdC5zdHlsZS5Nb3pVc2VyU2VsZWN0ID0gcm9vdC5fX25vc2VsZWN0O1xuICAgIGRlbGV0ZSByb290Ll9fbm9zZWxlY3Q7XG4gIH1cbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB4O1xuICB9O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gRHJhZ0V2ZW50KHRhcmdldCwgdHlwZSwgc3ViamVjdCwgaWQsIGFjdGl2ZSwgeCwgeSwgZHgsIGR5LCBkaXNwYXRjaCkge1xuICB0aGlzLnRhcmdldCA9IHRhcmdldDtcbiAgdGhpcy50eXBlID0gdHlwZTtcbiAgdGhpcy5zdWJqZWN0ID0gc3ViamVjdDtcbiAgdGhpcy5pZGVudGlmaWVyID0gaWQ7XG4gIHRoaXMuYWN0aXZlID0gYWN0aXZlO1xuICB0aGlzLnggPSB4O1xuICB0aGlzLnkgPSB5O1xuICB0aGlzLmR4ID0gZHg7XG4gIHRoaXMuZHkgPSBkeTtcbiAgdGhpcy5fID0gZGlzcGF0Y2g7XG59XG5cbkRyYWdFdmVudC5wcm90b3R5cGUub24gPSBmdW5jdGlvbigpIHtcbiAgdmFyIHZhbHVlID0gdGhpcy5fLm9uLmFwcGx5KHRoaXMuXywgYXJndW1lbnRzKTtcbiAgcmV0dXJuIHZhbHVlID09PSB0aGlzLl8gPyB0aGlzIDogdmFsdWU7XG59O1xuIiwiaW1wb3J0IHtkaXNwYXRjaH0gZnJvbSBcImQzLWRpc3BhdGNoXCI7XG5pbXBvcnQge2V2ZW50LCBjdXN0b21FdmVudCwgc2VsZWN0LCBtb3VzZSwgdG91Y2h9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCBub2RyYWcsIHt5ZXNkcmFnfSBmcm9tIFwiLi9ub2RyYWcuanNcIjtcbmltcG9ydCBub2V2ZW50LCB7bm9wcm9wYWdhdGlvbn0gZnJvbSBcIi4vbm9ldmVudC5qc1wiO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50LmpzXCI7XG5pbXBvcnQgRHJhZ0V2ZW50IGZyb20gXCIuL2V2ZW50LmpzXCI7XG5cbi8vIElnbm9yZSByaWdodC1jbGljaywgc2luY2UgdGhhdCBzaG91bGQgb3BlbiB0aGUgY29udGV4dCBtZW51LlxuZnVuY3Rpb24gZGVmYXVsdEZpbHRlcigpIHtcbiAgcmV0dXJuICFldmVudC5jdHJsS2V5ICYmICFldmVudC5idXR0b247XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRDb250YWluZXIoKSB7XG4gIHJldHVybiB0aGlzLnBhcmVudE5vZGU7XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRTdWJqZWN0KGQpIHtcbiAgcmV0dXJuIGQgPT0gbnVsbCA/IHt4OiBldmVudC54LCB5OiBldmVudC55fSA6IGQ7XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRUb3VjaGFibGUoKSB7XG4gIHJldHVybiBuYXZpZ2F0b3IubWF4VG91Y2hQb2ludHMgfHwgKFwib250b3VjaHN0YXJ0XCIgaW4gdGhpcyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgZmlsdGVyID0gZGVmYXVsdEZpbHRlcixcbiAgICAgIGNvbnRhaW5lciA9IGRlZmF1bHRDb250YWluZXIsXG4gICAgICBzdWJqZWN0ID0gZGVmYXVsdFN1YmplY3QsXG4gICAgICB0b3VjaGFibGUgPSBkZWZhdWx0VG91Y2hhYmxlLFxuICAgICAgZ2VzdHVyZXMgPSB7fSxcbiAgICAgIGxpc3RlbmVycyA9IGRpc3BhdGNoKFwic3RhcnRcIiwgXCJkcmFnXCIsIFwiZW5kXCIpLFxuICAgICAgYWN0aXZlID0gMCxcbiAgICAgIG1vdXNlZG93bngsXG4gICAgICBtb3VzZWRvd255LFxuICAgICAgbW91c2Vtb3ZpbmcsXG4gICAgICB0b3VjaGVuZGluZyxcbiAgICAgIGNsaWNrRGlzdGFuY2UyID0gMDtcblxuICBmdW5jdGlvbiBkcmFnKHNlbGVjdGlvbikge1xuICAgIHNlbGVjdGlvblxuICAgICAgICAub24oXCJtb3VzZWRvd24uZHJhZ1wiLCBtb3VzZWRvd25lZClcbiAgICAgIC5maWx0ZXIodG91Y2hhYmxlKVxuICAgICAgICAub24oXCJ0b3VjaHN0YXJ0LmRyYWdcIiwgdG91Y2hzdGFydGVkKVxuICAgICAgICAub24oXCJ0b3VjaG1vdmUuZHJhZ1wiLCB0b3VjaG1vdmVkKVxuICAgICAgICAub24oXCJ0b3VjaGVuZC5kcmFnIHRvdWNoY2FuY2VsLmRyYWdcIiwgdG91Y2hlbmRlZClcbiAgICAgICAgLnN0eWxlKFwidG91Y2gtYWN0aW9uXCIsIFwibm9uZVwiKVxuICAgICAgICAuc3R5bGUoXCItd2Via2l0LXRhcC1oaWdobGlnaHQtY29sb3JcIiwgXCJyZ2JhKDAsMCwwLDApXCIpO1xuICB9XG5cbiAgZnVuY3Rpb24gbW91c2Vkb3duZWQoKSB7XG4gICAgaWYgKHRvdWNoZW5kaW5nIHx8ICFmaWx0ZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSkgcmV0dXJuO1xuICAgIHZhciBnZXN0dXJlID0gYmVmb3Jlc3RhcnQoXCJtb3VzZVwiLCBjb250YWluZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSwgbW91c2UsIHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKCFnZXN0dXJlKSByZXR1cm47XG4gICAgc2VsZWN0KGV2ZW50LnZpZXcpLm9uKFwibW91c2Vtb3ZlLmRyYWdcIiwgbW91c2Vtb3ZlZCwgdHJ1ZSkub24oXCJtb3VzZXVwLmRyYWdcIiwgbW91c2V1cHBlZCwgdHJ1ZSk7XG4gICAgbm9kcmFnKGV2ZW50LnZpZXcpO1xuICAgIG5vcHJvcGFnYXRpb24oKTtcbiAgICBtb3VzZW1vdmluZyA9IGZhbHNlO1xuICAgIG1vdXNlZG93bnggPSBldmVudC5jbGllbnRYO1xuICAgIG1vdXNlZG93bnkgPSBldmVudC5jbGllbnRZO1xuICAgIGdlc3R1cmUoXCJzdGFydFwiKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1vdXNlbW92ZWQoKSB7XG4gICAgbm9ldmVudCgpO1xuICAgIGlmICghbW91c2Vtb3ZpbmcpIHtcbiAgICAgIHZhciBkeCA9IGV2ZW50LmNsaWVudFggLSBtb3VzZWRvd254LCBkeSA9IGV2ZW50LmNsaWVudFkgLSBtb3VzZWRvd255O1xuICAgICAgbW91c2Vtb3ZpbmcgPSBkeCAqIGR4ICsgZHkgKiBkeSA+IGNsaWNrRGlzdGFuY2UyO1xuICAgIH1cbiAgICBnZXN0dXJlcy5tb3VzZShcImRyYWdcIik7XG4gIH1cblxuICBmdW5jdGlvbiBtb3VzZXVwcGVkKCkge1xuICAgIHNlbGVjdChldmVudC52aWV3KS5vbihcIm1vdXNlbW92ZS5kcmFnIG1vdXNldXAuZHJhZ1wiLCBudWxsKTtcbiAgICB5ZXNkcmFnKGV2ZW50LnZpZXcsIG1vdXNlbW92aW5nKTtcbiAgICBub2V2ZW50KCk7XG4gICAgZ2VzdHVyZXMubW91c2UoXCJlbmRcIik7XG4gIH1cblxuICBmdW5jdGlvbiB0b3VjaHN0YXJ0ZWQoKSB7XG4gICAgaWYgKCFmaWx0ZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSkgcmV0dXJuO1xuICAgIHZhciB0b3VjaGVzID0gZXZlbnQuY2hhbmdlZFRvdWNoZXMsXG4gICAgICAgIGMgPSBjb250YWluZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSxcbiAgICAgICAgbiA9IHRvdWNoZXMubGVuZ3RoLCBpLCBnZXN0dXJlO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKGdlc3R1cmUgPSBiZWZvcmVzdGFydCh0b3VjaGVzW2ldLmlkZW50aWZpZXIsIGMsIHRvdWNoLCB0aGlzLCBhcmd1bWVudHMpKSB7XG4gICAgICAgIG5vcHJvcGFnYXRpb24oKTtcbiAgICAgICAgZ2VzdHVyZShcInN0YXJ0XCIpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHRvdWNobW92ZWQoKSB7XG4gICAgdmFyIHRvdWNoZXMgPSBldmVudC5jaGFuZ2VkVG91Y2hlcyxcbiAgICAgICAgbiA9IHRvdWNoZXMubGVuZ3RoLCBpLCBnZXN0dXJlO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKGdlc3R1cmUgPSBnZXN0dXJlc1t0b3VjaGVzW2ldLmlkZW50aWZpZXJdKSB7XG4gICAgICAgIG5vZXZlbnQoKTtcbiAgICAgICAgZ2VzdHVyZShcImRyYWdcIik7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdG91Y2hlbmRlZCgpIHtcbiAgICB2YXIgdG91Y2hlcyA9IGV2ZW50LmNoYW5nZWRUb3VjaGVzLFxuICAgICAgICBuID0gdG91Y2hlcy5sZW5ndGgsIGksIGdlc3R1cmU7XG5cbiAgICBpZiAodG91Y2hlbmRpbmcpIGNsZWFyVGltZW91dCh0b3VjaGVuZGluZyk7XG4gICAgdG91Y2hlbmRpbmcgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgeyB0b3VjaGVuZGluZyA9IG51bGw7IH0sIDUwMCk7IC8vIEdob3N0IGNsaWNrcyBhcmUgZGVsYXllZCFcbiAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAoZ2VzdHVyZSA9IGdlc3R1cmVzW3RvdWNoZXNbaV0uaWRlbnRpZmllcl0pIHtcbiAgICAgICAgbm9wcm9wYWdhdGlvbigpO1xuICAgICAgICBnZXN0dXJlKFwiZW5kXCIpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGJlZm9yZXN0YXJ0KGlkLCBjb250YWluZXIsIHBvaW50LCB0aGF0LCBhcmdzKSB7XG4gICAgdmFyIHAgPSBwb2ludChjb250YWluZXIsIGlkKSwgcywgZHgsIGR5LFxuICAgICAgICBzdWJsaXN0ZW5lcnMgPSBsaXN0ZW5lcnMuY29weSgpO1xuXG4gICAgaWYgKCFjdXN0b21FdmVudChuZXcgRHJhZ0V2ZW50KGRyYWcsIFwiYmVmb3Jlc3RhcnRcIiwgcywgaWQsIGFjdGl2ZSwgcFswXSwgcFsxXSwgMCwgMCwgc3VibGlzdGVuZXJzKSwgZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoKGV2ZW50LnN1YmplY3QgPSBzID0gc3ViamVjdC5hcHBseSh0aGF0LCBhcmdzKSkgPT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuICAgICAgZHggPSBzLnggLSBwWzBdIHx8IDA7XG4gICAgICBkeSA9IHMueSAtIHBbMV0gfHwgMDtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0pKSByZXR1cm47XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gZ2VzdHVyZSh0eXBlKSB7XG4gICAgICB2YXIgcDAgPSBwLCBuO1xuICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgIGNhc2UgXCJzdGFydFwiOiBnZXN0dXJlc1tpZF0gPSBnZXN0dXJlLCBuID0gYWN0aXZlKys7IGJyZWFrO1xuICAgICAgICBjYXNlIFwiZW5kXCI6IGRlbGV0ZSBnZXN0dXJlc1tpZF0sIC0tYWN0aXZlOyAvLyBub2JyZWFrXG4gICAgICAgIGNhc2UgXCJkcmFnXCI6IHAgPSBwb2ludChjb250YWluZXIsIGlkKSwgbiA9IGFjdGl2ZTsgYnJlYWs7XG4gICAgICB9XG4gICAgICBjdXN0b21FdmVudChuZXcgRHJhZ0V2ZW50KGRyYWcsIHR5cGUsIHMsIGlkLCBuLCBwWzBdICsgZHgsIHBbMV0gKyBkeSwgcFswXSAtIHAwWzBdLCBwWzFdIC0gcDBbMV0sIHN1Ymxpc3RlbmVycyksIHN1Ymxpc3RlbmVycy5hcHBseSwgc3VibGlzdGVuZXJzLCBbdHlwZSwgdGhhdCwgYXJnc10pO1xuICAgIH07XG4gIH1cblxuICBkcmFnLmZpbHRlciA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChmaWx0ZXIgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCEhXyksIGRyYWcpIDogZmlsdGVyO1xuICB9O1xuXG4gIGRyYWcuY29udGFpbmVyID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGNvbnRhaW5lciA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoXyksIGRyYWcpIDogY29udGFpbmVyO1xuICB9O1xuXG4gIGRyYWcuc3ViamVjdCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzdWJqZWN0ID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudChfKSwgZHJhZykgOiBzdWJqZWN0O1xuICB9O1xuXG4gIGRyYWcudG91Y2hhYmxlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRvdWNoYWJsZSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoISFfKSwgZHJhZykgOiB0b3VjaGFibGU7XG4gIH07XG5cbiAgZHJhZy5vbiA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciB2YWx1ZSA9IGxpc3RlbmVycy5vbi5hcHBseShsaXN0ZW5lcnMsIGFyZ3VtZW50cyk7XG4gICAgcmV0dXJuIHZhbHVlID09PSBsaXN0ZW5lcnMgPyBkcmFnIDogdmFsdWU7XG4gIH07XG5cbiAgZHJhZy5jbGlja0Rpc3RhbmNlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGNsaWNrRGlzdGFuY2UyID0gKF8gPSArXykgKiBfLCBkcmFnKSA6IE1hdGguc3FydChjbGlja0Rpc3RhbmNlMik7XG4gIH07XG5cbiAgcmV0dXJuIGRyYWc7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4LCB5KSB7XG4gIHZhciBub2RlcztcblxuICBpZiAoeCA9PSBudWxsKSB4ID0gMDtcbiAgaWYgKHkgPT0gbnVsbCkgeSA9IDA7XG5cbiAgZnVuY3Rpb24gZm9yY2UoKSB7XG4gICAgdmFyIGksXG4gICAgICAgIG4gPSBub2Rlcy5sZW5ndGgsXG4gICAgICAgIG5vZGUsXG4gICAgICAgIHN4ID0gMCxcbiAgICAgICAgc3kgPSAwO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgbm9kZSA9IG5vZGVzW2ldLCBzeCArPSBub2RlLngsIHN5ICs9IG5vZGUueTtcbiAgICB9XG5cbiAgICBmb3IgKHN4ID0gc3ggLyBuIC0geCwgc3kgPSBzeSAvIG4gLSB5LCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgbm9kZSA9IG5vZGVzW2ldLCBub2RlLnggLT0gc3gsIG5vZGUueSAtPSBzeTtcbiAgICB9XG4gIH1cblxuICBmb3JjZS5pbml0aWFsaXplID0gZnVuY3Rpb24oXykge1xuICAgIG5vZGVzID0gXztcbiAgfTtcblxuICBmb3JjZS54ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHggPSArXywgZm9yY2UpIDogeDtcbiAgfTtcblxuICBmb3JjZS55ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHkgPSArXywgZm9yY2UpIDogeTtcbiAgfTtcblxuICByZXR1cm4gZm9yY2U7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4geDtcbiAgfTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gKE1hdGgucmFuZG9tKCkgLSAwLjUpICogMWUtNjtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGQpIHtcbiAgdmFyIHggPSArdGhpcy5feC5jYWxsKG51bGwsIGQpLFxuICAgICAgeSA9ICt0aGlzLl95LmNhbGwobnVsbCwgZCk7XG4gIHJldHVybiBhZGQodGhpcy5jb3Zlcih4LCB5KSwgeCwgeSwgZCk7XG59XG5cbmZ1bmN0aW9uIGFkZCh0cmVlLCB4LCB5LCBkKSB7XG4gIGlmIChpc05hTih4KSB8fCBpc05hTih5KSkgcmV0dXJuIHRyZWU7IC8vIGlnbm9yZSBpbnZhbGlkIHBvaW50c1xuXG4gIHZhciBwYXJlbnQsXG4gICAgICBub2RlID0gdHJlZS5fcm9vdCxcbiAgICAgIGxlYWYgPSB7ZGF0YTogZH0sXG4gICAgICB4MCA9IHRyZWUuX3gwLFxuICAgICAgeTAgPSB0cmVlLl95MCxcbiAgICAgIHgxID0gdHJlZS5feDEsXG4gICAgICB5MSA9IHRyZWUuX3kxLFxuICAgICAgeG0sXG4gICAgICB5bSxcbiAgICAgIHhwLFxuICAgICAgeXAsXG4gICAgICByaWdodCxcbiAgICAgIGJvdHRvbSxcbiAgICAgIGksXG4gICAgICBqO1xuXG4gIC8vIElmIHRoZSB0cmVlIGlzIGVtcHR5LCBpbml0aWFsaXplIHRoZSByb290IGFzIGEgbGVhZi5cbiAgaWYgKCFub2RlKSByZXR1cm4gdHJlZS5fcm9vdCA9IGxlYWYsIHRyZWU7XG5cbiAgLy8gRmluZCB0aGUgZXhpc3RpbmcgbGVhZiBmb3IgdGhlIG5ldyBwb2ludCwgb3IgYWRkIGl0LlxuICB3aGlsZSAobm9kZS5sZW5ndGgpIHtcbiAgICBpZiAocmlnaHQgPSB4ID49ICh4bSA9ICh4MCArIHgxKSAvIDIpKSB4MCA9IHhtOyBlbHNlIHgxID0geG07XG4gICAgaWYgKGJvdHRvbSA9IHkgPj0gKHltID0gKHkwICsgeTEpIC8gMikpIHkwID0geW07IGVsc2UgeTEgPSB5bTtcbiAgICBpZiAocGFyZW50ID0gbm9kZSwgIShub2RlID0gbm9kZVtpID0gYm90dG9tIDw8IDEgfCByaWdodF0pKSByZXR1cm4gcGFyZW50W2ldID0gbGVhZiwgdHJlZTtcbiAgfVxuXG4gIC8vIElzIHRoZSBuZXcgcG9pbnQgaXMgZXhhY3RseSBjb2luY2lkZW50IHdpdGggdGhlIGV4aXN0aW5nIHBvaW50P1xuICB4cCA9ICt0cmVlLl94LmNhbGwobnVsbCwgbm9kZS5kYXRhKTtcbiAgeXAgPSArdHJlZS5feS5jYWxsKG51bGwsIG5vZGUuZGF0YSk7XG4gIGlmICh4ID09PSB4cCAmJiB5ID09PSB5cCkgcmV0dXJuIGxlYWYubmV4dCA9IG5vZGUsIHBhcmVudCA/IHBhcmVudFtpXSA9IGxlYWYgOiB0cmVlLl9yb290ID0gbGVhZiwgdHJlZTtcblxuICAvLyBPdGhlcndpc2UsIHNwbGl0IHRoZSBsZWFmIG5vZGUgdW50aWwgdGhlIG9sZCBhbmQgbmV3IHBvaW50IGFyZSBzZXBhcmF0ZWQuXG4gIGRvIHtcbiAgICBwYXJlbnQgPSBwYXJlbnQgPyBwYXJlbnRbaV0gPSBuZXcgQXJyYXkoNCkgOiB0cmVlLl9yb290ID0gbmV3IEFycmF5KDQpO1xuICAgIGlmIChyaWdodCA9IHggPj0gKHhtID0gKHgwICsgeDEpIC8gMikpIHgwID0geG07IGVsc2UgeDEgPSB4bTtcbiAgICBpZiAoYm90dG9tID0geSA+PSAoeW0gPSAoeTAgKyB5MSkgLyAyKSkgeTAgPSB5bTsgZWxzZSB5MSA9IHltO1xuICB9IHdoaWxlICgoaSA9IGJvdHRvbSA8PCAxIHwgcmlnaHQpID09PSAoaiA9ICh5cCA+PSB5bSkgPDwgMSB8ICh4cCA+PSB4bSkpKTtcbiAgcmV0dXJuIHBhcmVudFtqXSA9IG5vZGUsIHBhcmVudFtpXSA9IGxlYWYsIHRyZWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhZGRBbGwoZGF0YSkge1xuICB2YXIgZCwgaSwgbiA9IGRhdGEubGVuZ3RoLFxuICAgICAgeCxcbiAgICAgIHksXG4gICAgICB4eiA9IG5ldyBBcnJheShuKSxcbiAgICAgIHl6ID0gbmV3IEFycmF5KG4pLFxuICAgICAgeDAgPSBJbmZpbml0eSxcbiAgICAgIHkwID0gSW5maW5pdHksXG4gICAgICB4MSA9IC1JbmZpbml0eSxcbiAgICAgIHkxID0gLUluZmluaXR5O1xuXG4gIC8vIENvbXB1dGUgdGhlIHBvaW50cyBhbmQgdGhlaXIgZXh0ZW50LlxuICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgaWYgKGlzTmFOKHggPSArdGhpcy5feC5jYWxsKG51bGwsIGQgPSBkYXRhW2ldKSkgfHwgaXNOYU4oeSA9ICt0aGlzLl95LmNhbGwobnVsbCwgZCkpKSBjb250aW51ZTtcbiAgICB4eltpXSA9IHg7XG4gICAgeXpbaV0gPSB5O1xuICAgIGlmICh4IDwgeDApIHgwID0geDtcbiAgICBpZiAoeCA+IHgxKSB4MSA9IHg7XG4gICAgaWYgKHkgPCB5MCkgeTAgPSB5O1xuICAgIGlmICh5ID4geTEpIHkxID0geTtcbiAgfVxuXG4gIC8vIElmIHRoZXJlIHdlcmUgbm8gKHZhbGlkKSBwb2ludHMsIGFib3J0LlxuICBpZiAoeDAgPiB4MSB8fCB5MCA+IHkxKSByZXR1cm4gdGhpcztcblxuICAvLyBFeHBhbmQgdGhlIHRyZWUgdG8gY292ZXIgdGhlIG5ldyBwb2ludHMuXG4gIHRoaXMuY292ZXIoeDAsIHkwKS5jb3Zlcih4MSwgeTEpO1xuXG4gIC8vIEFkZCB0aGUgbmV3IHBvaW50cy5cbiAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgIGFkZCh0aGlzLCB4eltpXSwgeXpbaV0sIGRhdGFbaV0pO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4LCB5KSB7XG4gIGlmIChpc05hTih4ID0gK3gpIHx8IGlzTmFOKHkgPSAreSkpIHJldHVybiB0aGlzOyAvLyBpZ25vcmUgaW52YWxpZCBwb2ludHNcblxuICB2YXIgeDAgPSB0aGlzLl94MCxcbiAgICAgIHkwID0gdGhpcy5feTAsXG4gICAgICB4MSA9IHRoaXMuX3gxLFxuICAgICAgeTEgPSB0aGlzLl95MTtcblxuICAvLyBJZiB0aGUgcXVhZHRyZWUgaGFzIG5vIGV4dGVudCwgaW5pdGlhbGl6ZSB0aGVtLlxuICAvLyBJbnRlZ2VyIGV4dGVudCBhcmUgbmVjZXNzYXJ5IHNvIHRoYXQgaWYgd2UgbGF0ZXIgZG91YmxlIHRoZSBleHRlbnQsXG4gIC8vIHRoZSBleGlzdGluZyBxdWFkcmFudCBib3VuZGFyaWVzIGRvbuKAmXQgY2hhbmdlIGR1ZSB0byBmbG9hdGluZyBwb2ludCBlcnJvciFcbiAgaWYgKGlzTmFOKHgwKSkge1xuICAgIHgxID0gKHgwID0gTWF0aC5mbG9vcih4KSkgKyAxO1xuICAgIHkxID0gKHkwID0gTWF0aC5mbG9vcih5KSkgKyAxO1xuICB9XG5cbiAgLy8gT3RoZXJ3aXNlLCBkb3VibGUgcmVwZWF0ZWRseSB0byBjb3Zlci5cbiAgZWxzZSB7XG4gICAgdmFyIHogPSB4MSAtIHgwLFxuICAgICAgICBub2RlID0gdGhpcy5fcm9vdCxcbiAgICAgICAgcGFyZW50LFxuICAgICAgICBpO1xuXG4gICAgd2hpbGUgKHgwID4geCB8fCB4ID49IHgxIHx8IHkwID4geSB8fCB5ID49IHkxKSB7XG4gICAgICBpID0gKHkgPCB5MCkgPDwgMSB8ICh4IDwgeDApO1xuICAgICAgcGFyZW50ID0gbmV3IEFycmF5KDQpLCBwYXJlbnRbaV0gPSBub2RlLCBub2RlID0gcGFyZW50LCB6ICo9IDI7XG4gICAgICBzd2l0Y2ggKGkpIHtcbiAgICAgICAgY2FzZSAwOiB4MSA9IHgwICsgeiwgeTEgPSB5MCArIHo7IGJyZWFrO1xuICAgICAgICBjYXNlIDE6IHgwID0geDEgLSB6LCB5MSA9IHkwICsgejsgYnJlYWs7XG4gICAgICAgIGNhc2UgMjogeDEgPSB4MCArIHosIHkwID0geTEgLSB6OyBicmVhaztcbiAgICAgICAgY2FzZSAzOiB4MCA9IHgxIC0geiwgeTAgPSB5MSAtIHo7IGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aGlzLl9yb290ICYmIHRoaXMuX3Jvb3QubGVuZ3RoKSB0aGlzLl9yb290ID0gbm9kZTtcbiAgfVxuXG4gIHRoaXMuX3gwID0geDA7XG4gIHRoaXMuX3kwID0geTA7XG4gIHRoaXMuX3gxID0geDE7XG4gIHRoaXMuX3kxID0geTE7XG4gIHJldHVybiB0aGlzO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obm9kZSwgeDAsIHkwLCB4MSwgeTEpIHtcbiAgdGhpcy5ub2RlID0gbm9kZTtcbiAgdGhpcy54MCA9IHgwO1xuICB0aGlzLnkwID0geTA7XG4gIHRoaXMueDEgPSB4MTtcbiAgdGhpcy55MSA9IHkxO1xufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIGRlZmF1bHRYKGQpIHtcbiAgcmV0dXJuIGRbMF07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKF8pIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodGhpcy5feCA9IF8sIHRoaXMpIDogdGhpcy5feDtcbn1cbiIsImV4cG9ydCBmdW5jdGlvbiBkZWZhdWx0WShkKSB7XG4gIHJldHVybiBkWzFdO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihfKSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRoaXMuX3kgPSBfLCB0aGlzKSA6IHRoaXMuX3k7XG59XG4iLCJpbXBvcnQgdHJlZV9hZGQsIHthZGRBbGwgYXMgdHJlZV9hZGRBbGx9IGZyb20gXCIuL2FkZC5qc1wiO1xuaW1wb3J0IHRyZWVfY292ZXIgZnJvbSBcIi4vY292ZXIuanNcIjtcbmltcG9ydCB0cmVlX2RhdGEgZnJvbSBcIi4vZGF0YS5qc1wiO1xuaW1wb3J0IHRyZWVfZXh0ZW50IGZyb20gXCIuL2V4dGVudC5qc1wiO1xuaW1wb3J0IHRyZWVfZmluZCBmcm9tIFwiLi9maW5kLmpzXCI7XG5pbXBvcnQgdHJlZV9yZW1vdmUsIHtyZW1vdmVBbGwgYXMgdHJlZV9yZW1vdmVBbGx9IGZyb20gXCIuL3JlbW92ZS5qc1wiO1xuaW1wb3J0IHRyZWVfcm9vdCBmcm9tIFwiLi9yb290LmpzXCI7XG5pbXBvcnQgdHJlZV9zaXplIGZyb20gXCIuL3NpemUuanNcIjtcbmltcG9ydCB0cmVlX3Zpc2l0IGZyb20gXCIuL3Zpc2l0LmpzXCI7XG5pbXBvcnQgdHJlZV92aXNpdEFmdGVyIGZyb20gXCIuL3Zpc2l0QWZ0ZXIuanNcIjtcbmltcG9ydCB0cmVlX3gsIHtkZWZhdWx0WH0gZnJvbSBcIi4veC5qc1wiO1xuaW1wb3J0IHRyZWVfeSwge2RlZmF1bHRZfSBmcm9tIFwiLi95LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHF1YWR0cmVlKG5vZGVzLCB4LCB5KSB7XG4gIHZhciB0cmVlID0gbmV3IFF1YWR0cmVlKHggPT0gbnVsbCA/IGRlZmF1bHRYIDogeCwgeSA9PSBudWxsID8gZGVmYXVsdFkgOiB5LCBOYU4sIE5hTiwgTmFOLCBOYU4pO1xuICByZXR1cm4gbm9kZXMgPT0gbnVsbCA/IHRyZWUgOiB0cmVlLmFkZEFsbChub2Rlcyk7XG59XG5cbmZ1bmN0aW9uIFF1YWR0cmVlKHgsIHksIHgwLCB5MCwgeDEsIHkxKSB7XG4gIHRoaXMuX3ggPSB4O1xuICB0aGlzLl95ID0geTtcbiAgdGhpcy5feDAgPSB4MDtcbiAgdGhpcy5feTAgPSB5MDtcbiAgdGhpcy5feDEgPSB4MTtcbiAgdGhpcy5feTEgPSB5MTtcbiAgdGhpcy5fcm9vdCA9IHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gbGVhZl9jb3B5KGxlYWYpIHtcbiAgdmFyIGNvcHkgPSB7ZGF0YTogbGVhZi5kYXRhfSwgbmV4dCA9IGNvcHk7XG4gIHdoaWxlIChsZWFmID0gbGVhZi5uZXh0KSBuZXh0ID0gbmV4dC5uZXh0ID0ge2RhdGE6IGxlYWYuZGF0YX07XG4gIHJldHVybiBjb3B5O1xufVxuXG52YXIgdHJlZVByb3RvID0gcXVhZHRyZWUucHJvdG90eXBlID0gUXVhZHRyZWUucHJvdG90eXBlO1xuXG50cmVlUHJvdG8uY29weSA9IGZ1bmN0aW9uKCkge1xuICB2YXIgY29weSA9IG5ldyBRdWFkdHJlZSh0aGlzLl94LCB0aGlzLl95LCB0aGlzLl94MCwgdGhpcy5feTAsIHRoaXMuX3gxLCB0aGlzLl95MSksXG4gICAgICBub2RlID0gdGhpcy5fcm9vdCxcbiAgICAgIG5vZGVzLFxuICAgICAgY2hpbGQ7XG5cbiAgaWYgKCFub2RlKSByZXR1cm4gY29weTtcblxuICBpZiAoIW5vZGUubGVuZ3RoKSByZXR1cm4gY29weS5fcm9vdCA9IGxlYWZfY29weShub2RlKSwgY29weTtcblxuICBub2RlcyA9IFt7c291cmNlOiBub2RlLCB0YXJnZXQ6IGNvcHkuX3Jvb3QgPSBuZXcgQXJyYXkoNCl9XTtcbiAgd2hpbGUgKG5vZGUgPSBub2Rlcy5wb3AoKSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgNDsgKytpKSB7XG4gICAgICBpZiAoY2hpbGQgPSBub2RlLnNvdXJjZVtpXSkge1xuICAgICAgICBpZiAoY2hpbGQubGVuZ3RoKSBub2Rlcy5wdXNoKHtzb3VyY2U6IGNoaWxkLCB0YXJnZXQ6IG5vZGUudGFyZ2V0W2ldID0gbmV3IEFycmF5KDQpfSk7XG4gICAgICAgIGVsc2Ugbm9kZS50YXJnZXRbaV0gPSBsZWFmX2NvcHkoY2hpbGQpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBjb3B5O1xufTtcblxudHJlZVByb3RvLmFkZCA9IHRyZWVfYWRkO1xudHJlZVByb3RvLmFkZEFsbCA9IHRyZWVfYWRkQWxsO1xudHJlZVByb3RvLmNvdmVyID0gdHJlZV9jb3ZlcjtcbnRyZWVQcm90by5kYXRhID0gdHJlZV9kYXRhO1xudHJlZVByb3RvLmV4dGVudCA9IHRyZWVfZXh0ZW50O1xudHJlZVByb3RvLmZpbmQgPSB0cmVlX2ZpbmQ7XG50cmVlUHJvdG8ucmVtb3ZlID0gdHJlZV9yZW1vdmU7XG50cmVlUHJvdG8ucmVtb3ZlQWxsID0gdHJlZV9yZW1vdmVBbGw7XG50cmVlUHJvdG8ucm9vdCA9IHRyZWVfcm9vdDtcbnRyZWVQcm90by5zaXplID0gdHJlZV9zaXplO1xudHJlZVByb3RvLnZpc2l0ID0gdHJlZV92aXNpdDtcbnRyZWVQcm90by52aXNpdEFmdGVyID0gdHJlZV92aXNpdEFmdGVyO1xudHJlZVByb3RvLnggPSB0cmVlX3g7XG50cmVlUHJvdG8ueSA9IHRyZWVfeTtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgZGF0YSA9IFtdO1xuICB0aGlzLnZpc2l0KGZ1bmN0aW9uKG5vZGUpIHtcbiAgICBpZiAoIW5vZGUubGVuZ3RoKSBkbyBkYXRhLnB1c2gobm9kZS5kYXRhKTsgd2hpbGUgKG5vZGUgPSBub2RlLm5leHQpXG4gIH0pO1xuICByZXR1cm4gZGF0YTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKF8pIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgID8gdGhpcy5jb3ZlcigrX1swXVswXSwgK19bMF1bMV0pLmNvdmVyKCtfWzFdWzBdLCArX1sxXVsxXSlcbiAgICAgIDogaXNOYU4odGhpcy5feDApID8gdW5kZWZpbmVkIDogW1t0aGlzLl94MCwgdGhpcy5feTBdLCBbdGhpcy5feDEsIHRoaXMuX3kxXV07XG59XG4iLCJpbXBvcnQgUXVhZCBmcm9tIFwiLi9xdWFkLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgsIHksIHJhZGl1cykge1xuICB2YXIgZGF0YSxcbiAgICAgIHgwID0gdGhpcy5feDAsXG4gICAgICB5MCA9IHRoaXMuX3kwLFxuICAgICAgeDEsXG4gICAgICB5MSxcbiAgICAgIHgyLFxuICAgICAgeTIsXG4gICAgICB4MyA9IHRoaXMuX3gxLFxuICAgICAgeTMgPSB0aGlzLl95MSxcbiAgICAgIHF1YWRzID0gW10sXG4gICAgICBub2RlID0gdGhpcy5fcm9vdCxcbiAgICAgIHEsXG4gICAgICBpO1xuXG4gIGlmIChub2RlKSBxdWFkcy5wdXNoKG5ldyBRdWFkKG5vZGUsIHgwLCB5MCwgeDMsIHkzKSk7XG4gIGlmIChyYWRpdXMgPT0gbnVsbCkgcmFkaXVzID0gSW5maW5pdHk7XG4gIGVsc2Uge1xuICAgIHgwID0geCAtIHJhZGl1cywgeTAgPSB5IC0gcmFkaXVzO1xuICAgIHgzID0geCArIHJhZGl1cywgeTMgPSB5ICsgcmFkaXVzO1xuICAgIHJhZGl1cyAqPSByYWRpdXM7XG4gIH1cblxuICB3aGlsZSAocSA9IHF1YWRzLnBvcCgpKSB7XG5cbiAgICAvLyBTdG9wIHNlYXJjaGluZyBpZiB0aGlzIHF1YWRyYW50IGNhbuKAmXQgY29udGFpbiBhIGNsb3NlciBub2RlLlxuICAgIGlmICghKG5vZGUgPSBxLm5vZGUpXG4gICAgICAgIHx8ICh4MSA9IHEueDApID4geDNcbiAgICAgICAgfHwgKHkxID0gcS55MCkgPiB5M1xuICAgICAgICB8fCAoeDIgPSBxLngxKSA8IHgwXG4gICAgICAgIHx8ICh5MiA9IHEueTEpIDwgeTApIGNvbnRpbnVlO1xuXG4gICAgLy8gQmlzZWN0IHRoZSBjdXJyZW50IHF1YWRyYW50LlxuICAgIGlmIChub2RlLmxlbmd0aCkge1xuICAgICAgdmFyIHhtID0gKHgxICsgeDIpIC8gMixcbiAgICAgICAgICB5bSA9ICh5MSArIHkyKSAvIDI7XG5cbiAgICAgIHF1YWRzLnB1c2goXG4gICAgICAgIG5ldyBRdWFkKG5vZGVbM10sIHhtLCB5bSwgeDIsIHkyKSxcbiAgICAgICAgbmV3IFF1YWQobm9kZVsyXSwgeDEsIHltLCB4bSwgeTIpLFxuICAgICAgICBuZXcgUXVhZChub2RlWzFdLCB4bSwgeTEsIHgyLCB5bSksXG4gICAgICAgIG5ldyBRdWFkKG5vZGVbMF0sIHgxLCB5MSwgeG0sIHltKVxuICAgICAgKTtcblxuICAgICAgLy8gVmlzaXQgdGhlIGNsb3Nlc3QgcXVhZHJhbnQgZmlyc3QuXG4gICAgICBpZiAoaSA9ICh5ID49IHltKSA8PCAxIHwgKHggPj0geG0pKSB7XG4gICAgICAgIHEgPSBxdWFkc1txdWFkcy5sZW5ndGggLSAxXTtcbiAgICAgICAgcXVhZHNbcXVhZHMubGVuZ3RoIC0gMV0gPSBxdWFkc1txdWFkcy5sZW5ndGggLSAxIC0gaV07XG4gICAgICAgIHF1YWRzW3F1YWRzLmxlbmd0aCAtIDEgLSBpXSA9IHE7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gVmlzaXQgdGhpcyBwb2ludC4gKFZpc2l0aW5nIGNvaW5jaWRlbnQgcG9pbnRzIGlzbuKAmXQgbmVjZXNzYXJ5ISlcbiAgICBlbHNlIHtcbiAgICAgIHZhciBkeCA9IHggLSArdGhpcy5feC5jYWxsKG51bGwsIG5vZGUuZGF0YSksXG4gICAgICAgICAgZHkgPSB5IC0gK3RoaXMuX3kuY2FsbChudWxsLCBub2RlLmRhdGEpLFxuICAgICAgICAgIGQyID0gZHggKiBkeCArIGR5ICogZHk7XG4gICAgICBpZiAoZDIgPCByYWRpdXMpIHtcbiAgICAgICAgdmFyIGQgPSBNYXRoLnNxcnQocmFkaXVzID0gZDIpO1xuICAgICAgICB4MCA9IHggLSBkLCB5MCA9IHkgLSBkO1xuICAgICAgICB4MyA9IHggKyBkLCB5MyA9IHkgKyBkO1xuICAgICAgICBkYXRhID0gbm9kZS5kYXRhO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBkYXRhO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oZCkge1xuICBpZiAoaXNOYU4oeCA9ICt0aGlzLl94LmNhbGwobnVsbCwgZCkpIHx8IGlzTmFOKHkgPSArdGhpcy5feS5jYWxsKG51bGwsIGQpKSkgcmV0dXJuIHRoaXM7IC8vIGlnbm9yZSBpbnZhbGlkIHBvaW50c1xuXG4gIHZhciBwYXJlbnQsXG4gICAgICBub2RlID0gdGhpcy5fcm9vdCxcbiAgICAgIHJldGFpbmVyLFxuICAgICAgcHJldmlvdXMsXG4gICAgICBuZXh0LFxuICAgICAgeDAgPSB0aGlzLl94MCxcbiAgICAgIHkwID0gdGhpcy5feTAsXG4gICAgICB4MSA9IHRoaXMuX3gxLFxuICAgICAgeTEgPSB0aGlzLl95MSxcbiAgICAgIHgsXG4gICAgICB5LFxuICAgICAgeG0sXG4gICAgICB5bSxcbiAgICAgIHJpZ2h0LFxuICAgICAgYm90dG9tLFxuICAgICAgaSxcbiAgICAgIGo7XG5cbiAgLy8gSWYgdGhlIHRyZWUgaXMgZW1wdHksIGluaXRpYWxpemUgdGhlIHJvb3QgYXMgYSBsZWFmLlxuICBpZiAoIW5vZGUpIHJldHVybiB0aGlzO1xuXG4gIC8vIEZpbmQgdGhlIGxlYWYgbm9kZSBmb3IgdGhlIHBvaW50LlxuICAvLyBXaGlsZSBkZXNjZW5kaW5nLCBhbHNvIHJldGFpbiB0aGUgZGVlcGVzdCBwYXJlbnQgd2l0aCBhIG5vbi1yZW1vdmVkIHNpYmxpbmcuXG4gIGlmIChub2RlLmxlbmd0aCkgd2hpbGUgKHRydWUpIHtcbiAgICBpZiAocmlnaHQgPSB4ID49ICh4bSA9ICh4MCArIHgxKSAvIDIpKSB4MCA9IHhtOyBlbHNlIHgxID0geG07XG4gICAgaWYgKGJvdHRvbSA9IHkgPj0gKHltID0gKHkwICsgeTEpIC8gMikpIHkwID0geW07IGVsc2UgeTEgPSB5bTtcbiAgICBpZiAoIShwYXJlbnQgPSBub2RlLCBub2RlID0gbm9kZVtpID0gYm90dG9tIDw8IDEgfCByaWdodF0pKSByZXR1cm4gdGhpcztcbiAgICBpZiAoIW5vZGUubGVuZ3RoKSBicmVhaztcbiAgICBpZiAocGFyZW50WyhpICsgMSkgJiAzXSB8fCBwYXJlbnRbKGkgKyAyKSAmIDNdIHx8IHBhcmVudFsoaSArIDMpICYgM10pIHJldGFpbmVyID0gcGFyZW50LCBqID0gaTtcbiAgfVxuXG4gIC8vIEZpbmQgdGhlIHBvaW50IHRvIHJlbW92ZS5cbiAgd2hpbGUgKG5vZGUuZGF0YSAhPT0gZCkgaWYgKCEocHJldmlvdXMgPSBub2RlLCBub2RlID0gbm9kZS5uZXh0KSkgcmV0dXJuIHRoaXM7XG4gIGlmIChuZXh0ID0gbm9kZS5uZXh0KSBkZWxldGUgbm9kZS5uZXh0O1xuXG4gIC8vIElmIHRoZXJlIGFyZSBtdWx0aXBsZSBjb2luY2lkZW50IHBvaW50cywgcmVtb3ZlIGp1c3QgdGhlIHBvaW50LlxuICBpZiAocHJldmlvdXMpIHJldHVybiAobmV4dCA/IHByZXZpb3VzLm5leHQgPSBuZXh0IDogZGVsZXRlIHByZXZpb3VzLm5leHQpLCB0aGlzO1xuXG4gIC8vIElmIHRoaXMgaXMgdGhlIHJvb3QgcG9pbnQsIHJlbW92ZSBpdC5cbiAgaWYgKCFwYXJlbnQpIHJldHVybiB0aGlzLl9yb290ID0gbmV4dCwgdGhpcztcblxuICAvLyBSZW1vdmUgdGhpcyBsZWFmLlxuICBuZXh0ID8gcGFyZW50W2ldID0gbmV4dCA6IGRlbGV0ZSBwYXJlbnRbaV07XG5cbiAgLy8gSWYgdGhlIHBhcmVudCBub3cgY29udGFpbnMgZXhhY3RseSBvbmUgbGVhZiwgY29sbGFwc2Ugc3VwZXJmbHVvdXMgcGFyZW50cy5cbiAgaWYgKChub2RlID0gcGFyZW50WzBdIHx8IHBhcmVudFsxXSB8fCBwYXJlbnRbMl0gfHwgcGFyZW50WzNdKVxuICAgICAgJiYgbm9kZSA9PT0gKHBhcmVudFszXSB8fCBwYXJlbnRbMl0gfHwgcGFyZW50WzFdIHx8IHBhcmVudFswXSlcbiAgICAgICYmICFub2RlLmxlbmd0aCkge1xuICAgIGlmIChyZXRhaW5lcikgcmV0YWluZXJbal0gPSBub2RlO1xuICAgIGVsc2UgdGhpcy5fcm9vdCA9IG5vZGU7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZUFsbChkYXRhKSB7XG4gIGZvciAodmFyIGkgPSAwLCBuID0gZGF0YS5sZW5ndGg7IGkgPCBuOyArK2kpIHRoaXMucmVtb3ZlKGRhdGFbaV0pO1xuICByZXR1cm4gdGhpcztcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5fcm9vdDtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgc2l6ZSA9IDA7XG4gIHRoaXMudmlzaXQoZnVuY3Rpb24obm9kZSkge1xuICAgIGlmICghbm9kZS5sZW5ndGgpIGRvICsrc2l6ZTsgd2hpbGUgKG5vZGUgPSBub2RlLm5leHQpXG4gIH0pO1xuICByZXR1cm4gc2l6ZTtcbn1cbiIsImltcG9ydCBRdWFkIGZyb20gXCIuL3F1YWQuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgdmFyIHF1YWRzID0gW10sIHEsIG5vZGUgPSB0aGlzLl9yb290LCBjaGlsZCwgeDAsIHkwLCB4MSwgeTE7XG4gIGlmIChub2RlKSBxdWFkcy5wdXNoKG5ldyBRdWFkKG5vZGUsIHRoaXMuX3gwLCB0aGlzLl95MCwgdGhpcy5feDEsIHRoaXMuX3kxKSk7XG4gIHdoaWxlIChxID0gcXVhZHMucG9wKCkpIHtcbiAgICBpZiAoIWNhbGxiYWNrKG5vZGUgPSBxLm5vZGUsIHgwID0gcS54MCwgeTAgPSBxLnkwLCB4MSA9IHEueDEsIHkxID0gcS55MSkgJiYgbm9kZS5sZW5ndGgpIHtcbiAgICAgIHZhciB4bSA9ICh4MCArIHgxKSAvIDIsIHltID0gKHkwICsgeTEpIC8gMjtcbiAgICAgIGlmIChjaGlsZCA9IG5vZGVbM10pIHF1YWRzLnB1c2gobmV3IFF1YWQoY2hpbGQsIHhtLCB5bSwgeDEsIHkxKSk7XG4gICAgICBpZiAoY2hpbGQgPSBub2RlWzJdKSBxdWFkcy5wdXNoKG5ldyBRdWFkKGNoaWxkLCB4MCwgeW0sIHhtLCB5MSkpO1xuICAgICAgaWYgKGNoaWxkID0gbm9kZVsxXSkgcXVhZHMucHVzaChuZXcgUXVhZChjaGlsZCwgeG0sIHkwLCB4MSwgeW0pKTtcbiAgICAgIGlmIChjaGlsZCA9IG5vZGVbMF0pIHF1YWRzLnB1c2gobmV3IFF1YWQoY2hpbGQsIHgwLCB5MCwgeG0sIHltKSk7XG4gICAgfVxuICB9XG4gIHJldHVybiB0aGlzO1xufVxuIiwiaW1wb3J0IFF1YWQgZnJvbSBcIi4vcXVhZC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjYWxsYmFjaykge1xuICB2YXIgcXVhZHMgPSBbXSwgbmV4dCA9IFtdLCBxO1xuICBpZiAodGhpcy5fcm9vdCkgcXVhZHMucHVzaChuZXcgUXVhZCh0aGlzLl9yb290LCB0aGlzLl94MCwgdGhpcy5feTAsIHRoaXMuX3gxLCB0aGlzLl95MSkpO1xuICB3aGlsZSAocSA9IHF1YWRzLnBvcCgpKSB7XG4gICAgdmFyIG5vZGUgPSBxLm5vZGU7XG4gICAgaWYgKG5vZGUubGVuZ3RoKSB7XG4gICAgICB2YXIgY2hpbGQsIHgwID0gcS54MCwgeTAgPSBxLnkwLCB4MSA9IHEueDEsIHkxID0gcS55MSwgeG0gPSAoeDAgKyB4MSkgLyAyLCB5bSA9ICh5MCArIHkxKSAvIDI7XG4gICAgICBpZiAoY2hpbGQgPSBub2RlWzBdKSBxdWFkcy5wdXNoKG5ldyBRdWFkKGNoaWxkLCB4MCwgeTAsIHhtLCB5bSkpO1xuICAgICAgaWYgKGNoaWxkID0gbm9kZVsxXSkgcXVhZHMucHVzaChuZXcgUXVhZChjaGlsZCwgeG0sIHkwLCB4MSwgeW0pKTtcbiAgICAgIGlmIChjaGlsZCA9IG5vZGVbMl0pIHF1YWRzLnB1c2gobmV3IFF1YWQoY2hpbGQsIHgwLCB5bSwgeG0sIHkxKSk7XG4gICAgICBpZiAoY2hpbGQgPSBub2RlWzNdKSBxdWFkcy5wdXNoKG5ldyBRdWFkKGNoaWxkLCB4bSwgeW0sIHgxLCB5MSkpO1xuICAgIH1cbiAgICBuZXh0LnB1c2gocSk7XG4gIH1cbiAgd2hpbGUgKHEgPSBuZXh0LnBvcCgpKSB7XG4gICAgY2FsbGJhY2socS5ub2RlLCBxLngwLCBxLnkwLCBxLngxLCBxLnkxKTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn1cbiIsImltcG9ydCBjb25zdGFudCBmcm9tIFwiLi9jb25zdGFudFwiO1xuaW1wb3J0IGppZ2dsZSBmcm9tIFwiLi9qaWdnbGVcIjtcbmltcG9ydCB7bWFwfSBmcm9tIFwiZDMtY29sbGVjdGlvblwiO1xuXG5mdW5jdGlvbiBpbmRleChkKSB7XG4gIHJldHVybiBkLmluZGV4O1xufVxuXG5mdW5jdGlvbiBmaW5kKG5vZGVCeUlkLCBub2RlSWQpIHtcbiAgdmFyIG5vZGUgPSBub2RlQnlJZC5nZXQobm9kZUlkKTtcbiAgaWYgKCFub2RlKSB0aHJvdyBuZXcgRXJyb3IoXCJtaXNzaW5nOiBcIiArIG5vZGVJZCk7XG4gIHJldHVybiBub2RlO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihsaW5rcykge1xuICB2YXIgaWQgPSBpbmRleCxcbiAgICAgIHN0cmVuZ3RoID0gZGVmYXVsdFN0cmVuZ3RoLFxuICAgICAgc3RyZW5ndGhzLFxuICAgICAgZGlzdGFuY2UgPSBjb25zdGFudCgzMCksXG4gICAgICBkaXN0YW5jZXMsXG4gICAgICBub2RlcyxcbiAgICAgIGNvdW50LFxuICAgICAgYmlhcyxcbiAgICAgIGl0ZXJhdGlvbnMgPSAxO1xuXG4gIGlmIChsaW5rcyA9PSBudWxsKSBsaW5rcyA9IFtdO1xuXG4gIGZ1bmN0aW9uIGRlZmF1bHRTdHJlbmd0aChsaW5rKSB7XG4gICAgcmV0dXJuIDEgLyBNYXRoLm1pbihjb3VudFtsaW5rLnNvdXJjZS5pbmRleF0sIGNvdW50W2xpbmsudGFyZ2V0LmluZGV4XSk7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JjZShhbHBoYSkge1xuICAgIGZvciAodmFyIGsgPSAwLCBuID0gbGlua3MubGVuZ3RoOyBrIDwgaXRlcmF0aW9uczsgKytrKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbGluaywgc291cmNlLCB0YXJnZXQsIHgsIHksIGwsIGI7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgbGluayA9IGxpbmtzW2ldLCBzb3VyY2UgPSBsaW5rLnNvdXJjZSwgdGFyZ2V0ID0gbGluay50YXJnZXQ7XG4gICAgICAgIHggPSB0YXJnZXQueCArIHRhcmdldC52eCAtIHNvdXJjZS54IC0gc291cmNlLnZ4IHx8IGppZ2dsZSgpO1xuICAgICAgICB5ID0gdGFyZ2V0LnkgKyB0YXJnZXQudnkgLSBzb3VyY2UueSAtIHNvdXJjZS52eSB8fCBqaWdnbGUoKTtcbiAgICAgICAgbCA9IE1hdGguc3FydCh4ICogeCArIHkgKiB5KTtcbiAgICAgICAgbCA9IChsIC0gZGlzdGFuY2VzW2ldKSAvIGwgKiBhbHBoYSAqIHN0cmVuZ3Roc1tpXTtcbiAgICAgICAgeCAqPSBsLCB5ICo9IGw7XG4gICAgICAgIHRhcmdldC52eCAtPSB4ICogKGIgPSBiaWFzW2ldKTtcbiAgICAgICAgdGFyZ2V0LnZ5IC09IHkgKiBiO1xuICAgICAgICBzb3VyY2UudnggKz0geCAqIChiID0gMSAtIGIpO1xuICAgICAgICBzb3VyY2UudnkgKz0geSAqIGI7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaW5pdGlhbGl6ZSgpIHtcbiAgICBpZiAoIW5vZGVzKSByZXR1cm47XG5cbiAgICB2YXIgaSxcbiAgICAgICAgbiA9IG5vZGVzLmxlbmd0aCxcbiAgICAgICAgbSA9IGxpbmtzLmxlbmd0aCxcbiAgICAgICAgbm9kZUJ5SWQgPSBtYXAobm9kZXMsIGlkKSxcbiAgICAgICAgbGluaztcblxuICAgIGZvciAoaSA9IDAsIGNvdW50ID0gbmV3IEFycmF5KG4pOyBpIDwgbTsgKytpKSB7XG4gICAgICBsaW5rID0gbGlua3NbaV0sIGxpbmsuaW5kZXggPSBpO1xuICAgICAgaWYgKHR5cGVvZiBsaW5rLnNvdXJjZSAhPT0gXCJvYmplY3RcIikgbGluay5zb3VyY2UgPSBmaW5kKG5vZGVCeUlkLCBsaW5rLnNvdXJjZSk7XG4gICAgICBpZiAodHlwZW9mIGxpbmsudGFyZ2V0ICE9PSBcIm9iamVjdFwiKSBsaW5rLnRhcmdldCA9IGZpbmQobm9kZUJ5SWQsIGxpbmsudGFyZ2V0KTtcbiAgICAgIGNvdW50W2xpbmsuc291cmNlLmluZGV4XSA9IChjb3VudFtsaW5rLnNvdXJjZS5pbmRleF0gfHwgMCkgKyAxO1xuICAgICAgY291bnRbbGluay50YXJnZXQuaW5kZXhdID0gKGNvdW50W2xpbmsudGFyZ2V0LmluZGV4XSB8fCAwKSArIDE7XG4gICAgfVxuXG4gICAgZm9yIChpID0gMCwgYmlhcyA9IG5ldyBBcnJheShtKTsgaSA8IG07ICsraSkge1xuICAgICAgbGluayA9IGxpbmtzW2ldLCBiaWFzW2ldID0gY291bnRbbGluay5zb3VyY2UuaW5kZXhdIC8gKGNvdW50W2xpbmsuc291cmNlLmluZGV4XSArIGNvdW50W2xpbmsudGFyZ2V0LmluZGV4XSk7XG4gICAgfVxuXG4gICAgc3RyZW5ndGhzID0gbmV3IEFycmF5KG0pLCBpbml0aWFsaXplU3RyZW5ndGgoKTtcbiAgICBkaXN0YW5jZXMgPSBuZXcgQXJyYXkobSksIGluaXRpYWxpemVEaXN0YW5jZSgpO1xuICB9XG5cbiAgZnVuY3Rpb24gaW5pdGlhbGl6ZVN0cmVuZ3RoKCkge1xuICAgIGlmICghbm9kZXMpIHJldHVybjtcblxuICAgIGZvciAodmFyIGkgPSAwLCBuID0gbGlua3MubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgICBzdHJlbmd0aHNbaV0gPSArc3RyZW5ndGgobGlua3NbaV0sIGksIGxpbmtzKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpbml0aWFsaXplRGlzdGFuY2UoKSB7XG4gICAgaWYgKCFub2RlcykgcmV0dXJuO1xuXG4gICAgZm9yICh2YXIgaSA9IDAsIG4gPSBsaW5rcy5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICAgIGRpc3RhbmNlc1tpXSA9ICtkaXN0YW5jZShsaW5rc1tpXSwgaSwgbGlua3MpO1xuICAgIH1cbiAgfVxuXG4gIGZvcmNlLmluaXRpYWxpemUgPSBmdW5jdGlvbihfKSB7XG4gICAgbm9kZXMgPSBfO1xuICAgIGluaXRpYWxpemUoKTtcbiAgfTtcblxuICBmb3JjZS5saW5rcyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChsaW5rcyA9IF8sIGluaXRpYWxpemUoKSwgZm9yY2UpIDogbGlua3M7XG4gIH07XG5cbiAgZm9yY2UuaWQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoaWQgPSBfLCBmb3JjZSkgOiBpZDtcbiAgfTtcblxuICBmb3JjZS5pdGVyYXRpb25zID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGl0ZXJhdGlvbnMgPSArXywgZm9yY2UpIDogaXRlcmF0aW9ucztcbiAgfTtcblxuICBmb3JjZS5zdHJlbmd0aCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzdHJlbmd0aCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBpbml0aWFsaXplU3RyZW5ndGgoKSwgZm9yY2UpIDogc3RyZW5ndGg7XG4gIH07XG5cbiAgZm9yY2UuZGlzdGFuY2UgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZGlzdGFuY2UgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgaW5pdGlhbGl6ZURpc3RhbmNlKCksIGZvcmNlKSA6IGRpc3RhbmNlO1xuICB9O1xuXG4gIHJldHVybiBmb3JjZTtcbn1cbiIsInZhciBmcmFtZSA9IDAsIC8vIGlzIGFuIGFuaW1hdGlvbiBmcmFtZSBwZW5kaW5nP1xuICAgIHRpbWVvdXQgPSAwLCAvLyBpcyBhIHRpbWVvdXQgcGVuZGluZz9cbiAgICBpbnRlcnZhbCA9IDAsIC8vIGFyZSBhbnkgdGltZXJzIGFjdGl2ZT9cbiAgICBwb2tlRGVsYXkgPSAxMDAwLCAvLyBob3cgZnJlcXVlbnRseSB3ZSBjaGVjayBmb3IgY2xvY2sgc2tld1xuICAgIHRhc2tIZWFkLFxuICAgIHRhc2tUYWlsLFxuICAgIGNsb2NrTGFzdCA9IDAsXG4gICAgY2xvY2tOb3cgPSAwLFxuICAgIGNsb2NrU2tldyA9IDAsXG4gICAgY2xvY2sgPSB0eXBlb2YgcGVyZm9ybWFuY2UgPT09IFwib2JqZWN0XCIgJiYgcGVyZm9ybWFuY2Uubm93ID8gcGVyZm9ybWFuY2UgOiBEYXRlLFxuICAgIHNldEZyYW1lID0gdHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIiAmJiB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lID8gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZS5iaW5kKHdpbmRvdykgOiBmdW5jdGlvbihmKSB7IHNldFRpbWVvdXQoZiwgMTcpOyB9O1xuXG5leHBvcnQgZnVuY3Rpb24gbm93KCkge1xuICByZXR1cm4gY2xvY2tOb3cgfHwgKHNldEZyYW1lKGNsZWFyTm93KSwgY2xvY2tOb3cgPSBjbG9jay5ub3coKSArIGNsb2NrU2tldyk7XG59XG5cbmZ1bmN0aW9uIGNsZWFyTm93KCkge1xuICBjbG9ja05vdyA9IDA7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBUaW1lcigpIHtcbiAgdGhpcy5fY2FsbCA9XG4gIHRoaXMuX3RpbWUgPVxuICB0aGlzLl9uZXh0ID0gbnVsbDtcbn1cblxuVGltZXIucHJvdG90eXBlID0gdGltZXIucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogVGltZXIsXG4gIHJlc3RhcnQ6IGZ1bmN0aW9uKGNhbGxiYWNrLCBkZWxheSwgdGltZSkge1xuICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcImNhbGxiYWNrIGlzIG5vdCBhIGZ1bmN0aW9uXCIpO1xuICAgIHRpbWUgPSAodGltZSA9PSBudWxsID8gbm93KCkgOiArdGltZSkgKyAoZGVsYXkgPT0gbnVsbCA/IDAgOiArZGVsYXkpO1xuICAgIGlmICghdGhpcy5fbmV4dCAmJiB0YXNrVGFpbCAhPT0gdGhpcykge1xuICAgICAgaWYgKHRhc2tUYWlsKSB0YXNrVGFpbC5fbmV4dCA9IHRoaXM7XG4gICAgICBlbHNlIHRhc2tIZWFkID0gdGhpcztcbiAgICAgIHRhc2tUYWlsID0gdGhpcztcbiAgICB9XG4gICAgdGhpcy5fY2FsbCA9IGNhbGxiYWNrO1xuICAgIHRoaXMuX3RpbWUgPSB0aW1lO1xuICAgIHNsZWVwKCk7XG4gIH0sXG4gIHN0b3A6IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLl9jYWxsKSB7XG4gICAgICB0aGlzLl9jYWxsID0gbnVsbDtcbiAgICAgIHRoaXMuX3RpbWUgPSBJbmZpbml0eTtcbiAgICAgIHNsZWVwKCk7XG4gICAgfVxuICB9XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gdGltZXIoY2FsbGJhY2ssIGRlbGF5LCB0aW1lKSB7XG4gIHZhciB0ID0gbmV3IFRpbWVyO1xuICB0LnJlc3RhcnQoY2FsbGJhY2ssIGRlbGF5LCB0aW1lKTtcbiAgcmV0dXJuIHQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0aW1lckZsdXNoKCkge1xuICBub3coKTsgLy8gR2V0IHRoZSBjdXJyZW50IHRpbWUsIGlmIG5vdCBhbHJlYWR5IHNldC5cbiAgKytmcmFtZTsgLy8gUHJldGVuZCB3ZeKAmXZlIHNldCBhbiBhbGFybSwgaWYgd2UgaGF2ZW7igJl0IGFscmVhZHkuXG4gIHZhciB0ID0gdGFza0hlYWQsIGU7XG4gIHdoaWxlICh0KSB7XG4gICAgaWYgKChlID0gY2xvY2tOb3cgLSB0Ll90aW1lKSA+PSAwKSB0Ll9jYWxsLmNhbGwobnVsbCwgZSk7XG4gICAgdCA9IHQuX25leHQ7XG4gIH1cbiAgLS1mcmFtZTtcbn1cblxuZnVuY3Rpb24gd2FrZSgpIHtcbiAgY2xvY2tOb3cgPSAoY2xvY2tMYXN0ID0gY2xvY2subm93KCkpICsgY2xvY2tTa2V3O1xuICBmcmFtZSA9IHRpbWVvdXQgPSAwO1xuICB0cnkge1xuICAgIHRpbWVyRmx1c2goKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBmcmFtZSA9IDA7XG4gICAgbmFwKCk7XG4gICAgY2xvY2tOb3cgPSAwO1xuICB9XG59XG5cbmZ1bmN0aW9uIHBva2UoKSB7XG4gIHZhciBub3cgPSBjbG9jay5ub3coKSwgZGVsYXkgPSBub3cgLSBjbG9ja0xhc3Q7XG4gIGlmIChkZWxheSA+IHBva2VEZWxheSkgY2xvY2tTa2V3IC09IGRlbGF5LCBjbG9ja0xhc3QgPSBub3c7XG59XG5cbmZ1bmN0aW9uIG5hcCgpIHtcbiAgdmFyIHQwLCB0MSA9IHRhc2tIZWFkLCB0MiwgdGltZSA9IEluZmluaXR5O1xuICB3aGlsZSAodDEpIHtcbiAgICBpZiAodDEuX2NhbGwpIHtcbiAgICAgIGlmICh0aW1lID4gdDEuX3RpbWUpIHRpbWUgPSB0MS5fdGltZTtcbiAgICAgIHQwID0gdDEsIHQxID0gdDEuX25leHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHQyID0gdDEuX25leHQsIHQxLl9uZXh0ID0gbnVsbDtcbiAgICAgIHQxID0gdDAgPyB0MC5fbmV4dCA9IHQyIDogdGFza0hlYWQgPSB0MjtcbiAgICB9XG4gIH1cbiAgdGFza1RhaWwgPSB0MDtcbiAgc2xlZXAodGltZSk7XG59XG5cbmZ1bmN0aW9uIHNsZWVwKHRpbWUpIHtcbiAgaWYgKGZyYW1lKSByZXR1cm47IC8vIFNvb25lc3QgYWxhcm0gYWxyZWFkeSBzZXQsIG9yIHdpbGwgYmUuXG4gIGlmICh0aW1lb3V0KSB0aW1lb3V0ID0gY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICB2YXIgZGVsYXkgPSB0aW1lIC0gY2xvY2tOb3c7IC8vIFN0cmljdGx5IGxlc3MgdGhhbiBpZiB3ZSByZWNvbXB1dGVkIGNsb2NrTm93LlxuICBpZiAoZGVsYXkgPiAyNCkge1xuICAgIGlmICh0aW1lIDwgSW5maW5pdHkpIHRpbWVvdXQgPSBzZXRUaW1lb3V0KHdha2UsIHRpbWUgLSBjbG9jay5ub3coKSAtIGNsb2NrU2tldyk7XG4gICAgaWYgKGludGVydmFsKSBpbnRlcnZhbCA9IGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWwpO1xuICB9IGVsc2Uge1xuICAgIGlmICghaW50ZXJ2YWwpIGNsb2NrTGFzdCA9IGNsb2NrLm5vdygpLCBpbnRlcnZhbCA9IHNldEludGVydmFsKHBva2UsIHBva2VEZWxheSk7XG4gICAgZnJhbWUgPSAxLCBzZXRGcmFtZSh3YWtlKTtcbiAgfVxufVxuIiwiaW1wb3J0IHtkaXNwYXRjaH0gZnJvbSBcImQzLWRpc3BhdGNoXCI7XG5pbXBvcnQge21hcH0gZnJvbSBcImQzLWNvbGxlY3Rpb25cIjtcbmltcG9ydCB7dGltZXJ9IGZyb20gXCJkMy10aW1lclwiO1xuXG5leHBvcnQgZnVuY3Rpb24geChkKSB7XG4gIHJldHVybiBkLng7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB5KGQpIHtcbiAgcmV0dXJuIGQueTtcbn1cblxudmFyIGluaXRpYWxSYWRpdXMgPSAxMCxcbiAgICBpbml0aWFsQW5nbGUgPSBNYXRoLlBJICogKDMgLSBNYXRoLnNxcnQoNSkpO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihub2Rlcykge1xuICB2YXIgc2ltdWxhdGlvbixcbiAgICAgIGFscGhhID0gMSxcbiAgICAgIGFscGhhTWluID0gMC4wMDEsXG4gICAgICBhbHBoYURlY2F5ID0gMSAtIE1hdGgucG93KGFscGhhTWluLCAxIC8gMzAwKSxcbiAgICAgIGFscGhhVGFyZ2V0ID0gMCxcbiAgICAgIHZlbG9jaXR5RGVjYXkgPSAwLjYsXG4gICAgICBmb3JjZXMgPSBtYXAoKSxcbiAgICAgIHN0ZXBwZXIgPSB0aW1lcihzdGVwKSxcbiAgICAgIGV2ZW50ID0gZGlzcGF0Y2goXCJ0aWNrXCIsIFwiZW5kXCIpO1xuXG4gIGlmIChub2RlcyA9PSBudWxsKSBub2RlcyA9IFtdO1xuXG4gIGZ1bmN0aW9uIHN0ZXAoKSB7XG4gICAgdGljaygpO1xuICAgIGV2ZW50LmNhbGwoXCJ0aWNrXCIsIHNpbXVsYXRpb24pO1xuICAgIGlmIChhbHBoYSA8IGFscGhhTWluKSB7XG4gICAgICBzdGVwcGVyLnN0b3AoKTtcbiAgICAgIGV2ZW50LmNhbGwoXCJlbmRcIiwgc2ltdWxhdGlvbik7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdGljayhpdGVyYXRpb25zKSB7XG4gICAgdmFyIGksIG4gPSBub2Rlcy5sZW5ndGgsIG5vZGU7XG5cbiAgICBpZiAoaXRlcmF0aW9ucyA9PT0gdW5kZWZpbmVkKSBpdGVyYXRpb25zID0gMTtcblxuICAgIGZvciAodmFyIGsgPSAwOyBrIDwgaXRlcmF0aW9uczsgKytrKSB7XG4gICAgICBhbHBoYSArPSAoYWxwaGFUYXJnZXQgLSBhbHBoYSkgKiBhbHBoYURlY2F5O1xuXG4gICAgICBmb3JjZXMuZWFjaChmdW5jdGlvbiAoZm9yY2UpIHtcbiAgICAgICAgZm9yY2UoYWxwaGEpO1xuICAgICAgfSk7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgbm9kZSA9IG5vZGVzW2ldO1xuICAgICAgICBpZiAobm9kZS5meCA9PSBudWxsKSBub2RlLnggKz0gbm9kZS52eCAqPSB2ZWxvY2l0eURlY2F5O1xuICAgICAgICBlbHNlIG5vZGUueCA9IG5vZGUuZngsIG5vZGUudnggPSAwO1xuICAgICAgICBpZiAobm9kZS5meSA9PSBudWxsKSBub2RlLnkgKz0gbm9kZS52eSAqPSB2ZWxvY2l0eURlY2F5O1xuICAgICAgICBlbHNlIG5vZGUueSA9IG5vZGUuZnksIG5vZGUudnkgPSAwO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBzaW11bGF0aW9uO1xuICB9XG5cbiAgZnVuY3Rpb24gaW5pdGlhbGl6ZU5vZGVzKCkge1xuICAgIGZvciAodmFyIGkgPSAwLCBuID0gbm9kZXMubGVuZ3RoLCBub2RlOyBpIDwgbjsgKytpKSB7XG4gICAgICBub2RlID0gbm9kZXNbaV0sIG5vZGUuaW5kZXggPSBpO1xuICAgICAgaWYgKG5vZGUuZnggIT0gbnVsbCkgbm9kZS54ID0gbm9kZS5meDtcbiAgICAgIGlmIChub2RlLmZ5ICE9IG51bGwpIG5vZGUueSA9IG5vZGUuZnk7XG4gICAgICBpZiAoaXNOYU4obm9kZS54KSB8fCBpc05hTihub2RlLnkpKSB7XG4gICAgICAgIHZhciByYWRpdXMgPSBpbml0aWFsUmFkaXVzICogTWF0aC5zcXJ0KGkpLCBhbmdsZSA9IGkgKiBpbml0aWFsQW5nbGU7XG4gICAgICAgIG5vZGUueCA9IHJhZGl1cyAqIE1hdGguY29zKGFuZ2xlKTtcbiAgICAgICAgbm9kZS55ID0gcmFkaXVzICogTWF0aC5zaW4oYW5nbGUpO1xuICAgICAgfVxuICAgICAgaWYgKGlzTmFOKG5vZGUudngpIHx8IGlzTmFOKG5vZGUudnkpKSB7XG4gICAgICAgIG5vZGUudnggPSBub2RlLnZ5ID0gMDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpbml0aWFsaXplRm9yY2UoZm9yY2UpIHtcbiAgICBpZiAoZm9yY2UuaW5pdGlhbGl6ZSkgZm9yY2UuaW5pdGlhbGl6ZShub2Rlcyk7XG4gICAgcmV0dXJuIGZvcmNlO1xuICB9XG5cbiAgaW5pdGlhbGl6ZU5vZGVzKCk7XG5cbiAgcmV0dXJuIHNpbXVsYXRpb24gPSB7XG4gICAgdGljazogdGljayxcblxuICAgIHJlc3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHN0ZXBwZXIucmVzdGFydChzdGVwKSwgc2ltdWxhdGlvbjtcbiAgICB9LFxuXG4gICAgc3RvcDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gc3RlcHBlci5zdG9wKCksIHNpbXVsYXRpb247XG4gICAgfSxcblxuICAgIG5vZGVzOiBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChub2RlcyA9IF8sIGluaXRpYWxpemVOb2RlcygpLCBmb3JjZXMuZWFjaChpbml0aWFsaXplRm9yY2UpLCBzaW11bGF0aW9uKSA6IG5vZGVzO1xuICAgIH0sXG5cbiAgICBhbHBoYTogZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoYWxwaGEgPSArXywgc2ltdWxhdGlvbikgOiBhbHBoYTtcbiAgICB9LFxuXG4gICAgYWxwaGFNaW46IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGFscGhhTWluID0gK18sIHNpbXVsYXRpb24pIDogYWxwaGFNaW47XG4gICAgfSxcblxuICAgIGFscGhhRGVjYXk6IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGFscGhhRGVjYXkgPSArXywgc2ltdWxhdGlvbikgOiArYWxwaGFEZWNheTtcbiAgICB9LFxuXG4gICAgYWxwaGFUYXJnZXQ6IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGFscGhhVGFyZ2V0ID0gK18sIHNpbXVsYXRpb24pIDogYWxwaGFUYXJnZXQ7XG4gICAgfSxcblxuICAgIHZlbG9jaXR5RGVjYXk6IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHZlbG9jaXR5RGVjYXkgPSAxIC0gXywgc2ltdWxhdGlvbikgOiAxIC0gdmVsb2NpdHlEZWNheTtcbiAgICB9LFxuXG4gICAgZm9yY2U6IGZ1bmN0aW9uKG5hbWUsIF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID4gMSA/ICgoXyA9PSBudWxsID8gZm9yY2VzLnJlbW92ZShuYW1lKSA6IGZvcmNlcy5zZXQobmFtZSwgaW5pdGlhbGl6ZUZvcmNlKF8pKSksIHNpbXVsYXRpb24pIDogZm9yY2VzLmdldChuYW1lKTtcbiAgICB9LFxuXG4gICAgZmluZDogZnVuY3Rpb24oeCwgeSwgcmFkaXVzKSB7XG4gICAgICB2YXIgaSA9IDAsXG4gICAgICAgICAgbiA9IG5vZGVzLmxlbmd0aCxcbiAgICAgICAgICBkeCxcbiAgICAgICAgICBkeSxcbiAgICAgICAgICBkMixcbiAgICAgICAgICBub2RlLFxuICAgICAgICAgIGNsb3Nlc3Q7XG5cbiAgICAgIGlmIChyYWRpdXMgPT0gbnVsbCkgcmFkaXVzID0gSW5maW5pdHk7XG4gICAgICBlbHNlIHJhZGl1cyAqPSByYWRpdXM7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgbm9kZSA9IG5vZGVzW2ldO1xuICAgICAgICBkeCA9IHggLSBub2RlLng7XG4gICAgICAgIGR5ID0geSAtIG5vZGUueTtcbiAgICAgICAgZDIgPSBkeCAqIGR4ICsgZHkgKiBkeTtcbiAgICAgICAgaWYgKGQyIDwgcmFkaXVzKSBjbG9zZXN0ID0gbm9kZSwgcmFkaXVzID0gZDI7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjbG9zZXN0O1xuICAgIH0sXG5cbiAgICBvbjogZnVuY3Rpb24obmFtZSwgXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gKGV2ZW50Lm9uKG5hbWUsIF8pLCBzaW11bGF0aW9uKSA6IGV2ZW50Lm9uKG5hbWUpO1xuICAgIH1cbiAgfTtcbn1cbiIsImltcG9ydCBjb25zdGFudCBmcm9tIFwiLi9jb25zdGFudFwiO1xuaW1wb3J0IGppZ2dsZSBmcm9tIFwiLi9qaWdnbGVcIjtcbmltcG9ydCB7cXVhZHRyZWV9IGZyb20gXCJkMy1xdWFkdHJlZVwiO1xuaW1wb3J0IHt4LCB5fSBmcm9tIFwiLi9zaW11bGF0aW9uXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgbm9kZXMsXG4gICAgICBub2RlLFxuICAgICAgYWxwaGEsXG4gICAgICBzdHJlbmd0aCA9IGNvbnN0YW50KC0zMCksXG4gICAgICBzdHJlbmd0aHMsXG4gICAgICBkaXN0YW5jZU1pbjIgPSAxLFxuICAgICAgZGlzdGFuY2VNYXgyID0gSW5maW5pdHksXG4gICAgICB0aGV0YTIgPSAwLjgxO1xuXG4gIGZ1bmN0aW9uIGZvcmNlKF8pIHtcbiAgICB2YXIgaSwgbiA9IG5vZGVzLmxlbmd0aCwgdHJlZSA9IHF1YWR0cmVlKG5vZGVzLCB4LCB5KS52aXNpdEFmdGVyKGFjY3VtdWxhdGUpO1xuICAgIGZvciAoYWxwaGEgPSBfLCBpID0gMDsgaSA8IG47ICsraSkgbm9kZSA9IG5vZGVzW2ldLCB0cmVlLnZpc2l0KGFwcGx5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXRpYWxpemUoKSB7XG4gICAgaWYgKCFub2RlcykgcmV0dXJuO1xuICAgIHZhciBpLCBuID0gbm9kZXMubGVuZ3RoLCBub2RlO1xuICAgIHN0cmVuZ3RocyA9IG5ldyBBcnJheShuKTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSBub2RlID0gbm9kZXNbaV0sIHN0cmVuZ3Roc1tub2RlLmluZGV4XSA9ICtzdHJlbmd0aChub2RlLCBpLCBub2Rlcyk7XG4gIH1cblxuICBmdW5jdGlvbiBhY2N1bXVsYXRlKHF1YWQpIHtcbiAgICB2YXIgc3RyZW5ndGggPSAwLCBxLCBjLCB3ZWlnaHQgPSAwLCB4LCB5LCBpO1xuXG4gICAgLy8gRm9yIGludGVybmFsIG5vZGVzLCBhY2N1bXVsYXRlIGZvcmNlcyBmcm9tIGNoaWxkIHF1YWRyYW50cy5cbiAgICBpZiAocXVhZC5sZW5ndGgpIHtcbiAgICAgIGZvciAoeCA9IHkgPSBpID0gMDsgaSA8IDQ7ICsraSkge1xuICAgICAgICBpZiAoKHEgPSBxdWFkW2ldKSAmJiAoYyA9IE1hdGguYWJzKHEudmFsdWUpKSkge1xuICAgICAgICAgIHN0cmVuZ3RoICs9IHEudmFsdWUsIHdlaWdodCArPSBjLCB4ICs9IGMgKiBxLngsIHkgKz0gYyAqIHEueTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcXVhZC54ID0geCAvIHdlaWdodDtcbiAgICAgIHF1YWQueSA9IHkgLyB3ZWlnaHQ7XG4gICAgfVxuXG4gICAgLy8gRm9yIGxlYWYgbm9kZXMsIGFjY3VtdWxhdGUgZm9yY2VzIGZyb20gY29pbmNpZGVudCBxdWFkcmFudHMuXG4gICAgZWxzZSB7XG4gICAgICBxID0gcXVhZDtcbiAgICAgIHEueCA9IHEuZGF0YS54O1xuICAgICAgcS55ID0gcS5kYXRhLnk7XG4gICAgICBkbyBzdHJlbmd0aCArPSBzdHJlbmd0aHNbcS5kYXRhLmluZGV4XTtcbiAgICAgIHdoaWxlIChxID0gcS5uZXh0KTtcbiAgICB9XG5cbiAgICBxdWFkLnZhbHVlID0gc3RyZW5ndGg7XG4gIH1cblxuICBmdW5jdGlvbiBhcHBseShxdWFkLCB4MSwgXywgeDIpIHtcbiAgICBpZiAoIXF1YWQudmFsdWUpIHJldHVybiB0cnVlO1xuXG4gICAgdmFyIHggPSBxdWFkLnggLSBub2RlLngsXG4gICAgICAgIHkgPSBxdWFkLnkgLSBub2RlLnksXG4gICAgICAgIHcgPSB4MiAtIHgxLFxuICAgICAgICBsID0geCAqIHggKyB5ICogeTtcblxuICAgIC8vIEFwcGx5IHRoZSBCYXJuZXMtSHV0IGFwcHJveGltYXRpb24gaWYgcG9zc2libGUuXG4gICAgLy8gTGltaXQgZm9yY2VzIGZvciB2ZXJ5IGNsb3NlIG5vZGVzOyByYW5kb21pemUgZGlyZWN0aW9uIGlmIGNvaW5jaWRlbnQuXG4gICAgaWYgKHcgKiB3IC8gdGhldGEyIDwgbCkge1xuICAgICAgaWYgKGwgPCBkaXN0YW5jZU1heDIpIHtcbiAgICAgICAgaWYgKHggPT09IDApIHggPSBqaWdnbGUoKSwgbCArPSB4ICogeDtcbiAgICAgICAgaWYgKHkgPT09IDApIHkgPSBqaWdnbGUoKSwgbCArPSB5ICogeTtcbiAgICAgICAgaWYgKGwgPCBkaXN0YW5jZU1pbjIpIGwgPSBNYXRoLnNxcnQoZGlzdGFuY2VNaW4yICogbCk7XG4gICAgICAgIG5vZGUudnggKz0geCAqIHF1YWQudmFsdWUgKiBhbHBoYSAvIGw7XG4gICAgICAgIG5vZGUudnkgKz0geSAqIHF1YWQudmFsdWUgKiBhbHBoYSAvIGw7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvLyBPdGhlcndpc2UsIHByb2Nlc3MgcG9pbnRzIGRpcmVjdGx5LlxuICAgIGVsc2UgaWYgKHF1YWQubGVuZ3RoIHx8IGwgPj0gZGlzdGFuY2VNYXgyKSByZXR1cm47XG5cbiAgICAvLyBMaW1pdCBmb3JjZXMgZm9yIHZlcnkgY2xvc2Ugbm9kZXM7IHJhbmRvbWl6ZSBkaXJlY3Rpb24gaWYgY29pbmNpZGVudC5cbiAgICBpZiAocXVhZC5kYXRhICE9PSBub2RlIHx8IHF1YWQubmV4dCkge1xuICAgICAgaWYgKHggPT09IDApIHggPSBqaWdnbGUoKSwgbCArPSB4ICogeDtcbiAgICAgIGlmICh5ID09PSAwKSB5ID0gamlnZ2xlKCksIGwgKz0geSAqIHk7XG4gICAgICBpZiAobCA8IGRpc3RhbmNlTWluMikgbCA9IE1hdGguc3FydChkaXN0YW5jZU1pbjIgKiBsKTtcbiAgICB9XG5cbiAgICBkbyBpZiAocXVhZC5kYXRhICE9PSBub2RlKSB7XG4gICAgICB3ID0gc3RyZW5ndGhzW3F1YWQuZGF0YS5pbmRleF0gKiBhbHBoYSAvIGw7XG4gICAgICBub2RlLnZ4ICs9IHggKiB3O1xuICAgICAgbm9kZS52eSArPSB5ICogdztcbiAgICB9IHdoaWxlIChxdWFkID0gcXVhZC5uZXh0KTtcbiAgfVxuXG4gIGZvcmNlLmluaXRpYWxpemUgPSBmdW5jdGlvbihfKSB7XG4gICAgbm9kZXMgPSBfO1xuICAgIGluaXRpYWxpemUoKTtcbiAgfTtcblxuICBmb3JjZS5zdHJlbmd0aCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzdHJlbmd0aCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBpbml0aWFsaXplKCksIGZvcmNlKSA6IHN0cmVuZ3RoO1xuICB9O1xuXG4gIGZvcmNlLmRpc3RhbmNlTWluID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGRpc3RhbmNlTWluMiA9IF8gKiBfLCBmb3JjZSkgOiBNYXRoLnNxcnQoZGlzdGFuY2VNaW4yKTtcbiAgfTtcblxuICBmb3JjZS5kaXN0YW5jZU1heCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkaXN0YW5jZU1heDIgPSBfICogXywgZm9yY2UpIDogTWF0aC5zcXJ0KGRpc3RhbmNlTWF4Mik7XG4gIH07XG5cbiAgZm9yY2UudGhldGEgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodGhldGEyID0gXyAqIF8sIGZvcmNlKSA6IE1hdGguc3FydCh0aGV0YTIpO1xuICB9O1xuXG4gIHJldHVybiBmb3JjZTtcbn1cbiIsIjxzY3JpcHQ+XG5cdGltcG9ydCB7IG9uTW91bnQgfSBmcm9tICdzdmVsdGUnO1xuXG5cdGltcG9ydCB7IHNjYWxlTGluZWFyLCBzY2FsZU9yZGluYWwgfSBmcm9tICdkMy1zY2FsZSc7XG5cdGltcG9ydCB7IHNjaGVtZUNhdGVnb3J5MTAgfSBmcm9tICdkMy1zY2FsZS1jaHJvbWF0aWMnO1xuXHRpbXBvcnQgeyBzZWxlY3QsIHNlbGVjdEFsbCB9IGZyb20gJ2QzLXNlbGVjdGlvbic7XG5cdGltcG9ydCB7IGRyYWcgfSBmcm9tICdkMy1kcmFnJztcblx0aW1wb3J0IHsgZm9yY2VTaW11bGF0aW9uLCBmb3JjZUxpbmssIGZvcmNlTWFueUJvZHksIGZvcmNlQ2VudGVyIH0gZnJvbSAnZDMtZm9yY2UnO1xuXG5cdGltcG9ydCB7ZXZlbnQgYXMgY3VycmVudEV2ZW50fSBmcm9tICdkMy1zZWxlY3Rpb24nICAvLyBOZWVkZWQgdG8gZ2V0IGRyYWcgd29ya2luZywgc2VlOiBodHRwczovL2dpdGh1Yi5jb20vZDMvZDMvaXNzdWVzLzI3MzNcblx0bGV0IGQzID0geyBzY2FsZUxpbmVhciwgc2NhbGVPcmRpbmFsLCBzY2hlbWVDYXRlZ29yeTEwLCBzZWxlY3QsIHNlbGVjdEFsbCwgZHJhZywgIGZvcmNlU2ltdWxhdGlvbiwgZm9yY2VMaW5rLCBmb3JjZU1hbnlCb2R5LCBmb3JjZUNlbnRlciB9XG5cblx0ZXhwb3J0IGxldCBncmFwaDtcblxuXHRsZXQgc3ZnO1xuXHRsZXQgd2lkdGggPSA1MDA7XG5cdGxldCBoZWlnaHQgPSA2MDA7XG5cblx0JDogZDN5U2NhbGUgPSBzY2FsZUxpbmVhcigpXG5cdFx0LmRvbWFpbihbMCwgaGVpZ2h0XSlcblx0XHQucmFuZ2UoW2hlaWdodCwgMF0pO1xuXG5cdCQ6IGxpbmtzID0gZ3JhcGgubGlua3MubWFwKGQgPT4gT2JqZWN0LmNyZWF0ZShkKSk7XG5cdCQ6IG5vZGVzID0gZ3JhcGgubm9kZXMubWFwKGQgPT4gT2JqZWN0LmNyZWF0ZShkKSk7ICBcblxuXHRjb25zdCBjb2xvdXJTY2FsZSA9IGQzLnNjYWxlT3JkaW5hbChkMy5zY2hlbWVDYXRlZ29yeTEwKTtcblxuXHRvbk1vdW50KG5ldHdvcmspO1xuXG5cdGZ1bmN0aW9uIHJlc2l6ZSgpIHtcblx0XHQoeyB3aWR0aCwgaGVpZ2h0IH0gPSBzdmcuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkpO1xuXHRcdGNvbnNvbGUubG9nKCdyZXNpemUoKScsIHdpZHRoLCBoZWlnaHQpXG5cdH1cblxuXHRsZXQgc2ltdWxhdGlvblxuXHRmdW5jdGlvbiBkcmFnc3RhcnRlZCgpIHtcblx0XHRpZiAoIWN1cnJlbnRFdmVudC5hY3RpdmUpIHNpbXVsYXRpb24uYWxwaGFUYXJnZXQoMC4zKS5yZXN0YXJ0KCk7XG5cdFx0Y3VycmVudEV2ZW50LnN1YmplY3QuZnggPSBjdXJyZW50RXZlbnQuc3ViamVjdC54O1xuXHRcdGN1cnJlbnRFdmVudC5zdWJqZWN0LmZ5ID0gY3VycmVudEV2ZW50LnN1YmplY3QueTtcblx0fVxuXG5cdGZ1bmN0aW9uIGRyYWdnZWQoKSB7XG5cdFx0Y3VycmVudEV2ZW50LnN1YmplY3QuZnggPSBjdXJyZW50RXZlbnQueDtcblx0XHRjdXJyZW50RXZlbnQuc3ViamVjdC5meSA9IGN1cnJlbnRFdmVudC55O1xuXHR9XG5cblx0ZnVuY3Rpb24gZHJhZ2VuZGVkKCkge1xuXHRcdGlmICghY3VycmVudEV2ZW50LmFjdGl2ZSkgc2ltdWxhdGlvbi5hbHBoYVRhcmdldCgwKTtcblx0XHRjdXJyZW50RXZlbnQuc3ViamVjdC5meCA9IG51bGw7XG5cdFx0Y3VycmVudEV2ZW50LnN1YmplY3QuZnkgPSBudWxsO1xuXHR9XG5cblx0ZnVuY3Rpb24gZHJhZ3N1YmplY3QoKSB7XG5cdFx0cmV0dXJuIHNpbXVsYXRpb24uZmluZChjdXJyZW50RXZlbnQueCwgY3VycmVudEV2ZW50LnkpO1xuXHR9XG5cblx0ZnVuY3Rpb24gbmV0d29yaygpIHtcblx0XHRyZXNpemUoKVxuXG5cdFx0c2ltdWxhdGlvbiA9IGQzLmZvcmNlU2ltdWxhdGlvbihub2Rlcylcblx0XHRcdC5mb3JjZShcImxpbmtcIiwgZDMuZm9yY2VMaW5rKGxpbmtzKS5pZChkID0+IGQuaWQpKVxuXHRcdFx0LmZvcmNlKFwiY2hhcmdlXCIsIGQzLmZvcmNlTWFueUJvZHkoKSlcblx0XHRcdC5mb3JjZShcImNlbnRlclwiLCBkMy5mb3JjZUNlbnRlcih3aWR0aCAvIDIsIGhlaWdodCAvIDIpKVxuXHRcdFx0Lm9uKCd0aWNrJywgZnVuY3Rpb24gdGlja2VkKCkge1x0XHRcblx0XHRcdFx0XHRcdHNpbXVsYXRpb24udGljaygpXG5cdFx0XHRcdFx0XHRub2RlcyA9IFsuLi5ub2Rlc11cblx0XHRcdFx0bGlua3MgPSBbLi4ubGlua3NdXG5cdFx0XHRcdFx0fSk7XG5cdFx0ZDMuc2VsZWN0KHN2Zylcblx0XHRcdC5jYWxsKGQzLmRyYWcoKVxuXHRcdFx0XHQuY29udGFpbmVyKHN2Zylcblx0XHRcdFx0LnN1YmplY3QoZHJhZ3N1YmplY3QpXG5cdFx0XHRcdC5vbihcInN0YXJ0XCIsIGRyYWdzdGFydGVkKVxuXHRcdFx0XHQub24oXCJkcmFnXCIsIGRyYWdnZWQpXG5cdFx0XHRcdC5vbihcImVuZFwiLCBkcmFnZW5kZWQpKTtcblx0fVxuPC9zY3JpcHQ+XG5cbjxzdmVsdGU6d2luZG93IG9uOnJlc2l6ZT0ne3Jlc2l6ZX0nLz5cblxuPHN2ZyBiaW5kOnRoaXM9e3N2Z30+XG4gIFxuXHR7I2VhY2ggbGlua3MgYXMgbGlua31cbiAgICA8ZyBzdHJva2U9JyM5OTknIHN0cm9rZS1vcGFjaXR5PScwLjYnPlxuICAgICAgPGxpbmUgeDE9J3tsaW5rLnNvdXJjZS54fScgeTE9J3tkM3lTY2FsZShsaW5rLnNvdXJjZS55KX0nIFxuICAgICAgICAgICAgeDI9J3tsaW5rLnRhcmdldC54fScgeTI9J3tkM3lTY2FsZShsaW5rLnRhcmdldC55KX0nXG4gICAgICAgICAgICB0cmFuc2Zvcm09J3RyYW5zbGF0ZSgwIHtoZWlnaHR9KSBzY2FsZSgxIC0xKSc+XG4gICAgICAgICAgICA8dGl0bGU+e2xpbmsuc291cmNlLmlkfTwvdGl0bGU+XG4gICAgICA8L2xpbmU+XG4gICAgPC9nPlxuXHR7L2VhY2h9XG5cblx0eyNlYWNoIG5vZGVzIGFzIHBvaW50fVxuICAgIDxjaXJjbGUgY2xhc3M9J25vZGUnIHI9JzUnIGZpbGw9J3tjb2xvdXJTY2FsZShwb2ludC5ncm91cCl9JyBjeD0ne3BvaW50Lnh9JyBjeT0ne2QzeVNjYWxlKHBvaW50LnkpfSdcbiAgICAgdHJhbnNmb3JtPSd0cmFuc2xhdGUoMCB7aGVpZ2h0fSkgc2NhbGUoMSAtMSknPlxuICAgIDx0aXRsZT57cG9pbnQuaWR9PC90aXRsZT48L2NpcmNsZT5cblx0ey9lYWNofVxuXG48L3N2Zz5cblxuPHN0eWxlPlxuXHRzdmcge1xuXHRcdHdpZHRoOiAxMDAlO1xuXHRcdGhlaWdodDogMTAwJTtcblx0XHRmbG9hdDogbGVmdDtcblx0fVxuXG5cdGNpcmNsZSB7XG5cdFx0c3Ryb2tlOiAjZmZmO1xuICAgIFx0c3Ryb2tlLXdpZHRoOiAxLjU7XG5cdH1cbjwvc3R5bGU+IiwiZXhwb3J0IGRlZmF1bHQge1xuXHRcIm5vZGVzXCI6IFtcblx0ICB7XCJpZFwiOiBcIk15cmllbFwiLCBcImdyb3VwXCI6IDF9LFxuXHQgIHtcImlkXCI6IFwiTmFwb2xlb25cIiwgXCJncm91cFwiOiAxfSxcblx0ICB7XCJpZFwiOiBcIk1sbGUuQmFwdGlzdGluZVwiLCBcImdyb3VwXCI6IDF9LFxuXHRdLFxuXHRcImxpbmtzXCI6IFtcblx0ICB7XCJzb3VyY2VcIjogXCJOYXBvbGVvblwiLCBcInRhcmdldFwiOiBcIk15cmllbFwifSxcblx0ICB7XCJzb3VyY2VcIjogXCJNbGxlLkJhcHRpc3RpbmVcIiwgXCJ0YXJnZXRcIjogXCJNeXJpZWxcIn0sXG5cdF1cbiAgfVxuICAiLCI8c2NyaXB0PlxuXHRpbXBvcnQgR3JhcGggZnJvbSAnLi9OZXR3b3JrR3JhcGguc3ZlbHRlJztcblx0Ly8gaW1wb3J0IGRhdGEgZnJvbSAnLi9nYnAyZF9ub25saW5lYXIuc3ZlbHRlJztcblx0aW1wb3J0IGRhdGEgZnJvbSAnLi9mZ19kYXRhLmpzJztcblxuXHRkYXRhLm5vZGVzLnB1c2goe2lkOiBcImNhbTFcIiwgZ3JvdXA6IDJ9KVxuXHRkYXRhLmxpbmtzLnB1c2goe3NvdXJjZTogXCJNeXJpZWxcIiwgdGFyZ2V0OiBcImNhbTFcIn0pXG5cblx0Y29uc29sZS5sb2coZGF0YSlcbjwvc2NyaXB0PlxuXG48c3R5bGU+XG5cdC5jaGFydCB7XG5cdCAgd2lkdGg6IDEwMCU7XG5cdCAgaGVpZ2h0OiA1MDBweDtcbi8qXHRcdHdpZHRoOiAxMDAlO1xuXHRcdGhlaWdodDoxMDAlO1xuXHRcdG1heC13aWR0aDogNjQwcHg7XG5cdFx0aGVpZ2h0OiBjYWxjKDEwMCUgLSA0ZW0pO1xuXHRcdG1pbi1oZWlnaHQ6IDI4MHB4O1xuXHRcdG1heC1oZWlnaHQ6IDQ4MHB4O1xuXHRcdG1hcmdpbjogMCBhdXRvOyovXG5cdH1cbjwvc3R5bGU+XG5cbjxkaXYgY2xhc3M9XCJjaGFydFwiPlxuXHQ8R3JhcGggZ3JhcGg9e2RhdGF9Lz5cbjwvZGl2PiIsIjxzY3JpcHQ+XG4gIGltcG9ydCB7IG9uTW91bnQgfSBmcm9tICdzdmVsdGUnO1xuICBpbXBvcnQgeyBmYWRlIH0gZnJvbSAnc3ZlbHRlL3RyYW5zaXRpb24nO1xuXG4gIGltcG9ydCAqIGFzIG0gZnJvbSAnbWwtbWF0cml4JztcbiAgaW1wb3J0ICogYXMgciBmcm9tICdyYW5kb20nO1xuXG4gIGltcG9ydCAqIGFzIGdhdXNzIGZyb20gJy4uL2dhdXNzaWFuJztcbiAgaW1wb3J0ICogYXMgZ2JwIGZyb20gJy4uL2dicC9nYnAyZC5qcyc7XG4gIGltcG9ydCAqIGFzIG5sbSBmcm9tICcuLi9nYnAvbm9ubGluZWFyX21lYXNfZm4uanMnO1xuXG5cdGltcG9ydCB7IG9uSW50ZXJ2YWwgfSBmcm9tICcuLi91dGlsLmpzJztcblxuICBpbXBvcnQgR3JhcGggZnJvbSAnLi9OZXR3b3JrR3JhcGguc3ZlbHRlJztcblxuICAvLyBWaXN1YWwgdmFyYWlibGVzXG4gIGxldCBjYW52YXM7XG4gIGxldCB2YXJfbm9kZV9yYWRpdXMgPSA5O1xuICBsZXQgZ3Rfbm9kZV9yYWRpdXMgPSA2O1xuXG4gIGxldCB0aGVuOyAvLyB0aW1lIG9mIHN0YXJ0IG9mIHZpc1xuICBsZXQgZGlzcGxheV9tYXAgPSBmYWxzZTtcbiAgbGV0IHZpc2libGVfYWxlcnQgPSBmYWxzZTtcbiAgbGV0IGZ1bGxzY3JlZW4gPSBmYWxzZTtcbiAgbGV0IHN0YXJ0ZWQgPSBmYWxzZTtcblxuICAvLyBNZWFzdXJlbWVudCBtb2RlbFxuICBsZXQgbWVhc19yYW5nZSA9IDE3MDtcbiAgbGV0IGxta19wcmlvcl9zdGQgPSA2MDtcbiAgbGV0IHJvYm90X3ByaW9yX3N0ZCA9IDYwO1xuXG4gIGxldCBvZG9tZXRyeV9kaXN0YW5jZV9zdGQgPSAzMDtcbiAgbGV0IG9kb21ldHJ5X2FuZ2xlX3N0ZCA9IDAuNTtcbiAgbGV0IG1lYXNfZGlzdGFuY2Vfc3RkID0gNzA7XG4gIGxldCBtZWFzX2FuZ2xlX3N0ZCA9IDAuNTtcblxuICBjb25zdCBvZG9tZXRyeV9hbmdsZV9ub2lzZSA9IHIubm9ybWFsKDAsIDAuMSk7XG4gIGNvbnN0IG9kb21ldHJ5X2Rpc3Rfbm9pc2UgPSByLm5vcm1hbCgwLCA1KTtcbiAgY29uc3QgbWVhc19hbmdsZV9ub2lzZSA9IHIubm9ybWFsKDAsIDAuMDEpO1xuICBjb25zdCBtZWFzX2Rpc3Rfbm9pc2UgPSByLm5vcm1hbCgwLCAyKTtcblxuICAvLyBHQlAgdmFyaWFibGVzXG4gIGxldCBncmFwaDtcbiAgbGV0IG5fbGFuZG1hcmtzID0gMjU7XG4gIGxldCBsYW5kbWFya3NfZ3QgPSBbXTtcbiAgbGV0IHBvc2VzX2d0ID0gW107XG4gIGxldCBsbWtfb2JzZXJ2ZWRfeWV0ID0gW107XG4gIGxldCBsbWtfZ3JhcGhfaXggPSBbXTtcblxuICBsZXQgZXRhX2RhbXBpbmcgPSAwLjtcblxuICBsZXQgc3luY19vbiA9IGZhbHNlO1xuICBsZXQgbl9pdGVycyA9IDA7XG4gIGxldCBpdGVyc19wZXJfc2VjID0gMjU7XG4gIGxldCBkaXN0ID0gMDsgLy8gQXZlcmFnZSBkaXN0YW5jZSBvZiBiZWxpZWYgbWVhbnMgZnJvbSBNQVAgc29sdXRpb25cblxuICAvLyBSb2JvdCBtb3Rpb24gcGFyYW1zXG4gIGxldCByb2JvdF9sb2MgPSBbODAsIDcyMF07XG4gIGxldCBsYXN0X2tleV9wb3NlID0gWzgwLCA3MjBdO1xuICBjb25zdCBzdGVwID0gMTE7XG4gIGxldCBuZXdfcG9zZV9kaXN0ID0gNzU7XG5cbiAgb25Nb3VudCgoKSA9PiB7XG4gICAgY29uc3QgY3R4ID0gY2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcbiAgICBjdHgubGluZVdpZHRoID0gNDtcblxuICAgIC8vIENyZWF0ZSBpbml0aWFsIGZhY3RvciBncmFwaFxuICAgIGdyYXBoID0gbmV3IGdicC5GYWN0b3JHcmFwaCgpO1xuICAgIGxldCBmaXJzdF9wb3NlX25vZGUgPSBuZXcgZ2JwLlZhcmlhYmxlTm9kZSgyLCBuX2xhbmRtYXJrcyk7XG4gICAgZmlyc3RfcG9zZV9ub2RlLnByaW9yLmxhbSA9IG5ldyBtLk1hdHJpeChbWzAuMSwgMF0sIFswLCAwLjFdXSk7IFxuICAgIGZpcnN0X3Bvc2Vfbm9kZS5wcmlvci5ldGEgPSBmaXJzdF9wb3NlX25vZGUucHJpb3IubGFtLm1tdWwobmV3IG0uTWF0cml4KFtbcm9ib3RfbG9jWzBdXSwgW3JvYm90X2xvY1sxXV1dKSk7XG5cbiAgICBmaXJzdF9wb3NlX25vZGUudXBkYXRlX2JlbGllZigpO1xuICAgIGdyYXBoLnBvc2Vfbm9kZXMucHVzaChmaXJzdF9wb3NlX25vZGUpO1xuICAgIHBvc2VzX2d0LnB1c2goe3g6IHJvYm90X2xvY1swXSwgeTogcm9ib3RfbG9jWzFdfSlcblxuICAgIC8vIGRhdGEubm9kZXMucHVzaCh7XCJpZFwiOiBcImNhbTBcIiwgXCJncm91cFwiOiAxfSk7XG5cbiAgICAvLyBHZW5lcmF0ZSBsYW5kbWFya3MsIGZpcnN0IGxhbmRtYXJrIG5lYXIgcm9ib3RcbiAgICBsZXQgbG1rMV90b2RvID0gdHJ1ZTtcbiAgICB3aGlsZSAobG1rMV90b2RvKSB7XG4gICAgICB2YXIgeCA9IHJvYm90X2xvY1swXSArIE1hdGgucmFuZG9tKCkgKiBtZWFzX3JhbmdlIC8gTWF0aC5zcXJ0KDIpIC0gbWVhc19yYW5nZSAvICgyICogTWF0aC5zcXJ0KDIpKTsgXG4gICAgICB2YXIgeSA9IHJvYm90X2xvY1sxXSArIE1hdGgucmFuZG9tKCkgKiBtZWFzX3JhbmdlIC8gTWF0aC5zcXJ0KDIpIC0gbWVhc19yYW5nZSAvICgyICogTWF0aC5zcXJ0KDIpKTsgXG4gICAgICBpZiAoKHg+MjApICYmICh4PGNhbnZhcy53aWR0aC0yMCkgJiYgKHk+MjApICYmICh5PGNhbnZhcy5oZWlnaHQtMjApKSB7XG4gICAgICAgIGxtazFfdG9kbyA9IGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgICBsYW5kbWFya3NfZ3QucHVzaCh7eDogeCwgeTogeX0pO1xuICAgIGxta19vYnNlcnZlZF95ZXQucHVzaCgwKTtcbiAgICBsbWtfZ3JhcGhfaXgucHVzaCgtMSk7XG4gICAgZm9yICh2YXIgaT0wOyBpPG5fbGFuZG1hcmtzLTE7IGkrKykge1xuICAgICAgdmFyIHggPSBNYXRoLnJhbmRvbSgpKihjYW52YXMud2lkdGgtMjApICsgMTA7XG4gICAgICB2YXIgeSA9IE1hdGgucmFuZG9tKCkqKGNhbnZhcy5oZWlnaHQtMjApICsgMTA7XG4gICAgICBsYW5kbWFya3NfZ3QucHVzaCh7eDogeCwgeTogeX0pO1xuICAgICAgbG1rX29ic2VydmVkX3lldC5wdXNoKDApO1xuICAgICAgbG1rX2dyYXBoX2l4LnB1c2goLTEpO1xuICAgIH1cblxuICAgIGFkZE1lYXN1cmVtZW50RmFjdG9ycygpOyAgLy8gYWRkIGluaXRpYWwgbWVhc3VyZW1lbnRzXG4gICAgdGhlbiA9IERhdGUubm93KCk7XG5cbiAgfSk7XG5cblx0b25JbnRlcnZhbCgoKSA9PiB1cGRhdGVWaXMoKSwgMjUpO1xuXG4gICAgXG4vLyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqIERyYXdpbmcgZnVuY3Rpb25zICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG5cbiAgZnVuY3Rpb24gZHJhd1JvYm90KCkge1xuICAgIGNvbnN0IGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIik7XG4gICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgIGN0eC5hcmMocm9ib3RfbG9jWzBdLCByb2JvdF9sb2NbMV0sIHZhcl9ub2RlX3JhZGl1cywgMCwgTWF0aC5QSSoyKTtcbiAgICBjdHguZmlsbFN0eWxlID0gXCJyZWRcIjtcbiAgICBjdHguZmlsbCgpO1xuICAgIGN0eC5jbG9zZVBhdGgoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRyYXdQb3NlTm9kZXMoKSB7XG4gICAgY29uc3QgY3R4ID0gY2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcbiAgICBmb3IodmFyIGM9MDsgYzxncmFwaC5wb3NlX25vZGVzLmxlbmd0aDsgYysrKSB7XG4gICAgICBjb25zdCBtZWFuID0gZ3JhcGgucG9zZV9ub2Rlc1tjXS5iZWxpZWYuZ2V0TWVhbigpO1xuICAgICAgdmFyIHggPSBtZWFuLmdldCgwLCAwKTtcbiAgICAgIHZhciB5ID0gbWVhbi5nZXQoMSwgMCk7XG5cbiAgICAgIC8vIERyYXcgbWVhbnNcbiAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgIGN0eC5hcmMoeCwgeSwgdmFyX25vZGVfcmFkaXVzLCAwLCBNYXRoLlBJKjIpO1xuICAgICAgY3R4LmZpbGxTdHlsZSA9IFwiIzAwOTVERFwiO1xuICAgICAgY3R4LmZpbGwoKTtcbiAgICAgIGN0eC5jbG9zZVBhdGgoKTtcblxuICAgICAgdmFyIHZhbHVlcyA9IGdyYXBoLnBvc2Vfbm9kZXNbY10uYmVsaWVmLmdldENvdkVsbGlwc2UoKTtcbiAgICAgIHZhciBlaWdfdmFsdWVzID0gdmFsdWVzWzBdO1xuICAgICAgdmFyIGFuZ2xlID0gdmFsdWVzWzFdO1xuXG4gICAgICAvLyBEcmF3IHZhcmlhbmNlc1xuICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgY3R4LmVsbGlwc2UoeCwgeSwgTWF0aC5zcXJ0KGVpZ192YWx1ZXNbMF0pLCBNYXRoLnNxcnQoZWlnX3ZhbHVlc1sxXSksIGFuZ2xlLCAwLCAyKk1hdGguUEkpXG4gICAgICBjdHguc3Ryb2tlU3R5bGUgPSBcIiMwMDk1RERcIjtcbiAgICAgIGN0eC5zdHJva2UoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBkcmF3TGFuZG1hcmtOb2RlcygpIHtcbiAgICBjb25zdCBjdHggPSBjYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpO1xuICAgIGZvcih2YXIgYz0wOyBjPGdyYXBoLmxta19ub2Rlcy5sZW5ndGg7IGMrKykge1xuICAgICAgY29uc3QgbWVhbiA9IGdyYXBoLmxta19ub2Rlc1tjXS5iZWxpZWYuZ2V0TWVhbigpO1xuICAgICAgdmFyIHggPSBtZWFuLmdldCgwLCAwKTtcbiAgICAgIHZhciB5ID0gbWVhbi5nZXQoMSwgMCk7XG5cbiAgICAgIC8vIERyYXcgbWVhbnNcbiAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgIGN0eC5hcmMoeCwgeSwgdmFyX25vZGVfcmFkaXVzLCAwLCBNYXRoLlBJKjIpO1xuICAgICAgY3R4LmZpbGxTdHlsZSA9IFwieWVsbG93XCI7XG4gICAgICBjdHguZmlsbCgpO1xuICAgICAgY3R4LmNsb3NlUGF0aCgpO1xuXG4gICAgICB2YXIgdmFsdWVzID0gZ3JhcGgubG1rX25vZGVzW2NdLmJlbGllZi5nZXRDb3ZFbGxpcHNlKCk7XG4gICAgICB2YXIgZWlnX3ZhbHVlcyA9IHZhbHVlc1swXTtcbiAgICAgIHZhciBhbmdsZSA9IHZhbHVlc1sxXTtcblxuICAgICAgLy8gRHJhdyB2YXJpYW5jZXNcbiAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgIGN0eC5lbGxpcHNlKHgsIHksIE1hdGguc3FydChlaWdfdmFsdWVzWzBdKSwgTWF0aC5zcXJ0KGVpZ192YWx1ZXNbMV0pLCBhbmdsZSwgMCwgMipNYXRoLlBJKVxuICAgICAgY3R4LnN0cm9rZVN0eWxlID0gXCJ5ZWxsb3dcIjtcbiAgICAgIGN0eC5zdHJva2UoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBkcmF3UG9zZXNHVCgpIHtcbiAgICBjb25zdCBjdHggPSBjYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpO1xuICAgIGZvcih2YXIgaT0wOyBpPHBvc2VzX2d0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICBjdHguYXJjKHBvc2VzX2d0W2ldLngsIHBvc2VzX2d0W2ldLnksIGd0X25vZGVfcmFkaXVzLCAwLCBNYXRoLlBJKjIpO1xuICAgICAgY3R4LmZpbGxTdHlsZSA9IFwiYmxhY2tcIjtcbiAgICAgIGN0eC5maWxsKCk7XG4gICAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZHJhd0xhbmRtYXJrc0dUKCkge1xuICAgIGNvbnN0IGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIik7XG4gICAgZm9yICh2YXIgaT0wOyBpPGxhbmRtYXJrc19ndC5sZW5ndGg7IGkrKykge1xuICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgY3R4LmFyYyhsYW5kbWFya3NfZ3RbaV0ueCwgbGFuZG1hcmtzX2d0W2ldLnksIGd0X25vZGVfcmFkaXVzLCAwLCBNYXRoLlBJKjIpO1xuICAgICAgY3R4LmZpbGxTdHlsZSA9IFwib3JhbmdlXCI7XG4gICAgICBjdHguZmlsbCgpO1xuICAgICAgY3R4LmNsb3NlUGF0aCgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGRyYXdMaW5lcygpIHtcbiAgICBjb25zdCBjdHggPSBjYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpO1xuICAgIGZvciAodmFyIGM9MDsgYzxncmFwaC5mYWN0b3JzLmxlbmd0aDsgYysrKSB7XG4gICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICBpZiAoKGdyYXBoLmZhY3RvcnNbY10uYWRqX3Zhcl9pZHNbMV0gPCBuX2xhbmRtYXJrcykpIHtcbiAgICAgICAgY29uc3QgbWVhbjAgPSBncmFwaC5wb3NlX25vZGVzW2dyYXBoLmZhY3RvcnNbY10uYWRqX3Zhcl9pZHNbMF0gLSBuX2xhbmRtYXJrc10uYmVsaWVmLmdldE1lYW4oKTtcbiAgICAgICAgY29uc3QgbWVhbjEgPSBncmFwaC5sbWtfbm9kZXNbbG1rX2dyYXBoX2l4W2dyYXBoLmZhY3RvcnNbY10uYWRqX3Zhcl9pZHNbMV1dXS5iZWxpZWYuZ2V0TWVhbigpO1xuICAgICAgICBjdHgubW92ZVRvKG1lYW4wLmdldCgwLDApLCBtZWFuMC5nZXQoMSwwKSk7XG4gICAgICAgIGN0eC5saW5lVG8obWVhbjEuZ2V0KDAsMCksIG1lYW4xLmdldCgxLDApKTtcbiAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gXCJibGFja1wiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgbWVhbjAgPSBncmFwaC5wb3NlX25vZGVzW2dyYXBoLmZhY3RvcnNbY10uYWRqX3Zhcl9pZHNbMF0gLSBuX2xhbmRtYXJrc10uYmVsaWVmLmdldE1lYW4oKTtcbiAgICAgICAgY29uc3QgbWVhbjEgPSBncmFwaC5wb3NlX25vZGVzW2dyYXBoLmZhY3RvcnNbY10uYWRqX3Zhcl9pZHNbMV0gLSBuX2xhbmRtYXJrc10uYmVsaWVmLmdldE1lYW4oKTtcbiAgICAgICAgY3R4Lm1vdmVUbyhtZWFuMC5nZXQoMCwwKSwgbWVhbjAuZ2V0KDEsMCkpO1xuICAgICAgICBjdHgubGluZVRvKG1lYW4xLmdldCgwLDApLCBtZWFuMS5nZXQoMSwwKSk7IFxuICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSBcImJsdWVcIjtcbiAgICAgIH1cbiAgICAgICAgY3R4LnN0cm9rZSgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGRyYXdNQVAoKSB7XG4gICAgY29uc3QgY3R4ID0gY2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcbiAgICB2YXIgdmFsdWVzID0gZ3JhcGguY29tcHV0ZU1BUChuX2xhbmRtYXJrcywgbG1rX2dyYXBoX2l4KTtcbiAgICBjb25zdCBtZWFucyA9IHZhbHVlc1swXTtcbiAgICBjb25zdCBiaWdTaWdtYSA9IHZhbHVlc1sxXTtcbiAgICBmb3IodmFyIGM9MDsgYzxncmFwaC5sbWtfbm9kZXMubGVuZ3RoOyBjKyspIHtcbiAgICAgIGNvbnN0IG1lYW4gPSBuZXcgbS5NYXRyaXhTdWJWaWV3KG1lYW5zLCBjKjIsIGMqMisxLCAwLCAwKTtcbiAgICAgIGNvbnN0IFNpZ21hID0gbmV3IG0uTWF0cml4U3ViVmlldyhiaWdTaWdtYSwgYyoyLCBjKjIrMSwgYyoyLCBjKjIrMSk7XG4gICAgICB2YXIgeCA9IG1lYW4uZ2V0KDAsIDApO1xuICAgICAgdmFyIHkgPSBtZWFuLmdldCgxLCAwKTtcblxuICAgICAgLy8gRHJhdyBtZWFuc1xuICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgY3R4LmFyYyh4LCB5LCB2YXJfbm9kZV9yYWRpdXMsIDAsIE1hdGguUEkqMik7XG4gICAgICBjdHguZmlsbFN0eWxlID0gXCJncmVlblwiO1xuICAgICAgY3R4LmZpbGwoKTtcbiAgICAgIGN0eC5jbG9zZVBhdGgoKTtcblxuICAgICAgdmFyIHZhbHVlcyA9IGdhdXNzLmdldEVsbGlwc2UoU2lnbWEpO1xuICAgICAgdmFyIGVpZ192YWx1ZXMgPSB2YWx1ZXNbMF07XG4gICAgICB2YXIgYW5nbGUgPSB2YWx1ZXNbMV07XG5cbiAgICAgIC8vIERyYXcgdmFyaWFuY2VzXG4gICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICBjdHguZWxsaXBzZSh4LCB5LCBNYXRoLnNxcnQoZWlnX3ZhbHVlc1swXSksIE1hdGguc3FydChlaWdfdmFsdWVzWzFdKSwgYW5nbGUsIDAsIDIqTWF0aC5QSSlcbiAgICAgIGN0eC5zdHJva2VTdHlsZSA9IFwiZ3JlZW5cIjtcbiAgICAgIGN0eC5zdHJva2UoKTtcbiAgICB9XG4gICAgZm9yKHZhciBjPTA7IGM8Z3JhcGgucG9zZV9ub2Rlcy5sZW5ndGg7IGMrKykge1xuICAgICAgY29uc3QgaSA9IGMgKyBncmFwaC5sbWtfbm9kZXMubGVuZ3RoO1xuICAgICAgY29uc3QgbWVhbiA9IG5ldyBtLk1hdHJpeChuZXcgbS5NYXRyaXhTdWJWaWV3KG1lYW5zLCBpKjIsIGkqMisxLCAwLCAwKSk7XG4gICAgICBjb25zdCBTaWdtYSA9IG5ldyBtLk1hdHJpeChuZXcgbS5NYXRyaXhTdWJWaWV3KGJpZ1NpZ21hLCBpKjIsIGkqMisxLCBpKjIsIGkqMisxKSk7XG4gICAgICB2YXIgeCA9IG1lYW4uZ2V0KDAsIDApO1xuICAgICAgdmFyIHkgPSBtZWFuLmdldCgxLCAwKTtcblxuICAgICAgLy8gRHJhdyBtZWFuc1xuICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgY3R4LmFyYyh4LCB5LCB2YXJfbm9kZV9yYWRpdXMsIDAsIE1hdGguUEkqMik7XG4gICAgICBjdHguZmlsbFN0eWxlID0gXCJncmVlblwiO1xuICAgICAgY3R4LmZpbGwoKTtcbiAgICAgIGN0eC5jbG9zZVBhdGgoKTtcblxuICAgICAgdmFyIHZhbHVlcyA9IGdhdXNzLmdldEVsbGlwc2UoU2lnbWEpO1xuICAgICAgdmFyIGVpZ192YWx1ZXMgPSB2YWx1ZXNbMF07XG4gICAgICB2YXIgYW5nbGUgPSB2YWx1ZXNbMV07XG5cbiAgICAgIC8vIERyYXcgdmFyaWFuY2VzXG4gICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICBjdHguZWxsaXBzZSh4LCB5LCBNYXRoLnNxcnQoZWlnX3ZhbHVlc1swXSksIE1hdGguc3FydChlaWdfdmFsdWVzWzFdKSwgYW5nbGUsIDAsIDIqTWF0aC5QSSlcbiAgICAgIGN0eC5zdHJva2VTdHlsZSA9IFwiZ3JlZW5cIjtcbiAgICAgIGN0eC5zdHJva2UoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGVWaXMoKSB7XG4gICAgY29uc3QgY3R4ID0gY2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcbiAgICBjdHguY2xlYXJSZWN0KDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XG5cbiAgICB2YXIgZnBzSW50ZXJ2YWwgPSAxMDAwIC8gaXRlcnNfcGVyX3NlYztcbiAgICB2YXIgbm93ID0gRGF0ZS5ub3coKTtcbiAgICB2YXIgZWxhcHNlZCA9IG5vdyAtIHRoZW47XG4gICAgaWYgKGVsYXBzZWQgPiBmcHNJbnRlcnZhbCkge1xuICAgICAgdGhlbiA9IG5vdyAtIChlbGFwc2VkICUgZnBzSW50ZXJ2YWwpO1xuICAgICAgaWYgKHN5bmNfb24pIHtcbiAgICAgICAgc3luY0dCUCgpO1xuICAgICAgfSBcbiAgICB9XG5cbiAgICB1cGRhdGVfbGFtYmRhcygpO1xuXG4gICAgZHJhd0xpbmVzKCk7XG4gICAgZHJhd1JvYm90KCk7XG4gICAgZHJhd1Bvc2VOb2RlcygpO1xuICAgIGRyYXdMYW5kbWFya05vZGVzKCk7XG4gICAgZHJhd1Bvc2VzR1QoKTtcbiAgICBkcmF3TGFuZG1hcmtzR1QoKTtcbiAgICBpZiAoZGlzcGxheV9tYXApIHtcbiAgICAgIGRyYXdNQVAoKTtcbiAgICB9XG4gICAgdmFyIHJlY3QgPSBjYW52YXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgaWYgKCEoc3RhcnRlZCkgJiYgKHJlY3QudG9wIDwgd2luZG93LmlubmVySGVpZ2h0KSkge1xuICAgICAgc3luY19vbiA9IHRydWU7XG4gICAgICBzdGFydGVkID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuXG4gIC8vICoqKioqKioqKioqKioqKioqKiogR0JQIGZ1bmN0aW9ucyAqKioqKioqKioqKioqKioqKioqKioqKlxuXG4gIGZ1bmN0aW9uIHN5bmNHQlAoKSB7XG4gICAgLy8gaWYgKG5faXRlcnMgJSAyMCA9PT0gMCkge1xuICAgICAgZ3JhcGgucmVsaW5lYXJpc2UoKTtcbiAgICAvLyB9XG4gICAgZ3JhcGguc3luY19pdGVyKCk7XG4gICAgaWYgKCEobl9pdGVycyA9PSAwKSkge1xuICAgICAgZGlzdCA9IGdyYXBoLmNvbXBhcmVfdG9fTUFQKG5fbGFuZG1hcmtzLCBsbWtfZ3JhcGhfaXgpOyAgIFxuICAgIH1cbiAgICBuX2l0ZXJzKys7XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGVfbGFtYmRhcygpIHtcbiAgICBmb3IodmFyIGM9MDsgYzxncmFwaC5mYWN0b3JzLmxlbmd0aDsgYysrKSB7XG4gICAgICBpZiAoZ3JhcGguZmFjdG9yc1tjXS5hZGpfdmFyX2lkc1sxXSA+PSBuX2xhbmRtYXJrcykge1xuICAgICAgICB2YXIgbGFtYmRhID0gbmV3IG0uTWF0cml4KFtbMSAvIE1hdGgucG93KG9kb21ldHJ5X2FuZ2xlX3N0ZCwgMiksIDBdLCBbMCwgMSAvIE1hdGgucG93KG9kb21ldHJ5X2Rpc3RhbmNlX3N0ZCwgMildXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgbGFtYmRhID0gbmV3IG0uTWF0cml4KFtbMSAvIE1hdGgucG93KG1lYXNfYW5nbGVfc3RkLCAyKSwgMF0sIFswLCAxIC8gTWF0aC5wb3cobWVhc19kaXN0YW5jZV9zdGQsIDIpXV0pO1xuICAgICAgfVxuICAgICAgZ3JhcGguZmFjdG9yc1tjXS5sYW1iZGEgPSBsYW1iZGE7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gYWRkTGFuZG1hcmtOb2RlKGl4KSB7XG4gICAgY29uc3QgbG1rX25vZGUgPSBuZXcgZ2JwLlZhcmlhYmxlTm9kZSgyLCBpeCk7XG4gICAgdmFyIGxhbWJkYSA9IDEgLyBNYXRoLnBvdyhsbWtfcHJpb3Jfc3RkLCAyKTtcbiAgICBsbWtfbm9kZS5wcmlvci5sYW0gPSBuZXcgbS5NYXRyaXgoW1tsYW1iZGEsIDBdLCBbMCwgbGFtYmRhXV0pO1xuICAgIGxta19ub2RlLnByaW9yLmV0YSA9IGxta19ub2RlLnByaW9yLmxhbS5tbXVsKG5ldyBtLk1hdHJpeChbW2xhbmRtYXJrc19ndFtpeF0ueF0sIFtsYW5kbWFya3NfZ3RbaXhdLnldXSkpO1xuICAgIGxta19ub2RlLnVwZGF0ZV9iZWxpZWYoKTtcbiAgICBsbWtfZ3JhcGhfaXhbaXhdID0gZ3JhcGgubG1rX25vZGVzLmxlbmd0aDtcbiAgICBncmFwaC5sbWtfbm9kZXMucHVzaChsbWtfbm9kZSk7XG5cbiAgICAvLyBkYXRhLm5vZGVzLnB1c2goe1wiaWRcIjogXCJsbWtcIi5jb25jYXQoaXgudG9TdHJpbmcoKSksIFwiZ3JvdXBcIjogMn0pO1xuICB9XG5cbiAgLy8gQWRkIG9kb21ldHJ5IGZhY3RvciBjb25uZWN0aW5nIHRvIG1vc3QgcmVjZW50IHBvc2UgdG8gcGVudWx0aW1hdGUgcG9zZVxuICBmdW5jdGlvbiBhZGRPZG9tZXRyeUZhY3RvcigpIHtcbiAgICB2YXIgbl9wb3NlX25vZGVzID0gZ3JhcGgucG9zZV9ub2Rlcy5sZW5ndGg7XG5cbiAgICB2YXIgZHggPSBwb3Nlc19ndFtuX3Bvc2Vfbm9kZXMtMV0ueCAtIHBvc2VzX2d0W25fcG9zZV9ub2Rlcy0yXS54O1xuICAgIGNvbnN0IG9kb21ldHJ5X2ZhY3RvciA9IG5ldyBnYnAuTm9uTGluZWFyRmFjdG9yKDQsIFtncmFwaC5wb3NlX25vZGVzW25fcG9zZV9ub2Rlcy0yXS52YXJfaWQsIGdyYXBoLnBvc2Vfbm9kZXNbbl9wb3NlX25vZGVzLTFdLnZhcl9pZF0sIG5sbS5tZWFzRm5SLCBubG0uamFjRm5SKTtcbiAgICBpZiAoZHggPCAwKSB7XG4gICAgICBvZG9tZXRyeV9mYWN0b3IubWVhc0ZuID0gbmxtLm1lYXNGbkw7XG4gICAgICBvZG9tZXRyeV9mYWN0b3IuamFjRm4gPSBubG0uamFjRm5MO1xuICAgIH0gZWxzZSB7XG4gICAgfVxuICAgIGNvbnN0IG1lYXN1cmVtZW50ID0gb2RvbWV0cnlfZmFjdG9yLm1lYXNGbihwb3Nlc19ndFtuX3Bvc2Vfbm9kZXMtMl0sIHBvc2VzX2d0W25fcG9zZV9ub2Rlcy0xXSk7XG4gICAgY29uc3Qgbm9pc2UgPSBuZXcgbS5NYXRyaXgoW1tvZG9tZXRyeV9hbmdsZV9ub2lzZSgpXSwgW29kb21ldHJ5X2Rpc3Rfbm9pc2UoKV1dKTtcbiAgICBtZWFzdXJlbWVudC5hZGQobm9pc2UpO1xuICAgIG9kb21ldHJ5X2ZhY3Rvci5tZWFzID0gbWVhc3VyZW1lbnQ7XG4gICAgb2RvbWV0cnlfZmFjdG9yLmV0YV9kYW1waW5nID0gZXRhX2RhbXBpbmc7XG5cbiAgICB2YXIgbGFtYmRhID0gbmV3IG0uTWF0cml4KFtbMSAvIE1hdGgucG93KG9kb21ldHJ5X2FuZ2xlX3N0ZCwgMiksIDBdLCBbMCwgMSAvIE1hdGgucG93KG9kb21ldHJ5X2Rpc3RhbmNlX3N0ZCwgMildXSk7XG4gICAgb2RvbWV0cnlfZmFjdG9yLmxhbWJkYSA9IGxhbWJkYTtcblxuICAgIG9kb21ldHJ5X2ZhY3Rvci5hZGpfdmFyX2RvZnMucHVzaCgyKTtcbiAgICBvZG9tZXRyeV9mYWN0b3IuYWRqX3Zhcl9kb2ZzLnB1c2goMik7XG5cbiAgICBvZG9tZXRyeV9mYWN0b3IuYWRqX2JlbGllZnMucHVzaChncmFwaC5wb3NlX25vZGVzW25fcG9zZV9ub2Rlcy0yXS5iZWxpZWYpO1xuICAgIG9kb21ldHJ5X2ZhY3Rvci5hZGpfYmVsaWVmcy5wdXNoKGdyYXBoLnBvc2Vfbm9kZXNbbl9wb3NlX25vZGVzLTFdLmJlbGllZik7XG4gICAgb2RvbWV0cnlfZmFjdG9yLmNvbXB1dGVfZmFjdG9yKCk7XG5cbiAgICBvZG9tZXRyeV9mYWN0b3IubWVzc2FnZXMucHVzaChuZXcgZ2F1c3MuR2F1c3NpYW4oW1swXSxbMF1dLCBbWzAsMF0sWzAsMF1dKSk7XG4gICAgb2RvbWV0cnlfZmFjdG9yLm1lc3NhZ2VzLnB1c2gobmV3IGdhdXNzLkdhdXNzaWFuKFtbMF0sWzBdXSwgW1swLDBdLFswLDBdXSkpO1xuICAgIGdyYXBoLmZhY3RvcnMucHVzaChvZG9tZXRyeV9mYWN0b3IpO1xuXG4gICAgZ3JhcGgucG9zZV9ub2Rlc1tuX3Bvc2Vfbm9kZXMtMl0uYWRqX2ZhY3RvcnMucHVzaChvZG9tZXRyeV9mYWN0b3IpO1xuICAgIGdyYXBoLnBvc2Vfbm9kZXNbbl9wb3NlX25vZGVzLTFdLmFkal9mYWN0b3JzLnB1c2gob2RvbWV0cnlfZmFjdG9yKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFkZE1lYXN1cmVtZW50RmFjdG9ycygpIHtcbiAgICAvLyBBZGQgbWVhc3VyZW1lbnQgZmFjdG9ycyBjb25uZWN0aW5nIHRvIG9ic2VydmVkIGxhbmRtYXJrc1xuICAgIGxldCBuX3Bvc2Vfbm9kZXMgPSBncmFwaC5wb3NlX25vZGVzLmxlbmd0aDtcblxuICAgIGZvciAodmFyIGo9MDsgajxuX2xhbmRtYXJrczsgaisrKSB7XG4gICAgICB2YXIgZGlzdCA9IE1hdGguc3FydChNYXRoLnBvdyhsYW5kbWFya3NfZ3Rbal0ueCAtIHBvc2VzX2d0W25fcG9zZV9ub2RlcyAtMV0ueCwgMikgKyBNYXRoLnBvdyhsYW5kbWFya3NfZ3Rbal0ueSAtIHBvc2VzX2d0W25fcG9zZV9ub2RlcyAtMV0ueSwgMikpO1xuICAgICAgaWYgKGRpc3QgPCBtZWFzX3JhbmdlKSB7XG4gICAgICAgIC8vIENyZWF0ZSBuZXcgbGFuZG1hcmsgbm9kZSBpZiBmaXJzdCBvYnNlcnZhdGlvbiBvZiB0aGUgbGFuZG1hcmtcbiAgICAgICAgaWYgKCEobG1rX29ic2VydmVkX3lldFtqXSkpIHtcbiAgICAgICAgICBhZGRMYW5kbWFya05vZGUoaik7XG4gICAgICAgICAgbG1rX29ic2VydmVkX3lldFtqXSA9IDE7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZHggPSBsYW5kbWFya3NfZ3Rbal0ueCAtIHBvc2VzX2d0W25fcG9zZV9ub2Rlcy0xXS54O1xuICAgICAgICBjb25zdCBuZXdfZmFjdG9yID0gbmV3IGdicC5Ob25MaW5lYXJGYWN0b3IoNCwgW2dyYXBoLnBvc2Vfbm9kZXNbbl9wb3NlX25vZGVzLTFdLnZhcl9pZCwgal0sIG5sbS5tZWFzRm5SLCBubG0uamFjRm5SKTtcbiAgICAgICAgaWYgKGR4IDwgMCkge1xuICAgICAgICAgIG5ld19mYWN0b3IubWVhc0ZuID0gbmxtLm1lYXNGbkw7XG4gICAgICAgICAgbmV3X2ZhY3Rvci5qYWNGbiA9IG5sbS5qYWNGbkw7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbWVhc3VyZW1lbnQgPSBuZXdfZmFjdG9yLm1lYXNGbihwb3Nlc19ndFtuX3Bvc2Vfbm9kZXMtMV0sIGxhbmRtYXJrc19ndFtqXSk7XG4gICAgICAgIGNvbnN0IG5vaXNlID0gbmV3IG0uTWF0cml4KFtbbWVhc19hbmdsZV9ub2lzZSgpXSwgW21lYXNfZGlzdF9ub2lzZSgpXV0pO1xuICAgICAgICBtZWFzdXJlbWVudC5hZGQobm9pc2UpOyBcbiAgICAgICAgbmV3X2ZhY3Rvci5tZWFzID0gbWVhc3VyZW1lbnQ7XG4gICAgICAgIG5ld19mYWN0b3IuZXRhX2RhbXBpbmcgPSBldGFfZGFtcGluZztcblxuXG4gICAgICAgIHZhciBsYW1iZGEgPSBuZXcgbS5NYXRyaXgoW1sxIC8gTWF0aC5wb3cobWVhc19hbmdsZV9zdGQsIDIpLCAwXSwgWzAsIDEgLyBNYXRoLnBvdyhtZWFzX2Rpc3RhbmNlX3N0ZCwgMildXSk7XG4gICAgICAgIG5ld19mYWN0b3IubGFtYmRhID0gbGFtYmRhO1xuXG4gICAgICAgIG5ld19mYWN0b3IuYWRqX3Zhcl9kb2ZzLnB1c2goMik7XG4gICAgICAgIG5ld19mYWN0b3IuYWRqX3Zhcl9kb2ZzLnB1c2goMik7XG5cbiAgICAgICAgbmV3X2ZhY3Rvci5hZGpfYmVsaWVmcy5wdXNoKGdyYXBoLnBvc2Vfbm9kZXNbbl9wb3NlX25vZGVzLTFdLmJlbGllZik7XG4gICAgICAgIG5ld19mYWN0b3IuYWRqX2JlbGllZnMucHVzaChncmFwaC5sbWtfbm9kZXNbbG1rX2dyYXBoX2l4W2pdXS5iZWxpZWYpO1xuICAgICAgICBuZXdfZmFjdG9yLmNvbXB1dGVfZmFjdG9yKCk7XG5cbiAgICAgICAgbmV3X2ZhY3Rvci5tZXNzYWdlcy5wdXNoKG5ldyBnYXVzcy5HYXVzc2lhbihbWzBdLFswXV0sIFtbMCwwXSxbMCwwXV0pKTtcbiAgICAgICAgbmV3X2ZhY3Rvci5tZXNzYWdlcy5wdXNoKG5ldyBnYXVzcy5HYXVzc2lhbihbWzBdLFswXV0sIFtbMCwwXSxbMCwwXV0pKTtcbiAgICAgICAgZ3JhcGguZmFjdG9ycy5wdXNoKG5ld19mYWN0b3IpO1xuXG4gICAgICAgIGdyYXBoLnBvc2Vfbm9kZXNbbl9wb3NlX25vZGVzLTFdLmFkal9mYWN0b3JzLnB1c2gobmV3X2ZhY3Rvcik7XG4gICAgICAgIGdyYXBoLmxta19ub2Rlc1tsbWtfZ3JhcGhfaXhbal1dLmFkal9mYWN0b3JzLnB1c2gobmV3X2ZhY3Rvcik7XG5cbiAgICAgICAgLy8gZGF0YS5saW5rcy5wdXNoKHtcInNvdXJjZVwiOiBcImNhbVwiLmNvbmNhdCgobl9wb3NlX25vZGVzLTEpLnRvU3RyaW5nKCkpLCBcInRhcmdldFwiOiBcImxta1wiLmNvbmNhdChqLnRvU3RyaW5nKCkpfSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY2hlY2tBZGRWYXJOb2RlKCkge1xuICAgIHZhciBkaXN0ID0gTWF0aC5zcXJ0KE1hdGgucG93KHJvYm90X2xvY1swXSAtIGxhc3Rfa2V5X3Bvc2VbMF0sIDIpICsgXG4gICAgICAgICAgICAgICAgICAgICAgICBNYXRoLnBvdyhyb2JvdF9sb2NbMV0gLSBsYXN0X2tleV9wb3NlWzFdLCAyKSk7XG4gICAgaWYgKGRpc3QgPiBuZXdfcG9zZV9kaXN0KSB7XG4gICAgICBjb25zdCBuZXdfdmFyX25vZGUgPSBuZXcgZ2JwLlZhcmlhYmxlTm9kZSgyLCBuX2xhbmRtYXJrcyArIGdyYXBoLnBvc2Vfbm9kZXMubGVuZ3RoKTtcbiAgICAgIHZhciBsYW1iZGEgPSAxIC8gTWF0aC5wb3cocm9ib3RfcHJpb3Jfc3RkLCAyKTtcbiAgICAgIG5ld192YXJfbm9kZS5wcmlvci5sYW0gPSBuZXcgbS5NYXRyaXgoW1tsYW1iZGEsIDBdLCBbMCwgbGFtYmRhXV0pO1xuICAgICAgbmV3X3Zhcl9ub2RlLnByaW9yLmV0YSA9IG5ld192YXJfbm9kZS5wcmlvci5sYW0ubW11bChuZXcgbS5NYXRyaXgoW1tyb2JvdF9sb2NbMF1dLCBbcm9ib3RfbG9jWzFdXV0pKVxuICAgICAgbmV3X3Zhcl9ub2RlLnVwZGF0ZV9iZWxpZWYoKTtcbiAgICAgIGdyYXBoLnBvc2Vfbm9kZXMucHVzaChuZXdfdmFyX25vZGUpO1xuICAgICAgcG9zZXNfZ3QucHVzaCh7eDogcm9ib3RfbG9jWzBdLCB5OiByb2JvdF9sb2NbMV19KTtcbiAgICAgIGxhc3Rfa2V5X3Bvc2VbMF0gPSByb2JvdF9sb2NbMF07XG4gICAgICBsYXN0X2tleV9wb3NlWzFdID0gcm9ib3RfbG9jWzFdO1xuXG4gICAgICBhZGRPZG9tZXRyeUZhY3RvcigpO1xuICAgICAgYWRkTWVhc3VyZW1lbnRGYWN0b3JzKCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVzZXQoKSB7XG4gICAgc3luY19vbiA9IGZhbHNlO1xuICAgIG5faXRlcnMgPSAwO1xuICAgIGxhbmRtYXJrc19ndCA9IFtdO1xuICAgIHBvc2VzX2d0ID0gW107XG4gICAgbG1rX29ic2VydmVkX3lldCA9IFtdO1xuICAgIGxta19ncmFwaF9peCA9IFtdO1xuXG4gICAgLy8gQ3JlYXRlIGluaXRpYWwgZmFjdG9yIGdyYXBoXG4gICAgZ3JhcGggPSBuZXcgZ2JwLkZhY3RvckdyYXBoKCk7XG4gICAgbGV0IGZpcnN0X3Bvc2Vfbm9kZSA9IG5ldyBnYnAuVmFyaWFibGVOb2RlKDIsIG5fbGFuZG1hcmtzKTtcbiAgICBmaXJzdF9wb3NlX25vZGUucHJpb3IuZXRhID0gbmV3IG0uTWF0cml4KFtbcm9ib3RfbG9jWzBdXSwgW3JvYm90X2xvY1sxXV1dKTtcbiAgICBmaXJzdF9wb3NlX25vZGUucHJpb3IubGFtID0gbmV3IG0uTWF0cml4KFtbMSwgMF0sIFswLCAxXV0pOyAgXG4gICAgZmlyc3RfcG9zZV9ub2RlLnVwZGF0ZV9iZWxpZWYoKTtcbiAgICBncmFwaC5wb3NlX25vZGVzLnB1c2goZmlyc3RfcG9zZV9ub2RlKTtcbiAgICBwb3Nlc19ndC5wdXNoKHt4OiByb2JvdF9sb2NbMF0sIHk6IHJvYm90X2xvY1sxXX0pXG5cbiAgICAvLyBHZW5lcmF0ZSBsYW5kbWFya3MsIGZpcnN0IGxhbmRtYXJrIG5lYXIgcm9ib3RcbiAgICBsZXQgbG1rMV90b2RvID0gdHJ1ZTtcbiAgICB3aGlsZSAobG1rMV90b2RvKSB7XG4gICAgICB2YXIgeCA9IHJvYm90X2xvY1swXSArIE1hdGgucmFuZG9tKCkgKiBtZWFzX3JhbmdlIC8gTWF0aC5zcXJ0KDIpIC0gbWVhc19yYW5nZSAvICgyICogTWF0aC5zcXJ0KDIpKTsgXG4gICAgICB2YXIgeSA9IHJvYm90X2xvY1sxXSArIE1hdGgucmFuZG9tKCkgKiBtZWFzX3JhbmdlIC8gTWF0aC5zcXJ0KDIpIC0gbWVhc19yYW5nZSAvICgyICogTWF0aC5zcXJ0KDIpKTsgXG4gICAgICBpZiAoKHg+MjApICYmICh4PGNhbnZhcy53aWR0aC0yMCkgJiYgKHk+MjApICYmICh5PGNhbnZhcy5oZWlnaHQtMjApKSB7XG4gICAgICAgIGxtazFfdG9kbyA9IGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgICBsYW5kbWFya3NfZ3QucHVzaCh7eDogeCwgeTogeX0pO1xuICAgIGxta19vYnNlcnZlZF95ZXQucHVzaCgwKTtcbiAgICBsbWtfZ3JhcGhfaXgucHVzaCgtMSk7XG4gICAgZm9yICh2YXIgaT0wOyBpPG5fbGFuZG1hcmtzLTE7IGkrKykge1xuICAgICAgdmFyIHggPSBNYXRoLnJhbmRvbSgpKihjYW52YXMud2lkdGgtMjApICsgMTA7XG4gICAgICB2YXIgeSA9IE1hdGgucmFuZG9tKCkqKGNhbnZhcy5oZWlnaHQtMjApICsgMTA7XG4gICAgICBsYW5kbWFya3NfZ3QucHVzaCh7eDogeCwgeTogeX0pO1xuICAgICAgbG1rX29ic2VydmVkX3lldC5wdXNoKDApO1xuICAgICAgbG1rX2dyYXBoX2l4LnB1c2goLTEpO1xuICAgIH1cblxuICAgIGFkZE1lYXN1cmVtZW50RmFjdG9ycygpOyAgLy8gYWRkIGluaXRpYWwgbWVhc3VyZW1lbnRzXG5cbiAgICB0aGVuID0gRGF0ZS5ub3coKTtcbiAgICBzeW5jX29uID0gdHJ1ZTtcbiAgfVxuXG4gIC8vIFVzZXIgaW50ZXJhY3Rpb24gZnVuY3Rpb25zXG5cbiAgZnVuY3Rpb24gdG9nZ2xlR0JQKCkge1xuICAgIGlmIChzeW5jX29uKSB7XG4gICAgICBzeW5jX29uID0gZmFsc2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN5bmNfb24gPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHRvZ2dsZU1BUCgpIHtcbiAgICBpZiAoZGlzcGxheV9tYXAgPT0gZmFsc2UpIHtcbiAgICAgIGRpc3BsYXlfbWFwID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGlzcGxheV9tYXAgPSBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGVfb2RvbWV0cnlfbW9kZWxfc3RkKCkge1xuICAgIHZhciBsYW1iZGEgPSAxIC8gTWF0aC5wb3cob2RvbWV0cnlfc3RkLCAyKTtcbiAgICBmb3IgKHZhciBjPTA7IGM8Z3JhcGguZmFjdG9ycy5sZW5ndGg7IGMrKykge1xuICAgICAgaWYgKGdyYXBoLmZhY3RvcnNbY10uYWRqX3Zhcl9pZHNbMV0gPj0gbl9sYW5kbWFya3MpIHtcbiAgICAgICAgZ3JhcGguZmFjdG9yc1tjXS5sYW1iZGFzWzBdID0gbGFtYmRhO1xuICAgICAgICBncmFwaC5mYWN0b3JzW2NdLmNvbXB1dGVfZmFjdG9yKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gT24gY2xpY2tcbiAgZnVuY3Rpb24gYWRkTGFuZG1hcmsoZSkge1xuICAgIHZhciByZWxhdGl2ZVggPSBlLmNsaWVudFggLSBjYW52YXMub2Zmc2V0TGVmdDtcbiAgICB2YXIgcmVsYXRpdmVZID0gZS5jbGllbnRZIC0gY2FudmFzLm9mZnNldFRvcDtcbiAgICBpZihyZWxhdGl2ZVggPiAwICYmIHJlbGF0aXZlWCA8IGNhbnZhcy53aWR0aCAmJiByZWxhdGl2ZVkgPiAwICYmIHJlbGF0aXZlWSA8IGNhbnZhcy5oZWlnaHQpIHtcbiAgICAgIGxhbmRtYXJrcy5wdXNoKHt4OiByZWxhdGl2ZVgsIHk6IHJlbGF0aXZlWX0pO1xuICAgIH1cbiAgfVxuXG4gIC8vIE9uIGtleSBwcmVzc1xuICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCBjaGVja0tleSk7XG4gIGZ1bmN0aW9uIGNoZWNrS2V5KGUpIHtcbiAgICBlID0gZSB8fCB3aW5kb3cuZXZlbnQ7XG4gICAgaWYgKGUua2V5Q29kZSA9PSAnODcnKSB7XG4gICAgICBpZiAocm9ib3RfbG9jWzFdID4gdmFyX25vZGVfcmFkaXVzICsgc3RlcCkge1xuICAgICAgICByb2JvdF9sb2NbMV0gLT0gc3RlcDtcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAoZS5rZXlDb2RlID09ICc4MycpIHtcbiAgICAgIGlmIChyb2JvdF9sb2NbMV0gPCBjYW52YXMuaGVpZ2h0IC0gdmFyX25vZGVfcmFkaXVzIC0gc3RlcCkge1xuICAgICAgICByb2JvdF9sb2NbMV0gKz0gc3RlcDtcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAoZS5rZXlDb2RlID09ICc2NScpIHtcbiAgICAgIGlmIChyb2JvdF9sb2NbMF0gPiB2YXJfbm9kZV9yYWRpdXMgKyBzdGVwKSB7XG4gICAgICAgIHJvYm90X2xvY1swXSAtPSBzdGVwO1xuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmIChlLmtleUNvZGUgPT0gJzY4Jykge1xuICAgICAgaWYgKHJvYm90X2xvY1swXSA8IGNhbnZhcy53aWR0aCAtIHZhcl9ub2RlX3JhZGl1cyAtIHN0ZXApIHtcbiAgICAgICAgcm9ib3RfbG9jWzBdICs9IHN0ZXA7XG4gICAgICB9XG4gICAgfVxuICAgIGNoZWNrQWRkVmFyTm9kZSgpO1xuICB9XG5cbiAgICBmdW5jdGlvbiB0b2dnbGVGdWxsc2NyZWVuKCkge1xuICAgICAgaWYgKCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInJvYm90LW5vbmxpbmVhci1jb250YWluZXJcIikuY2xhc3NMaXN0LmNvbnRhaW5zKCdsLXBhZ2Utb3V0c2V0JykgKSB7XG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicm9ib3Qtbm9ubGluZWFyLWNvbnRhaW5lclwiKS5jbGFzc0xpc3QucmVtb3ZlKFwibC1wYWdlLW91dHNldFwiKTtcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJyb2JvdC1ub25saW5lYXItY29udGFpbmVyXCIpLmNsYXNzTGlzdC5hZGQoXCJsLXNjcmVlbi1pbnNldFwiKTtcbiAgICAgICAgZnVsbHNjcmVlbiA9IHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInJvYm90LW5vbmxpbmVhci1jb250YWluZXJcIikuY2xhc3NMaXN0LnJlbW92ZShcImwtc2NyZWVuLWluc2V0XCIpO1xuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInJvYm90LW5vbmxpbmVhci1jb250YWluZXJcIikuY2xhc3NMaXN0LmFkZChcImwtcGFnZS1vdXRzZXRcIik7XG4gICAgICAgIGZ1bGxzY3JlZW4gPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG5cblxuPC9zY3JpcHQ+XG5cbjxzdHlsZT5cbiAgLmNoYXJ0IHtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBoZWlnaHQ6IDUwMHB4O1xuLyogICAgd2lkdGg6IDEwMCU7XG4gICAgaGVpZ2h0OjEwMCU7XG4gICAgbWF4LXdpZHRoOiA2NDBweDtcbiAgICBoZWlnaHQ6IGNhbGMoMTAwJSAtIDRlbSk7XG4gICAgbWluLWhlaWdodDogMjgwcHg7XG4gICAgbWF4LWhlaWdodDogNDgwcHg7XG4gICAgbWFyZ2luOiAwIGF1dG87Ki9cbiAgfVxuPC9zdHlsZT5cblxuXG48ZGl2IGNsYXNzPVwiZGVtby1jb250YWluZXJcIj5cblxuICA8ZGl2IGlkPVwiZ2JwLWNvbnRhaW5lclwiPlxuICAgIDxjYW52YXMgYmluZDp0aGlzPXtjYW52YXN9IHdpZHRoPXsxNDAwfSBoZWlnaHQ9ezgwMH0+PC9jYW52YXM+XG4gICAgICA8ZGl2IGNsYXNzPVwidG9wLWxlZnRcIj5cbiAgICAgICAgeyNpZiBmdWxsc2NyZWVufVxuICAgICAgICAgIDxpIGNsYXNzPVwiZmEgZmEtY29tcHJlc3MtYXJyb3dzLWFsdCB0b29sdGlwLWZzXCIgb246Y2xpY2s9e3RvZ2dsZUZ1bGxzY3JlZW59IHN0eWxlPVwid2lkdGg6IDEwJVwiPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJ0b29sdGlwdGV4dFwiPlRvZ2dsZSBmdWxsc2NyZWVuPC9zcGFuPlxuICAgICAgICAgIDwvaT5cbiAgICAgICAgezplbHNlfVxuICAgICAgICAgIDxpIGNsYXNzPVwiZmFzIGZhLWV4cGFuZC1hcnJvd3MtYWx0IHRvb2x0aXAtZnNcIiBvbjpjbGljaz17dG9nZ2xlRnVsbHNjcmVlbn0gc3R5bGU9XCJ3aWR0aDoyMHB4XCI+XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cInRvb2x0aXB0ZXh0XCI+VG9nZ2xlIGZ1bGxzY3JlZW48L3NwYW4+XG4gICAgICAgICAgPC9pPlxuICAgICAgICAgIHsvaWZ9XG4gICAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwiYnV0dG9ucy1wYW5lbFwiPlxuICAgICAgeyNpZiBzeW5jX29ufVxuICAgICAgICA8aSBjbGFzcz1cImZhIGZhLXBhdXNlIHRvb2x0aXBcIiBvbjpjbGljaz17dG9nZ2xlR0JQfSBzdHlsZT1cIndpZHRoOjI1cHhcIj5cbiAgICAgICAgICA8c3BhbiBjbGFzcz1cInRvb2x0aXB0ZXh0XCI+UGF1c2Ugc3luY2hyb25vdXMgR0JQPC9zcGFuPlxuICAgICAgICA8L2k+XG4gICAgICB7OmVsc2V9XG4gICAgICAgIDxpIGNsYXNzPVwiZmEgZmEtcGxheSB0b29sdGlwXCIgIG9uOmNsaWNrPXt0b2dnbGVHQlB9IHN0eWxlPVwid2lkdGg6MjVweFwiPlxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwidG9vbHRpcHRleHRcIj5QbGF5IHN5bmNocm9ub3VzIEdCUDwvc3Bhbj5cbiAgICAgICAgPC9pPlxuICAgICAgey9pZn0gXG5cbiAgICAgIDxpIGNsYXNzPVwiZmEgZmEtcmVwZWF0IHRvb2x0aXBcIiBvbjpjbGljaz17cmVzZXR9PlxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwidG9vbHRpcHRleHRcIj5SZXNldDwvc3Bhbj5cbiAgICAgIDwvaT5cblxuICAgICAgeyNpZiBkaXNwbGF5X21hcH1cbiAgICAgICAgPGJ1dHRvbiBjbGFzcz1cInRvb2x0aXBcIiBvbjpjbGljaz17dG9nZ2xlTUFQfT4gXG4gICAgICAgIDxiPk1BUDwvYj5cbiAgICAgICAgICA8c3BhbiBjbGFzcz1cInRvb2x0aXB0ZXh0XCI+SGlkZSBNQVA8L3NwYW4+XG4gICAgICAgIDwvYnV0dG9uPlxuICAgICAgezplbHNlfVxuICAgICAgICA8YnV0dG9uIGNsYXNzPVwidG9vbHRpcFwiIG9uOmNsaWNrPXt0b2dnbGVNQVB9ICBzdHlsZT1cImNvbG9yOiByZ2IoMzksIDM2LCAzNiwgMC42KVwiPiBcbiAgICAgICAgPGI+TUFQPC9iPlxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwidG9vbHRpcHRleHRcIj5EaXNwbGF5IE1BUDwvc3Bhbj5cbiAgICAgICAgPC9idXR0b24+XG4gICAgICB7L2lmfSBcblxuICAgICAgPGRpdiBpZD1cImRlbW8tdGlwXCI+XG4gICAgICAgIDxpIGNsYXNzPVwiZmEgZmEta2V5Ym9hcmQtb1wiPjwvaT5cbiAgICAgICAgPGRpdiBpZD1cImhpbnRcIj5cbiAgICAgICAgICBVc2UgV0FTRCB0byBtb3ZlIHRoZSByb2JvdC4gICAgICAgICAgICAgICAgXG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG5cbiAgPGRpdiBpZD1cInNldHRpbmdzLXBhbmVsXCI+XG4gICAgPGI+SXRlcmF0aW9uIHtuX2l0ZXJzfTwvYj4gJm5ic3A7IChpdGVycyAvIHM6IHtpdGVyc19wZXJfc2VjfSlcbiAgICA8aW5wdXQgdHlwZT1cInJhbmdlXCIgbWluPVwiMVwiIG1heD1cIjUwXCIgYmluZDp2YWx1ZT17aXRlcnNfcGVyX3NlY30+PGJyPlxuXG4gICAgPGJyPjxiPlN0YW5kYXJkIGRldmlhdGlvbiBvZiBub2lzZSBpbiBHYXVzc2lhbiBtZWFzdXJlbWVudCBtb2RlbHM6PGJyPjwvYj5cblxuICAgIDxiPk9kb21ldHJ5PC9iPjxicj5cbiAgICBEaXN0YW5jZSBmYWN0b3JzLCAmc2lnbWEgPSA8Yj57b2RvbWV0cnlfZGlzdGFuY2Vfc3RkfTwvYj5cbiAgICA8aW5wdXQgdHlwZT1cInJhbmdlXCIgbWluPVwiNVwiIG1heD1cIjQwXCIgYmluZDp2YWx1ZT17b2RvbWV0cnlfZGlzdGFuY2Vfc3RkfT48YnI+IFxuICAgIEFuZ2xlIGZhY3RvcnMsICZzaWdtYSA9IDxiPntvZG9tZXRyeV9hbmdsZV9zdGR9PC9iPlxuICAgIDxpbnB1dCB0eXBlPVwicmFuZ2VcIiBtaW49XCIwLjAxXCIgbWF4PVwiMVwiIHN0ZXA9XCIwLjAxXCIgYmluZDp2YWx1ZT17b2RvbWV0cnlfYW5nbGVfc3RkfT48YnI+XG5cbiAgICA8Yj5MYW5kbWFyayBNZWFzdXJlbWVudHM8L2I+PGJyPlxuICAgIERpc3RhbmNlIGZhY3RvcnMsICZzaWdtYSA9IDxiPnttZWFzX2Rpc3RhbmNlX3N0ZH08L2I+XG4gICAgPGlucHV0IHR5cGU9XCJyYW5nZVwiIG1pbj1cIjMwXCIgbWF4PVwiMTAwXCIgYmluZDp2YWx1ZT17bWVhc19kaXN0YW5jZV9zdGR9Pjxicj4gXG4gICAgQW5nbGUgZmFjdG9ycywgJnNpZ21hID0gPGI+e21lYXNfYW5nbGVfc3RkfTwvYj5cbiAgICA8aW5wdXQgdHlwZT1cInJhbmdlXCIgbWluPVwiMC40XCIgbWF4PVwiMVwiIHN0ZXA9XCIwLjAxXCIgYmluZDp2YWx1ZT17bWVhc19hbmdsZV9zdGR9Pjxicj5cblxuXG4gIDwvZGl2PlxuPC9kaXY+XG5cbjwhLS0gPGRpdiBjbGFzcz1cImNoYXJ0XCI+XG4gIDxHcmFwaCBncmFwaD17ZGF0YX0vPlxuPC9kaXY+XG4gLS0+IiwiPHNjcmlwdD5cbiAgaW1wb3J0IHsgb25Nb3VudCB9IGZyb20gJ3N2ZWx0ZSc7XG4gIGltcG9ydCB7IGZhZGUgfSBmcm9tICdzdmVsdGUvdHJhbnNpdGlvbic7XG5cbiAgaW1wb3J0ICogYXMgbSBmcm9tICdtbC1tYXRyaXgnO1xuICBpbXBvcnQgKiBhcyByIGZyb20gJ3JhbmRvbSc7XG5cbiAgaW1wb3J0ICogYXMgZ2F1c3MgZnJvbSAnLi4vZ2F1c3NpYW4nO1xuICBpbXBvcnQgKiBhcyBnYnAgZnJvbSAnLi4vZ2JwL2dicDJkLmpzJztcblxuXHRpbXBvcnQgeyBvbkludGVydmFsIH0gZnJvbSAnLi4vdXRpbC5qcyc7XG5cbiAgLy8gVmlzdWFsIHZhcmFpYmxlc1xuICBsZXQgY2FudmFzO1xuICBsZXQgdmFyX25vZGVfcmFkaXVzID0gOTtcbiAgbGV0IGd0X25vZGVfcmFkaXVzID0gNjtcblxuICBsZXQgdGhlbjsgLy8gdGltZSBvZiBzdGFydCBvZiB2aXNcbiAgbGV0IGRpc3BsYXlfbWFwID0gZmFsc2U7XG4gIGxldCB2aXNpYmxlX2FsZXJ0ID0gZmFsc2U7XG4gIGxldCBmdWxsc2NyZWVuID0gZmFsc2U7XG4gIGxldCBzdGFydGVkID0gZmFsc2U7XG5cbiAgLy8gTWVhc3VyZW1lbnQgbW9kZWxcbiAgbGV0IG1lYXNfcmFuZ2UgPSAxNzA7XG4gIGxldCBsbWtfcHJpb3Jfc3RkID0gNjA7XG4gIGxldCByb2JvdF9wcmlvcl9zdGQgPSA2MDtcblxuICBsZXQgb2RvbWV0cnlfZGlzdGFuY2Vfc3RkID0gODA7XG4gIGxldCBvZG9tZXRyeV9hbmdsZV9zdGQgPSAwLjU7XG4gIGxldCBtZWFzX2Rpc3RhbmNlX3N0ZCA9IDgwO1xuICBsZXQgbWVhc19hbmdsZV9zdGQgPSAwLjU7XG5cbiAgY29uc3Qgb2RvbWV0cnlfYW5nbGVfbm9pc2UgPSByLm5vcm1hbCgwLCAwLjAyKTtcbiAgY29uc3Qgb2RvbWV0cnlfZGlzdF9ub2lzZSA9IHIubm9ybWFsKDAsIDUpO1xuICBjb25zdCBtZWFzX2FuZ2xlX25vaXNlID0gci5ub3JtYWwoMCwgMC4wMik7XG4gIGNvbnN0IG1lYXNfZGlzdF9ub2lzZSA9IHIubm9ybWFsKDAsIDUpO1xuXG4gIC8vIEdCUCB2YXJpYWJsZXNcbiAgbGV0IGdyYXBoO1xuICBsZXQgcG9zZXNfZ3QgPSBbXTtcbiAgbGV0IG5fbGFuZG1hcmtzO1xuXG4gIC8vIExhbmRtYXJrc1xuICBsZXQgbGFuZG1hcmtzX2d0ID0gW107XG4gIGxldCBsbWtfb2JzZXJ2ZWRfeWV0ID0gW107XG4gIGxldCBsbWtfZ3JhcGhfaXggPSBbXTtcblxuICBsZXQgc3luY19vbiA9IGZhbHNlO1xuICBsZXQgbl9pdGVycyA9IDA7XG4gIGxldCBpdGVyc19wZXJfc2VjID0gMjU7XG4gIGxldCBkaXN0ID0gMDsgLy8gQXZlcmFnZSBkaXN0YW5jZSBvZiBiZWxpZWYgbWVhbnMgZnJvbSBNQVAgc29sdXRpb25cblxuICAvLyBSb2JvdCBtb3Rpb24gcGFyYW1zXG4gIGxldCByb2JvdF9sb2MgPSBbMTgwLCA1ODBdO1xuICBsZXQgbGFzdF9rZXlfcG9zZSA9IFsxODAsIDU4MF07XG4gIGNvbnN0IHN0ZXAgPSAxMTtcbiAgbGV0IG5ld19wb3NlX2Rpc3QgPSA3NTtcblxuICBmb3IgKHZhciBpPTA7IGk8bGFuZG1hcmtzX2d0Lmxlbmd0aDsgaSsrKSB7XG4gICAgbG1rX29ic2VydmVkX3lldC5wdXNoKDApO1xuICAgIGxta19ncmFwaF9peC5wdXNoKC0xKTtcbiAgfVxuXG4gIG9uTW91bnQoKCkgPT4ge1xuICAgIGNvbnN0IGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIik7XG4gICAgY3R4LmxpbmVXaWR0aCA9IDQ7XG5cbiAgICBmb3IgKHZhciBjPTA7IGM8ODsgYysrKSB7XG4gICAgICB2YXIgeCA9IDYwICsgYyAqIChjYW52YXMud2lkdGgtMTIwKSAvIDc7XG4gICAgICB2YXIgeV9ib3R0b20gPSA3NDA7XG4gICAgICB2YXIgeV90b3AgPSA2MDtcbiAgICAgIGxhbmRtYXJrc19ndC5wdXNoKHt4OngsIHk6eV9ib3R0b219KTtcbiAgICAgIGxhbmRtYXJrc19ndC5wdXNoKHt4OngsIHk6eV90b3B9KTtcbiAgICB9XG4gICAgZm9yICh2YXIgYz0wOyBjPDQ7IGMrKykge1xuICAgICAgdmFyIHggPSA0MDAgKyBjICogKGNhbnZhcy53aWR0aC04MDApIC8gMztcbiAgICAgIHZhciB5X21pZGRsZSA9IDQwMDtcbiAgICAgIGxhbmRtYXJrc19ndC5wdXNoKHt4OngsIHk6eV9taWRkbGV9KTtcbiAgICB9XG4gICAgZm9yICh2YXIgYz0wOyBjPDM7IGMrKykge1xuICAgICAgdmFyIHkgPSAyMDAgKyBjICogKGNhbnZhcy5oZWlnaHQtNDAwKSAvIDI7XG4gICAgICB2YXIgeF9yaWdodCA9IGNhbnZhcy53aWR0aCAtIDYwO1xuICAgICAgdmFyIHhfbGVmdCA9IDYwO1xuICAgICAgbGFuZG1hcmtzX2d0LnB1c2goe3g6eF9yaWdodCwgeTp5fSk7XG4gICAgICBsYW5kbWFya3NfZ3QucHVzaCh7eDp4X2xlZnQsIHk6eX0pO1xuICAgIH1cblxuICAgIG5fbGFuZG1hcmtzID0gbGFuZG1hcmtzX2d0Lmxlbmd0aDtcblxuICAgIC8vIENyZWF0ZSBpbml0aWFsIGZhY3RvciBncmFwaFxuICAgIGdyYXBoID0gbmV3IGdicC5GYWN0b3JHcmFwaCgpO1xuICAgIGxldCBmaXJzdF92YXJfbm9kZSA9IG5ldyBnYnAuVmFyaWFibGVOb2RlKDIsIG5fbGFuZG1hcmtzKTtcbiAgICBmaXJzdF92YXJfbm9kZS5wcmlvci5ldGEgPSBuZXcgbS5NYXRyaXgoW1tyb2JvdF9sb2NbMF1dLCBbcm9ib3RfbG9jWzFdXV0pO1xuICAgIGZpcnN0X3Zhcl9ub2RlLnByaW9yLmxhbSA9IG5ldyBtLk1hdHJpeChbWzEsIDBdLCBbMCwgMV1dKTsgIC8vIHN0cm9uZyBwcmlvciBmb3IgZmlyc3QgbWVhc3VyZW1lbnRcbiAgICBmaXJzdF92YXJfbm9kZS51cGRhdGVfYmVsaWVmKCk7XG4gICAgZ3JhcGgucG9zZV9ub2Rlcy5wdXNoKGZpcnN0X3Zhcl9ub2RlKTtcbiAgICBwb3Nlc19ndC5wdXNoKHt4OiByb2JvdF9sb2NbMF0sIHk6IHJvYm90X2xvY1sxXX0pXG5cbiAgICBhZGRNZWFzdXJlbWVudEZhY3RvcnMoKTsgIC8vIGFkZCBpbml0aWFsIG1lYXN1cmVtZW50c1xuICAgIHRoZW4gPSBEYXRlLm5vdygpO1xuICB9KTtcblxuXHRvbkludGVydmFsKCgpID0+IHVwZGF0ZVZpcygpLCAyNSk7XG5cbi8vICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogRHJhd2luZyBmdW5jdGlvbnMgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcblxuICBmdW5jdGlvbiBkcmF3Um9ib3QoKSB7XG4gICAgY29uc3QgY3R4ID0gY2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcbiAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgY3R4LmFyYyhyb2JvdF9sb2NbMF0sIHJvYm90X2xvY1sxXSwgdmFyX25vZGVfcmFkaXVzLCAwLCBNYXRoLlBJKjIpO1xuICAgIGN0eC5maWxsU3R5bGUgPSBcInJlZFwiO1xuICAgIGN0eC5maWxsKCk7XG4gICAgY3R4LmNsb3NlUGF0aCgpO1xuICB9XG5cbiAgZnVuY3Rpb24gZHJhd1Bvc2VOb2RlcygpIHtcbiAgICBjb25zdCBjdHggPSBjYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpO1xuICAgIGZvcih2YXIgYz0wOyBjPGdyYXBoLnBvc2Vfbm9kZXMubGVuZ3RoOyBjKyspIHtcbiAgICAgIGNvbnN0IG1lYW4gPSBncmFwaC5wb3NlX25vZGVzW2NdLmJlbGllZi5nZXRNZWFuKCk7XG4gICAgICB2YXIgeCA9IG1lYW4uZ2V0KDAsIDApO1xuICAgICAgdmFyIHkgPSBtZWFuLmdldCgxLCAwKTtcblxuICAgICAgLy8gRHJhdyBtZWFuc1xuICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgY3R4LmFyYyh4LCB5LCB2YXJfbm9kZV9yYWRpdXMsIDAsIE1hdGguUEkqMik7XG4gICAgICBjdHguZmlsbFN0eWxlID0gXCIjMDA5NUREXCI7XG4gICAgICBjdHguZmlsbCgpO1xuICAgICAgY3R4LmNsb3NlUGF0aCgpO1xuXG4gICAgICB2YXIgdmFsdWVzID0gZ3JhcGgucG9zZV9ub2Rlc1tjXS5iZWxpZWYuZ2V0Q292RWxsaXBzZSgpO1xuICAgICAgdmFyIGVpZ192YWx1ZXMgPSB2YWx1ZXNbMF07XG4gICAgICB2YXIgYW5nbGUgPSB2YWx1ZXNbMV07XG5cbiAgICAgIC8vIERyYXcgdmFyaWFuY2VzXG4gICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICBjdHguZWxsaXBzZSh4LCB5LCBNYXRoLnNxcnQoZWlnX3ZhbHVlc1swXSksIE1hdGguc3FydChlaWdfdmFsdWVzWzFdKSwgYW5nbGUsIDAsIDIqTWF0aC5QSSlcbiAgICAgIGN0eC5zdHJva2VTdHlsZSA9IFwiIzAwOTVERFwiO1xuICAgICAgY3R4LnN0cm9rZSgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGRyYXdMYW5kbWFya05vZGVzKCkge1xuICAgIGNvbnN0IGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIik7XG4gICAgZm9yKHZhciBjPTA7IGM8Z3JhcGgubG1rX25vZGVzLmxlbmd0aDsgYysrKSB7XG4gICAgICBjb25zdCBtZWFuID0gZ3JhcGgubG1rX25vZGVzW2NdLmJlbGllZi5nZXRNZWFuKCk7XG4gICAgICB2YXIgeCA9IG1lYW4uZ2V0KDAsIDApO1xuICAgICAgdmFyIHkgPSBtZWFuLmdldCgxLCAwKTtcblxuICAgICAgLy8gRHJhdyBtZWFuc1xuICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgY3R4LmFyYyh4LCB5LCB2YXJfbm9kZV9yYWRpdXMsIDAsIE1hdGguUEkqMik7XG4gICAgICBjdHguZmlsbFN0eWxlID0gXCJ5ZWxsb3dcIjtcbiAgICAgIGN0eC5maWxsKCk7XG4gICAgICBjdHguY2xvc2VQYXRoKCk7XG5cbiAgICAgIHZhciB2YWx1ZXMgPSBncmFwaC5sbWtfbm9kZXNbY10uYmVsaWVmLmdldENvdkVsbGlwc2UoKTtcbiAgICAgIHZhciBlaWdfdmFsdWVzID0gdmFsdWVzWzBdO1xuICAgICAgdmFyIGFuZ2xlID0gdmFsdWVzWzFdO1xuXG4gICAgICAvLyBEcmF3IHZhcmlhbmNlc1xuICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgY3R4LmVsbGlwc2UoeCwgeSwgTWF0aC5zcXJ0KGVpZ192YWx1ZXNbMF0pLCBNYXRoLnNxcnQoZWlnX3ZhbHVlc1sxXSksIGFuZ2xlLCAwLCAyKk1hdGguUEkpXG4gICAgICBjdHguc3Ryb2tlU3R5bGUgPSBcInllbGxvd1wiO1xuICAgICAgY3R4LnN0cm9rZSgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGRyYXdQb3Nlc0dUKCkge1xuICAgIGNvbnN0IGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIik7XG4gICAgZm9yKHZhciBpPTA7IGk8cG9zZXNfZ3QubGVuZ3RoOyBpKyspIHtcbiAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgIGN0eC5hcmMocG9zZXNfZ3RbaV0ueCwgcG9zZXNfZ3RbaV0ueSwgZ3Rfbm9kZV9yYWRpdXMsIDAsIE1hdGguUEkqMik7XG4gICAgICBjdHguZmlsbFN0eWxlID0gXCJibGFja1wiO1xuICAgICAgY3R4LmZpbGwoKTtcbiAgICAgIGN0eC5jbG9zZVBhdGgoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBkcmF3TGFuZG1hcmtzR1QoKSB7XG4gICAgY29uc3QgY3R4ID0gY2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcbiAgICBmb3IgKHZhciBpPTA7IGk8bGFuZG1hcmtzX2d0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICBjdHguYXJjKGxhbmRtYXJrc19ndFtpXS54LCBsYW5kbWFya3NfZ3RbaV0ueSwgZ3Rfbm9kZV9yYWRpdXMsIDAsIE1hdGguUEkqMik7XG4gICAgICBjdHguZmlsbFN0eWxlID0gXCJvcmFuZ2VcIjtcbiAgICAgIGN0eC5maWxsKCk7XG4gICAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZHJhd0xpbmVzKCkge1xuICAgIGNvbnN0IGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIik7XG4gICAgZm9yICh2YXIgYz0wOyBjPGdyYXBoLmZhY3RvcnMubGVuZ3RoOyBjKyspIHtcbiAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgIGlmICgoZ3JhcGguZmFjdG9yc1tjXS5hZGpfdmFyX2lkc1sxXSA8IG5fbGFuZG1hcmtzKSkge1xuICAgICAgICBjb25zdCBtZWFuMCA9IGdyYXBoLnBvc2Vfbm9kZXNbZ3JhcGguZmFjdG9yc1tjXS5hZGpfdmFyX2lkc1swXSAtIG5fbGFuZG1hcmtzXS5iZWxpZWYuZ2V0TWVhbigpO1xuICAgICAgICBjb25zdCBtZWFuMSA9IGdyYXBoLmxta19ub2Rlc1tsbWtfZ3JhcGhfaXhbZ3JhcGguZmFjdG9yc1tjXS5hZGpfdmFyX2lkc1sxXV1dLmJlbGllZi5nZXRNZWFuKCk7XG4gICAgICAgIGN0eC5tb3ZlVG8obWVhbjAuZ2V0KDAsMCksIG1lYW4wLmdldCgxLDApKTtcbiAgICAgICAgY3R4LmxpbmVUbyhtZWFuMS5nZXQoMCwwKSwgbWVhbjEuZ2V0KDEsMCkpO1xuICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSBcImJsYWNrXCI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBtZWFuMCA9IGdyYXBoLnBvc2Vfbm9kZXNbZ3JhcGguZmFjdG9yc1tjXS5hZGpfdmFyX2lkc1swXSAtIG5fbGFuZG1hcmtzXS5iZWxpZWYuZ2V0TWVhbigpO1xuICAgICAgICBjb25zdCBtZWFuMSA9IGdyYXBoLnBvc2Vfbm9kZXNbZ3JhcGguZmFjdG9yc1tjXS5hZGpfdmFyX2lkc1sxXSAtIG5fbGFuZG1hcmtzXS5iZWxpZWYuZ2V0TWVhbigpO1xuICAgICAgICBjdHgubW92ZVRvKG1lYW4wLmdldCgwLDApLCBtZWFuMC5nZXQoMSwwKSk7XG4gICAgICAgIGN0eC5saW5lVG8obWVhbjEuZ2V0KDAsMCksIG1lYW4xLmdldCgxLDApKTsgXG4gICAgICAgIGN0eC5zdHJva2VTdHlsZSA9IFwiYmx1ZVwiO1xuICAgICAgfVxuICAgICAgICBjdHguc3Ryb2tlKCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZHJhd01BUCgpIHtcbiAgICBjb25zdCBjdHggPSBjYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpO1xuICAgIHZhciB2YWx1ZXMgPSBncmFwaC5jb21wdXRlTUFQKG5fbGFuZG1hcmtzLCBsbWtfZ3JhcGhfaXgpO1xuICAgIGNvbnN0IG1lYW5zID0gdmFsdWVzWzBdO1xuICAgIGNvbnN0IGJpZ1NpZ21hID0gdmFsdWVzWzFdO1xuICAgIGZvcih2YXIgYz0wOyBjPGdyYXBoLmxta19ub2Rlcy5sZW5ndGg7IGMrKykge1xuICAgICAgY29uc3QgbWVhbiA9IG5ldyBtLk1hdHJpeFN1YlZpZXcobWVhbnMsIGMqMiwgYyoyKzEsIDAsIDApO1xuICAgICAgY29uc3QgU2lnbWEgPSBuZXcgbS5NYXRyaXhTdWJWaWV3KGJpZ1NpZ21hLCBjKjIsIGMqMisxLCBjKjIsIGMqMisxKTtcbiAgICAgIHZhciB4ID0gbWVhbi5nZXQoMCwgMCk7XG4gICAgICB2YXIgeSA9IG1lYW4uZ2V0KDEsIDApO1xuXG4gICAgICAvLyBEcmF3IG1lYW5zXG4gICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICBjdHguYXJjKHgsIHksIHZhcl9ub2RlX3JhZGl1cywgMCwgTWF0aC5QSSoyKTtcbiAgICAgIGN0eC5maWxsU3R5bGUgPSBcImdyZWVuXCI7XG4gICAgICBjdHguZmlsbCgpO1xuICAgICAgY3R4LmNsb3NlUGF0aCgpO1xuXG4gICAgICB2YXIgdmFsdWVzID0gZ2F1c3MuZ2V0RWxsaXBzZShTaWdtYSk7XG4gICAgICB2YXIgZWlnX3ZhbHVlcyA9IHZhbHVlc1swXTtcbiAgICAgIHZhciBhbmdsZSA9IHZhbHVlc1sxXTtcblxuICAgICAgLy8gRHJhdyB2YXJpYW5jZXNcbiAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgIGN0eC5lbGxpcHNlKHgsIHksIE1hdGguc3FydChlaWdfdmFsdWVzWzBdKSwgTWF0aC5zcXJ0KGVpZ192YWx1ZXNbMV0pLCBhbmdsZSwgMCwgMipNYXRoLlBJKVxuICAgICAgY3R4LnN0cm9rZVN0eWxlID0gXCJncmVlblwiO1xuICAgICAgY3R4LnN0cm9rZSgpO1xuICAgIH1cbiAgICBmb3IodmFyIGM9MDsgYzxncmFwaC5wb3NlX25vZGVzLmxlbmd0aDsgYysrKSB7XG4gICAgICBjb25zdCBpID0gYyArIGdyYXBoLmxta19ub2Rlcy5sZW5ndGg7XG4gICAgICBjb25zdCBtZWFuID0gbmV3IG0uTWF0cml4KG5ldyBtLk1hdHJpeFN1YlZpZXcobWVhbnMsIGkqMiwgaSoyKzEsIDAsIDApKTtcbiAgICAgIGNvbnN0IFNpZ21hID0gbmV3IG0uTWF0cml4KG5ldyBtLk1hdHJpeFN1YlZpZXcoYmlnU2lnbWEsIGkqMiwgaSoyKzEsIGkqMiwgaSoyKzEpKTtcbiAgICAgIHZhciB4ID0gbWVhbi5nZXQoMCwgMCk7XG4gICAgICB2YXIgeSA9IG1lYW4uZ2V0KDEsIDApO1xuXG4gICAgICAvLyBEcmF3IG1lYW5zXG4gICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICBjdHguYXJjKHgsIHksIHZhcl9ub2RlX3JhZGl1cywgMCwgTWF0aC5QSSoyKTtcbiAgICAgIGN0eC5maWxsU3R5bGUgPSBcImdyZWVuXCI7XG4gICAgICBjdHguZmlsbCgpO1xuICAgICAgY3R4LmNsb3NlUGF0aCgpO1xuXG4gICAgICB2YXIgdmFsdWVzID0gZ2F1c3MuZ2V0RWxsaXBzZShTaWdtYSk7XG4gICAgICB2YXIgZWlnX3ZhbHVlcyA9IHZhbHVlc1swXTtcbiAgICAgIHZhciBhbmdsZSA9IHZhbHVlc1sxXTtcblxuICAgICAgLy8gRHJhdyB2YXJpYW5jZXNcbiAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgIGN0eC5lbGxpcHNlKHgsIHksIE1hdGguc3FydChlaWdfdmFsdWVzWzBdKSwgTWF0aC5zcXJ0KGVpZ192YWx1ZXNbMV0pLCBhbmdsZSwgMCwgMipNYXRoLlBJKVxuICAgICAgY3R4LnN0cm9rZVN0eWxlID0gXCJncmVlblwiO1xuICAgICAgY3R4LnN0cm9rZSgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZVZpcygpIHtcbiAgICBjb25zdCBjdHggPSBjYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpO1xuICAgIGN0eC5jbGVhclJlY3QoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcblxuICAgIHZhciBmcHNJbnRlcnZhbCA9IDEwMDAgLyBpdGVyc19wZXJfc2VjO1xuICAgIHZhciBub3cgPSBEYXRlLm5vdygpO1xuICAgIHZhciBlbGFwc2VkID0gbm93IC0gdGhlbjtcbiAgICBpZiAoZWxhcHNlZCA+IGZwc0ludGVydmFsKSB7XG4gICAgICB0aGVuID0gbm93IC0gKGVsYXBzZWQgJSBmcHNJbnRlcnZhbCk7XG4gICAgICBpZiAoc3luY19vbikge1xuICAgICAgICBzeW5jR0JQKCk7XG4gICAgICB9IFxuICAgIH1cblxuICAgIGRyYXdMaW5lcygpO1xuICAgIGRyYXdSb2JvdCgpO1xuICAgIGRyYXdQb3NlTm9kZXMoKTtcbiAgICBkcmF3TGFuZG1hcmtOb2RlcygpO1xuICAgIGRyYXdQb3Nlc0dUKCk7XG4gICAgZHJhd0xhbmRtYXJrc0dUKCk7XG4gICAgaWYgKGRpc3BsYXlfbWFwKSB7XG4gICAgICBkcmF3TUFQKCk7XG4gICAgfVxuICAgIHZhciByZWN0ID0gY2FudmFzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIGlmICghKHN0YXJ0ZWQpICYmIChyZWN0LnRvcCA8IHdpbmRvdy5pbm5lckhlaWdodCkpIHtcbiAgICAgIHN5bmNfb24gPSB0cnVlO1xuICAgICAgc3RhcnRlZCA9IHRydWU7XG4gICAgfVxuICB9XG5cblxuICAvLyAqKioqKioqKioqKioqKioqKioqIEdCUCBmdW5jdGlvbnMgKioqKioqKioqKioqKioqKioqKioqKipcblxuICBmdW5jdGlvbiBzeW5jR0JQKCkge1xuICAgIGdyYXBoLnN5bmNfaXRlcigpO1xuICAgIHJlbGluZWFyaXNlKCk7XG4gICAgaWYgKCEobl9pdGVycyA9PSAwKSkge1xuICAgICAgZGlzdCA9IGdyYXBoLmNvbXBhcmVfdG9fTUFQKG5fbGFuZG1hcmtzLCBsbWtfZ3JhcGhfaXgpOyAgIFxuICAgIH1cbiAgICBuX2l0ZXJzKys7XG4gIH1cblxuICAvLyBKYWNvYmlhbiBmdW5jdGlvbiBmb3Igbm9ubGluZWFyIGJlYXJpbmcgYW5kIGRpc3RhbmNlIG1lYXN1cmVtZW50XG4gIGZ1bmN0aW9uIGdldEphYyhjYW1fY29vcmRzLCBsbWtfY29vcmRzKSB7XG4gICAgdmFyIHgxID0gY2FtX2Nvb3Jkcy5nZXQoMCwwKTtcbiAgICB2YXIgeTEgPSBjYW1fY29vcmRzLmdldCgxLDApO1xuICAgIHZhciB4MiA9IGxta19jb29yZHMuZ2V0KDAsMCk7XG4gICAgdmFyIHkyID0gbG1rX2Nvb3Jkcy5nZXQoMSwwKTtcbiAgICB2YXIgZCA9IE1hdGguc3FydChNYXRoLnBvdyh4Mi14MSwgMikgKyBNYXRoLnBvdyh5Mi15MSwgMikpO1xuICAgIFxuICAgIHZhciBqMDAgPSAoeTIteTEpKih4Mi14MSkgLyBNYXRoLnBvdyhkLCAzKTtcbiAgICB2YXIgajAxID0gTWF0aC5wb3coeTIteTEsIDIpIC8gTWF0aC5wb3coZCwgMykgLSAxL2Q7XG4gICAgdmFyIGowMiA9IC0oeTIteTEpKih4Mi14MSkgLyBNYXRoLnBvdyhkLCAzKTtcbiAgICB2YXIgajAzID0gLU1hdGgucG93KHkyLXkxLCAyKSAvIE1hdGgucG93KGQsIDMpICsgMS9kO1xuICAgIHZhciBqMTAgPSAtKHgyLXgxKSAvIGQ7XG4gICAgdmFyIGoxMSA9IC0oeTIteTEpIC8gZDtcbiAgICB2YXIgajEyID0gKHgyLXgxKSAvIGQ7XG4gICAgdmFyIGoxMyA9ICh5Mi15MSkgLyBkO1xuXG4gICAgcmV0dXJuIG5ldyBtLk1hdHJpeChbW2owMCwgajAxLCBqMDIsIGowM10sIFtqMTAsIGoxMSwgajEyLCBqMTNdXSk7XG4gIH1cblxuICBmdW5jdGlvbiByZWxpbmVhcmlzZSgpIHtcbiAgICBmb3IodmFyIGM9MDsgYzxncmFwaC5mYWN0b3JzLmxlbmd0aDsgYysrKSB7XG4gICAgICAvLyBDb21wdXRlIG5ldyBqYWNcbiAgICAgIGNvbnN0IGNhbV9jb29yZHMgPSBncmFwaC5mYWN0b3JzW2NdLmFkal9iZWxpZWZzWzBdLmdldE1lYW4oKTtcbiAgICAgIGNvbnN0IGxta19jb29yZHMgPSBncmFwaC5mYWN0b3JzW2NdLmFkal9iZWxpZWZzWzFdLmdldE1lYW4oKTtcbiAgICAgIHZhciBsaW5fcG9pbnQgPSBuZXcgbS5NYXRyaXgoW1tjYW1fY29vcmRzLmdldCgwLDApXSwgW2NhbV9jb29yZHMuZ2V0KDEsMCldLCBbbG1rX2Nvb3Jkcy5nZXQoMCwwKV0sIFtsbWtfY29vcmRzLmdldCgxLDApXV0pO1xuICAgICAgbGV0IGphYyA9IGdldEphYyhjYW1fY29vcmRzLCBsbWtfY29vcmRzKTtcbiAgICAgIGdyYXBoLmZhY3RvcnNbY10uamFjc1swXSA9IGphYztcblxuICAgICAgZ3JhcGguZmFjdG9yc1tjXS5mYWN0b3IuZXRhID0gbS5NYXRyaXguemVyb3MoZ3JhcGguZmFjdG9yc1tjXS5kb2ZzLCAxKTtcbiAgICAgIGdyYXBoLmZhY3RvcnNbY10uZmFjdG9yLmxhbSA9IG0uTWF0cml4Lnplcm9zKGdyYXBoLmZhY3RvcnNbY10uZG9mcywgZ3JhcGguZmFjdG9yc1tjXS5kb2ZzKTtcblxuICAgICAgaWYgKGdyYXBoLmZhY3RvcnNbY10uYWRqX3Zhcl9pZHNbMV0gPj0gbl9sYW5kbWFya3MpIHtcbiAgICAgICAgdmFyIGxhbWJkYSA9IG5ldyBtLk1hdHJpeChbWzEgLyBNYXRoLnBvdyhvZG9tZXRyeV9hbmdsZV9zdGQsIDIpLCAwXSwgWzAsIDEgLyBNYXRoLnBvdyhvZG9tZXRyeV9kaXN0YW5jZV9zdGQsIDIpXV0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGxhbWJkYSA9IG5ldyBtLk1hdHJpeChbWzEgLyBNYXRoLnBvdyhtZWFzX2FuZ2xlX3N0ZCwgMiksIDBdLCBbMCwgMSAvIE1hdGgucG93KG1lYXNfZGlzdGFuY2Vfc3RkLCAyKV1dKTtcbiAgICAgIH1cbiAgICAgIGdyYXBoLmZhY3RvcnNbY10ubGFtYmRhc1swXSA9IGxhbWJkYTtcblxuICAgICAgdmFyIGQgPSBNYXRoLnNxcnQoTWF0aC5wb3cobG1rX2Nvb3Jkcy5nZXQoMCwwKS1jYW1fY29vcmRzLmdldCgwLDApLCAyKSArIE1hdGgucG93KGxta19jb29yZHMuZ2V0KDEsMCktY2FtX2Nvb3Jkcy5nZXQoMSwwKSwgMikpO1xuICAgICAgY29uc3QgbWVhc3VyZW1lbnQgPSBuZXcgbS5NYXRyaXgoW1sobG1rX2Nvb3Jkcy5nZXQoMSwwKSAtIGNhbV9jb29yZHMuZ2V0KDEsMCkpIC8gZF0sIFtkXV0pO1xuICAgICAgY29uc3QgYnJhY2tldCA9IGphYy5tbXVsKGxpbl9wb2ludCkuYWRkKGdyYXBoLmZhY3RvcnNbY10ubWVhc1swXSkuc3ViKG1lYXN1cmVtZW50KTtcbiAgICAgIGdyYXBoLmZhY3RvcnNbY10uZmFjdG9yLmV0YS5hZGQoKGphYy50cmFuc3Bvc2UoKS5tbXVsKGxhbWJkYSkpLm1tdWwoYnJhY2tldCkgKTtcbiAgICAgIGdyYXBoLmZhY3RvcnNbY10uZmFjdG9yLmxhbS5hZGQoKGphYy50cmFuc3Bvc2UoKS5tbXVsKGxhbWJkYSkpLm1tdWwoamFjKSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gYWRkTGFuZG1hcmtOb2RlKGl4KSB7XG4gICAgY29uc3QgbG1rX25vZGUgPSBuZXcgZ2JwLlZhcmlhYmxlTm9kZSgyLCBpeCk7XG4gICAgdmFyIGxhbWJkYSA9IDEgLyBNYXRoLnBvdyhsbWtfcHJpb3Jfc3RkLCAyKTtcbiAgICBsbWtfbm9kZS5wcmlvci5sYW0gPSBuZXcgbS5NYXRyaXgoW1tsYW1iZGEsIDBdLCBbMCwgbGFtYmRhXV0pO1xuICAgIGxta19ub2RlLnByaW9yLmV0YSA9IGxta19ub2RlLnByaW9yLmxhbS5tbXVsKG5ldyBtLk1hdHJpeChbW2xhbmRtYXJrc19ndFtpeF0ueF0sIFtsYW5kbWFya3NfZ3RbaXhdLnldXSkpO1xuICAgIGxta19ub2RlLnVwZGF0ZV9iZWxpZWYoKTtcbiAgICBsbWtfZ3JhcGhfaXhbaXhdID0gZ3JhcGgubG1rX25vZGVzLmxlbmd0aDtcbiAgICBncmFwaC5sbWtfbm9kZXMucHVzaChsbWtfbm9kZSk7XG4gIH1cblxuICAvLyBBZGQgb2RvbWV0cnkgZmFjdG9yIGNvbm5lY3RpbmcgdG8gbW9zdCByZWNlbnQgcG9zZSB0byBwZW51bHRpbWF0ZSBwb3NlXG4gIGZ1bmN0aW9uIGFkZE9kb21ldHJ5RmFjdG9yKCkge1xuICAgIHZhciBuX3Bvc2Vfbm9kZXMgPSBncmFwaC5wb3NlX25vZGVzLmxlbmd0aDtcblxuICAgIGNvbnN0IG9kb21ldHJ5X2ZhY3RvciA9IG5ldyBnYnAuTGluZWFyRmFjdG9yKDQsIFtncmFwaC5wb3NlX25vZGVzW25fcG9zZV9ub2Rlcy0yXS52YXJfaWQsIGdyYXBoLnBvc2Vfbm9kZXNbbl9wb3NlX25vZGVzLTFdLnZhcl9pZF0pO1xuICAgIHZhciBqYWMgPSBnZXRKYWMoZ3JhcGgucG9zZV9ub2Rlc1tuX3Bvc2Vfbm9kZXMtMl0uYmVsaWVmLmdldE1lYW4oKSwgZ3JhcGgucG9zZV9ub2Rlc1tuX3Bvc2Vfbm9kZXMtMV0uYmVsaWVmLmdldE1lYW4oKSk7XG4gICAgb2RvbWV0cnlfZmFjdG9yLmphY3MucHVzaChqYWMpO1xuXG4gICAgdmFyIGQgPSBNYXRoLnNxcnQoTWF0aC5wb3cocG9zZXNfZ3Rbbl9wb3NlX25vZGVzLTFdLngtcG9zZXNfZ3Rbbl9wb3NlX25vZGVzLTJdLngsIDIpICsgTWF0aC5wb3cocG9zZXNfZ3Rbbl9wb3NlX25vZGVzLTFdLnktcG9zZXNfZ3Rbbl9wb3NlX25vZGVzLTJdLnksIDIpKTtcbiAgICBjb25zdCBtZWFzdXJlbWVudCA9IG5ldyBtLk1hdHJpeChbWyhwb3Nlc19ndFtuX3Bvc2Vfbm9kZXMtMV0ueSAtIHBvc2VzX2d0W25fcG9zZV9ub2Rlcy0yXS55KSAvIGQgKyBvZG9tZXRyeV9hbmdsZV9ub2lzZSgpXSwgW2QgKyBvZG9tZXRyeV9kaXN0X25vaXNlKCldXSk7XG4gICAgb2RvbWV0cnlfZmFjdG9yLm1lYXMucHVzaChtZWFzdXJlbWVudCk7XG5cbiAgICB2YXIgbGFtYmRhID0gbmV3IG0uTWF0cml4KFtbMSAvIE1hdGgucG93KG9kb21ldHJ5X2FuZ2xlX3N0ZCwgMiksIDBdLCBbMCwgMSAvIE1hdGgucG93KG9kb21ldHJ5X2Rpc3RhbmNlX3N0ZCwgMildXSk7XG4gICAgb2RvbWV0cnlfZmFjdG9yLmxhbWJkYXMucHVzaChsYW1iZGEpO1xuXG4gICAgb2RvbWV0cnlfZmFjdG9yLmFkal92YXJfZG9mcy5wdXNoKDIpO1xuICAgIG9kb21ldHJ5X2ZhY3Rvci5hZGpfdmFyX2RvZnMucHVzaCgyKTtcblxuICAgIG9kb21ldHJ5X2ZhY3Rvci5hZGpfYmVsaWVmcy5wdXNoKGdyYXBoLnBvc2Vfbm9kZXNbbl9wb3NlX25vZGVzLTJdLmJlbGllZik7XG4gICAgb2RvbWV0cnlfZmFjdG9yLmFkal9iZWxpZWZzLnB1c2goZ3JhcGgucG9zZV9ub2Rlc1tuX3Bvc2Vfbm9kZXMtMV0uYmVsaWVmKTtcblxuICAgIG9kb21ldHJ5X2ZhY3Rvci5tZXNzYWdlcy5wdXNoKG5ldyBnYXVzcy5HYXVzc2lhbihbWzBdLFswXV0sIFtbMCwwXSxbMCwwXV0pKTtcbiAgICBvZG9tZXRyeV9mYWN0b3IubWVzc2FnZXMucHVzaChuZXcgZ2F1c3MuR2F1c3NpYW4oW1swXSxbMF1dLCBbWzAsMF0sWzAsMF1dKSk7XG4gICAgZ3JhcGguZmFjdG9ycy5wdXNoKG9kb21ldHJ5X2ZhY3Rvcik7XG5cbiAgICBncmFwaC5wb3NlX25vZGVzW25fcG9zZV9ub2Rlcy0yXS5hZGpfZmFjdG9ycy5wdXNoKG9kb21ldHJ5X2ZhY3Rvcik7XG4gICAgZ3JhcGgucG9zZV9ub2Rlc1tuX3Bvc2Vfbm9kZXMtMV0uYWRqX2ZhY3RvcnMucHVzaChvZG9tZXRyeV9mYWN0b3IpO1xuICB9XG5cbiAgZnVuY3Rpb24gYWRkTWVhc3VyZW1lbnRGYWN0b3JzKCkge1xuICAgIC8vIEFkZCBtZWFzdXJlbWVudCBmYWN0b3JzIGNvbm5lY3RpbmcgdG8gb2JzZXJ2ZWQgbGFuZG1hcmtzXG4gICAgbGV0IG5fcG9zZV9ub2RlcyA9IGdyYXBoLnBvc2Vfbm9kZXMubGVuZ3RoO1xuXG4gICAgZm9yICh2YXIgaj0wOyBqPG5fbGFuZG1hcmtzOyBqKyspIHtcbiAgICAgIHZhciBkaXN0ID0gTWF0aC5zcXJ0KE1hdGgucG93KGxhbmRtYXJrc19ndFtqXS54IC0gcG9zZXNfZ3Rbbl9wb3NlX25vZGVzIC0xXS54LCAyKSArIE1hdGgucG93KGxhbmRtYXJrc19ndFtqXS55IC0gcG9zZXNfZ3Rbbl9wb3NlX25vZGVzIC0xXS55LCAyKSk7XG4gICAgICBpZiAoZGlzdCA8IG1lYXNfcmFuZ2UpIHtcbiAgICAgICAgLy8gQ3JlYXRlIG5ldyBsYW5kbWFyayBub2RlIGlmIGZpcnN0IG9ic2VydmF0aW9uIG9mIHRoZSBsYW5kbWFya1xuICAgICAgICBpZiAoIShsbWtfb2JzZXJ2ZWRfeWV0W2pdKSkge1xuICAgICAgICAgIGFkZExhbmRtYXJrTm9kZShqKTtcbiAgICAgICAgICBsbWtfb2JzZXJ2ZWRfeWV0W2pdID0gMTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IG5ld19mYWN0b3IgPSBuZXcgZ2JwLkxpbmVhckZhY3Rvcig0LCBbZ3JhcGgucG9zZV9ub2Rlc1tuX3Bvc2Vfbm9kZXMtMV0udmFyX2lkLCBqXSk7XG4gICAgICAgIHZhciBqYWMgPSBnZXRKYWMoZ3JhcGgucG9zZV9ub2Rlc1tuX3Bvc2Vfbm9kZXMtMV0uYmVsaWVmLmdldE1lYW4oKSwgZ3JhcGgubG1rX25vZGVzW2xta19ncmFwaF9peFtqXV0uYmVsaWVmLmdldE1lYW4oKSk7XG4gICAgICAgIG5ld19mYWN0b3IuamFjcy5wdXNoKGphYyk7XG5cbiAgICAgICAgdmFyIGQgPSBNYXRoLnNxcnQoTWF0aC5wb3cobGFuZG1hcmtzX2d0W2pdLngtcG9zZXNfZ3Rbbl9wb3NlX25vZGVzLTFdLngsIDIpICsgTWF0aC5wb3cobGFuZG1hcmtzX2d0W2pdLnktcG9zZXNfZ3Rbbl9wb3NlX25vZGVzLTFdLnksIDIpKTtcbiAgICAgICAgY29uc3QgbWVhc3VyZW1lbnQgPSBuZXcgbS5NYXRyaXgoW1sobGFuZG1hcmtzX2d0W2pdLnkgLSBwb3Nlc19ndFtuX3Bvc2Vfbm9kZXMtMV0ueSkgLyBkICArIG1lYXNfYW5nbGVfbm9pc2UoKV0sIFtkICsgbWVhc19kaXN0X25vaXNlKCldXSk7XG4gICAgICAgIG5ld19mYWN0b3IubWVhcy5wdXNoKG1lYXN1cmVtZW50KTtcblxuICAgICAgICB2YXIgbGFtYmRhID0gbmV3IG0uTWF0cml4KFtbMSAvIE1hdGgucG93KG1lYXNfYW5nbGVfc3RkLCAyKSwgMF0sIFswLCAxIC8gTWF0aC5wb3cobWVhc19kaXN0YW5jZV9zdGQsIDIpXV0pO1xuICAgICAgICBuZXdfZmFjdG9yLmxhbWJkYXMucHVzaChsYW1iZGEpO1xuXG4gICAgICAgIG5ld19mYWN0b3IuYWRqX3Zhcl9kb2ZzLnB1c2goMik7XG4gICAgICAgIG5ld19mYWN0b3IuYWRqX3Zhcl9kb2ZzLnB1c2goMik7XG5cbiAgICAgICAgbmV3X2ZhY3Rvci5hZGpfYmVsaWVmcy5wdXNoKGdyYXBoLnBvc2Vfbm9kZXNbbl9wb3NlX25vZGVzLTFdLmJlbGllZik7XG4gICAgICAgIG5ld19mYWN0b3IuYWRqX2JlbGllZnMucHVzaChncmFwaC5sbWtfbm9kZXNbbG1rX2dyYXBoX2l4W2pdXS5iZWxpZWYpO1xuXG4gICAgICAgIG5ld19mYWN0b3IubWVzc2FnZXMucHVzaChuZXcgZ2F1c3MuR2F1c3NpYW4oW1swXSxbMF1dLCBbWzAsMF0sWzAsMF1dKSk7XG4gICAgICAgIG5ld19mYWN0b3IubWVzc2FnZXMucHVzaChuZXcgZ2F1c3MuR2F1c3NpYW4oW1swXSxbMF1dLCBbWzAsMF0sWzAsMF1dKSk7XG4gICAgICAgIGdyYXBoLmZhY3RvcnMucHVzaChuZXdfZmFjdG9yKTtcblxuICAgICAgICBncmFwaC5wb3NlX25vZGVzW25fcG9zZV9ub2Rlcy0xXS5hZGpfZmFjdG9ycy5wdXNoKG5ld19mYWN0b3IpO1xuICAgICAgICBncmFwaC5sbWtfbm9kZXNbbG1rX2dyYXBoX2l4W2pdXS5hZGpfZmFjdG9ycy5wdXNoKG5ld19mYWN0b3IpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNoZWNrQWRkVmFyTm9kZSgpIHtcbiAgICB2YXIgZGlzdCA9IE1hdGguc3FydChNYXRoLnBvdyhyb2JvdF9sb2NbMF0gLSBsYXN0X2tleV9wb3NlWzBdLCAyKSArIFxuICAgICAgICAgICAgICAgICAgICAgICAgTWF0aC5wb3cocm9ib3RfbG9jWzFdIC0gbGFzdF9rZXlfcG9zZVsxXSwgMikpO1xuICAgIGlmIChkaXN0ID4gbmV3X3Bvc2VfZGlzdCkge1xuICAgICAgY29uc3QgbmV3X3Zhcl9ub2RlID0gbmV3IGdicC5WYXJpYWJsZU5vZGUoMiwgbl9sYW5kbWFya3MgKyBncmFwaC5wb3NlX25vZGVzLmxlbmd0aCk7XG4gICAgICB2YXIgbGFtYmRhID0gMSAvIE1hdGgucG93KHJvYm90X3ByaW9yX3N0ZCwgMik7XG4gICAgICBuZXdfdmFyX25vZGUucHJpb3IubGFtID0gbmV3IG0uTWF0cml4KFtbbGFtYmRhLCAwXSwgWzAsIGxhbWJkYV1dKTtcbiAgICAgIG5ld192YXJfbm9kZS5wcmlvci5ldGEgPSBuZXdfdmFyX25vZGUucHJpb3IubGFtLm1tdWwobmV3IG0uTWF0cml4KFtbcm9ib3RfbG9jWzBdXSwgW3JvYm90X2xvY1sxXV1dKSlcbiAgICAgIG5ld192YXJfbm9kZS51cGRhdGVfYmVsaWVmKCk7XG4gICAgICBncmFwaC5wb3NlX25vZGVzLnB1c2gobmV3X3Zhcl9ub2RlKTtcbiAgICAgIHBvc2VzX2d0LnB1c2goe3g6IHJvYm90X2xvY1swXSwgeTogcm9ib3RfbG9jWzFdfSk7XG4gICAgICBsYXN0X2tleV9wb3NlWzBdID0gcm9ib3RfbG9jWzBdO1xuICAgICAgbGFzdF9rZXlfcG9zZVsxXSA9IHJvYm90X2xvY1sxXTtcblxuICAgICAgYWRkT2RvbWV0cnlGYWN0b3IoKTtcbiAgICAgIGFkZE1lYXN1cmVtZW50RmFjdG9ycygpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc2V0KCkge1xuICAgIHN5bmNfb24gPSBmYWxzZTtcbiAgICBuX2l0ZXJzID0gMDtcbiAgICBwb3Nlc19ndCA9IFtdO1xuICAgIGxta19vYnNlcnZlZF95ZXQgPSBbXTtcbiAgICBsbWtfZ3JhcGhfaXggPSBbXTtcblxuICAgIC8vIENyZWF0ZSBpbml0aWFsIGZhY3RvciBncmFwaFxuICAgIGdyYXBoID0gbmV3IGdicC5GYWN0b3JHcmFwaCgpO1xuICAgIGxldCBmaXJzdF92YXJfbm9kZSA9IG5ldyBnYnAuVmFyaWFibGVOb2RlKDIsIG5fbGFuZG1hcmtzKTtcbiAgICBmaXJzdF92YXJfbm9kZS5wcmlvci5ldGEgPSBuZXcgbS5NYXRyaXgoW1tyb2JvdF9sb2NbMF1dLCBbcm9ib3RfbG9jWzFdXV0pO1xuICAgIGZpcnN0X3Zhcl9ub2RlLnByaW9yLmxhbSA9IG5ldyBtLk1hdHJpeChbWzEsIDBdLCBbMCwgMV1dKTsgIC8vIHN0cm9uZyBwcmlvciBmb3IgZmlyc3QgbWVhc3VyZW1lbnRcbiAgICBmaXJzdF92YXJfbm9kZS51cGRhdGVfYmVsaWVmKCk7XG4gICAgZ3JhcGgucG9zZV9ub2Rlcy5wdXNoKGZpcnN0X3Zhcl9ub2RlKTtcbiAgICBwb3Nlc19ndC5wdXNoKHt4OiByb2JvdF9sb2NbMF0sIHk6IHJvYm90X2xvY1sxXX0pXG5cbiAgICBhZGRNZWFzdXJlbWVudEZhY3RvcnMoKTsgIC8vIGFkZCBpbml0aWFsIG1lYXN1cmVtZW50c1xuICAgIHRoZW4gPSBEYXRlLm5vdygpO1xuICAgIHN5bmNfb24gPSB0cnVlO1xuICB9XG5cbiAgLy8gVXNlciBpbnRlcmFjdGlvbiBmdW5jdGlvbnNcblxuICBmdW5jdGlvbiB0b2dnbGVHQlAoKSB7XG4gICAgaWYgKHN5bmNfb24pIHtcbiAgICAgIHN5bmNfb24gPSBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3luY19vbiA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdG9nZ2xlTUFQKCkge1xuICAgIGlmIChkaXNwbGF5X21hcCA9PSBmYWxzZSkge1xuICAgICAgZGlzcGxheV9tYXAgPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBkaXNwbGF5X21hcCA9IGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZV9vZG9tZXRyeV9tb2RlbF9zdGQoKSB7XG4gICAgdmFyIGxhbWJkYSA9IDEgLyBNYXRoLnBvdyhvZG9tZXRyeV9zdGQsIDIpO1xuICAgIGZvciAodmFyIGM9MDsgYzxncmFwaC5mYWN0b3JzLmxlbmd0aDsgYysrKSB7XG4gICAgICBpZiAoZ3JhcGguZmFjdG9yc1tjXS5hZGpfdmFyX2lkc1sxXSA+PSBuX2xhbmRtYXJrcykge1xuICAgICAgICBncmFwaC5mYWN0b3JzW2NdLmxhbWJkYXNbMF0gPSBsYW1iZGE7XG4gICAgICAgIGdyYXBoLmZhY3RvcnNbY10uY29tcHV0ZV9mYWN0b3IoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBPbiBjbGlja1xuICBmdW5jdGlvbiBhZGRMYW5kbWFyayhlKSB7XG4gICAgdmFyIHJlbGF0aXZlWCA9IGUuY2xpZW50WCAtIGNhbnZhcy5vZmZzZXRMZWZ0O1xuICAgIHZhciByZWxhdGl2ZVkgPSBlLmNsaWVudFkgLSBjYW52YXMub2Zmc2V0VG9wO1xuICAgIGlmKHJlbGF0aXZlWCA+IDAgJiYgcmVsYXRpdmVYIDwgY2FudmFzLndpZHRoICYmIHJlbGF0aXZlWSA+IDAgJiYgcmVsYXRpdmVZIDwgY2FudmFzLmhlaWdodCkge1xuICAgICAgbGFuZG1hcmtzLnB1c2goe3g6IHJlbGF0aXZlWCwgeTogcmVsYXRpdmVZfSk7XG4gICAgfVxuICB9XG5cbiAgLy8gT24ga2V5IHByZXNzXG4gIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIGNoZWNrS2V5KTtcbiAgZnVuY3Rpb24gY2hlY2tLZXkoZSkge1xuICAgIGUgPSBlIHx8IHdpbmRvdy5ldmVudDtcbiAgICBpZiAoZS5rZXlDb2RlID09ICc4NycpIHtcbiAgICAgIGlmIChyb2JvdF9sb2NbMV0gPiB2YXJfbm9kZV9yYWRpdXMgKyBzdGVwKSB7XG4gICAgICAgIHJvYm90X2xvY1sxXSAtPSBzdGVwO1xuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmIChlLmtleUNvZGUgPT0gJzgzJykge1xuICAgICAgaWYgKHJvYm90X2xvY1sxXSA8IGNhbnZhcy5oZWlnaHQgLSB2YXJfbm9kZV9yYWRpdXMgLSBzdGVwKSB7XG4gICAgICAgIHJvYm90X2xvY1sxXSArPSBzdGVwO1xuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmIChlLmtleUNvZGUgPT0gJzY1Jykge1xuICAgICAgaWYgKHJvYm90X2xvY1swXSA+IHZhcl9ub2RlX3JhZGl1cyArIHN0ZXApIHtcbiAgICAgICAgcm9ib3RfbG9jWzBdIC09IHN0ZXA7XG4gICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKGUua2V5Q29kZSA9PSAnNjgnKSB7XG4gICAgICBpZiAocm9ib3RfbG9jWzBdIDwgY2FudmFzLndpZHRoIC0gdmFyX25vZGVfcmFkaXVzIC0gc3RlcCkge1xuICAgICAgICByb2JvdF9sb2NbMF0gKz0gc3RlcDtcbiAgICAgIH1cbiAgICB9XG4gICAgY2hlY2tBZGRWYXJOb2RlKCk7XG4gIH1cblxuICAgIGZ1bmN0aW9uIHRvZ2dsZUZ1bGxzY3JlZW4oKSB7XG4gICAgICBpZiAoIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicm9ib3Qtcm9vbS1jb250YWluZXJcIikuY2xhc3NMaXN0LmNvbnRhaW5zKCdsLXBhZ2Utb3V0c2V0JykgKSB7XG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicm9ib3Qtcm9vbS1jb250YWluZXJcIikuY2xhc3NMaXN0LnJlbW92ZShcImwtcGFnZS1vdXRzZXRcIik7XG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicm9ib3Qtcm9vbS1jb250YWluZXJcIikuY2xhc3NMaXN0LmFkZChcImwtc2NyZWVuLWluc2V0XCIpO1xuICAgICAgICBmdWxsc2NyZWVuID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicm9ib3Qtcm9vbS1jb250YWluZXJcIikuY2xhc3NMaXN0LnJlbW92ZShcImwtc2NyZWVuLWluc2V0XCIpO1xuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInJvYm90LXJvb20tY29udGFpbmVyXCIpLmNsYXNzTGlzdC5hZGQoXCJsLXBhZ2Utb3V0c2V0XCIpO1xuICAgICAgICBmdWxsc2NyZWVuID0gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuXG5cbjwvc2NyaXB0PlxuXG48ZGl2IGNsYXNzPVwiZGVtby1jb250YWluZXJcIj5cblxuICA8ZGl2IGlkPVwiZ2JwLWNvbnRhaW5lclwiPlxuICAgIDxjYW52YXMgYmluZDp0aGlzPXtjYW52YXN9IHdpZHRoPXsxNDAwfSBoZWlnaHQ9ezgwMH0+PC9jYW52YXM+XG4gICAgICA8ZGl2IGNsYXNzPVwidG9wLWxlZnRcIj5cbiAgICAgICAgeyNpZiBmdWxsc2NyZWVufVxuICAgICAgICAgIDxpIGNsYXNzPVwiZmEgZmEtY29tcHJlc3MtYXJyb3dzLWFsdCB0b29sdGlwLWZzXCIgb246Y2xpY2s9e3RvZ2dsZUZ1bGxzY3JlZW59IHN0eWxlPVwid2lkdGg6IDEwJVwiPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJ0b29sdGlwdGV4dFwiPlRvZ2dsZSBmdWxsc2NyZWVuPC9zcGFuPlxuICAgICAgICAgIDwvaT5cbiAgICAgICAgezplbHNlfVxuICAgICAgICAgIDxpIGNsYXNzPVwiZmFzIGZhLWV4cGFuZC1hcnJvd3MtYWx0IHRvb2x0aXAtZnNcIiBvbjpjbGljaz17dG9nZ2xlRnVsbHNjcmVlbn0gc3R5bGU9XCJ3aWR0aDoyMHB4XCI+XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cInRvb2x0aXB0ZXh0XCI+VG9nZ2xlIGZ1bGxzY3JlZW48L3NwYW4+XG4gICAgICAgICAgPC9pPlxuICAgICAgICAgIHsvaWZ9XG4gICAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwiYnV0dG9ucy1wYW5lbFwiPlxuICAgICAgeyNpZiBzeW5jX29ufVxuICAgICAgICA8aSBjbGFzcz1cImZhIGZhLXBhdXNlIHRvb2x0aXBcIiBvbjpjbGljaz17dG9nZ2xlR0JQfSBzdHlsZT1cIndpZHRoOjI1cHhcIj5cbiAgICAgICAgICA8c3BhbiBjbGFzcz1cInRvb2x0aXB0ZXh0XCI+UGF1c2Ugc3luY2hyb25vdXMgR0JQPC9zcGFuPlxuICAgICAgICA8L2k+XG4gICAgICB7OmVsc2V9XG4gICAgICAgIDxpIGNsYXNzPVwiZmEgZmEtcGxheSB0b29sdGlwXCIgIG9uOmNsaWNrPXt0b2dnbGVHQlB9IHN0eWxlPVwid2lkdGg6MjVweFwiPlxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwidG9vbHRpcHRleHRcIj5QbGF5IHN5bmNocm9ub3VzIEdCUDwvc3Bhbj5cbiAgICAgICAgPC9pPlxuICAgICAgey9pZn0gXG5cbiAgICAgIDxpIGNsYXNzPVwiZmEgZmEtcmVwZWF0IHRvb2x0aXBcIiBvbjpjbGljaz17cmVzZXR9PlxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwidG9vbHRpcHRleHRcIj5SZXNldDwvc3Bhbj5cbiAgICAgIDwvaT5cblxuICAgICAgeyNpZiBkaXNwbGF5X21hcH1cbiAgICAgICAgPGJ1dHRvbiBjbGFzcz1cInRvb2x0aXBcIiBvbjpjbGljaz17dG9nZ2xlTUFQfT4gXG4gICAgICAgIDxiPk1BUDwvYj5cbiAgICAgICAgICA8c3BhbiBjbGFzcz1cInRvb2x0aXB0ZXh0XCI+SGlkZSBNQVA8L3NwYW4+XG4gICAgICAgIDwvYnV0dG9uPlxuICAgICAgezplbHNlfVxuICAgICAgICA8YnV0dG9uIGNsYXNzPVwidG9vbHRpcFwiIG9uOmNsaWNrPXt0b2dnbGVNQVB9ICBzdHlsZT1cImNvbG9yOiByZ2IoMzksIDM2LCAzNiwgMC42KVwiPiBcbiAgICAgICAgPGI+TUFQPC9iPlxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwidG9vbHRpcHRleHRcIj5EaXNwbGF5IE1BUDwvc3Bhbj5cbiAgICAgICAgPC9idXR0b24+XG4gICAgICB7L2lmfSBcblxuICAgICAgPGRpdiBpZD1cImRlbW8tdGlwXCI+XG4gICAgICAgIDxpIGNsYXNzPVwiZmEgZmEta2V5Ym9hcmQtb1wiPjwvaT5cbiAgICAgICAgPGRpdiBpZD1cImhpbnRcIj5cbiAgICAgICAgICBVc2UgV0FTRCB0byBtb3ZlIHRoZSByb2JvdC4gICAgICAgICAgICAgICAgXG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG5cbiAgPGRpdiBpZD1cInNldHRpbmdzLXBhbmVsXCI+XG4gICAgPGI+SXRlcmF0aW9uIHtuX2l0ZXJzfTwvYj4gJm5ic3A7IChpdGVycyAvIHM6IHtpdGVyc19wZXJfc2VjfSlcbiAgICA8aW5wdXQgdHlwZT1cInJhbmdlXCIgbWluPVwiMVwiIG1heD1cIjUwXCIgYmluZDp2YWx1ZT17aXRlcnNfcGVyX3NlY30+PGJyPlxuXG4gICAgPGJyPjxiPlN0YW5kYXJkIGRldmlhdGlvbiBvZiBub2lzZSBpbiBHYXVzc2lhbiBtZWFzdXJlbWVudCBtb2RlbHM6PGJyPjwvYj5cblxuICAgIDxiPk9kb21ldHJ5PC9iPjxicj5cbiAgICBEaXN0YW5jZSBmYWN0b3JzLCAmc2lnbWEgPSA8Yj57b2RvbWV0cnlfZGlzdGFuY2Vfc3RkfTwvYj5cbiAgICA8aW5wdXQgdHlwZT1cInJhbmdlXCIgbWluPVwiMTBcIiBtYXg9XCIxNTBcIiBiaW5kOnZhbHVlPXtvZG9tZXRyeV9kaXN0YW5jZV9zdGR9Pjxicj4gXG4gICAgQW5nbGUgZmFjdG9ycywgJnNpZ21hID0gPGI+e29kb21ldHJ5X2FuZ2xlX3N0ZH08L2I+XG4gICAgPGlucHV0IHR5cGU9XCJyYW5nZVwiIG1pbj1cIjAuMVwiIG1heD1cIjFcIiBzdGVwPVwiMC4wMVwiIGJpbmQ6dmFsdWU9e29kb21ldHJ5X2FuZ2xlX3N0ZH0+PGJyPlxuXG4gICAgPGI+TGFuZG1hcmsgTWVhc3VyZW1lbnRzPC9iPjxicj5cbiAgICBEaXN0YW5jZSBmYWN0b3JzLCAmc2lnbWEgPSA8Yj57bWVhc19kaXN0YW5jZV9zdGR9PC9iPlxuICAgIDxpbnB1dCB0eXBlPVwicmFuZ2VcIiBtaW49XCIxMFwiIG1heD1cIjE1MFwiIGJpbmQ6dmFsdWU9e21lYXNfZGlzdGFuY2Vfc3RkfT48YnI+IFxuICAgIEFuZ2xlIGZhY3RvcnMsICZzaWdtYSA9IDxiPnttZWFzX2FuZ2xlX3N0ZH08L2I+XG4gICAgPGlucHV0IHR5cGU9XCJyYW5nZVwiIG1pbj1cIjAuMVwiIG1heD1cIjFcIiBzdGVwPVwiMC4wMVwiIGJpbmQ6dmFsdWU9e21lYXNfYW5nbGVfc3RkfT48YnI+XG5cblxuICA8L2Rpdj5cbjwvZGl2PlxuXG4iLCIvLyBIb3QgcmVsb2FkaW5nXG5pbXBvcnQgKiBhcyBfdW51c2VkIGZyb20gXCJyYXctbG9hZGVyIS4vaW5kZXguZWpzXCI7XG4vLyBUT0RPOiBkaXNhYmxlIGJlZm9yZSBwdWJsaXNoaW5nXG5cblxuaW1wb3J0IEdhdXNzUHJvZHVjdCBmcm9tIFwiLi9kaWFncmFtcy9nYXVzc19wcm9kdWN0LnN2ZWx0ZVwiO1xuY29uc3QgR2F1c3NQcm9kQ29tcG9uZW50ID0gbmV3IEdhdXNzUHJvZHVjdCh7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgdGFyZ2V0OiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjZ2F1c3Nwcm9kJylcbn0pO1xuXG5pbXBvcnQgR2JwMWQgZnJvbSBcIi4vZGlhZ3JhbXMvZ2JwMWQuc3ZlbHRlXCI7XG5jb25zdCBHYnAxZENvbXBvbmVudCA9IG5ldyBHYnAxZCh7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgdGFyZ2V0OiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjZ2JwMWQnKVxufSk7XG5cbi8vIGltcG9ydCBSb2JvdFNpbSBmcm9tIFwiLi9kaWFncmFtcy9nYnAyZF9saW5lYXIuc3ZlbHRlXCI7XG4vLyBjb25zdCBSb2JvdFNpbUNvbXBvbmVudCA9IG5ldyBSb2JvdFNpbSh7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbi8vICAgdGFyZ2V0OiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjUm9ib3RTaW0nKVxuLy8gfSk7XG5cbmltcG9ydCBHcmFwaCBmcm9tIFwiLi9kaWFncmFtcy9ncmFwaC5zdmVsdGVcIjtcbmNvbnN0IEdyYXBoQ29tcG9uZW50ID0gbmV3IEdyYXBoKHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICB0YXJnZXQ6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNHcmFwaCcpXG59KTtcblxuaW1wb3J0IFJvYm90Tm9ubGluZWFyU2ltIGZyb20gXCIuL2RpYWdyYW1zL2dicDJkX25vbmxpbmVhci5zdmVsdGVcIjtcbmNvbnN0IFJvYm90Tm9ubGluZWFyU2ltQ29tcG9uZW50ID0gbmV3IFJvYm90Tm9ubGluZWFyU2ltKHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICB0YXJnZXQ6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNSb2JvdE5vbmxpbmVhclNpbScpXG59KTtcblxuaW1wb3J0IFJvYm90Um9vbVNpbSBmcm9tIFwiLi9kaWFncmFtcy9nYnAyZF9yb29tLnN2ZWx0ZVwiO1xuY29uc3QgUm9ib3RSb29tU2ltQ29tcG9uZW50ID0gbmV3IFJvYm90Um9vbVNpbSh7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgdGFyZ2V0OiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjUm9ib3RSb29tU2ltJylcbn0pO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==